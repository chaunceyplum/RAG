{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/snowpark/api/snowflake.snowpark.functions.udtf",
    "title": "snowflake.snowpark.functions.udtf | Snowflake Documentation",
    "paragraphs": [
        "Registers a Python class as a Snowflake Python UDTF and returns the UDTF.",
        "It can be used as either a function call or a decorator. In most cases you work with a single session.\nThis function uses that session to register the UDTF. If you have multiple sessions, you need to\nexplicitly specify the session parameter of this function. If you have a function and would\nlike to register it to multiple databases, use session.udtf.register instead. See examples\nin UDTFRegistration.",
        "handler \u2013 A Python class used for creating the UDTF.",
        "output_schema \u2013 A list of column names, or a StructType instance that represents the table function\u2019s columns, or a PandasDataFrameType instance for vectorized UDTF.\nIf a list of column names is provided, the process method of the handler class must have return type hints to indicate the output schema data types.",
        "input_types \u2013 A list of DataType\nrepresenting the input data types of the UDTF. Optional if\ntype hints are provided.",
        "name \u2013 A string or list of strings that specify the name or fully-qualified\nobject identifier (database name, schema name, and function name) for\nthe UDTF in Snowflake, which allows you to call this UDTF in a SQL\ncommand or via call_udtf(). If it is not provided, a name will\nbe automatically generated for the UDTF. A name must be specified when\nis_permanent is True.",
        "is_permanent \u2013 Whether to create a permanent UDTF. The default is False.\nIf it is True, a valid stage_location must be provided.",
        "stage_location \u2013 The stage location where the Python file for the UDTF\nand its dependencies should be uploaded. The stage location must be specified\nwhen is_permanent is True, and it will be ignored when\nis_permanent is False. It can be any stage other than temporary\nstages and external stages.",
        "imports \u2013 A list of imports that only apply to this UDTF. You can use a string to\nrepresent a file path (similar to the path argument in\nadd_import()) in this list, or a tuple of two\nstrings to represent a file path and an import path (similar to the import_path\nargument in add_import()). These UDTF-level imports\nwill override the session-level imports added by\nadd_import().",
        "packages \u2013 A list of packages that only apply to this UDTF. These UDTF-level packages\nwill override the session-level packages added by\nadd_packages() and\nadd_requirements(). To use Python packages that are not available\nin Snowflake, refer to custom_package_usage_config().",
        "replace \u2013 Whether to replace a UDTF that already was registered. The default is False.\nIf it is False, attempting to register a UDTF with a name that already exists\nresults in a SnowparkSQLException exception being thrown. If it is True,\nan existing UDTF with the same name is overwritten.",
        "if_not_exists \u2013 Whether to skip creation of a UDTF when one with the same signature already exists.\nThe default is False. if_not_exists and replace are mutually exclusive\nand a ValueError is raised when both are set. If it is True and a UDTF with\nthe same signature exists, the UDTF creation is skipped.",
        "session \u2013 Use this session to register the UDTF. If it\u2019s not specified, the session that you created before calling this function will be used.\nYou need to specify this parameter if you have created multiple sessions before calling this method.",
        "parallel \u2013 The number of threads to use for uploading UDTF files with the\nPUT\ncommand. The default value is 4 and supported values are from 1 to 99.\nIncreasing the number of threads can improve performance when uploading\nlarge UDTF files.",
        "statement_params \u2013 Dictionary of statement level parameters to be set while executing this action.",
        "strict \u2013 Whether the created UDTF is strict. A strict UDTF will not invoke the UDTF if any input is\nnull. Instead, a null value will always be returned for that row. Note that the UDTF might\nstill return null for non-null inputs.",
        "secure \u2013 Whether the created UDTF is secure. For more information about secure functions,\nsee Secure UDFs.",
        "external_access_integrations \u2013 The names of one or more external access integrations. Each\nintegration you specify allows access to the external network locations and secrets\nthe integration specifies.",
        "secrets \u2013 The key-value pairs of string types of secrets used to authenticate the external network location.\nThe secrets can be accessed from handler code. The secrets specified as values must\nalso be specified in the external access integration and the keys are strings used to\nretrieve the secrets using secret API.",
        "immutable \u2013 Whether the UDTF result is deterministic or not for the same input.",
        "comment \u2013 Adds a comment for the created object. See\nCOMMENT",
        "A UDTF function that can be called with Column expressions.",
        "Note",
        "1. When type hints are provided and are complete for a function,\nreturn_type and input_types are optional and will be ignored.\nSee details of supported data types for UDTFs in\nUDTFRegistration.",
        "You can use use Variant to\nannotate a variant, and use Geography\nor Geometry to annotate geospatial\ntypes when defining a UDTF.",
        "typing.Union is not a valid type annotation for UDTFs,\nbut typing.Optional can be used to indicate the optional type.",
        "Type hints are not supported on functions decorated with decorators.",
        "2. A temporary UDTF (when is_permanent is False) is scoped to this session\nand all UDTF related files will be uploaded to a temporary session stage\n(session.get_session_stage()).\nFor a permanent UDTF, these files will be uploaded to the stage that you specify.",
        "3. By default, UDTF registration fails if a function with the same name is already\nregistered. Invoking udtf() with replace set to True will overwrite the\npreviously registered function.",
        "See also",
        "UDTFRegistration",
        "Example:",
        "Example:",
        "Was this page helpful?"
    ]
}