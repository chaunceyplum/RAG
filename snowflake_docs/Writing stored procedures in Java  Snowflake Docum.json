{
    "url": "https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-java",
    "title": "Writing stored procedures in Java | Snowflake Documentation",
    "paragraphs": [
        "With this feature, you can write a stored procedure in Java. You can use the Snowpark library within your stored\nprocedure to perform queries, updates, and other work on tables in Snowflake.",
        "This topic explains how to write a stored procedure\u2019s handler, which contains its logic. Once you have the logic, you can create and call\nthe procedure using SQL. For more information, see Creating a stored procedure and\nCalling a stored procedure.",
        "With Snowpark Stored Procedures, you can build and run your data pipeline within Snowflake, using a Snowflake warehouse as the\ncompute framework. For the code for your data pipeline, you use the Snowpark API for Java to write stored procedures. To schedule\nthe execution of these stored procedures, you use tasks.",
        "You can capture log and trace data as your handler code executes. For more information, refer to\nLogging, tracing, and metrics.",
        "Note",
        "To both create and call an anonymous procedure, use CALL (with anonymous procedure). Creating and calling an anonymous procedure does\nnot require a role with CREATE PROCEDURE schema privileges.",
        "You must use version 1.3.0 or a more recent version of the Snowpark library.",
        "If you are writing a stored procedure, you must compile your classes to run in one of the following versions of Java:",
        "11.x",
        "17.x",
        "Set up your development environment to use the Snowpark library. See Setting Up Your Development Environment for Snowpark Java.",
        "You can keep handler source code in-line with the SQL that creates the procedure or keep handler compiled result in a separate location\nand reference it from the SQL. For more information, see Keeping handler code in-line or on a stage.",
        "For more on building handler source code for use with a procedure, see Packaging Handler Code.",
        "Once you\u2019ve written a procedure\u2019s handler, you can create and call it using SQL.",
        "Creating the stored procedure",
        "For information about creating a stored procedure with SQL, see Creating a stored procedure.",
        "For information about creating an anonymous procedure with SQL, see CALL (with anonymous procedure).",
        "Calling your stored procedure",
        "For information on calling a stored procedure from SQL, see Calling a stored procedure.",
        "Snowpark Stored Procedures have the following limitations:",
        "Concurrency is not supported. For example, from within your code, you cannot submit queries from multiple threads. Code that\nconcurrently issues multiple queries will produce an error.",
        "If you are executing your stored procedure from a task, you must specify a warehouse when creating the task. (You cannot use\nserverless compute resources to run the task.)",
        "Keep in mind the following limitations for using some Snowpark APIs in your stored procedure.",
        "When you use APIs that execute PUT and GET commands (including\nSession.sql(\"PUT ...\") and Session.sql(\"GET ...\")), you may write only to the /tmp directory in the memory-backed\nfile system provided for the query calling the procedure.",
        "Do not use APIs that create new sessions (for example,\nSession.builder().configs(...).create()).",
        "Using session.jdbcConnection (and the connection returned from it) is not supported because it may result in unsafe behavior.",
        "Creating named temp objects is not supported in an owner\u2019s rights stored procedure. An owner\u2019s rights stored procedure is a stored\nprocedure that runs with the privileges of the stored procedure owner.\nFor more information, refer to caller\u2019s rights or owner\u2019s rights.",
        "For your procedure\u2019s logic, you write handler code that executes when the procedure is called. This section describes the design of a\nhandler.",
        "You can include this code in-line with the SQL statement that creates the procedure, or copy the code to a stage and reference it there\nwhen you create the procedure. For more information, see Keeping handler code in-line or on a stage.",
        "Limit the amount of memory consumed.",
        "Snowflake places limits on a method in terms of the amount of memory needed. For more information on how to avoid consuming too much,\nsee Designing Handlers that Stay Within Snowflake-Imposed Constraints.",
        "Write thread-safe code.",
        "Make sure that your handler method or function is thread safe.",
        "Understand the security restrictions.",
        "Your handler code runs within a restricted engine, so be sure to follow the rules described in\nSecurity Practices for UDFs and Procedures.",
        "Decide on using owner\u2019s rights or caller\u2019s rights.",
        "When planning to write your stored procedure, consider whether you want the stored procedure to run with\ncaller\u2019s rights or owner\u2019s rights.",
        "Keep in mind the timeout behavior for stored procedures.",
        "Stored procedure execution will time out unless the timer is reset by the code\u2019s activity. In particular, the timeout timer is reset\nby the code\u2019s interactions with data, including file operations, queries, and iterating through a result set.",
        "The method that you define should be part of a class.",
        "When writing the class, note the following:",
        "The class and method must not be protected or private.",
        "If the method is not static and you want to define a constructor, define a zero-argument constructor for the class.\nSnowflake invokes this zero-argument constructor at initialization time to create an instance of your class.",
        "You can define different methods for different stored procedures in the same class.",
        "When writing the method for the stored procedure, note the following:",
        "Specify the Snowpark Session object as the first argument of your method.",
        "When you call your stored procedure, Snowflake automatically creates a Session object and passes it to your stored\nprocedure. (You cannot create the Session object yourself.)",
        "For the rest of the arguments and for the return value, use the Java types that\ncorrespond to Snowflake data types.",
        "Your method must return a value. For stored procedures in Java, a return value is required.",
        "Stored procedure execution will time out unless the timer is reset by the code\u2019s activity. In particular, the timeout timer is reset\nby the code\u2019s interactions with data, including file operations, queries, and iterating through a result set.",
        "When you run an asynchronous child job from within a procedure\u2019s handler, \u201cfire\nand forget\u201d is not supported.",
        "In other words, if the handler issues a child query that is still running when the parent procedure job completes, the child job is\ncanceled automatically.",
        "You can use the normal Java exception-handling techniques to catch errors within handler code.",
        "If an uncaught exception occurs inside the method, Snowflake raises an error that includes the stack trace for the exception. When\nlogging of unhandled exceptions is enabled, Snowflake logs data\nabout unhandled exceptions in an event table.",
        "If your handler code depends on code defined outside the handler itself (such as classes in a JAR file) or on resource files, you can make\nthose dependencies available to your code by uploading them to a stage. When\ncreating the procedure, you can reference these dependencies using the IMPORTS\nclause.",
        "For more information, see Making dependencies available to your code.",
        "To access data in Snowflake, use the Snowpark library APIs.",
        "When handling a call to your Java stored procedure, Snowflake creates a Snowpark Session object and passes the object to\nthe method for your stored procedure.",
        "As is the case with stored procedures in other languages, the context for the session (e.g. the privileges, current database and\nschema, etc.) is determined by whether the stored procedure runs with caller\u2019s rights or owner\u2019s rights. For details, see\nAccessing and setting the session state.",
        "You can use this Session object to call APIs in the\nSnowpark library.\nFor example, you can create a DataFrame for a table or execute an\nSQL statement.",
        "See the Snowpark Developer Guide for Java for more information.",
        "Note",
        "For information about limitations, including limitations on accessing data, see Limitations.",
        "The following is an example of a Java method that copies a specified number of rows from one table to another table. The method\ntakes the following arguments:",
        "A Snowpark Session object",
        "The name of the table to copy the rows from",
        "The name of the table to save the rows to",
        "The number of rows to copy",
        "The method in this example returns a string.",
        "You can read the contents of a file with handler code. The file must be on a Snowflake stage that\u2019s available to your handler.\nFor example, you might want to read a file to process unstructured data in the handler.",
        "To read the contents of staged files, your handler can call methods in either the SnowflakeFile class or the InputStream\nclass. You might do this if you need to access the file dynamically during compute. For more information, see\nReading a dynamically-specified file with SnowflakeFile or Reading a dynamically-specified file with InputStream in this topic.",
        "SnowflakeFile provides features not available with InputStream, as described in the following table.",
        "Class",
        "Input",
        "Notes",
        "SnowflakeFile",
        "URL formats:",
        "Scoped URL to reduce the risk of file injection attacks when the function\u2019s caller is not also its owner.",
        "File URL or string path for files that the procedure owner has access to.",
        "The file must be located in a named internal stage or an external stage.",
        "Easily access additional file attributes, such as file size.",
        "InputStream",
        "URL formats:",
        "Scoped URL to reduce the risk of file injection attacks when the function\u2019s caller is not also its owner.",
        "The file must be located in a named internal stage or an external stage.",
        "Code in the following example has a handler function execute that takes a String and returns a String\nwith the file\u2019s contents. At run time, Snowflake initializes the handler\u2019s fileName variable from the incoming file path in the\nprocedure\u2019s input variable. The handler code uses a SnowflakeFile instance to read the file.",
        "Code in the following CALL example creates a scoped file URL that points to the file. This is an encoded URL that permits temporary\naccess to a staged file without granting privileges to the stage itself.",
        "Note",
        "For an owner\u2019s rights stored procedure, the procedure\u2019s owner must have access to any files that are not scoped URLs. For caller\u2019s rights\nprocedures, the caller must have access to any files that are not scoped URLs. In either case, you can read the staged file by having the\nhandler code call the SnowflakeFile.newInstance method with a boolean value for a new requireScopedUrl parameter.",
        "The following example uses SnowflakeFile.newInstance while specifying that a scoped URL is not required.",
        "Code in the following example has a handler function execute that takes an InputStream and returns a String\nwith the file\u2019s contents. At run time, Snowflake initializes the handler\u2019s stream variable from the incoming file path in the\nprocedure\u2019s input argument. The handler code uses the InputStream to read the file.",
        "Code in the following CALL example creates a scoped file URL that points to the file. This is an encoded URL that permits temporary\naccess to a staged file without granting privileges to the stage itself.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "You can write a procedure that returns data in tabular form. To write a procedure that returns tabular data, do the following:",
        "Specify TABLE(...) as the procedure\u2019s return type in your CREATE PROCEDURE statement.",
        "As TABLE parameters, you can specify the returned data\u2019s column names and types if you know them.\nIf you don\u2019t know the returned columns when defining the procedure \u2013 such as when they\u2019re specified at run time \u2013 you can leave out the\nTABLE parameters. When you do, the procedure\u2019s return value columns will be converted from the columns in the dataframe returned by its\nhandler. Column data types will be converted to SQL according to the mapping specified in SQL-Java Data Type Mappings.",
        "Write the handler so that it returns the tabular result in a Snowpark DataFrame.",
        "For more information about dataframes, see Working with DataFrames in Snowpark Java.",
        "Note",
        "A procedure will generate an error at runtime if either of the following is true:",
        "It declares TABLE as its return type but its handler does not return a DataFrame.",
        "Its handler returns a DataFrame but the procedure doesn\u2019t declare TABLE as its return type.",
        "The examples in this section illustrate returning tabular values from a procedure that filters for rows where a column matches a string.",
        "Code in the following example creates a table of employees.",
        "Code in the following two examples create a stored procedure that takes the table name and role as arguments, returning the rows in the table\nwhose role column value matches the role specified as an argument.",
        "This example specifies column names and types in the RETURNS TABLE() statement.",
        "Note",
        "Currently, in the RETURNS TABLE(...) clause, you can\u2019t specify GEOGRAPHY as a column type. This\napplies whether you are creating a stored or anonymous procedure.",
        "If you attempt to specify GEOGRAPHY as a column type, calling the stored procedure results in the error:",
        "To work around this issue, you can omit the column arguments and types in RETURNS TABLE().",
        "Code in the following example declares a procedure that allows return value column names and types to be extrapolated from columns in the\nhandler\u2019s return value. It omits the column names and types from the RETURNS TABLE() statement.",
        "The following example calls the stored procedure:",
        "The procedure call produces the following output:",
        "If you plan to create a stored procedure whose handler will be compiled and copied to a stage (rather than kept in-line as source), you must\ncompile and package your classes in a JAR file, and you must upload the JAR file to a stage.",
        "Compile and package your handler code",
        "To make it easier to set up your stored procedure, build a JAR file that contains all of the dependencies needed for your stored\nprocedure. Later, you\u2019ll need to upload the JAR file to a stage and point to the JAR file from your CREATE PROCEDURE statement.\nThis process is simpler if you have fewer JAR files to upload and point to.",
        "Use Maven to build a JAR file with dependencies.",
        "If you are using Maven to build and package your code, you can use the\nMaven Assembly Plugin to create a JAR file that contains\nall of the dependencies. For more information, see Packaging Java or Scala Handler Code with Maven.",
        "Use other tools to build a JAR file with dependencies.",
        "If you are not using Maven, see the documentation for your build tool for instructions on building a JAR file with all of\nthe dependencies.",
        "For example, if you are using an IntelliJ IDEA project, see the\ninstructions on setting up an artifact configuration.",
        "Upload files to a stage",
        "To make your procedure\u2019s logic (and other dependencies, if any) available to the procedure you\u2019ll need to upload the files required to a\nstage. For more information, see Making dependencies available to your code.",
        "In the following example, the getResultJDBC procedure executes an asynchronous child job that waits 10 seconds.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}