{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-ml/filesystem-fileset",
    "title": "Snowpark ML FileSystem and FileSet | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Note",
        "Snowpark ML 1.5.0 introduced Dataset, an immutable, versioned snapshot designed for use in machine\nlearning applications. For most use cases, it is superior to the FileSet API described in this topic. The FileSet\nAPI is still supported at this time, although it is a Preview feature and will not be made Generally Available.",
        "The Snowpark ML library includes FileSystem, an abstraction that is similar to a file system for an internal, server-side encrypted\nSnowflake stage. Specifically, it is an\nfsspec AbstractFileSystem\nimplementation. The library also includes FileSet, a related class that allows you to move machine learning data from a\nSnowflake table to the stage, and from there to feed the data to PyTorch or TensorFlow\n(see Snowpark ML Framework Connectors).",
        "Tip",
        "Most users should use the newer Dataset API for creating immutable, governed data snapshots in\nSnowflake and using them in end-to-end machine learning workflows.",
        "The FileSystem and FileSet APIs are part of the Snowpark ML Python package, snowflake-ml-python. See\nUsing Snowflake ML Locally for installation instructions.",
        "Creating a Snowpark ML file system requires either a\nSnowflake Connector for Python\nConnection object or a Snowpark Python\nSession. See Connecting to Snowflake for instructions.",
        "After you have either a connection or a session, you can create a Snowpark ML SFFileSystem instance through\nwhich you can access data in your internal stage.",
        "If you have a Snowflake Connector for Python connection, pass it as the sf_connection argument:",
        "If you have a Snowpark Python session, pass it as the snowpark_session argument:",
        "SFFileSystem inherits many features from fsspec.FileSystem, such as local caching of files. You can\nenable this and other features by instantiating a Snowflake file system through the fsspec.filesystem factory\nfunction, passing target_protocol=\"sfc\" to use the Snowflake FileSystem implementation:",
        "The Snowflake file system supports most read-only methods defined for a fsspec FileSystem, including find, info,\nisdir, isfile, and exists.",
        "To specify files in a stage, use a path in the form @database.schema.stage/file_path.",
        "The file system\u2019s ls method is used to get a list of the files in the stage:",
        "You can open files in the stage by using the file system\u2019s open method. You can then read the files by using the same\nmethods you use with ordinary Python files. The file object is also a context manager that can be used with Python\u2019s\nwith statement, so it is automatically closed when it\u2019s no longer needed.",
        "You can also use the SFFileSystem instance with other components that accept fsspec file systems. Here, the Parquet data file mentioned in the previous code block is passed to PyArrow\u2019s read_table method:",
        "Python components that accept files (or file-like objects) can be passed a file object opened from the Snowflake file\nsystem. For example, if you have a gzip-compressed file in your stage, you can use it with Python\u2019s gzip module\nby passing it to gzip.GzipFile as the fileobj parameter:",
        "A Snowflake FileSet represents an immutable snapshot of the result of a SQL query in the form of files in an internal\nserver-side encrypted stage. These files can be accessed through a FileSystem to feed data to tools such as PyTorch and\nTensorFlow so that you can train models at scale and within your existing data governance model. To create a FileSet,\nuse the FileSet.make method.",
        "You need a Snowflake Python connection or a Snowpark session to create a FileSet.  See Connecting to Snowflake\nfor instructions. You must also provide the path to an existing internal server-side encrypted stage, or a subdirectory under\nsuch a stage, where the FileSet will be stored.",
        "To create a FileSet from a Snowpark DataFrame, construct a DataFrame\nand pass it to FileSet.make as snowpark_dataframe; do not call the DataFrame\u2019s collect method:",
        "To create a FileSet using a Snowflake Connector for Python connection, pass the connection to Fileset.make as\nsf_connection, and pass the SQL query as query:",
        "Note",
        "See Shuffling Data in FileSets for information about shuffling your data by using the shuffle parameter.",
        "Use the files method to get a list of the files in the FileSet:",
        "For information about feeding the data in the FileSet to PyTorch or TensorFlow, see Snowpark ML Framework Connectors.",
        "Was this page helpful?",
        "On this page"
    ]
}