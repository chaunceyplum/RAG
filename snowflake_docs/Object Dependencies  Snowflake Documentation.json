{
    "url": "https://docs.snowflake.com/en/user-guide/object-dependencies",
    "title": "Object Dependencies | Snowflake Documentation",
    "paragraphs": [
        "This topic provides concepts on object dependencies and information related to the Account Usage view OBJECT_DEPENDENCIES.",
        "An object dependency means that in order to operate on an object, the object that is being operated on must reference metadata for itself\nor reference metadata for at least one other object. Snowflake tracks object dependencies in the Account Usage view\nOBJECT_DEPENDENCIES.",
        "Snowflake supports object dependencies in your local Snowflake account and certain dependencies related to data sharing, such as creating a\nview in the consumer account from a table that is made available through a provider share. The dependencies for shared objects enable data\nofficers to ensure greater data integrity, comply with each regulatory standard more fully, and generate more detailed impact analysis.",
        "Snowflake supports the following dependency types that can trigger a dependency: the object name value, the object ID value, and\nthe combination of the object name value with the object ID value.",
        "A BY_NAME dependency occurs when the SQL statement specifies the name value of the object itself\n(e.g. a CREATE or ALTER command), or when an object calls the\nname value of another object (e.g. using a FROM clause) to complete a SQL operation.",
        "For example, consider the following statement:",
        "The table name value mytable is metadata for the table. The view named myview is dependent on the table named\nmytable; the table must exist to create the view.",
        "Snowflake refers to the view named myview as the referencing object and the table mytable as the\nreferenced object.",
        "A BY_ID dependency occurs when an object stores the object ID value of another object. One example of an ID\ndependency is an external stage storing the OBJECT_ID value of a storage integration. Currently, the storage integration object ID value\nis only accessible to Snowflake and is not made visible through any customer-facing SQL operation.",
        "Snowflake refers to the external stage named my_ext_stage as the referencing object and the storage integration named\nmyint as the referenced object.",
        "Some Snowflake objects (e.g. materialized views) are dependent on both the object name value and the object ID value. These\nobjects are often the result of a CREATE OR REPLACE statement to replace an existing object or an ALTER statement to rename an object.",
        "For more information, see the Usage notes section of the Account Usage OBJECT_DEPENDENCIES view.",
        "Snowflake supports referencing objects and referenced objects as follows:",
        "Referencing Object",
        "Referenced Object",
        "Dependency Type",
        "View, Secure View, dynamic table, SQL UDF, SQL UDTF, and other objects referenced by name",
        "View",
        "Secure View",
        "Materialized View",
        "Dynamic table",
        "UDF (all kinds)",
        "UDTF",
        "and other objects referenced by name",
        "BY_NAME",
        "External Stage",
        "Stream",
        "Storage Integration",
        "Table, View, Secure View",
        "BY_ID",
        "External table",
        "Stage",
        "BY_ID",
        "Materialized View",
        "Table, External Table",
        "BY_NAME_AND_ID",
        "Note that Snowflake supports only the following objects in the context of data sharing:",
        "Referencing object",
        "Referenced object",
        "Dependency type",
        "View, dynamic table, SQL UDF, SQL UDTF",
        "Table",
        "Secure view",
        "Secure materialized view",
        "Dynamic table",
        "Secure UDF and secure UDTF",
        "BY_NAME",
        "Materialized view",
        "Table",
        "BY_NAME_AND_ID",
        "For more details, see the Usage Notes section of the OBJECT_DEPENDENCIES view.",
        "Identifying object dependencies can provide insight into data tracking use cases as follows:",
        "Knowing the object dependency allows data stewards to identify the relationships between referencing objects and referenced objects to\nensure that updates to referenced objects do not adversely impact users of the referencing object.",
        "For example, a table owner plans to add a column to a table. Querying the OBJECT_DEPENDENCIES view based on the table name returns all\nof the objects (e.g. views) that will be affected.",
        "The data steward can then coordinate a plan of action to ensure that the timing of table and view updates do not result in any broken\nqueries that would adversely affect users querying the views created from the table.",
        "The object dependency relationship helps the compliance officer identify the relationship between sensitive data sources\n(i.e. referenced object) and data targets (i.e. referencing object). The compliance officer can then decide how best to update the\nreferenced object and referencing object based on the compliance requirements (e.g. GDPR).",
        "The object dependency relationship helps primary data professionals, such as analysts, scientists, compliance officers, and other\nbusiness users, to have confidence that the data originates from a trustworthy source.",
        "In addition to the view usage notes, note the following limitations when querying\nthe OBJECT_DEPENDENCIES view:",
        "Snowflake cannot accurately compute the dependencies of objects that include session parameters in\ntheir definitions because session parameters can take on different values depending on the context.",
        "Snowflake recommends not using session variables in view and function definitions.",
        "This view does not capture dependencies that are necessary for Snowflake implementations. For example, the view does not record the\ndependency necessary to create a new table from the clone of another table.",
        "If a view definition uses a function to call an object to create the view, or if an object is called inside another function or view,\nSnowflake does not record an object dependency. For example:",
        "In this example, the function get_presigned_url calls the stage stage1. Snowflake does not record that the view named\nv_on_stage_function depends on the stage named stage1.",
        "If the dependency type value is BY_NAME_AND_ID and an object dependency changes due to a CREATE OR REPLACE or ALTER operation on an\nobject, Snowflake only records the object dependency prior to these operations.",
        "Snowflake does not record the object dependency in the view query result after these operations because the result is a broken reference.",
        "Snowflake tracks object dependencies for Snowflake objects only. For example, if a Snowflake object depends on an\nAmazon S3 bucket, this view does not record the dependency on the bucket because the bucket is an Amazon object, not a Snowflake object.",
        "While a secondary object depends on the primary object, this view does not record dependencies due to a replication operation.",
        "For provider accounts, this view does not allow a data sharing provider account to determine dependent objects in the data sharing\nconsumer account. For example, a data sharing provider creates a view and shares the view. The data sharing provider cannot use this view\nto determine any object in the consumer account that was created from the shared view (e.g. new tables or views).",
        "For consumer accounts, this view does not allow a data sharing consumer account to determine dependent objects in the data sharing\nprovider account. For example, if a data sharing consumer account uses a UDF made available by the data sharing provider account, the\ndata sharing consumer cannot use this view to identify any objects the shared UDF depends on.",
        "For more details, refer to the Data sharing usage notes.",
        "The following examples cover these use cases:",
        "Show objects depending on an external table.",
        "Impact analysis: find the objects referenced by a table.",
        "GDPR: find the data source for a given view.",
        "Data sharing.",
        "Create a materialized view named sales_view from the external table named sales_staging_table:",
        "Query the OBJECT_DEPENDENCIES view in the Account Usage schema of the shared SNOWFLAKE database. Note that the materialized view is the\nreferencing_object_name and the external table is the referenced_object_domain:",
        "Consider a base table named SALES_NA, where NA indicates North America, US indicates United States, and CAL indicates\nCalifornia, with a series of nested views:",
        "(table) SALES_NA \u00bb (view) NORTH_AMERICA_SALES \u00bb (view) US_SALES",
        "(table) SALES_NA \u00bb (view) NORTH_AMERICA_SALES \u00bb (view) CAL_SALES",
        "To create the table and nested views, execute the following commands:",
        "Similarly, consider the relationship of the base table SALES_NA to its nested views, and consider the base table SALES_UK, where\nUK indicates the United Kingdom, to its nested view.",
        "Note that two different views serve as source objects to derive the view named GLOBAL_SALES:",
        "(table) SALES_NA \u00bb (view) NORTH_AMERICA_SALES \u00bb (view) GLOBAL_SALES",
        "(table) SALES_UK \u00bb (view) GLOBAL_SALES",
        "To create these nested views, execute the following commands:",
        "Query the OBJECT_DEPENDENCIES view in the Account Usage schema of the shared SNOWFLAKE database to determine the object references for the\ntable SALES_NA. Note the fourth row in the query result, which specifies the table SALES_NA but does not reference the table\nSALES_UK:",
        "Derived objects (e.g. views, CTAS) can be created from many different source objects to provide a custom view or dashboard. To meet\nregulatory requirements such as GDPR, compliance officers and auditors need to be able to trace data from a given object to its original\ndata source.",
        "For example, the view GLOBAL_SALES is derived from two different dependency paths that point to two different base tables:",
        "(table) SALES_NA \u00bb (view) NORTH_AMERICA_SALES \u00bb (view) GLOBAL_SALES",
        "(table) SALES_UK \u00bb (view) GLOBAL_SALES",
        "To create these nested views, execute the following commands:",
        "Query the OBJECT_DEPENDENCIES view in the Account Usage schema of the shared SNOWFLAKE database to find the data source(s) of the view\nGLOBAL_SALES. Each row in the query result specifies a dependency path to a unique object.",
        "Consider the following table, which is an excerpt from the OBJECT_DEPENDENCIES view in the consumer account, where:",
        "V1 specifies a view that the consumer creates from a shared object.",
        "S_V1 specifies a view that the provider shares.",
        "S_T1 specifies a table that the provider shares.",
        "Row",
        "REFERENCING_OBJECT_NAME",
        "REFERENCED_OBJECT_NAME",
        "REFERENCED_OBJECT_DOMAIN",
        "REFERENCED_OBJECT_ID",
        "1",
        "V1",
        "S_V1",
        "TABLE",
        "NULL",
        "2",
        "V1",
        "S_T1",
        "TABLE",
        "NULL",
        "Given this table, note the following:",
        "If the provider revokes S_T1 from the share, the consumer continues to see rows\nthat specify S_T1 (row 2) in their local view as long as S_T1 was not renamed prior to the revocation.",
        "If the provider drops a table or view in their account, the table or view is no longer included in the share. The local consumer\nview preserves existing records for the dropped table or view because the table or view was shared prior to the drop operation\nin the provider account.",
        "The consumer cannot observe view changes in the provider account.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}