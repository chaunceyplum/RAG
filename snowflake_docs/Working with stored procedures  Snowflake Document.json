{
    "url": "https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-usage",
    "title": "Working with stored procedures | Snowflake Documentation",
    "paragraphs": [
        "Stored procedures enable users to create modular code that can include complex business logic by combining multiple\nSQL statements with procedural logic.",
        "Note",
        "To both create and call an anonymous procedure, use CALL (with anonymous procedure). Creating and calling an anonymous procedure does\nnot require a role with CREATE PROCEDURE schema privileges.",
        "You must name procedures according to conventions enforced by Snowflake.",
        "For more information, see Naming and overloading procedures and UDFs.",
        "Stored procedures are not atomic; if one statement in a stored procedure fails, the other statements in the stored\nprocedure are not necessarily rolled back.",
        "You can use stored procedures with transactions to make a group of statements atomic. For details, see\nStored procedures and transactions.",
        "If you are familiar with programming in assembly language, you might\nfind the following analogy helpful. In assembly language, functions\noften create and undo their environments in a symmetric way. For example:",
        "You might want to use this approach in your stored procedures:",
        "If a stored procedure makes temporary changes to your session, then that procedure should undo those changes before returning.",
        "If a stored procedure utilizes exception handling or branching, or other logic that might impact which statements\nare executed, you need to clean up whatever you created, regardless of which branches you take during a particular\ninvocation.",
        "For example your code might look similar to the pseudo-code shown below:",
        "You call a stored procedure using a SQL command. For more information on calling stored procedures, see\nCalling a stored procedure.",
        "You call a stored procedure in the FROM clause of a SELECT statement. For more information on selecting from a stored procedure, see\nSelecting from a stored procedure.",
        "Stored Procedures utilize two types of privileges:",
        "Privileges directly on the stored procedure itself.",
        "Privileges on the database objects (e.g. tables) that the stored procedure accesses.",
        "Similar to other database objects (tables, views, UDFs, etc.), stored procedures are\nowned by a role and have one or more privileges that can be granted to other roles.",
        "Currently, the following privileges apply to stored procedures:",
        "USAGE",
        "OWNERSHIP",
        "For a role to use a stored procedure, the role must either be the owner or\nhave been granted USAGE privilege on the stored procedure.",
        "This subject is covered in Understanding caller\u2019s rights and owner\u2019s rights stored procedures.",
        "Although stored procedures allow nesting and recursion, the current maximum stack depth\nof nested calls for user-defined stored procedures is 16 (including the top-level\nstored procedure), and can be less if individual stored procedures in the call chain\nconsume large amounts of resources.",
        "In rare cases, calling too many stored procedures at the same time can cause a deadlock.",
        "You can work with stored procedures in SQL or in Snowsight.",
        "For any stored procedure in Snowflake, you can open Data \u00bb Databases and search for or browse to the stored procedure.\nSelect the stored procedure to review details and manage the procedure.",
        "You must have the relevant privileges to access and manage the\nstored procedure in Snowsight.",
        "After opening a stored procedure in Snowsight, you can do the following:",
        "Identify when the procedure was created, and any comment on the procedure.\nYou can hover over the time details to see the exact creation date and time.",
        "Review additional details about the stored procedure, including:",
        "Arguments that the stored procedure takes, if applicable.",
        "The data type of the result of the procedure.",
        "Whether the procedure is an aggregate function.",
        "Whether the procedure is a secure function.",
        "Whether the procedure is a table function.",
        "The language in which the stored procedure is written. For example, JavaScript.",
        "Review the SQL definition of the stored procedure in the Procedure definition section.",
        "Review the roles with privileges on the stored procedure in the Privileges section.",
        "You can perform the following basic management tasks for a stored procedure in Snowsight:",
        "To edit the stored procedure name or add a comment, select  \u00bb Edit.",
        "To drop the stored procedure, select  \u00bb Drop.",
        "To transfer ownership of the stored procedure to another role, select  \u00bb Transfer Ownership",
        "Stored procedures can dynamically create a SQL statement and execute it. However, this can allow\nSQL injection attacks, particularly if you create the SQL statement using input from\na public or untrusted source.",
        "You can minimize the risk of SQL injection attacks by binding parameters rather than concatenating text. For an\nexample of binding variables, see Binding variables.",
        "If you choose to use concatenation, you should check inputs carefully when\nconstructing SQL dynamically using input from public sources.\nYou might also want to take other precautions, such as querying using a\nrole that has limited privileges (e.g. read-only access, or access to\nonly certain tables or views).",
        "For more information about SQL injection attacks, see\nSQL injection (in Wikipedia).",
        "Here are some tips for designing a stored procedure:",
        "What resources, for example, tables, does this stored procedure need?",
        "What privileges are needed?",
        "Think about which database objects will be accessed, and which roles will run your stored\nprocedure, and which privileges those roles will need.",
        "If the procedure should be a caller\u2019s rights stored procedure, then\nyou might want to create a role to run that specific procedure, or any of a\ngroup of related procedures. You can then grant any required privileges to that role, and\nthen grant that role to appropriate users.",
        "Should the stored procedure run with caller\u2019s rights or owner\u2019s rights? For more information on this topic, see\nUnderstanding caller\u2019s rights and owner\u2019s rights stored procedures.",
        "How should the procedure handle errors, for example what should the procedure do if a required table is missing,\nor if an argument is invalid?",
        "Should the stored procedure log its activities or errors, for example by writing to a log table?",
        "See also the discussion about when to use a stored procedure vs. when to use a UDF:\nChoosing whether to write a stored procedure or a user-defined function.",
        "Stored procedures are usually written to be re-used, and often to be shared. Documenting stored procedures\ncan make stored procedures easier to use and easier to maintain.",
        "Below are some general recommendations for documenting stored procedures.",
        "Typically, there are at least two audiences who want to know about a stored procedure:",
        "Users/callers.",
        "Programmers/authors.",
        "For users (and programmers), document each of the following:",
        "The name of the stored procedure.",
        "The \u201clocation\u201d of the stored procedure (database and schema).",
        "The purpose of the stored procedure.",
        "The name, data type, and meaning of each input parameter.",
        "The name, data type, and meaning of the return value. If the return value is a complex type, such as a VARIANT\nthat contains sub-fields, document those sub-fields.",
        "If the stored procedure relies on information from its environment, for example session variables or session\nparameters, document the names, purposes, and valid values of those.",
        "Errors returned, exceptions thrown, etc.",
        "Roles or privileges required in order to run the procedure. (For more on this topic, see the discussion of\nroles in Design tips for stored procedures.)",
        "Whether the procedure is a caller\u2019s rights procedure or an owner\u2019s rights procedure.",
        "Any prerequisites, for example tables that must exist before the procedure is called.",
        "Any outputs (besides the return value), for example new tables that are created.",
        "Any \u201cside-effects\u201d, for example changes in privileges, deletions of old data, etc. Most stored procedures\n(unlike functions) are called specifically for their side effects, not their return values, so make sure to\ndocument those effects.",
        "If cleanup is required after running the stored procedure, document that cleanup.",
        "Whether the procedure can be called as part of a multi-statement transaction (with AUTOCOMMIT=FALSE), or whether\nit should be run outside a transaction (with AUTOCOMMIT=TRUE).",
        "An example of a call and an example of what is returned.",
        "Limitations (if applicable). For example, suppose that the procedure reads a table and returns a VARIANT that\ncontains information from each row of the table. It is possible for the VARIANT to grow larger than the\nmaximum legal size of a VARIANT, so you might need to give the caller some idea of the maximum number of rows\nin the table that the procedure accesses.",
        "Warnings (if applicable).",
        "Troubleshooting tips.",
        "For programmers:",
        "The author(s).",
        "Explain why the procedure was created as a caller\u2019s rights procedure or an owner\u2019s rights procedure \u2013 the reason\nmight not be obvious.",
        "Stored procedures can be nested, but there is a limit to the depth of the nesting. If your stored procedure\ncalls other stored procedures, and is itself likely to be called by other stored procedures, then you\nmight want to specify the maximum known depth of your stored procedure\u2019s call stack so that callers have\nsome idea of whether calling your stored procedure might exceed the maximum call stack depth.",
        "Debugging tips.",
        "The location and format of this information are up to you. You might store the information in HTML format in an\ninternal web site, for example. Before deciding where to store it, think about where your organization stores similar\ninformation for other products, or similar information for other Snowflake features, such as views,\nuser-defined functions, etc.",
        "Other tips:",
        "Include comments in the source code, as you should for almost any piece of source code.",
        "Remember that reverse engineering meaning from code is difficult. Describe not only how your algorithm works,\nbut also the purpose of that algorithm.",
        "Stored procedures allow an optional COMMENT that can be specified with the CREATE PROCEDURE or\nALTER PROCEDURE statement. Other people can read this comment by running the SHOW PROCEDURES command.",
        "If practical, consider keeping a master copy of each stored procedure\u2019s CREATE PROCEDURE command in a\nsource code control system. Snowflake\u2019s Time Travel feature does not apply to stored procedures, so looking up\nold versions of stored procedures must be done outside Snowflake. If a source code control system is not available,\nyou can partly simulate one by storing the CREATE PROCEDURE commands in a VARCHAR field in a table, and adding each\nnew version (without replacing the older version(s)).",
        "Consider using a naming convention to help provide information about stored procedures.\nFor example, a prefix or suffix in the name might indicate whether the procedure is a caller\u2019s rights stored\nprocedure or an owner\u2019s rights stored procedure. (E.g. you could use cr_ as a prefix for Caller\u2019s Rights.)",
        "To see the data types and order of the input arguments, as well as the comment, you can use the SHOW PROCEDURES\ncommand. Remember, however, that this shows only the names and data types of the arguments; it does not explain\nthe arguments.",
        "If you have appropriate privileges, you can use the DESCRIBE PROCEDURE command to see:",
        "The names and data types of the arguments.",
        "The body of the procedure, and whether the procedure executes as owner or caller.",
        "The data type of the return value.",
        "Other useful information.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}