{
    "url": "https://docs.snowflake.com/en/user-guide/jdbc-api.html#object-connection",
    "title": "JDBC Driver API support | Snowflake Documentation",
    "paragraphs": [
        "The Snowflake JDBC driver is a JDBC type 4 driver that supports the core JDBC functionality in version 1.0 of the JDBC API. You are welcome to try methods from later\nversions of the API, but Snowflake does not guarantee that these methods are supported.",
        "For the complete API reference, see the Java SE Technologies documentation.",
        "The Snowflake JDBC driver requires Java LTS (Long-Term Support) versions 1.8 or higher. The driver requires the java.sql package, which is included in the Standard Edition (SE) and the Enterprise Edition (EE)\nof Java.",
        "As of August, 2019, the java.sql package documentation is available at https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html",
        "The driver can be used with most client tools and applications that support JDBC for connecting to a database server.",
        "This topic does not document the entire JDBC API. Instead, the topic:",
        "Lists the supported interfaces from the JDBC API and the supported methods within each interface.",
        "Documents areas where Snowflake extends the JDBC API standard.",
        "Documents areas where the JDBC API standard is ambiguous and the Snowflake implementation might behave differently\nfrom other systems.",
        "In general, if a method is called and fails, the method will raise an exception (e.g. SQLException).",
        "The supported JDBC interfaces are listed alphabetically and paired with their corresponding Snowflake extension classes (where applicable).",
        "A CallableStatement is used to execute a stored procedure.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "getBigDecimal(int, int)",
        "getBoolean(int)",
        "getByte(int)",
        "getBytes(int)",
        "getDate(int)",
        "getDouble(int)",
        "getFloat(int)",
        "getInt(int)",
        "getLong(int)",
        "getObject(int)",
        "getShort(int)",
        "getString(int)",
        "getTime(int)",
        "getTimestamp(int)",
        "registerOutParameter(int, int, int)",
        "registerOutParameter(int, int)",
        "wasNull()",
        "Unsupported Methods",
        "None.",
        "None.",
        "The SnowflakeCallableStatement interface contains Snowflake-specific methods. When you use the\nSnowflake JDBC driver to create an object of type CallableStatement, for example by calling the\nConnection.prepareCall() method, you actually get an object of a different (hidden)\nSnowflake-specific type, which implements both the JDBC CallableStatement interface and the\nSnowflakeCallableStatement interface. To access the SnowflakeCallableStatement methods in that object,\nyou unwrap the object.",
        "Method Name",
        "Description",
        "getQueryID()",
        "Returns the Snowflake query ID of the most recently executed query of this CallableStatement",
        "This method returns the Snowflake query ID of the most recently executed query of this CallableStatement. If no\nquery has been executed yet with the callable statement, the method returns null.",
        "None.",
        "This method returns the ID as a String that contains a UUID.\nInformation about UUIDs is included in the description of the SQL function\nUUID_STRING.",
        "The method can throw SQLException.",
        "A Connection object represents a connection to a database server. The connection object allows users not only\nto connect to a particular database server, but also create Statement objects, which can be used to\nexecute SQL statements.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "abort()",
        "clearWarnings()",
        "close()",
        "Snowflake-specific behavior (see below).",
        "commit()",
        "createStatement()",
        "createStatement(int, int)",
        "createStatement(int, int, int)",
        "getAutoCommit()",
        "getCatalog()",
        "getClientInfo()",
        "getHoldability()",
        "getMetaData()",
        "Snowflake-specific behavior (see below).",
        "getSchema()",
        "getTransactionIsolation()",
        "getTypeMap()",
        "getWarnings()",
        "isClosed()",
        "isReadOnly()",
        "isValid()",
        "nativeSQL(String)",
        "prepareCall(String)",
        "prepareCall(String, boolean)",
        "prepareCall(String, int, int)",
        "prepareCall(String, int, int, int)",
        "prepareStatement(String)",
        "prepareStatement(String, int)",
        "prepareStatement(String, int[])",
        "prepareStatement(String, String[])",
        "prepareStatement(String, int, int)",
        "prepareStatement(String, int, int, int)",
        "Snowflake-specific behavior (see below)",
        "prepareStatement(String, boolean)",
        "setAutoCommit(boolean)",
        "setCatalog(String)",
        "setClientInfo(String, String)",
        "Calling this method causes a SQLClientInfoException.",
        "setClientInfo(Properties)",
        "Calling this method causes a SQLClientInfoException.",
        "setReadOnly(boolean)",
        "setSchema(String)",
        "Unsupported Methods",
        "rollback()",
        "setTransactionIsolation(int)",
        "close()",
        "Closes the object. After an object has been closed, calling almost any method of the closed object will raise a SQLException. Calling\nclose on an already closed object is harmless and will not raise an exception.",
        "getMetaData()",
        "Lets you get metadata about the JDBC driver and Snowflake. For example, you can find out whether transactions are supported.",
        "For more information about the methods that you can call on the returned value,\nsee Object: DatabaseMetaData.",
        "prepareStatement(String sql)",
        "This method returns a preparedStatement object that can be used to execute the SQL statement.\nThe preparedStatement object\u2019s execute() method can be called to\nexecute the statement. The statement can be executed as-is, or after binding values to the statement.",
        "Note",
        "In some systems, after a statement has been prepared, that statement can be executed repeatedly without re-compiling the statement.\nPreparing once and executing repeatedly can save a small amount of time and resources.",
        "In Snowflake, prepareStatement() does not actually compile the code. Instead,\nPreparedStatement.execute(), PreparedStatement.executeQuery(),\nand PreparedStatement.executeUpdate() compile and execute the statement.\nTherefore preparing the statement before execution does not save resources\ncompared to simply using Statement.execute().",
        "prepareCall(String sql)",
        "prepareCall(String sql, boolean)",
        "prepareCall(String sql, int, int)",
        "prepareCall(String sql, int, int, int)",
        "As in most JDBC implementations, the prepareCall methods can be used to bind parameters to a stored procedure. For example, the\nfollowing is supported:",
        "However, in the Snowflake JDBC Driver, the prepareCall methods do not support the ? = syntax to support binding the return value of a stored procedure.\nFor example, the following is not supported:",
        "The SnowflakeConnection interface contains Snowflake-specific methods. When you use the\nSnowflake JDBC driver to create an object of type Connection, for example by calling the\nDriverManager.getConnection() method, you actually get an object of a different (hidden)\nSnowflake-specific type, which implements both the JDBC Connection interface and the\nSnowflakeConnection interface. To access the SnowflakeConnection methods in that object,\nyou unwrap the object.",
        "These methods are in addition to the methods supported by the JDBC Connection interface.",
        "Method Name",
        "Description",
        "createResultSet(String)",
        "Given the query ID of an asynchronously-launched SQL statement, retrieves the query results and returns them in a ResultSet object.",
        "downloadStream(String, String, boolean)",
        "Downloads a file from the given internal stage and returns an InputStream.",
        "getSessionID()",
        "Gets the session ID of the current session.",
        "prepareStatement(String, Boolean)",
        "Overloaded prepareStatement() method (see below for details).",
        "uploadStream(String, String, InputStream, String, boolean)",
        "Compresses data from a stream and uploads it to the specified path and file name in an internal stage.",
        "Given the queryID of an asynchronously-launched SQL statement, retrieve the\nquery results and return them in a ResultSet object.",
        "This method can typically be called up to 24 hours after the SQL statement finished.",
        "queryID: The query ID of the query for which you want the results.",
        "The ResultSet. If the query has not yet finished running, the server returns an \u201cempty\u201d ResultSet. The user\ncan call resultSet.unwrap(SnowflakeResultSet.class).getStatus() to find out when the data is available.",
        "This method can throw SQLException.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the Connection object.",
        "See Examples of asynchronous queries for a more extensive example that includes a call to this\nmethod.",
        "This method downloads a file from the given internal stage and returns an input stream.",
        "stageName:      Stage name.",
        "sourceFileName: File path in stage.",
        "decompress:     True if file compressed.",
        "This method returns an InputStream.",
        "This method throws SQLException if a SQL error occurs.",
        "For a partial example, see Download data files directly from an internal stage to a stream.",
        "This method returns the session ID of the current session.",
        "None",
        "Returns the session ID as a String.",
        "This method throws SQLException if any SQL error occurs, for example if the connection is closed.",
        "Since the session ID does not change while the connection is open, the session ID is cached locally (rather\nthan retrieved from the server each time) to improve performance.",
        "This method is deprecated.  The skipParsing parameter no longer affects the behavior of the method; this\nmethod behaves the same as the prepareStatement(String sql) method, regardless of the setting of the\nskipParsing parameter.",
        "New code should use the method prepareStatement(String sql).",
        "When convenient, existing code that uses the two-argument version of this method should be updated to use\nthe one-argument method prepareStatement(String sql).",
        "This method compresses data from a stream and uploads it at an internal stage location.\nThe data will be uploaded as one file. No splitting is done in this method.",
        "stageName:    Stage name (e.g. ~ or table name or stage name).",
        "destPrefix:   Path / prefix under which the data should be uploaded on the stage.",
        "inputStream:  Input stream from which the data will be uploaded.",
        "destFileName: Destination file name to use.",
        "compressData: Compress data or not before uploading stream.",
        "Nothing.",
        "This method throws a java.sql.SQLException if it failed to compress and put data from a stream at the stage.",
        "The caller is responsible for releasing the inputStream after the method is called.",
        "For a partial example, see Upload data files directly from a stream to an internal stage.",
        "The DatabaseMetaData class provides information about the features that the database server (in this case,\nSnowflake) supports.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "allProceduresAreCallable()",
        "allTablesAreSelectable()",
        "dataDefinitionCausesTransactionCommit()",
        "dataDefinitionIgnoredInTransactions()",
        "doesMaxRowSizeIncludeBlobs()",
        "getCatalogs()",
        "getCatalogSeparator()",
        "getCatalogTerm()",
        "getColumnPrivileges(String, String, String, String)",
        "Supports wildcards for the columnNamePattern argument. Supports null for the catalog, schemaPattern, tableNamePattern, and columnNamePattern arguments. See Snowflake-specific behavior for additional information about this method.",
        "getColumns(String, String, String, String)",
        "Supports wildcards for the schemaPattern, tableNamePattern, and columnNamePattern arguments. Supports null for the catalog, schemaPattern, tableNamePattern, and columnNamePattern arguments.",
        "getCrossReference(String, String, String, String, String, String)",
        "Supports null for the parentCatalog, parentSchema, parentTable, foreignCatalog, foreignSchema, and foreignTable arguments.",
        "getDatabaseProductName()",
        "getDatabaseProductVersion()",
        "getDefaultTransactionIsolation()",
        "getDriverMajorVersion()",
        "getDriverMinorVersion()",
        "getDriverName()",
        "getDriverVersion()",
        "getExportedKeys(String, String, String)",
        "Supports null for the catalog, schema, and table arguments.",
        "getExtraNameCharacters()",
        "getFunctionColumns()",
        "Supports wildcards for the schemaPattern, functionNamePattern, and columnNamePattern arguments. Supports null for the columnNamePattern argument.",
        "getFunctions(String, String, String)",
        "Supports wildcards for the schemaPattern and functionNamePattern arguments. Supports null for the schemaPattern and functionNamePattern arguments.",
        "getIdentifierQuoteString()",
        "getImportedKeys(String, String, String)",
        "Supports null for the catalog, schema, and table arguments.",
        "getIndexInfo(String, String, String, boolean, boolean)",
        "getMaxBinaryLiteralLength()",
        "getMaxCatalogNameLength()",
        "getMaxCharLiteralLength()",
        "getMaxColumnNameLength()",
        "getMaxColumnsInGroupBy()",
        "getMaxColumnsInIndex()",
        "getMaxColumnsInOrderBy()",
        "getMaxColumnsInSelect()",
        "getMaxColumnsInTable()",
        "getMaxConnections()",
        "getMaxCursorNameLength()",
        "getMaxIndexLength()",
        "getMaxProcedureNameLength()",
        "getMaxRowSize()",
        "getMaxSchemaNameLength()",
        "getMaxStatementLength()",
        "getMaxStatements()",
        "getMaxTableNameLength()",
        "getMaxTablesInSelect()",
        "getMaxUserNameLength()",
        "getNumericFunctions()",
        "getPrimaryKeys(String, String, String)",
        "Supports null for the catalog, schema, and table arguments.",
        "getProcedureColumns(String, String, String, String)",
        "Supports wildcards for the schemaPattern, procedureNamePattern, and columnNamePattern arguments. Supports null for the columnNamePattern argument.",
        "getProcedures(String, String, String)",
        "Supports wildcards for the schemaPattern and procedureNamePattern arguments. Supports null for the columnNamePattern argument.",
        "getProcedureTerm()",
        "getSchemas()",
        "getSchemas(String, String)",
        "Supports wildcards for the schemaPattern argument. Supports null for the catalogName and schemaPattern arguments.",
        "getSchemaTerm()",
        "getSearchStringEscape()",
        "getSQLKeywords()",
        "getSQLStateType()",
        "getStreams(String, String, String)",
        "Supports wildcards for the orignalSchemaPattern and streamName arguments. Supports null for the originalCatalog, originalSchemaPattern, and streamName arguments. See Snowflake-specific behavior for additional information about this method.",
        "getStringFunctions()",
        "getSystemFunctions()",
        "getTablePrivileges(String, String, String)",
        "Supports wildcards for the schemaPattern and tableNamePattern arguments. Supports null for the catalog and schemaPattern arguments.",
        "getTables(String, String, String, String[])",
        "Supports wildcards for the schemaPattern and tableNamePattern arguments. Supports null for the catalog, schemaPattern, tableNamePattern, and types arguments.",
        "getTableTypes()",
        "getTimeDateFunctions()",
        "getTypeInfo()",
        "getURL()",
        "getUserName()",
        "isCatalogAtStart()",
        "isReadOnly()",
        "nullPlusNonNullIsNull()",
        "nullsAreSortedAtEnd()",
        "nullsAreSortedAtStart()",
        "nullsAreSortedHigh()",
        "nullsAreSortedLow()",
        "storesLowerCaseIdentifiers()",
        "storesLowerCaseQuotedIdentifiers()",
        "storesMixedCaseIdentifiers()",
        "storesMixedCaseQuotedIdentifiers()",
        "storesUpperCaseIdentifiers()",
        "storesUpperCaseQuotedIdentifiers()",
        "supportsAlterTableWithAddColumn()",
        "supportsAlterTableWithDropColumn()",
        "supportsANSI92EntryLevelSQL()",
        "supportsANSI92FullSQL()",
        "supportsANSI92IntermediateSQL()",
        "supportsCatalogsInDataManipulation()",
        "supportsCatalogsInIndexDefinitions()",
        "supportsCatalogsInPrivilegeDefinitions()",
        "supportsCatalogsInProcedureCalls()",
        "supportsCatalogsInTableDefinitions()",
        "supportsColumnAliasing()",
        "supportsConvert()",
        "supportsConvert(int, int)",
        "supportsCoreSQLGrammar()",
        "supportsCorrelatedSubqueries()",
        "supportsDataDefinitionAndDataManipulationTransactions()",
        "supportsDataManipulationTransactionsOnly()",
        "supportsDifferentTableCorrelationNames()",
        "supportsExpressionsInOrderBy()",
        "supportsExtendedSQLGrammar()",
        "supportsFullOuterJoins()",
        "supportsGroupBy()",
        "supportsGroupByBeyondSelect()",
        "supportsGroupByUnrelated()",
        "supportsIntegrityEnhancementFacility()",
        "supportsLikeEscapeClause()",
        "supportsLimitedOuterJoins()",
        "supportsMinimumSQLGrammar()",
        "supportsMixedCaseIdentifiers()",
        "supportsMixedCaseQuotedIdentifiers()",
        "supportsMultipleResultSets()",
        "supportsMultipleTransactions()",
        "supportsNonNullableColumns()",
        "supportsOpenCursorsAcrossCommit()",
        "supportsOpenCursorsAcrossRollback()",
        "supportsOpenStatementsAcrossCommit()",
        "supportsOpenStatementsAcrossRollback()",
        "supportsOrderByUnrelated()",
        "supportsOuterJoins()",
        "supportsPositionedDelete()",
        "supportsPositionedUpdate()",
        "supportsSchemasInDataManipulation()",
        "supportsSchemasInIndexDefinitions()",
        "supportsSchemasInPrivilegeDefinitions()",
        "supportsSchemasInProcedureCalls()",
        "supportsSchemasInTableDefinitions()",
        "supportsSelectForUpdate()",
        "supportsStoredProcedures()",
        "supportsSubqueriesInComparisons()",
        "supportsSubqueriesInExists()",
        "supportsSubqueriesInIns()",
        "supportsSubqueriesInQuantifieds()",
        "supportsTableCorrelationNames()",
        "supportsTransactionIsolationLevel(int)",
        "supportsTransactions()",
        "supportsUnion()",
        "supportsUnionAll()",
        "usesLocalFilePerTable()",
        "usesLocalFiles()",
        "Unsupported Methods",
        "getBestRowIdentifier(String, String, String, int, boolean)",
        "getVersionColumns(String, String, String)",
        "This method always returns an empty set because Snowflake does not support column-level privileges.",
        "This method returns information about streams contained within specified databases and schemas.",
        "originalCatalog:      Name of the database.",
        "orignalSchemaPattern: Pattern to identify the schema (supports wildcards).",
        "streamName:     Name of the stream (supports wildcards).",
        "This method returns a ResultSet containing rows for each stream, with each row including the following columns:",
        "name: Name of the stream.",
        "database_name: Name of the database for the schema containing the stream.",
        "A database object (e.g. a stream) is contained in a schema, which in turn is contained in a database.",
        "schema_name: Name of the schema containing the stream.",
        "owner: Role that owns the stream.",
        "comment: Comments associated with the stream.",
        "table_name: Name of the table whose DML updates are tracked by the stream.",
        "source_type: Source object for the stream. Possible values include:",
        "table",
        "view",
        "directory table",
        "external table",
        "base_tables: Underlying tables for the view. This column applies only to streams on views.",
        "type: Type of the stream. Currently, the function always returns DELTA.",
        "stale: Whether the stream was last read before the stale_after time passed. If TRUE, the stream might be stale.",
        "When a stream is stale, it cannot be read. You can recreate the stream to resume reading from it. To prevent\na stream from become stale, you should consume the stream before the stale_after time has passed.",
        "mode: Type of stream. Possible values include:",
        "APPEND_ONLY: Indicates the stream is an append-only stream.",
        "INSERT_ONLY: Indicates the stream only returns information for inserted rows. This value applies only to streams on external tables.",
        "DEFAULT: Indicates the stream is on tables.",
        "This method throws an SQLException if a SQL error occurs.",
        "Some DatabaseMetaData methods accept null values for database object names (e.g. table/catalog names).\nBy default, a null value means that the method does not filter on that argument. For example, if you pass\ngetColumns() a null value for the schemaPattern argument, then getColumns() returns values\nfor all schemas.",
        "For some of those methods, the default behavior for null arguments can be overridden with the following\nparameters:",
        "CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX.",
        "CLIENT_METADATA_USE_SESSION_DATABASE.",
        "Some DatabaseMetaData methods support pattern-matching wildcards in database object names, such as table/catalog\nnames. The supported wildcard characters are:",
        "%: Matches any string of zero or more characters.",
        "_: Matches any one character.",
        "The following example shows what to pass to the getColumns() method to get the names of all tables and all\ncolumns in the specified database (TEMPORARYDB1) and schema (TEMPORARYSCHEMA1):",
        "It is common for database object names, such as table names, to contain underscores, for example\nSHIPPING_ADDRESSES. Searching for SHIPPING_ADDRESSES without escaping the underscore will of course\nfind not only the table named SHIPPING_ADDRESSES, but also tables such as SHIPPING2ADDRESSES. If\nyou want to search for SHIPPING_ADDRESSES, but not SHIPPING2ADDRESSES, then you need to escape the\nwildcard character to indicate that you want it treated as a literal. To escape the character, precede it with a\nbackslash.",
        "The backslash character itself must also be escaped if you want to use it as a literal character. For example, to\nsearch for a table named T_&, in which the underscore, the ampersand, and the backslash are literal parts\nof the name, not wildcard characters or escape characters, the method call should look similar to the following:",
        "Each backslash above must be escaped an extra time because the Java compiler expects backslashes to be escaped:",
        "The Driver provides methods that allow you to get a connection to the database, as well as get information\nabout the driver itself.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "acceptsURL(String)",
        "connect(String, Properties)",
        "getMajorVersion()",
        "getMinorVersion()",
        "getPropertyInfo(String, Properties)",
        "isDisableIncidents()",
        "jdbcCompliant()",
        "setDisableIncidents()",
        "None.",
        "The following code snippet shows part of a program to get property information:",
        "Note that in the general case, the call to this method should be inside a loop. If you retrieve information about\na property and then set that property, the new setting might make additional properties relevant, so you might\nneed to retrieve those and set them.",
        "This provides information about parameters in a PreparedStatement.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "getParameterCount()",
        "getParameterType(int)",
        "getParameterTypeName(int)",
        "getPrecision(int)",
        "getScale(int)",
        "isNullable",
        "Unsupported Methods",
        "getParameterClassName(int)",
        "getParameterMode()",
        "isSigned",
        "None.",
        "The PreparedStatement interface describes methods that, for example, allow you to execute queries.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "addBatch()",
        "Snowflake-specific behavior (see below for details).",
        "clearParameters()",
        "getParameterMetaData()",
        "execute()",
        "Snowflake-specific behavior (see below for details).",
        "executeBatch(String)",
        "executeLargeBatch(String)",
        "executeLargeUpdate(String)",
        "executeQuery()",
        "Snowflake-specific behavior (see below for details).",
        "executeUpdate()",
        "Snowflake-specific behavior (see below for details).",
        "setBigDecimal(int, BigDecimal)",
        "setBoolean(int, boolean)",
        "setByte(int, byte)",
        "setBytes(int, byte[])",
        "setDate(int, Date)",
        "setDouble(int, double)",
        "setFloat(int, float)",
        "setInt(int, int)",
        "setLong(int, long)",
        "setNull(int, int)",
        "setObject(int, Object, int, int)",
        "Snowflake-specific behavior (see below for details).",
        "setObject(int, Object, int)",
        "Snowflake-specific behavior (see below for details).",
        "setObject(int, Object)",
        "setShort(int, short)",
        "setString(int, String)",
        "setTime(int, Time)",
        "setTimestamp(int, Timestamp)",
        "Unsupported Methods",
        "setAsciiStream(int, InputStream, int)",
        "setBinaryStream(int, InputStream, int)",
        "setUnicodeStream(int, InputStream, int)",
        "addBatch()",
        "Supported for INSERT statements only.",
        "The addBatch method (combined with executeBatch) allows multiple rows of data to be inserted as part of a single INSERT\nstatement.",
        "The difference between using a batch and not using a batch is similar to the difference between using a multi-row insert and a single-row\ninsert:",
        "Inserting batches of rows is usually more efficient than inserting the same number of rows in individual INSERT statements. The\nadvantage is even greater when using AUTOCOMMIT (i.e. when each INSERT is an individual transaction).",
        "For an example of using addBatch, see Batch inserts.",
        "Note",
        "There is an upper limit to the size of data that you can bind, or that you can combine in a batch. For details, see Limits on Query Text Size.",
        "execute()",
        "This method compiles and executes the SQL statement that was provided when the PreparedStatement object was created. The statement can be any\ntype of SQL statement. The execute() method does not return a ResultSet.",
        "This method does not return anything. If you are executing a query and need to get a ResultSet back when the statement executes,\nthen use the executeQuery() method.",
        "executeQuery()",
        "This method compiles and executes the SQL statement that was provided when the PreparedStatement object was created, and returns a ResultSet.",
        "executeUpdate()",
        "This method compiles and executes the SQL statement that was provided when the PreparedStatement object was created. The statement must be a DML\nstatement (INSERT, UPDATE, DELETE, etc.) or a SQL statement that does not return anything (e.g. a DDL statement).",
        "The executeUpdate() method returns an integer, which is the number of rows updated if the statement was a DML statement. If the\nstatement did not update any rows, the function returns 0.",
        "If you need to execute a SQL statement that returns a ResultSet, then use a different method, such as executeQuery().",
        "setObject()",
        "When you bind a timestamp variable to a timestamp column, you can use this method to specify the timestamp variation\n(TIMESTAMP_LTZ , TIMESTAMP_NTZ , TIMESTAMP_TZ) that should be used to interpret the timestamp value. For details, see\nBinding variables to timestamp columns.",
        "The SnowflakePreparedStatement interface contains Snowflake-specific methods. When you use the\nSnowflake JDBC driver to create an object of type PreparedStatement, for example by calling the\nConnection.prepareStatement() method, you actually get an object of a different (hidden)\nSnowflake-specific type, which implements both the JDBC PreparedStatement interface and the\nSnowflakePreparedStatement interface. To access the SnowflakePreparedStatement methods in that object,\nyou unwrap the object.",
        "The methods below are in addition to the methods supported by the PreparedStatement interface.",
        "Method Name",
        "Description",
        "executeAsyncQuery()",
        "Performs an asynchronous query.",
        "getQueryID()",
        "Returns the Snowflake query ID of the most recently executed query of this SnowflakePreparedStatement.",
        "This method performs an asynchronous query, which involves submitting an SQL\nstatement for execution, then returning control to the caller without waiting for the query to finish.",
        "Any SQL statement that is valid for executeQuery() is also valid for executeAsyncQuery().",
        "Note",
        "File transfer statements, such as PUT and GET, are valid for executeAsyncQuery(), but behave synchronously.",
        "None.",
        "An \u201cempty\u201d ResultSet. The user should poll the result set by calling\nresultSet.unwrap(SnowflakeResultSet.class).getStatus() until the query results become available.",
        "This method can throw SQLException.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the PreparedStatement object.",
        "See Examples of asynchronous queries for a more extensive example using the very similar\nSnowflakeStatement.executeAsyncQuery() method.",
        "This method returns the Snowflake query ID of the most recently executed query of this SnowflakePreparedStatement. If no query has been\nexecuted yet with this prepared statement, the method returns null.",
        "None.",
        "The method returns the ID as a String that contains a UUID.",
        "The method can throw SQLException.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the\nSnowflakePreparedStatement.",
        "For asynchronous queries, the query ID does not become available until the\nexecution of the statement completes. If you call SnowflakePreparedStatement.getQueryID() after calling\nexecuteAsyncQuery() but before the statement finishes executing, the return value could be NULL.\nInstead, call resultSet.unwrap(SnowflakeResultSet.class).getQueryID() on the ResultSet object\nreturned by executeAsyncQuery().",
        "This partial example shows how to call the method:",
        "The enum type is a Snowflake-specific type that:",
        "Defines the constants that represent the status of an asynchronous query.",
        "Defines methods that return details about any errors that occurred when executing SQL statements.",
        "This enum type is in the net.snowflake.client.core package.",
        "Each enum constant represents a different possible status for the asynchronous query.",
        "Enum Constant",
        "Description",
        "RUNNING",
        "The query is still running.",
        "ABORTING",
        "The query is in the process of being aborted on the server side.",
        "SUCCESS",
        "The query finished successfully.",
        "FAILED_WITH_ERROR",
        "The query finished unsuccessfully.",
        "QUEUED",
        "The query is queued for execution (i.e. has not yet started running), typically because it is waiting for resources.",
        "DISCONNECTED",
        "The session\u2019s connection is broken. The query\u2019s state will change to \u201cFAILED_WITH_ERROR\u201d soon.",
        "RESUMING_WAREHOUSE",
        "The warehouse is starting up and the query is not yet running.",
        "BLOCKED",
        "The statement is waiting on a lock held by another statement.",
        "NO_DATA",
        "Data about the statement is not yet available, typically because the statement has not yet started executing.",
        "The enum type defines the following methods, which you can use to get details about an error when the query status is\nFAILED_WITH_ERROR.",
        "Method Name",
        "Description",
        "getErrorCode()",
        "Returns the error code from the server if an error occurred during query execution.",
        "getErrorMessage()",
        "Returns the error message from the server if an error occurred during query execution.",
        "If an error occurred during the execution of the query, this method returns the error code from the server.",
        "None.",
        "The method returns the error code as an int. If no error occurred, the method returns the value 0.",
        "See Examples of asynchronous queries for a more extensive example that includes a call to this\nmethod.",
        "If an error occurred during the execution of the query, this method returns the error message from the server.",
        "None.",
        "The method returns the error message as a String. If no error occurred, the method returns the value\nNo error reported.",
        "See Examples of asynchronous queries for a more extensive example that includes a call to this\nmethod.",
        "The ResultSet interface documents methods that retrieve the results of queries, for example to read the rows and\ncolumns returned by a SELECT statement.",
        "A Snowflake ResultSet is a read-only object; it is not updatable.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "close()",
        "Snowflake-specific behavior (see below for details).",
        "findColumn(String)",
        "getBigDecimal(int, int)",
        "getBigDecimal(String, int)",
        "getBoolean(int)",
        "getBoolean(String)",
        "getByte(int)",
        "getByte(String)",
        "getBytes(int)",
        "getBytes(String)",
        "getDate(int)",
        "Snowflake-specific behavior (see below for details).",
        "getDate(int, Calendar)",
        "Snowflake-specific behavior (see below for details).",
        "getDate(String)",
        "Snowflake-specific behavior (see below for details).",
        "getDate(String, Calendar)",
        "Snowflake-specific behavior (see below for details).",
        "getDouble(int)",
        "getDouble(String)",
        "getFloat(int)",
        "getFloat(String)",
        "getInt(int)",
        "getInt(String)",
        "getLong(int)",
        "getLong(String)",
        "getMetaData()",
        "Snowflake-specific behavior (see below for details).",
        "getObject(int)",
        "getObject(String)",
        "getShort(int)",
        "getShort(String)",
        "getString(int)",
        "getString(String)",
        "getTime(int)",
        "Snowflake-specific behavior (see below for details).",
        "getTime(String)",
        "Snowflake-specific behavior (see below for details).",
        "getTimestamp(int)",
        "Snowflake-specific behavior (see below for details).",
        "getTimestamp(String)",
        "Snowflake-specific behavior (see below for details).",
        "next()",
        "Snowflake-specific behavior (see below for details).",
        "wasNull()",
        "Unsupported Methods",
        "clearWarnings()",
        "getArray(int)",
        "getArray(String)",
        "getAsciiStream(int)",
        "getAsciiStream(String)",
        "getBinaryStream(int)",
        "getBinaryStream(String)",
        "getCursorName()",
        "getUnicodeStream(int)",
        "getUnicodeStream(String)",
        "getWarnings()",
        "close()",
        "Closes the object. After an object has been closed, calling almost any method of the closed object will raise a SQLException. Calling\nclose on an already closed object is harmless and will not raise an exception.",
        "getDate(), getTime(), getTimestamp()",
        "In version 3.12.17 and later versions of the JDBC Driver, these methods use the session time zone (specified by the\nTIMEZONE parameter). Older versions use the time zone of the JVM.",
        "To change these methods to use the time zone of the JVM, set the JDBC_USE_SESSION_TIMEZONE parameter to\nFALSE.",
        "getMetaData()",
        "If the ResultSet object is for an asynchronous query, then this method will block\nuntil the query has finished executing. You can use resultSet.unwrap(SnowflakeResultSet.class).getStatus() to get\nthe query status before calling this method.",
        "next()",
        "This makes the next row in the result set the \u201ccurrent\u201d row. Calls to the get*() methods, such as getInt(),\nget values from the current row.",
        "If the ResultSet has been closed by a call to the close method, then subsequent calls to next return false, rather than raise an exception.",
        "If the ResultSet object is for an asynchronous query, then this method will block\nuntil the results are available. You can use resultSet.unwrap(SnowflakeResultSet.class).getStatus() to get the\nquery status before calling this\nmethod.",
        "The SnowflakeResultSet interface contains Snowflake-specific methods. When you use the\nSnowflake JDBC driver to create an object of type ResultSet, for example by calling the\nStatement.getResultSet() method, you actually get an object of a different (hidden)\nSnowflake-specific type, which implements both the JDBC ResultSet interface and the\nSnowflakeResultSet interface. To access the SnowflakeResultSet methods in that object,\nyou unwrap the object.",
        "Method Name",
        "Description",
        "getQueryID()",
        "Returns the Snowflake query ID of the statement that generated this result set.",
        "getStatus()",
        "For a ResultSet returned by an asynchronous query, returns the status of the query.",
        "This method returns the Snowflake query ID of the statement that generated this result set.",
        "None.",
        "The method returns the ID as a String that contains a UUID.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the\nResultSet.",
        "For a ResultSet returned by an asynchronous query, such as SnowflakeStatement.executeAsyncQuery(),\nthis method returns the status of the query. The status indicates whether the query finished successfully,\nfinished unsuccessfully, or has not yet finished.",
        "None.",
        "A QueryStatus enum constant.",
        "This method can throw SQLException.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the ResultSet object.",
        "See Examples of asynchronous queries for a more extensive example that includes a call to this\nmethod.",
        "This provides information about a ResultSet, for example, the number of columns in the ResultSet.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "getCatalogName(int)",
        "Snowflake-specific behavior (see below for details).",
        "getColumnCount()",
        "getColumnDisplaySize(int)",
        "getColumnLabel(int)",
        "getColumnName(int)",
        "getColumnType(int)",
        "getColumnTypeName(int)",
        "Snowflake-specific behavior (see below for details).",
        "getPrecision(int)",
        "getScale(int)",
        "getSchemaName(int)",
        "Snowflake-specific behavior (see below for details).",
        "getTableName(int)",
        "Snowflake-specific behavior (see below for details).",
        "isAutoIncrement(int)",
        "isCaseSensitive(int)",
        "isCurrency(int)",
        "isDefinitelyWritable(int)",
        "isNullable(int)",
        "isReadOnly(int)",
        "isSearchable(int)",
        "isSigned(int)",
        "isWritable(int)",
        "Unsupported Methods",
        "None.",
        "The ResultSetMetaData class does not have a close() method. An open ResultSetMetaData object is implicitly closed when the user closes\nthe ResultSet from which the ResultSetMetaData object was created.",
        "getCatalogName(), getSchemaName(), getTableName()",
        "If the ResultSet object is for an asynchronous query, these methods return empty\nstrings.",
        "For GEOGRAPHY columns, getColumnTypeName returns GEOGRAPHY.",
        "Note that the getColumnType and getColumnClassName methods do not indicate that the column type is\nGEOGRAPHY.",
        "The SnowflakeResultSetMetaData interface contains Snowflake-specific methods. When you use the\nSnowflake JDBC driver to create an object of type ResultSetMetaData, for example by calling the\nResultSet.getMetaData() method, you actually get an object of a different (hidden)\nSnowflake-specific type, which implements both the JDBC ResultSetMetaData interface and the\nSnowflakeResultSetMetaData interface. To access the SnowflakeResultSetMetaData methods in that object,\nyou unwrap the object.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "getColumnIndex(String columnName)",
        "getColumnNames()",
        "getInternalColumnType(int column)",
        "getQueryID()",
        "Returns the index of the column that corresponds to the columnName. For example, if a column named \u201cBirthDate\u201d\nis the third column in the table, then getColumnIndex(\u201cBirthDate\u201d) returns 2. (Indexes are 0-based, not 1-based.)",
        "The name of the column for which you want to find the index.",
        "Returns an integer that contains the index of the column that corresponds to the columnName.\nIf the columnName does not match any column in the result set, this returns -1.",
        "The method can throw SQLException.",
        "This function returns the list of all column names in the resultset.",
        "This is different from the function getColumnName(int column) in ResultSetMetaData, which returns a single\ncolumn name based on an index.",
        "None.",
        "The data type of the returned value is \u201cList<String>\u201d. The list contains the names of the columns. The names\nare in the same order as the column indexes.",
        "The method can throw SQLException.",
        "Returns the data type of the specified column.",
        "column: This indicates the index (1-based) of the column for which you want the data type.",
        "Returns the data type of the specified column. The data type is an integer.",
        "The method can throw SQLException.",
        "Returns the Snowflake query ID of the query to which this metadata applies.",
        "None.",
        "This method returns the query ID of the query for which this metadata was generated.\nThe query ID is a String that contains a UUID. Information about UUIDs is included in the description of the\nSQL function UUID_STRING.",
        "The method can throw SQLException.",
        "A SnowflakeTimestampWithTimezone object provides information\nabout the time zone associated with the Java Timestamp object\u2019s time stamp.\nYou can use this object to extract the time zone directly instead of parsing\nthe information from the Java Timestamp string. To access this functionality, you must import the\nfollowing Java libraries:",
        "java.sql.Timestamp;",
        "java.time.ZonedDateTime;",
        "java.util.TimeZone;",
        "Method Name",
        "Notes",
        "Constructors",
        "Number of seconds since January 1, 1970 (Internet time).",
        "Number of fractional nanoseconds.",
        "ID of the time zone.",
        "Timestamp object representing the desired time.",
        "ID of the time zone.",
        "Timestamp object representing the desired time.",
        "Supported Methods",
        "getTimezone()",
        "Snowflake-specific behavior (see below for details).",
        "toZonedDateTime()",
        "Snowflake-specific behavior (see below for details).",
        "getTimezone()",
        "Returns the time zone from the time stamp.",
        "toZonedDateTime()",
        "Converts a SnowflakeTimestampWithTimezone time stamp to a zoned date time (Java ZonedDateTime object).",
        "A Statement object represents a SQL statement. The statement object allows users to perform tasks such as:",
        "Execute a SQL statement.",
        "Set a timeout for the execution of the statement.",
        "Retrieve a result set for a query.",
        "Method Name",
        "Notes",
        "Supported Methods",
        "cancel()",
        "close()",
        "Snowflake-specific behavior (see below for details).",
        "execute(String)",
        "executeBatch(String)",
        "executeLargeBatch(String)",
        "executeLargeUpdate(String)",
        "executeQuery(String)",
        "executeUpdate(String)",
        "getBatchQueryID()",
        "Snowflake-specific behavior (see below for details).",
        "getMaxFieldSize()",
        "getMaxRows()",
        "getMoreResults()",
        "getQueryTimeout()",
        "getResultSet()",
        "getUpdateCount()",
        "Snowflake-specific behavior (see below for details).",
        "setCursorName(String)",
        "setMaxRows(int)",
        "setQueryTimeout(int)",
        "Unsupported Methods",
        "clearWarnings()",
        "getWarnings()",
        "setEscapeProcessing(boolean)",
        "setMaxFieldSize(int)",
        "close()",
        "This method closes the object. After an object has been closed, calling almost any method of the closed object will raise a\nSQLException. Calling close on an already closed object is harmless and will not raise an exception.",
        "getBatchQueryID()",
        "This method returns a list of the Snowflake query IDs of the most recently executed query batch of this Statement. If no\nquery has been executed yet with the statement, the method returns null.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the\nstatement. For example:",
        "getUpdateCount()",
        "This method returns the number of rows updated by the most recently executed SQL statement.",
        "If the statement was a DML statement (INSERT, UPDATE, DELETE, etc.), then getUpdateCount() returns the number of rows that\nwere added, deleted, or changed. Note that this value can be 0 if no rows were changed.",
        "If the statement was a SELECT statement, then getUpdateCount() returns -1.",
        "If the statement was a DDL statement, then getUpdateCount() returns -1.",
        "The SnowflakeStatement interface contains Snowflake-specific methods. When you use the\nSnowflake JDBC driver to create an object of type Statement, for example by calling the\nConnection.createStatement() method, you actually get an object of a different (hidden)\nSnowflake-specific type, which implements both the JDBC Statement interface and the\nSnowflakeStatement interface. To access the SnowflakeStatement methods in that object,\nyou unwrap the object.",
        "Method Name",
        "Description",
        "executeAsyncQuery()",
        "Performs an asynchronous query.",
        "getQueryID()",
        "Returns the Snowflake query ID of the most recently executed query of this Statement.",
        "setParameter(String, Value)",
        "Sets Snowflake-specific parameters.",
        "This method performs an asynchronous query, which involves submitting an SQL\nstatement for execution, then returning control to the caller without waiting for the query to finish.",
        "A string containing the SQL command to execute. Any SQL statement that is valid for executeQuery() is\nalso valid for executeAsyncQuery().",
        "Note",
        "File transfer statements, such as PUT and GET, are valid for executeAsyncQuery(), but behave synchronously.",
        "An \u201cempty\u201d ResultSet. The user should poll the result set by calling\nresultSet.unwrap(SnowflakeResultSet.class).getStatus() until the query results become available.",
        "The method can throw SQLException.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the Statement object.",
        "See Examples of asynchronous queries for an example that includes a call to this method.",
        "This method returns the Snowflake query ID of the most recently executed query of this Statement.",
        "None.",
        "The query ID of the most recently executed query of this statement.\nThe query ID is a String that contains a UUID.\nIf no query has been executed yet with the statement, the method returns null.",
        "The method can throw SQLException.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the Statement.",
        "For asynchronous queries, the query ID does not become available until the\nexecution of the statement completes. If you call SnowflakeStatement.getQueryID() after calling\nexecuteAsyncQuery() but before the statement finishes executing, the return value could be NULL.\nInstead, call resultSet.unwrap(SnowflakeResultSet.class).getQueryID() on the ResultSet object\nreturned by executeAsyncQuery().",
        "The SnowflakeStatement class provides the setParameter method as a Snowflake extension. This allows\nthe caller to set Snowflake-specific JDBC parameters.",
        "The method is overloaded. Different JDBC parameters require different data types. A method exists for each\nvalid data type that can be passed as the second argument to the function.",
        "This string must contain the name of a pre-defined Snowflake JDBC parameter. The pre-defined\nJDBC parameters (and their valid values or ranges) are listed below:",
        "JDBC Parameter",
        "Notes",
        "MULTI_STATEMENT_COUNT",
        "Integer specifying the number of statements (0 = unlimited number of statements; 1 or higher indicates the exact number of statements that should be executed).",
        "This is the value to assign to the specified JDBC parameter. Make sure that the data type is compatible\nwith the JDBC parameter you specified.",
        "Nothing.",
        "This function can throw SQLException.",
        "This method is a Snowflake extension to the JDBC standard. To use this method, you must unwrap the Statement.",
        "SQLException objects are thrown by JDBC driver methods when an error occurs, and contain information about that error.",
        "Method Name",
        "Description",
        "getErrorCode()",
        "Returns a Snowflake-specific error code.",
        "getMessage()",
        "This returns a string that describes the error.",
        "getSQLState()",
        "Returns the SQLState.",
        "This method returns a custom Snowflake error code.",
        "None.",
        "A Snowflake-specific error code.",
        "See also the getSQLState() method.",
        "This method returns a string that describes the error.",
        "None.",
        "A Snowflake-specific error message.",
        "This method returns a string that contains a 5-character alphanumeric value based on the error.",
        "None.",
        "A Snowflake-specific SQLState. An SQLState is a 5-character alphanumeric string that indicates the\nspecific error that occurred.",
        "Was this page helpful?",
        "On this page"
    ]
}