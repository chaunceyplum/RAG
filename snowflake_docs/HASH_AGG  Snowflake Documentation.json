{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/hash_agg",
    "title": "HASH_AGG | Snowflake Documentation",
    "paragraphs": [
        "Aggregate functions , Window functions",
        "Returns an aggregate signed 64-bit hash value over the (unordered) set of input rows. HASH_AGG never returns NULL, even if no input is provided. Empty input \u201chashes\u201d to 0.",
        "One use for aggregate hash functions is to detect changes to a set of values without comparing the individual old and new values. HASH_AGG can compute a single hash value\nbased on many inputs; almost any change to one of the inputs is likely to result in a change to the output of the HASH_AGG function. Comparing two lists of values typically\nrequires sorting both lists, but HASH_AGG produces the same value regardless of the order of the inputs. Because the values don\u2019t need to be sorted for HASH_AGG,\nperformance is typically much faster.",
        "Note",
        "HASH_AGG is not a cryptographic hash function and should not be used as such.",
        "For cryptographic purposes, use the SHA families of functions (in String & binary functions).",
        "HASH",
        "Aggregate function",
        "Window function",
        "The expression can be a general expression of any Snowflake data type.",
        "You can include additional expressions.",
        "The column to partition on, if you want the result to be split into multiple\nwindows.",
        "Returns an aggregated hash value over all columns for all records, including records with\nNULL values. You can specify the wildcard for both the aggregate function and the window\nfunction.",
        "When you pass a wildcard to the function, you can qualify the wildcard with the name or alias for the table.\nFor example, to pass in all of the columns from the table named mytable, specify the following:",
        "You can also use the ILIKE and EXCLUDE keywords for filtering:",
        "ILIKE filters for column names that match the specified pattern. Only one\npattern is allowed. For example:",
        "EXCLUDE filters out column names that don\u2019t match the specified column or columns. For example:",
        "Qualifiers are valid when you use these keywords. The following example uses the ILIKE keyword to\nfilter for all of the columns that match the pattern col1% in the table mytable:",
        "The ILIKE and EXCLUDE keywords can\u2019t be combined in a single function call.",
        "For this function, the ILIKE and EXCLUDE keywords are valid only in a SELECT list or GROUP BY clause.",
        "For more information about the ILIKE and EXCLUDE keywords, see the \u201cParameters\u201d section in SELECT.",
        "Returns a signed 64-bit value as NUMBER(19,0).",
        "HASH_AGG never returns NULL, even for NULL inputs.",
        "HASH_AGG computes a \u201cfingerprint\u201d over an entire table or query result or window. Any change to the input will\ninfluence the result of HASH_AGG with overwhelming probability. This can be used to quickly detect changes to table\ncontents or query results.",
        "Note that it is possible, though very unlikely, that two different input tables will produce the same result for HASH_AGG. If you need to make sure that two tables or query results which\nproduce the same HASH_AGG result really contain the same data, you must still compare the data for equality (e.g. by using the MINUS operator). For more details, see\nSet operators.",
        "HASH_AGG is not order-sensitive (i.e. the order of rows in an input table or query result does not influence the result of HASH_AGG). However, changing the order of input columns\ndoes change the result.",
        "HASH_AGG hashes individual input rows using the HASH function. The salient features of this function carry over to HASH_AGG. In particular, HASH_AGG is stable in the sense\nthat any two rows which compare equal and which have compatible types are guaranteed to hash to the same value (i.e. they influence the result of HASH_AGG in the same way).",
        "For example, changing the scale and precision of a column that is part of some table, does not change the result of HASH_AGG over that table. See HASH for details.",
        "In contrast to most other aggregate functions, HASH_AGG does not ignore NULL inputs (i.e. NULL inputs influence the result of HASH_AGG).",
        "For both the aggregate function and the window functions, duplicate rows, including duplicate all-NULL rows,\ninfluence the result. The DISTINCT keyword can be used to suppress the effect of duplicate rows.",
        "When this function is called as a window function, it does not support:",
        "An ORDER BY clause within the OVER clause.",
        "Explicit window frames.",
        "No impact.",
        "Two strings that are identical but have different collation specifications have the same hash value. In other words,\nonly the string, not the collation specification, affects the hash value.",
        "Two strings that are different, but compare equal according to a collation, might have a different hash value. For\nexample, two strings that are identical using punctuation-insensitive collation will normally have different hash\nvalues because only the string, not the collation specification, affects the hash value.",
        "This example shows that NULLs are not ignored:",
        "This example shows that empty input hashes to 0:",
        "Use HASH_AGG(*) to conveniently aggregate over all input columns:",
        "This example shows that grouped aggregation is supported:",
        "This example suppresses duplicate rows using DISTINCT (duplicate rows influence results of HASH_AGG):",
        "This example computes the number of days on which the corresponding sets of customers with orders with status not equal 'F' and status not equal 'P', respectively, are identical:",
        "The query doesn\u2019t account for the possibility of hash collisions, so the actual number of days might be slightly lower.",
        "Was this page helpful?",
        "On this page"
    ]
}