{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/reduce",
    "title": "REDUCE | Snowflake Documentation",
    "paragraphs": [
        "Semi-structured and structured data functions (Higher-order)",
        "Reduces an array to a single value based on the logic in a lambda expression.",
        "The REDUCE function takes an array, an initial accumulator value, and a lambda function. It applies the lambda\nfunction to each element of the array, updating the accumulator with each result. After processing all elements,\nREDUCE returns the final accumulator value.",
        "Use lambda functions on data with Snowflake higher-order functions",
        "The array that contains the elements to be reduced. The array can be semi-structured or structured.",
        "The initial accumulator value.",
        "A lambda expression that defines the reduce\nlogic on each array element.",
        "The lambda expression must be specified in the following syntax:",
        "The acc argument is the accumulator, and the value argument is the current element\nbeing processed in the array.",
        "This function can return a value of any data type.",
        "If the input array is empty, then the function returns the initial value of the accumulator.",
        "The function returns NULL in these cases:",
        "The input array is NULL.",
        "The initial value of the accumulator is NULL.",
        "The lambda function returns NULL.",
        "When the data type for a lambda value argument is explicitly specified, the array element is coerced into the specified type\nbefore lambda invocation. For information about coercion, see Data type conversion.",
        "Type checking enforces that the initial value of the accumulator, the accumulator lambda argument, and the return value\nof the lambda execution all have the same logical and physical types. If casting\nis used to meet this requirement, the largest physical type of the three is used.",
        "The value argument can have intermediate NULL values. For an example, see Skip NULL values in an array.",
        "The following examples use the REDUCE function.",
        "Use the REDUCE function to return the sum of the values in an array and specify 0 for the initial\naccumulator value:",
        "This example is the same as the previous example, but it specifies a structured array of type INT:",
        "Use the REDUCE function to return the sum of the values in an array and specify 10 for the initial\naccumulator value:",
        "Use the REDUCE function to return the sum of the square of each value in the array, and specify 0\nfor the initial accumulator value:",
        "In this example, the array argument includes NULL values. When this array is passed to\nthe REDUCE function, the accumulator will have intermediate NULL values.",
        "Use the REDUCE function to return the sum of the values in the array, and use the\nIFNULL function in the logic of the lambda expression to skip\nNULL values in the array. The lambda expression uses the IFNULL function to process each value\nin the array using the following logic:",
        "If acc + val is NULL, then it becomes acc + 0.",
        "If acc + val is not NULL, then it becomes acc + val.",
        "Run the query:",
        "Use the REDUCE function to return a list of string values by concatenating each value\nin the array:",
        "Use the REDUCE function along with the ARRAY_PREPEND function in the logic\nof the lambda expression to return an array that reverses the order of the input array:",
        "Use the REDUCE function along with the IFF function in the logic\nof the lambda expression to perform an action based on conditional logic similar to an if-then\nexpression. This example uses the following logic in the lambda expression:",
        "If the array value is less than seven, then square it and add it to the accumulator.",
        "If the array value is greater than or equal to seven, then add it to the accumulator without\nsquaring it.",
        "Assume you have a table named orders with the columns order_id, order_date, and order_detail. The\norder_detail column is an array of the line items, their purchase quantity, and subtotal. The table contains\ntwo rows of data. The following SQL statement creates this table and inserts the rows:",
        "Use the REDUCE function to return the subtotal sum for all items in each order:",
        "Use the REDUCE function to return a list of the items sold in each order:",
        "Was this page helpful?",
        "On this page"
    ]
}