{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/execute-immediate-from",
    "title": "EXECUTE IMMEDIATE FROM | Snowflake Documentation",
    "paragraphs": [
        "EXECUTE IMMEDIATE FROM executes the SQL statements specified in a file in a stage. The file can contain\nSQL statements or Snowflake Scripting blocks. The statements must be syntactically\ncorrect SQL statements.",
        "You can use the EXECUTE IMMEDIATE FROM command to execute the statements in a file from any Snowflake session.",
        "This feature provides a mechanism to control the deployment and management of your Snowflake objects and code. For example, you can execute\na stored script to create a standard Snowflake environment for all your accounts. The configuration script might include statements\nthat create users, roles, databases, and schemas for every new account.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "EXECUTE IMMEDIATE FROM can also execute a template file using the Jinja2 templating language.\nA template can contain variables and expressions, enabling the use of loops, conditionals, variable substitution, macros, and more.\nTemplates can also include other templates and can import macros defined in other files located on a stage.",
        "For more information about the templating language, see the Jinja2 documentation.",
        "The template file to be executed must be:",
        "A syntactically valid Jinja2 template.",
        "Located in a stage or Git repository.",
        "Able to render syntactically valid SQL statements.",
        "Templating enables more flexible control structures and parameterization using environment variables. For example, you can use\na template to dynamically choose the deployment target of the objects defined in the script. To use a template to render a\nSQL script, use the templating directive or add a\nUSING clause with at least one template variable.",
        "You can use either one of the two templating directives.",
        "The recommended directive uses valid SQL syntax:",
        "Optionally, you can use the alternative directive:",
        "Note",
        "Only a byte order mark and up to 10 whitespace characters (newlines, tabs, spaces) may be placed in front of the directive.\nAny characters that come after the directive on the same line will be ignored.",
        "A template can load other staged files either directly through the\nSnowflakeFile API\nor through Jinja2\u2019s include,\nimport, and\ninteritance features.",
        "Files can be referenced by absolute paths:",
        "Include, import, and extends also support relative paths while the SnowflakeFile API supports scoped Snowflake file URLs:",
        "EXECUTE IMMEDIATE",
        "Where:",
        "Database and/or schema in which the internal or external stage resides, in the form of database_name.schema_name\nor schema_name. The namespace is optional if a database and schema are currently in use for the user session; otherwise,\nit is required.",
        "Name of the internal or external stage.",
        "Case-sensitive path to the file in the stage.",
        "Name of the file to execute. It must contain syntactically correct and valid SQL statements. Each statement must be\nseparated by a semicolon.",
        "Case-sensitive relative path to the file in the stage. Relative paths support established conventions such as a leading /\nto indicate the root of a stage\u2019s file system, ./ to refer to the current directory (the directory the parent file is\nlocated in) and ../ to refer to the parent directory. For more information, see Usage notes.",
        "Name of the file to execute. It must contain syntactically correct and valid SQL statements. Each statement must be\nseparated by a semicolon.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Allows you to pass one or more key-value pairs that can be used to parameterize template expansion. The key-value pairs\nmust form a comma-separated list.",
        "When the USING clause is present, the file is first rendered as a Jinja2 template\nbefore being executed as a SQL script.",
        "Where:",
        "key is the name of the template variable. The template variable name can optionally be enclosed in double quotes\n(\").",
        "value is the value to assign to the variable in the template. String values must be enclosed in ' or\n$$. For an example, see Templating usage notes.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Specifies whether to preview the rendered file without executing it as a SQL script.",
        "TRUE returns the rendered file contents without executing the SQL statements.",
        "FALSE renders SQL statements from the template and executes those statements.",
        "Default: FALSE",
        "EXECUTE IMMEDIATE FROM returns:",
        "The result of the last statement in the file if all statements are successfully executed.",
        "The error message, if any statement in the file failed.",
        "If there is an error in any statement in the file, the EXECUTE IMMEDIATE FROM command fails and returns the error message\nof the failed statement.",
        "Note",
        "If the EXECUTE IMMEDIATE FROM command fails and returns an error message, any statements in the file prior to the failed statement\nhave successfully completed.",
        "The role used to execute the EXECUTE IMMEDIATE FROM command must have the\nUSAGE (external stage) or READ (internal stage) privilege on the stage where the file is located.",
        "The role used to execute the file can only execute the statements in the file for which it has privileges.\nFor example, if there is a CREATE TABLE statement in the file, the role must have the\nnecessary privileges to create a table in the account or the statement fails.",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "For instructions on creating a custom role with a specified set of privileges, see Creating custom roles.",
        "For general information about roles and privilege grants for performing SQL actions on\nsecurable objects, see Overview of Access Control.",
        "The SQL statements in a file to be executed can include EXECUTE IMMEDIATE FROM statements:",
        "Nested EXECUTE IMMEDIATE FROM statements can use relative file paths.",
        "Relative paths are evaluated in respect to the stage and file path of the parent file. If the relative file path starts with\n/, the path starts at the root directory of the stage containing the parent file.",
        "For an example, see Examples.",
        "Relative file paths must be enclosed in single quotes (') or $$.",
        "The maximum execution depth for nested files is 5.",
        "Absolute file paths can optionally be enclosed in single quotes (') or $$.",
        "The file to be executed cannot be larger than 10MB in size.",
        "The file to be executed must be encoded in UTF-8.",
        "The file to be executed must be uncompressed. If you use the PUT command to upload a file to an internal\nstage, you must explicitly set the AUTO_COMPRESS parameter to FALSE.",
        "For example, upload my_file.sql to my_stage:",
        "The execution of all files in a directory is not supported. For example, EXECUTE IMMEDIATE FROM @stage_name/scripts/\nresults in an error.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Variable names in templates are case-sensitive.",
        "The template variable name can be optionally enclosed in double quotes. Enclosing the variable name can be useful if any\nreserved keywords are used as variable names.",
        "The following parameter types are supported in the USING clause:",
        "String. Must be enclosed by ' or $$. For example, USING (a => 'a', b => $$b$$).",
        "Number (decimal and integer). For example, USING (a => 1, b => -1.23).",
        "Boolean. For example, USING (a => TRUE, b => FALSE).",
        "NULL. For example, USING (a => NULL).",
        "Note",
        "The Jinja2 templating engine interprets a NULL value as the Python NoneType type.",
        "Session variables. For example, USING (a => $var). Only session variables holding\nvalues of supported data types are allowed.",
        "Bind variables. For example, USING (a => :var). Only bind variables\nholding values of supported data types are allowed. You can use bind variables to pass stored procedure arguments to a template.",
        "Files on repository stages or in Snowflake Native Apps cannot be accessed from the template.",
        "The maximum result size for template rendering is 100,000 bytes.",
        "Templates are rendered using the Jinja2 version 3.1.4 templating engine.",
        "This section contains some common errors that result from an EXECUTE IMMEDIATE FROM statement and how you can resolve them.",
        "File errors",
        "Stage errors",
        "Access control errors",
        "Templating errors",
        "Error",
        "Cause",
        "There are multiple causes for this error:",
        "The file does not exist.",
        "The file name is the root of a directory. For example @stage_name/scripts/.",
        "Solution",
        "Verify the name of the file and confirm the file exists. Executing all the files in a directory is not supported.",
        "Error",
        "Cause",
        "The statement was executed using a relative file path outside of a file execution.",
        "Solution",
        "A relative file path can only be used in EXECUTE IMMEDIATE FROM statements in a file. Use the\nabsolute file path for the file. For more information, see\nUsage notes.",
        "Error",
        "Cause",
        "The file contains SQL syntax errors.",
        "Solution",
        "Fix the syntax errors in the file and reupload the file to the stage.",
        "Error",
        "Cause",
        "The stage does not exist or you do not have access to the stage.",
        "Solution",
        "Verify the name of the stage and confirm the stage exists.",
        "Execute the statement using a role that has the required privileges to access the stage. For more information, see\nAccess control requirements.",
        "Error",
        "Cause",
        "The role used to execute the statement does not have the privileges required to execute some or all of the statements\nin the file.",
        "Solution",
        "Use a role that has the appropriate privileges to execute the statements in the file. For more information, see\nAccess control requirements.",
        "See also: Stage errors.",
        "Error",
        "Cause",
        "The file contains templating constructs (for example, {{ table_name }}) but is not rendered using the templating engine.\nIf the template is not rendered, the lines of text in the template are executed as SQL statements. The templating constructs\nin the file are likely to result in SQL syntax errors.",
        "Solution",
        "Add a templating directive or re-execute the statement with the\nUSING clause and specify at least one template variable.",
        "Error",
        "Cause",
        "If any variables used in the template are left unspecified in the USING clause, an error occurs.",
        "Solution",
        "Verify the names and number of variables in the template and update the USING clause to include values for all template variables.",
        "Error",
        "Cause",
        "The value for the variable key is an unsupported type.",
        "Solution",
        "Verify that you are using a supported parameter type for the template variable value. For more information, see the\nTemplating usage notes.",
        "Error",
        "Cause",
        "The size of the rendered template exceeds the current limit.",
        "Solution",
        "Split your templated file into multiple smaller templates and add a new script to execute them sequentially,\nwhile passing down template variables to the nested scripts.",
        "This example executes the file create-inventory.sql located in stage my_stage.",
        "Create a file named create-inventory.sql with the following statements:",
        "Create a file named insert-inventory.sql with the following statements:",
        "Create an internal stage my_stage:",
        "Upload both local files to the stage using the PUT command:",
        "Execute the create-inventory.sql script located in my_stage:",
        "Returns:",
        "Create a template file setup.sql with two variables and the templating directive:",
        "Create a stage \u2014 optional if you already have a stage to which you can upload files.",
        "For example, create an internal stage in Snowflake:",
        "Upload the file to your stage.",
        "For example, use the PUT command from your local environment to upload file setup.sql\nto stage my_stage:",
        "Execute the file setup.sql:",
        "Create a template file containing a macro definition.",
        "For example, create a file macros.jinja in your local environment:",
        "Create a template file and add the templating directive (--!jinja2) to the top of the file.",
        "After the templating directive, add an import statement to import the macro defined in the\nfile that you created in the previous step.\nFor example, create a file setup-env.sql in your local environment:",
        "Create a stage \u2014 optional if you already have a stage to which you can upload files.",
        "For example, create an internal stage in Snowflake:",
        "Upload the file to your stage.",
        "For example, use the PUT command from your local environment to upload the files\nsetup-env.sql and macros.jinja to the stage my_stage:",
        "Preview the SQL statements rendered by the template to check for any problems with your Jinja2 code:",
        "Returns:",
        "Execute the file setup-env.sql:",
        "Was this page helpful?",
        "On this page"
    ]
}