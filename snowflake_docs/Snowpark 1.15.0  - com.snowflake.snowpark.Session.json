{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/scala/com/snowflake/snowpark/Session.html#generator(rowCount:Long,col:com.snowflake.snowpark.Column,cols:com.snowflake.snowpark.Column*):com.snowflake.snowpark.DataFrame",
    "title": "Snowpark 1.15.0  - com.snowflake.snowpark.Session",
    "paragraphs": [
        "This package contains all Snowpark logical types.",
        "This package contains all Snowpark logical types.",
        "0.1.0",
        "com\n        \n        .\n        \n         snowflake\n        \n        .\n        \n         snowpark",
        "Establishes a connection with a Snowflake database and provides methods for creating DataFrames\nand accessing objects for working with files in stages.",
        "When you create a\n         \n          Session\n         \n         object, you provide configuration settings to establish a\nconnection with a Snowflake database (e.g. the URL for the account, a user name, etc.). You can\nspecify these settings in a configuration file or in a Map that associates configuration\nsetting names with values.",
        "To create a Session from a file:",
        "To create a Session from a map of configuration properties:",
        "Session contains functions to construct\n         \n          DataFrame\n         \n         s like\n         \n          Session.table\n         \n         ,\n         \n          Session.sql\n         \n         , and\n         \n          Session.read",
        "0.1.0",
        "Registers a file in stage or a local file as a dependency of a user-defined function (UDF).",
        "Registers a file in stage or a local file as a dependency of a user-defined function (UDF).",
        "The local file can be a JAR file, a directory, or any other file resource.\nIf you pass the path to a local file to\n              \n               addDependency\n              \n              , the Snowpark library uploads\nthe file to a temporary stage and imports the file when executing a UDF.",
        "If you pass the path to a file in a stage to\n              \n               addDependency\n              \n              , the file is included in\nthe imports when executing a UDF.",
        "Note that in most cases, you don't need to add the Snowpark JAR file and the JAR file (or\ndirectory) of the currently running application as dependencies. The Snowpark library\nautomatically attempts to detect and upload these JAR files. However, if this automatic\ndetection fails, the Snowpark library reports this in an error message, and you must add these\nJAR files explicitly by calling\n              \n               addDependency\n              \n              .",
        "The following example demonstrates how to add dependencies on local files and files in a stage:",
        "Path to a local directory, local file, or file in a stage.",
        "0.1.0",
        "Cancel all action methods that are running currently.",
        "Cancel all action methods that are running currently. This does not affect on any action\nmethods called in the future.",
        "0.5.0",
        "Close this session.",
        "Close this session.",
        "0.7.0",
        "Returns an\n            \n             AsyncJob\n            \n            object that you can use to track the status and get the results of\nthe asynchronous query specified by the query ID.",
        "Returns an\n              \n               AsyncJob\n              \n              object that you can use to track the status and get the results of\nthe asynchronous query specified by the query ID.",
        "For example, create an AsyncJob by specifying a valid\n              \n               <query_id>\n              \n              , check whether\nthe query is running or not, and get the result rows.",
        "A valid query ID",
        "An\n               \n                AsyncJob\n               \n               object",
        "0.11.0",
        "Creates a new DataFrame that uses the specified schema and contains the specified\n            \n             Row\n            \n            objects.",
        "Creates a new DataFrame that uses the specified schema and contains the specified\n              \n               Row\n              \n              objects.",
        "For example, the following code creates a DataFrame containing two columns of the types\n              \n               int\n              \n              and\n              \n               string\n              \n              with two rows of data:",
        "For example",
        "An array of\n               \n                Row\n               \n               objects representing rows of data.",
        "StructType\n               \n               representing the schema for the DataFrame.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Creates a new DataFrame that uses the specified schema and contains the specified\n            \n             Row\n            \n            objects.",
        "Creates a new DataFrame that uses the specified schema and contains the specified\n              \n               Row\n              \n              objects.",
        "For example, the following code creates a DataFrame containing three columns of the types\n              \n               int\n              \n              ,\n              \n               string\n              \n              , and\n              \n               variant\n              \n              with a single row of data:",
        "A sequence of\n               \n                Row\n               \n               objects representing rows of data.",
        "StructType\n               \n               representing the schema for the DataFrame.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Creates a new DataFrame containing the specified values.",
        "Creates a new DataFrame containing the specified values. Currently, you can use values of the\nfollowing types:",
        "If you want to create a DataFrame by calling the\n              \n               toDF\n              \n              method of a\n              \n               Seq\n              \n              object,\nimport\n              \n               session.implicits._\n              \n              , where\n              \n               session\n              \n              is an object of the\n              \n               Session\n              \n              class that you\ncreated to connect to the Snowflake database. For example:",
        "DataType",
        "A sequence in which each element represents a row of values in the DataFrame.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a\n            \n             FileOperation\n            \n            object that you can use to perform file operations on stages.",
        "Returns a\n              \n               FileOperation\n              \n              object that you can use to perform file operations on stages.\nFor example:",
        "0.4.0",
        "Creates a new DataFrame by flattening compound values into multiple rows.",
        "Creates a new DataFrame by flattening compound values into multiple rows.",
        "for example:",
        "The expression that will be unseated into rows.\n             The expression must be of data type VARIANT, OBJECT, or ARRAY.",
        "The path to the element within a VARIANT data structure which\n            needs to be flattened. Can be a zero-length string\n            (i.e. empty path) if the outermost element is to be flattened.",
        "If\n               \n                false\n               \n               , any input rows that cannot be expanded,\n             either because they cannot be accessed in the path or because\n             they have zero fields or entries, are completely omitted from\n             the output. Otherwise, exactly one row is generated for\n             zero-row expansions (with NULL in the KEY, INDEX, and VALUE columns).",
        "If\n               \n                false\n               \n               , only the element referenced by PATH is expanded.\n                 Otherwise, the expansion is performed for all sub-elements\n                 recursively.",
        "Specifies which types should be flattened (\n               \n                \"OBJECT\"\n               \n               ,\n               \n                \"ARRAY\"\n               \n               , or\n               \n                \"BOTH\"\n               \n               ).",
        "0.2.0",
        "Creates a new DataFrame by flattening compound values into multiple rows.",
        "Creates a new DataFrame by flattening compound values into multiple rows.",
        "For example:",
        "The expression that will be unseated into rows.\n             The expression must be of data type VARIANT, OBJECT, or ARRAY.",
        "A\n               \n                DataFrame\n               \n               .",
        "0.2.0",
        "Creates a new DataFrame via Generator function.",
        "Creates a new DataFrame via Generator function.",
        "For example:",
        "The row count of the result DataFrame.",
        "the column of the result DataFrame",
        "A list of columns excepts the first column",
        "A\n               \n                DataFrame",
        "0.11.0",
        "Creates a new DataFrame via Generator function.",
        "Creates a new DataFrame via Generator function.",
        "For example:",
        "The row count of the result DataFrame.",
        "the column list of the result DataFrame",
        "A\n               \n                DataFrame",
        "0.11.0",
        "Returns the name of the current database for the JDBC session attached to this session.",
        "Returns the name of the current database for the JDBC session attached to this session.",
        "For example, if you change the current database by executing the following code:",
        "the method returns\n              \n               newDB\n              \n              .",
        "The name of the current database for this session.",
        "0.1.0",
        "Returns the name of the current schema for the JDBC session attached to this session.",
        "Returns the name of the current schema for the JDBC session attached to this session.",
        "For example, if you change the current schema by executing the following code:",
        "the method returns\n              \n               newSchema\n              \n              .",
        "Current schema in session.",
        "0.1.0",
        "Returns the name of the default database configured for this session in\n            \n             Session.builder\n            \n            .",
        "Returns the name of the default database configured for this session in\n              \n               Session.builder\n              \n              .",
        "The name of the default database",
        "0.1.0",
        "Returns the name of the default schema configured for this session in\n            \n             Session.builder\n            \n            .",
        "Returns the name of the default schema configured for this session in\n              \n               Session.builder\n              \n              .",
        "The name of the default schema",
        "0.1.0",
        "Returns the list of URLs for all the dependencies that were added for user-defined functions\n(UDFs).",
        "Returns the list of URLs for all the dependencies that were added for user-defined functions\n(UDFs). This list includes any JAR files that were added automatically by the library.",
        "Set[URI]",
        "0.1.0",
        "Returns a Java Set of URLs for all the dependencies that were added for user-defined functions\n(UDFs).",
        "Returns a Java Set of URLs for all the dependencies that were added for user-defined functions\n(UDFs). This list includes any JAR files that were added automatically by the library.",
        "0.2.0",
        "Returns the fully qualified name of the current schema for the session.",
        "Returns the fully qualified name of the current schema for the session.",
        "The fully qualified name of the schema",
        "0.2.0",
        "Returns the query tag that you set by calling\n            \n             setQueryTag\n            \n            .",
        "Returns the query tag that you set by calling\n              \n               setQueryTag\n              \n              .",
        "0.1.0",
        "Get the session information.",
        "Get the session information.",
        "0.11.0",
        "Returns the name of the temporary stage created by the Snowpark library for uploading and\nstore temporary artifacts for this session.",
        "Returns the name of the temporary stage created by the Snowpark library for uploading and\nstore temporary artifacts for this session. These artifacts include classes for UDFs that you\ndefine in this session and dependencies that you add when calling\n              \n               addDependency\n              \n              .",
        "The name of stage.",
        "0.1.0",
        "Returns the JDBC\n            \n             Connection\n            \n            object used for the connection to the Snowflake database.",
        "Returns the JDBC\n              \n               Connection\n              \n              object used for the connection to the Snowflake database.",
        "JDBC Connection object",
        "Creates a new DataFrame from a range of numbers.",
        "Creates a new DataFrame from a range of numbers.\nThe resulting DataFrame has the column name \"ID\" and a row for each number in the sequence.",
        "Start of the range.",
        "End of the range.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Creates a new DataFrame from a range of numbers starting from 0.",
        "Creates a new DataFrame from a range of numbers starting from 0.\nThe resulting DataFrame has the column name \"ID\" and a row for each number in the sequence.",
        "End of the range.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Creates a new DataFrame from a range of numbers.",
        "Creates a new DataFrame from a range of numbers.\nThe resulting DataFrame has the column name \"ID\" and a row for each number in the sequence.",
        "Start of the range.",
        "End of the range.",
        "Step function for producing the numbers in the range.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a\n            \n             DataFrameReader\n            \n            that you can use to read data from various supported sources\n(e.g.",
        "Returns a\n              \n               DataFrameReader\n              \n              that you can use to read data from various supported sources\n(e.g. a file in a stage) as a DataFrame.",
        "A\n               \n                DataFrameReader",
        "0.1.0",
        "Removes a path from the set of dependencies.",
        "Removes a path from the set of dependencies.",
        "Path to a local directory, local file, or file in a stage.",
        "0.1.0",
        "Sets a query tag for this session.",
        "Sets a query tag for this session. You can use the query tag to find all queries run for this\nsession.",
        "If not set, the default value of query tag is the Snowpark library call and the class and\nmethod in your code that invoked the query (e.g.\n              \n               com.snowflake.snowpark.DataFrame.collect Main$.main(Main.scala:18)\n              \n              ).",
        "String to use as the query tag for this session.",
        "0.1.0",
        "Returns a\n            \n             SProcRegistration\n            \n            object that you can use to register Stored Procedures.",
        "Returns a\n              \n               SProcRegistration\n              \n              object that you can use to register Stored Procedures.\nFor example:",
        "1.8.0",
        "Returns a new DataFrame representing the results of a SQL query.",
        "Returns a new DataFrame representing the results of a SQL query.",
        "You can use this method to execute an arbitrary SQL statement.",
        "The SQL statement to execute.",
        "for bind variables in SQL statement.",
        "A\n               \n                DataFrame",
        "1.15.0",
        "Returns a new DataFrame representing the results of a SQL query.",
        "Returns a new DataFrame representing the results of a SQL query.",
        "You can use this method to execute an arbitrary SQL statement.",
        "The SQL statement to execute.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Creates a new DataFrame from the given Stored Procedure and arguments.",
        "Creates a new DataFrame from the given Stored Procedure and arguments.",
        "The stored procedures object, can be created by\n               \n                Session.sproc.register\n               \n               methods.",
        "The arguments of the given stored procedure",
        "1.8.0",
        "Creates a new DataFrame from the given Stored Procedure and arguments.",
        "Creates a new DataFrame from the given Stored Procedure and arguments.",
        "The name of stored procedures.",
        "The arguments of the given stored procedure",
        "1.8.0",
        "Returns an Updatable that points to the specified table.",
        "Returns an Updatable that points to the specified table.",
        "An array of strings that specify the database name, schema name,\n                           and table name.",
        "0.7.0",
        "Returns an Updatable that points to the specified table.",
        "Returns an Updatable that points to the specified table.",
        "A list of strings that specify the database name, schema name,\n                           and table name.",
        "A\n               \n                Updatable",
        "0.2.0",
        "Returns an Updatable that points to the specified table.",
        "Returns an Updatable that points to the specified table.",
        "A sequence of strings that specify the database name, schema name,\n                           and table name (e.g.\n               \n                Seq(\"database_name\", \"schema_name\", \"table_name\")\n               \n               ).",
        "A\n               \n                Updatable",
        "0.1.0",
        "Returns an Updatable that points to the specified table.",
        "Returns an Updatable that points to the specified table.",
        "name\n              \n              can be a fully qualified identifier and must conform to the\nrules for a Snowflake identifier.",
        "Table name that is either a fully qualified name\n            or a name in the current database/schema.",
        "A\n               \n                Updatable",
        "0.1.0",
        "Creates a new DataFrame from the given table function.",
        "Creates a new DataFrame from the given table function.",
        "Example",
        "Table function object, can be created from TableFunction class or\n            referred from the built-in list from tableFunctions.",
        "1.10.0",
        "Creates a new DataFrame from the given table function and arguments.",
        "Creates a new DataFrame from the given table function and arguments.",
        "Example",
        "Table function object, can be created from TableFunction class or\n            referred from the built-in list from tableFunctions.",
        "function arguments map of the given table function.\n             Some functions, like flatten, have named parameters.\n             use this map to assign values to the corresponding parameters.",
        "0.4.0",
        "Creates a new DataFrame from the given table function and arguments.",
        "Creates a new DataFrame from the given table function and arguments.",
        "Example",
        "Table function object, can be created from TableFunction class or\n            referred from the built-in list from tableFunctions.",
        "function arguments of the given table function.",
        "0.4.0",
        "Creates a new DataFrame from the given table function and arguments.",
        "Creates a new DataFrame from the given table function and arguments.",
        "Example",
        "Table function object, can be created from TableFunction class or\n             referred from the built-in list from tableFunctions.",
        "the first function argument of the given table function.",
        "all remaining function arguments.",
        "0.4.0",
        "Returns a\n            \n             UDFRegistration\n            \n            object that you can use to register UDFs.",
        "Returns a\n              \n               UDFRegistration\n              \n              object that you can use to register UDFs.\nFor example:",
        "0.1.0",
        "Returns a\n            \n             UDTFRegistration\n            \n            object that you can use to register UDTFs.",
        "Returns a\n              \n               UDTFRegistration\n              \n              object that you can use to register UDTFs.\nFor example:",
        "1.2.0",
        "Unset query_tag parameter for this session.",
        "Unset query_tag parameter for this session.",
        "If not set, the default value of query tag is the Snowpark library call and the class and\nmethod in your code that invoked the query (e.g.\n              \n               com.snowflake.snowpark.DataFrame.collect Main$.main(Main.scala:18)\n              \n              ).",
        "0.10.0",
        "Updates the query tag that is a JSON encoded string for the current session.",
        "Updates the query tag that is a JSON encoded string for the current session.",
        "Keep in mind that assigning a value via\n              \n               setQueryTag\n              \n              will remove any current query tag\nstate.",
        "Example 1:",
        "Example 2:",
        "Example 3:",
        "A JSON encoded string that provides updates to the current query tag.",
        "1.13.0",
        "SnowparkClientException\n                 \n\n                If the provided query tag or the query tag of the current\n                                session are not valid JSON strings; or if it could not\n                                serialize the query tag into a JSON string.",
        "Provides implicit methods for convert Scala objects to Snowpark DataFrame and Column objects.",
        "Provides implicit methods for convert Scala objects to Snowpark DataFrame and Column objects.",
        "To use this, import\n              \n               session.implicits._\n              \n              :",
        "After you import this, you can call the\n              \n               toDF\n              \n              method of a\n              \n               Seq\n              \n              to convert a\nsequence to a DataFrame:",
        "You can also refer to columns in DataFrames by using\n              \n               $\"colName\"\n              \n              and\n              \n               'colName\n              \n              :",
        "0.1.0"
    ]
}