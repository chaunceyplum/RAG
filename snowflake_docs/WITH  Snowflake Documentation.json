{
    "url": "https://docs.snowflake.com/en/sql-reference/constructs/with",
    "title": "WITH | Snowflake Documentation",
    "paragraphs": [
        "Query syntax",
        "The WITH clause is an optional clause that precedes the body of the SELECT statement, and defines one\nor more CTEs (common table expressions) that can be used later in the statement. For example,\nCTEs can be referenced in the FROM clause.",
        "Note",
        "You can use a WITH clause when creating and calling an anonymous procedure similar to a stored procedure. That clause modifies\na CALL command rather than a SELECT command. For more information, see CALL (with anonymous procedure).",
        "The WITH clause is used with machine learning model objects to create an alias to a specific version of the model,\nwhich can then be used to call the methods of that version. See Model methods.",
        "CONNECT BY, Model commands",
        "Subquery:",
        "Recursive CTE:",
        "Where:",
        "The CTE name must follow the rules for views and similar object identifiers.",
        "The names of the columns in the CTE (common table expression).",
        "The columns used in the anchor clause for the recursive CTE. The columns in this list must\ncorrespond to the columns defined in cte_column_list.",
        "The columns used in the recursive clause for the recursive CTE. The columns in this list must\ncorrespond to the columns defined in cte_column_list.",
        "For more details, see Anchor Clause and Recursive Clause (in this topic). For a detailed\nexplanation of how the anchor clause and recursive clause work together, see\nWorking with CTEs (Common Table Expressions).",
        "A WITH clause can refer recursively to itself, and to other CTEs that appear earlier in the same clause. For instance,\ncte_name2 can refer to cte_name1 and itself, while cte_name1 can refer to itself, but not to\ncte_name2.",
        "You can mix recursive and non-recursive (iterative and non-iterative) CTE clauses in the WITH clause. The CTE clauses should\nbe ordered such that, if a CTE needs to reference another CTE, the CTE to be referenced should be defined earlier in the\nstatement (e.g. the second CTE can refer to the first CTE, but not vice versa).",
        "The CTEs do not need to be listed in order based on whether they are recursive or not. For example, a non-recursive CTE can\nbe listed immediately after the keyword RECURSIVE, and a recursive CTE can come after that non-recursive CTE.",
        "Within a recursive CTE, either the anchor clause or the recursive clause (or both) can refer to another CTE(s).",
        "For recursive CTEs, the cte_column_list is required.",
        "For non-recursive CTEs, the cte_column_list is optional.",
        "Make sure to use UNION ALL, not UNION, in a recursive CTE.",
        "The keyword RECURSIVE is optional.",
        "CTEs can be recursive whether or not RECURSIVE was specified.",
        "You can use the keyword RECURSIVE even if no CTEs are recursive.",
        "If RECURSIVE is used, it must be used only once, even if more than one CTE is recursive.",
        "Although SQL statements work properly with or without the keyword RECURSIVE, using the keyword properly makes the\ncode easier to understand and maintain. Snowflake recommends using the keyword RECURSIVE if one or more CTEs are\nrecursive, and Snowflake strongly recommends omitting the keyword if none of the CTEs are recursive.",
        "Attention",
        "When using a recursive CTE, it is possible to create a query that goes into an infinite loop and consumes credits until the\nquery succeeds, the query times out (e.g. exceeds the number of seconds specified by the\nSTATEMENT_TIMEOUT_IN_SECONDS parameter), or you cancel the query.",
        "For information on how infinite loops can occur and for guidelines on how to avoid this problem, see\nTroubleshooting a Recursive CTE.",
        "For example, to limit the number of iterations to less than 10:",
        "The Snowflake implementation of recursive CTEs does not support the following keywords that some other systems support:",
        "SEARCH DEPTH FIRST BY ...",
        "CYCLE ... SET ...",
        "The anchor clause in a recursive CTE is a SELECT statement.",
        "The anchor clause is executed once during the execution of the statement in which it is embedded; it runs before the\nrecursive clause and generates the first set of rows from the recursive CTE. These rows are not only included in the output\nof the query, but also referenced by the recursive clause.",
        "The anchor clause can contain any SQL construct allowed in a SELECT clause. However, the anchor clause cannot reference\ncte_name1; only the recursive clause can reference cte_name1.",
        "Although the anchor clause usually selects from the same table as the recursive clause, this is not required. The anchor\nclause can select from any table-like data source, including another table, a view, a UDTF, or a constant value.",
        "The anchor clause selects a single \u201clevel\u201d of the hierarchy, typically the top level, or the highest level of interest. For\nexample, if the query is intended to show the \u201cparts explosion\u201d of a car, the anchor clause returns the highest level component,\nwhich is the car itself.",
        "The output from the anchor clause represents one layer of the hierarchy, and this layer is stored as the content of the \u201cview\u201d\nthat is accessed in the first iteration of the recursive clause.",
        "The recursive clause is a SELECT statement. This SELECT is restricted to projections, filters, and\njoins (inner joins and outer joins in which the recursive reference is on the preserved side of the outer join). The recursive\nclause cannot contain:",
        "Aggregate or window functions,",
        "GROUP BY, ORDER BY, LIMIT, or DISTINCT.",
        "The recursive clause can (and usually does) reference the cte_name1 as though the CTE were a table or view.",
        "The recursive clause usually includes a JOIN that joins the table that was used in the anchor clause to the CTE. However, the\nJOIN can join more than one table or table-like data source (view, etc.).",
        "The first iteration of the recursive clause starts with the data from the anchor clause. That data is then joined to the other\ntable(s) in the FROM clause of the recursive clause.",
        "Each subsequent iteration starts with the data from the previous iteration.",
        "You can think of the CTE clause or \u201cview\u201d as holding the contents from the previous iteration, so that those contents are available\nto be joined. Note that during any one iteration, the CTE contains only the contents from the previous iteration, not the results accumulated\nfrom all previous iterations. The accumulated results (including from the anchor clause) are\nstored in a separate place.",
        "There are three column lists in a recursive CTE:",
        "cte_column_list",
        "anchor_column_list (in the anchor clause)",
        "recursive_column_list (in the recursive clause)",
        "A recursive CTE can contain other column lists (e.g. in a subquery), but these three column lists must be present.",
        "These three column lists must all correspond to each other.",
        "In pseudo-code, this looks similar to:",
        "Columns X and related_to_X must correspond; the anchor clause generates the initial \u201ccontents\u201d of the \u201cview\u201d that the\nCTE represents, so each column from the anchor clause (e.g. column related_to_x) must generate output that will belong in\nthe corresponding column of the CTE (e.g. column X).",
        "Columns also_related_to_X and X must correspond; on each iteration of the recursive clause, the output of that clause\nbecomes the new content of the CTE/view for the next iteration.",
        "Also, columns related_to_X and also_related_to_X must correspond because they are each on one side of the UNION ALL\noperator, and the columns on each side of a UNION ALL operator must correspond.",
        "This section provides sample queries and sample output. To keep the examples short, the code omits the statements to create\nand load the tables.",
        "This first example uses a simple WITH clause as a view to extract a subset of data, in this case the music albums that were\nreleased in 1976. For this small database, the query output is the albums \u201cAmigos\u201d and \u201cLook Into The Future\u201d, both from the\nyear 1976:",
        "This next example uses a WITH clause with an earlier WITH clause; the CTE named journey_album_info_1976 uses the CTE named\nalbum_info_1976. The output is the album \u201cLook Into The Future\u201d, with the name of the band:",
        "This example lists musicians who played on Santana albums and Journey albums. This example does not use the WITH clause.\nFor this query (and the next few queries, all of which are equivalent ways of running the same query), the output is the IDs and\nnames of musicians who played on Santana albums and Journey albums:",
        "As you can see, the previous query contains duplicate code. The next few examples show how to simplify this query by using\none or more explicit views, and then how to simplify it by using CTEs.",
        "This query shows how to use views to reduce the duplication and complexity of the previous example (as in the previous example,\nthis does not use a WITH clause):",
        "With this view, you can re-write the original query as:",
        "This example uses a WITH clause to do the equivalent of what the preceding query did:",
        "These statements create more granular views (this example does not use a WITH clause):",
        "List the albums by a particular band:",
        "List the musicians who played on albums:",
        "Now use those views to query musicians who played on both Santana and Journey albums:",
        "These statements create more granular implicit views (this example uses a WITH clause):",
        "This is a basic example of using a recursive CTE to generate a Fibonacci series:",
        "This example is a query with a recursive CTE that shows a \u201cparts explosion\u201d for an automobile:",
        "For more examples, see Working with CTEs (Common Table Expressions).",
        "Was this page helpful?",
        "On this page"
    ]
}