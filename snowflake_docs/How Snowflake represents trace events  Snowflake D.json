{
    "url": "https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-how-events-work",
    "title": "How Snowflake represents trace events | Snowflake Documentation",
    "paragraphs": [
        "Internally, Snowflake uses the OpenTelemetry data model to represent trace events inside an object called a span. A span\ndescribes an operation, such as the invocation of a stored procedure or the execution of a UDF over a set of rows. A span includes the\nstart time and end time of the operation.",
        "Tip",
        "For guidelines to keep in mind when adding trace events, see General guidelines for adding trace events.",
        "For a stored procedure or UDF, Snowflake may execute it in parallel when it is called, where each parallel execution unit executes on a different\nset of rows. Any trace events that are emitted are scoped to their execution unit and are wrapped inside the same span.",
        "For a Streamlit app, each user session is captured in a single span.",
        "Trace events are emitted only after their execution unit completes. If the execution unit fails before completion, trace events from that\nexecution unit are not guaranteed to be emitted.",
        "Trace events from different execution units are stored in separate rows of the event table (in other words, in different spans).",
        "Note",
        "Because UDFs are applied per input table row, calls to trace event APIs in your UDF are executed for each input table row. Adding a trace\nevent for every row is inadvisable in most cases. There is a limit of 128 events per execution unit.",
        "The following example illustrates how you can emit events from handler code. It also shows how the generated event data is stored in an\nevent table.",
        "The Java code in the following example illustrates how you can add events to a span, along with attribute data. For more information about\nAPIs for handler languages, see Event tracing from handler code.",
        "After the function or procedure executes successfully, Snowflake renders the OpenTelemetry span object as objects in columns of the\nevent table, as shown in the following tables.",
        "A span can have its own attributes. Since a span represents a stored procedure and UDF execution unit, you might find it useful to set\nspan-level attributes for later data analysis. For more information about how to set span attributes, see the content\nspecific to the language in which you\u2019re writing handler code. For a list of these languages, see Event tracing from handler code.",
        "A span can hold a maximum number of 128 trace events and a maximum number of 128 span attributes.",
        "If the number of trace events exceeds the limit, events are dropped as follows, depending on the handler language:",
        "For Python handlers, events are dropped in the order in which they were added (in other words, in first-in-first-out order).",
        "For handlers written in Java, JavaScript, Scala, and Snowflake Scripting, new events are dropped once the limit has been reached.",
        "If the number of span attributes exceeds the limit, no more span attributes can be added.",
        "Note",
        "As of November 2022, all dropped_*_count keys are not set for JavaScript because the OpenTelemetry JavaScript Tracing SDK does\nnot report on dropped counts.",
        "Description",
        "Data",
        "Span recorded by Snowflake for the execution of the procedure containing the handler code.",
        "Start timestamp from the START_TIMESTAMP column:",
        "2023-03-21 23:12:06.231",
        "Finish timestamp from the TIMESTAMP column:",
        "2023-03-21 23:12:06.944",
        "Data from the RECORD column:",
        "Attributes added by handler code for the span.",
        "Data from the RECORD_ATTRIBUTES column:",
        "The span contains a list of trace events with timestamps that capture when the trace\nevents were added. Not shown here: The span has a trace_id which is the query ID without dashes. The span also has system-generated\nvalues for the span_id and name keys. Events that are part of the span share the same span_id.",
        "The following data was recorded for the event testEvent.",
        "Description",
        "Data",
        "Event name",
        "Timestamp from the TIMESTAMP column:",
        "2023-03-21 23:12:06.939",
        "Data from the RECORD column:",
        "The following data recorded for the event testEventWithAttributes.",
        "Description",
        "Data",
        "Event name",
        "Timestamp from the TIMESTAMP column:",
        "2023-03-21 23:12:06.940",
        "Data from the RECORD column:",
        "Event attributes",
        "Data from the RECORD_ATTRIBUTES column:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}