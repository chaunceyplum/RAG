{
    "url": "https://docs.snowflake.com/en/developer-guide/jdbc/jdbc-configure",
    "title": "Configuring the JDBC Driver | Snowflake Documentation",
    "paragraphs": [
        "This topic describes how to configure the JDBC driver, including how to\nconnect to Snowflake using the driver.",
        "Note",
        "The connection parameters are now documented in the JDBC Driver connection parameter reference.",
        "Use net.snowflake.client.jdbc.SnowflakeDriver as the driver class in your JDBC application.",
        "Note",
        "Don\u2019t reference any other Snowflake classes or methods in your application code as they are subject to change in the future to implement improvements and fixes.",
        "The previous driver class, com.snowflake.client.jdbc.SnowflakeDriver, is still supported but is deprecated (i.e. it will be removed in a future release, TBD).\nAs such, any code that references the previous class name will continue to work, but you should update the code to reference the new class name now that the\nchange has been implemented.",
        "Important",
        "Beginning with Snowflake version 8.24, network administrators have the option to require multi-factor authentication (MFA) for all connections to Snowflake. If your administrator decides to enable this feature, you must configure your client or driver to use MFA when connecting to Snowflake. For more information, see the following resources:",
        "8.24 release notes",
        "Multi-factor authentication (MFA)",
        "Troubleshooting service users authentication issues with Snowflake MFA Knowledge Base article",
        "Using the JDBC driver to connect to Snowflake requires a connection string with the following syntax.",
        "Note",
        "You cannot set the SEARCH_PATH parameter within a JDBC client connection string. You must\nestablish a session before setting a search path.",
        "Note",
        "For documentation on individual connection parameters, see the JDBC Driver connection parameter reference.",
        "Specifies the account identifier for your Snowflake account. For details, see Configuring a client, driver, library, or third-party application to connect to Snowflake.\nFor examples of the account identifier used in a JDBC connection string, see Examples.",
        "Specifies a series of one or more JDBC connection parameters\nand session parameters, in the form of <param>=<value>, with\neach parameter separated by the ampersand character (&), and no spaces anywhere in the connection string.",
        "If you need to set parameter values that use spaces, ampersands (&), equals signs (=), or other special characters, you\nshould URL-encode the special characters. For example, if you need to\nspecify a value that contains a space, ampersand, and equals sign in the query_tag session parameter:",
        "encode the space as %20, the ampersand as %26, and the equals sign as %3D:",
        "As an alternative, rather than specifying these parameters in the connection string, you can set these parameters in a\nProperties object that you pass to the DriverManager.getConnectionIO method.",
        "Note",
        "For documentation on individual connection parameters, see the JDBC Driver connection parameter reference.",
        "Any session parameter can be included in the connection string. For example:",
        "Specifies the timeout, in seconds, to wait for a successful authentication from an external browser.",
        "Default is 120.",
        "Specifies whether to enable out-of-band telemetry.",
        "Default is true.",
        "Specifies whether to keep the current session active after a period of inactivity, or to force the user to login again. If the value is true, Snowflake keeps the session active indefinitely,\neven if there is no activity from the user. If the value is false, the user must log in again after four hours of inactivity.",
        "Default is false.",
        "Specifies the number of seconds (900-3600) in-between client attempts to update the token for the session.",
        "Default is 3600.",
        "For descriptions of all the session parameters, see Parameters.",
        "The following is an example of the connection string that uses the\naccount name as an identifier for the account myaccount in the organization\nmyorganization.",
        "The following is an example of a connection string that uses the account locator\nxy12345 as the account identifier:",
        "Note that this example uses an account in the AWS US West (Oregon) region. If the account is in a different region or if the\naccount uses a different cloud provider, you need to\nspecify additional segments after the account locator.",
        "The JDBC driver lets you add connection definitions to a connections.toml configuration file.\nA connection definition refers to a collection of connection-related parameters. The driver currently supports TOML version 1.0.0.",
        "For more information about toml file formats, see TOML (Tom\u2019s Obvious Minimal Language).",
        "The connection string prefix: jdbc:snowflake:auto tells the driver to look for the connection configuration within the predefined (default) files.\nThe JDBC driver looks for the connections.toml file in the following locations, in order:",
        "If a ~/.snowflake directory exists on your machine, Snowflake CLI uses the\n~/.snowflake/connections.toml file.",
        "Location specified in the SNOWFLAKE_HOME environment variable.",
        "Otherwise, Snowflake CLI uses the connections.toml file in the one of the following locations, based on your operating system:",
        "Linux: ~/.config/snowflake/connections.toml, but you can update it with XDG vars",
        "Windows: %USERPROFILE%\\AppData\\Local\\snowflake\\connections.toml",
        "Mac: ~/Library/Application Support/snowflake/connections.toml",
        "If you want to switch between multiple existing connections, you can configure them in the connections.toml file. The default key is default, but you change the name of the default connection by setting the SNOWFLAKE_DEFAULT_CONNECTION_NAME shell environment variable.",
        "The following sample connections.toml files defines two connections:",
        "If you have configured Snowflake to use single sign-on (SSO), you can configure\nyour client application to use SSO for authentication. See Using SSO with client applications that connect to Snowflake for details.",
        "Snowflake supports caching MFA tokens, including combining MFA token caching with SSO.",
        "For more information, see Using MFA token caching to minimize the number of prompts during authentication \u2014 optional.",
        "The Snowflake JDBC driver supports key pair authentication and key rotation. This authentication method requires a 2048-bit (minimum) RSA key pair.",
        "To start, complete the initial configuration for key pair authentication as shown in Key-pair authentication and key-pair rotation.",
        "Next, choose one of the following three options to configure either the JDBC connection properties or the JDBC connection string.",
        "Specify the private key via the privateKey property in the connection properties.",
        "Specify the private key file name and password for that file as separate properties in the connection properties.",
        "Specify the private key file name and password for that file as part of the connection string.",
        "These options are described in more detail in the next three sections.",
        "This section provides an example of setting the privateKey property to a private key in a file.",
        "This example uses the Bouncy Castle Crypto APIs. In order to compile and run this\nexample, you must include the following JAR files in your classpath:",
        "the provider JAR file (bcprov-jdkversions.jar)",
        "the PKIX / CMS / EAC / PKCS / OCSP / TSP / OPENSSL JAR file (bcpkix-jdkversions.jar)",
        "where versions specifies the versions of the JDK that the JAR file supports.",
        "To use this example:",
        "Copy the sample code below, and replace the following placeholder values:",
        "Placeholder",
        "Description",
        "path/rsa_key.p8",
        "Set this to the path and name of the private key file that you generated earlier.",
        "private_key_passphrase",
        "If you generated an encrypted key, implement the getPrivateKeyPassphrase() method to return the passphrase for decrypting that key.",
        "account_identifier",
        "Set this to your account identifier.",
        "user",
        "Set this to your Snowflake login name.",
        "database_name",
        "Set this to the name of the database that you want to use.",
        "schema_name",
        "Set this to the name of schema that you want to use.",
        "warehouse_name",
        "Set this to the name of warehouse that you want to use.",
        "role",
        "Set this to the name of role that you want to use.",
        "Compile and run the sample code. Include the Bouncy Castle JAR files in the classpath.",
        "For example, on Linux and macOS:",
        "On Windows:",
        "Sample code",
        "Note",
        "Use forward slashes as file path separators on all operating systems, including Windows. The JDBC driver replaces forward slashes\nwith the appropriate path separator for the platform.",
        "You can specify the private key file name and password as separate connection properties, for example:",
        "If you specify the private_key_file and private_key_file_pwd parameters, do not specify the\nprivateKey parameter in the connection properties.",
        "Note",
        "Use forward slashes as file path separators on all operating systems, including Windows. The JDBC driver replaces forward slashes\nwith the appropriate path separator for the platform.",
        "You can specify the private key file name and password in the connection string, as shown below:",
        "Note",
        "Use forward slashes as file path separators on all operating systems, including Windows. The JDBC driver replaces forward slashes\nwith the appropriate path separator for the platform.",
        "If you specify the private key and password in the connection string, then do not specify the parameters\nprivate_key_file, private_key_file_pwd, or privateKey in the connection properties.",
        "If you use encrypted keys that were generated using OpenSSL V3, you might receive errors similar to the following:",
        "In this situation, you can use Bouncy Castle to decrypt the key by specifying the following JVM argument:",
        "After configuring your driver, you can evaluate and troubleshoot your network connectivity to Snowflake using SnowCD.",
        "You can use SnowCD during the initial configuration process and on-demand at any time to evaluate and troubleshoot your network connection to Snowflake.",
        "You can use a proxy server with the Snowflake JDBC Driver in the following ways:",
        "Set system properties for your proxy settings in the JVM (Java Virtual Machine) for your client application.",
        "Include the proxy host and port information in the JDBC connection string or the Properties object passed to the\nDriverManager.getConnection() method.",
        "Note",
        "Proxy settings specified in the connection string take precedence over JVM system properties.",
        "Tip",
        "Snowflake\u2019s security model does not allow Transport Layer Security (TLS) proxies (using an HTTPS certificate). Your\nproxy server must use a publicly-available Certificate Authority (CA), reducing potential security risks such as\na MITM (Man In The Middle) attack through a compromised proxy.",
        "If you must use your TLS proxy, we strongly recommend that you update the server policy to pass through\nthe Snowflake certificate such that no certificate is altered in the middle of communications.",
        "As an alternative, you can set the nonProxyHosts parameter in the connection string or Properties object to\nbypass the proxy for specific communications. For example, Amazon S3 access can be bypassed by specifying\nnonProxyHosts=\".amazonaws.com\".",
        "To connect through a proxy server, you can set the proxy system properties. You can either set these in\nyour code or pass them on the command line to the JVM (Java virtual machine) for your client application.",
        "For more information, see Java Networking and Proxies.",
        "To set the system properties in your code, call System.setProperty:",
        "To pass the system properties on the command line to your JVM, use the -D command-line option:",
        "To bypass the proxy for one or more IP addresses or hosts, set the http.nonProxyHosts system property to the list of these\nhosts:",
        "Use a pipe symbol (|) to separate the host names.",
        "To specify hostnames that match a pattern, use an asterisk (*) as a wildcard character.",
        "The following example demonstrates how to set this system property on the command line:",
        "Note",
        "Specifying the proxy information as part of the URL is less secure than other methods of specifying the\nproxy information.",
        "To use a proxy server by setting the following parameters in the JDBC connection string:",
        "useProxy",
        "proxyHost",
        "proxyPort",
        "proxyUser",
        "proxyPassword",
        "proxyProtocol",
        "If your proxy server does not require authentication, you can omit the proxyUser and proxyPassword parameters.",
        "If your proxy server connection requires authentication using a proxy username and proxy password, those\ncredentials may be exposed as plain text by other applications when using the HTTP protocol. To avoid\nexposing these credentials, use the proxyProtocol parameter to specify the HTTPS protocol.",
        "For example:",
        "The proxy settings specified in the connection string take precedence over JVM system properties.",
        "If the proxy JVM arguments are set and you do not want to proxy any of your connections, do not set useProxy=false, as it has no effect. Instead, use the following, which effectively bypasses the JVM proxy settings:",
        "If you need to bypass the proxy server when connecting to one or more hosts, specify the list of hosts in the\nnonProxyHosts parameter:",
        "Separate the hostnames with a URL-escaped pipe symbol (%7C). You can also use an asterisk (*) as a wildcard. For example:",
        "You can use the proxyProtocol parameter to specify the protocol used to connect to the proxy server. The default value is http. Valid values are http and https.",
        "For example:",
        "When the driver connects, Snowflake sends a certificate to confirm that the connection is to Snowflake rather than to\na host that is impersonating Snowflake. The driver sends that certificate to an OCSP (Online Certificate Status\nProtocol) server to verify that the certificate has not been revoked.",
        "If the driver cannot reach the OCSP server to verify the certificate, the driver can\n\u201cfail open\u201d or \u201cfail closed\u201d.",
        "JDBC Driver versions prior to 3.8.0 default to fail-close. Versions 3.8.0 and later default to fail-open.\nYou can override the default behavior in any of the following ways:",
        "Set the connection property ocspFailOpen to true or false.  For example:",
        "Set the system property net.snowflake.jdbc.ocspFailOpen to true or false. For\nexample:",
        "For more information about the driver or connector version, configuration, and OCSP behavior, see\nOCSP Configuration.",
        "Note",
        "The OCSP response cache server is currently supported by the Snowflake JDBC Driver 3.6.0 and higher.",
        "Snowflake clients initiate every connection to a Snowflake service endpoint with a \u201chandshake\u201d that establishes a secure connection before actually transferring data. As part of the handshake, a\nclient authenticates the TLS certificate for the service endpoint. The revocation status of the certificate is checked by sending a client certificate request to one of the OCSP\n(Online Certificate Status Protocol) servers for the CA (certificate authority).",
        "A connection failure occurs when the response from the OCSP server is delayed beyond a reasonable time. The following caches persist the revocation status, helping alleviate these issues:",
        "Memory cache, which persists for the life of the process.",
        "File cache, which persists until the cache directory (e.g. ~/.cache/snowflake or ~/.snowsql/ocsp_response_cache) is purged.",
        "Snowflake OCSP response cache server, which fetches OCSP responses from the CA\u2019s OCSP servers hourly and stores them for 24 hours. Clients can then request the validation status of a given Snowflake\ncertificate from this server cache.",
        "Important",
        "If your server policy denies access to most or all external IP addresses and web sites, you must allowlist the cache server\naddress to allow normal service operation. The cache server hostname is ocsp*.snowflakecomputing.com:80.",
        "If you need to disable the cache server for any reason, set the SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED environment variable to false. Note that the value is case-sensitive and must\nbe in lowercase.",
        "If none of the cache layers contain the OCSP response, the client then attempts to fetch the validation status directly from the OCSP server for the CA.",
        "To improve usability, the driver uses file caches for authentication and OCSP responses. By default, these files are stored in the following directories:",
        "~/.cache/snowflake",
        "~/Library/Caches/Snowflake",
        "%USERPROFILE%AppDataLocalSnowflakeCaches",
        "If the JDBC application user does not have a user profile in the local operating system, the driver attempts to store the cache files in the temporary directory. You can configure the driver to write\ncache files to another directory using the following environment variables:",
        "Specifies the location of the temporary credential cache file in a local directory. This can also be configured with the JVM option -Dnet.snowflake.jdbc.temporaryCredentialCacheDir=string\non launch.",
        "Specifies the location of the OCSP response cache file in a local directory. This can also be configured with the JVM option -Dnet.snowflake.jdbc.ocspResponseCacheDir=string on launch.",
        "For more information, see OCSP Response Cache Server (in this topic).",
        "Note that the JVM options should be set on launch, and not programmatically (via System.setProperty()). If both environment variable and JVM options are provided, the JVM option will be used.",
        "Starting with version 3.0.4, the JDBC driver supports the following logging frameworks:",
        "Java Core Logging Facilities",
        "Simple Logging Facade for Java",
        "Logging Configuration File",
        "By default, the java.util.logging uses ConsoleHandler to write to the standard error stream. You can set the Boolean JAVA_LOGGING_CONSOLE_STD_OUT java or connection property to true, which writes all logs to the standard output stream. The default value is false.",
        "If you enable JAVA_LOGGING_CONSOLE_STD_OUT, you can also set the JAVA_LOGGING_CONSOLE_STD_OUT_THRESHOLD java or connection property to set the maximum log level the driver should write to standard output. Any log messages with a higher level than specified are sent to standard error. Possible values for this property include:",
        "OFF",
        "SEVERE",
        "WARNING",
        "INFO",
        "CONFIG",
        "FINE",
        "FINER",
        "FINEST",
        "ALL",
        "To use this logger, specify the following option for the JVM:",
        "-Dnet.snowflake.jdbc.loggerImpl=net.snowflake.client.log.JDK14Logger",
        "Then, you can customize the logging configuration using the application programming interface (API) for the logger.",
        "For more details, see the java.util.logging Package documentation.",
        "For example, create a file named logging.properties that includes the following contents:",
        "Specify the JVM parameters in the command line:",
        "Where application.jar references the application code for the JDBC driver. The log files are located in /tmp/snowflake_jdbc*.",
        "If a logger implementation package (i.e. org.sl4j:sl4j-jdk14 or org.sl4j:slf4j-log4j12) or a custom logger (i.e. your own org.slf4j.impl.StaticLoggerBinder class) has been defined on the classpath, then the driver automatically uses this logger.",
        "You can also explicitly choose to use this logger by specifying the following JVM option:",
        "-Dnet.snowflake.jdbc.loggerImpl=net.snowflake.client.log.SLF4JLogger.",
        "For more information, see the Simple Logging Facade for Java (SLF4J) documentation.",
        "Note",
        "If you do not explicitly specify a logger for the driver using either of the JVM options described above and you do not have a custom logger defined on the classpath (or you are using a driver\nversion earlier than 3.0.4), the driver uses java.util.logging by default. However, the following default behavior applies:",
        "You cannot specify where the log file is written.",
        "For driver versions 3.14.4 and higher, the driver always saves log files in the user\u2019s home directory for the operating system.",
        "For driver versions prior to 3.14.4, the directory is determined by the java.io.tmpDir system property:",
        "In Linux and macOS environments, the default directory is usually either /tmp or /var/tmp.",
        "In Windows environments, the default directory is usually C:\\temp.",
        "The logging level is determined by the tracing connection parameter (see above).",
        "Alternatively, you can easily specify the log level and\nthe directory in which to save log files in the sf_client_config.json configuration file.",
        "Note",
        "This logging configuration file feature supports only the following log levels:",
        "DEBUG",
        "ERROR",
        "INFO",
        "OFF",
        "TRACE",
        "WARNING",
        "This configuration file uses JSON to define the log_level and log_path logging parameters, as follows:",
        "The driver looks for the location of the configuration file in the following order:",
        "client_config_file connection parameter,\ncontaining the full path to the configuration file.",
        "SF_CLIENT_CONFIG_FILE environment variable, containing the full path to the configuration file.",
        "JDBC driver installation directory, where the file must be named sf_client_config.json.",
        "User\u2019s home directory, where the file must be named sf_client_config.json.",
        "Note",
        "If the configuration file is not found in any of the preceding locations, the driver uses the\nJava core logging facilities.",
        "If a configuration file specified in either the client_config_file connection parameter or\nSF_CLIENT_CONFIG_FILE environment variable cannot be found or read, the driver throws an error message.",
        "By default, the JDBC driver allows you to execute PUT and GET commands. If you don\u2019t want to allow PUT and GET\ncommands access to the local file system, you can disable these commands in the following ways:",
        "Set the JDBC_ENABLE_PUT_GET server parameter to FALSE.",
        "Set the JDBC enablePutGet connection parameter to false.",
        "Call the SFBaseSession.setEnablePutGet(false) method.",
        "The DriverManager.getConnection() method reads only the values of the\nProperties parameter that match specific, predefined names (\u201cpassword\u201d, \u201cwarehouse\u201d, etc.). If you\nmisspell a property name, or include extra properties, the driver ignores those properties without issuing an\nerror or warning message. This can make it difficult to detect minor misspellings.",
        "If you can\u2019t establish a connection, verify that you are specifying the account identifier correctly in the JDBC connection\nstring. For more information about finding your account identifier, see Configuring a client, driver, library, or third-party application to connect to Snowflake.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}