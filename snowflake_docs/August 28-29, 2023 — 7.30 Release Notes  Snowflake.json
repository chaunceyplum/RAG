{
    "url": "https://docs.snowflake.com/en/release-notes/2023/7_30",
    "title": "August 28-29, 2023 \u2014 7.30 Release Notes | Snowflake Documentation",
    "paragraphs": [
        "With this release, we are pleased to announce the preview of Data Pipelines replication support, including the replications of stages,\nstorage integrations, pipes, and load history. You can replicate these objects to configure failover for data pipelines across\nregions and cloud platforms.",
        "Before you can replicate data pipeline objects, you must set at the replication/failover group or account level the\nenable_etl_replication parameter to TRUE. To replicate any external stages that use a storage integration, you must also\nconfigure your replication/failover group to replicate STORAGE INTEGRATIONS.",
        "You can use an ALTER REPLICATION GROUP or ALTER FAILOVER GROUP statement to modify\nthese properties for an existing group.",
        "For more information, see Stage, pipe, and load history replication.",
        "With this release, we are pleased to announce support for password history values and the minimum number of days before you can change\na password in a password policy:",
        "The PASSWORD_HISTORY property in a password policy specifies the number of passwords that Snowflake stores. When a user changes their\npassword, the new password cannot match any of the values in the history. If you increase the history value, such as changing the value\nfrom 3 to 6, Snowflake stores the three existing values. If you decrease the history value, such as changing from 6 to 3, Snowflake stores\nthe three most recent values and deletes the three oldest values.",
        "The PASSWORD_MIN_AGE_DAYS property in a password policy specifies the number of days the user must wait before a recently changed password\ncan be changed again. This value helps to ensure that the password history is not exhausted too soon.",
        "These two properties should be set together in a password policy with values that align with your internal security practices. You can\nspecify these property values when you create a password policy or modify an existing password policy.",
        "For details, see CREATE PASSWORD POLICY and ALTER PASSWORD POLICY.",
        "With this release, we are pleased to announce the preview of the EXECUTE IMMEDIATE FROM command. This command executes the SQL statements\nin a file on a stage. The file must contain syntactically valid SQL statements.",
        "This feature provides a mechanism to control the deployment and management of your Snowflake objects and code. You can use the EXECUTE\nIMMEDIATE FROM command to execute scripts in any session.",
        "For more information, see EXECUTE IMMEDIATE FROM.",
        "With this release, we are pleased to announce that organization administrators can use the\nALTER ACCOUNT \u2026 DROP OLD ORGANIZATION URL\ncommand to drop an old account URL that was saved when Snowflake Customer Support performed any of the\nfollowing actions:",
        "Renamed the organization.",
        "Merged two organizations.",
        "Moved an account from one organization to another.",
        "An old account URL is dropped automatically 90 days after Snowflake Customer Support performs one of these actions, but the organization\nadministrator can now drop it sooner.",
        "With this release, we are pleased to announce the general availability of support for Python 3.9 and 3.10 in Snowpark Python, Python UDFs,\nPython UDTFs and Python stored procedures.",
        "For more information, see:",
        "Setting Up Your Development Environment for Snowpark Python",
        "Introduction to Python UDFs",
        "Writing stored procedures in Python",
        "With this release, we are pleased to announce the general availability of tabular stored procedures with a handler written in Python. You\ncan write a procedure that returns data in tabular form. To do this, you specify the procedure\u2019s return type as TABLE (specifying columns for\nthe return value), then have your handler code return the tabular value in a Snowpark dataframe.",
        "For more information, see Python.",
        "With this release, we are pleased to announce that you can set a masking policy on a virtual column in an external table. This update\nallows the masking policy on the virtual column to override the masking policy that the virtual column inherits from the VALUE column. This\nupdate simplifies external table management because data administrators no longer need to create a view from the semi-structured data in the\nVALUE column and protect the view, and provides consistent data management and protection of the external table data because the protected\nvirtual column does not expose data unnecessarily.",
        "For details, see Masking policies and external tables.",
        "With this release, we are pleased to announce that an account role can access the Governance area of Snowsight if the role has been\ngranted the GOVERNANCE_VIEWER and OBJECT_VIEWER database roles. These database roles exist in the shared SNOWFLAKE database. By granting\nthese database roles to an account role, it is no longer necessary to use the ACCOUNTADMIN role to access the Governance area of Snowsight.\nThis update simplifies the management to access the Governance area of Snowsight.",
        "With this release, we are pleased to announce the general availability of self-service onboarding to become a provider of listings\nusing Provider Studio.",
        "For more details, see Become a provider.",
        "Was this page helpful?",
        "On this page"
    ]
}