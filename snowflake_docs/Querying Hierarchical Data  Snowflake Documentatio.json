{
    "url": "https://docs.snowflake.com/en/user-guide/queries-hierarchical",
    "title": "Querying Hierarchical Data | Snowflake Documentation",
    "paragraphs": [
        "This topic describes how to store and query hierarchical data using:",
        "JOINs",
        "Recursive CTEs (common table expressions)",
        "CONNECT BY",
        "CONNECT BY , the recursive CTE portion of the WITH command , Working with CTEs (Common Table Expressions) , Tabular SQL UDFs (UDTFs)",
        "Many types of data are best represented as a hierarchy, such as a tree.",
        "For example, employees are usually organized in a hierarchy, with a company President at the top of the hierarchy.",
        "Another example of a hierarchy is a \u201cparts explosion\u201d. For example, a car contains an engine; an engine contains a\nfuel pump; and a fuel pump contains a hose.",
        "You can store hierarchical data in:",
        "A hierarchy of tables.",
        "A single table with one (or more) columns representing the hierarchy (e.g. indicating each employee\u2019s direct manager).",
        "Both techniques are described below.",
        "Note",
        "This topic focuses on hierarchical data stored as structured data. Hierarchical data can also be stored as semi-structured\ndata (e.g. JSON data can be stored in ARRAY, OBJECT, or VARIANT data types). For information about semi-structured data, see:",
        "Introduction to Loading Semi-structured Data",
        "Querying Semi-structured Data",
        "Relational databases often store hierarchical data by using different tables. For example, one table might\ncontain \u201cparent\u201d data and another table might contain \u201cchild\u201d data. When the entire hierarchy is known in advance,\none table can be created for each layer in the hierarchy.",
        "For example, consider a Human Resources database that stores employee information and manager information. If the\ncompany is small, then there might be only two levels, for example, one manager and two employees.",
        "In some situations, the number of levels in the hierarchy might change.",
        "For example, a company that started with a two-level hierarchy (President and other employees) might increase the\nnumber of levels as the company grows. The company might expand to include a President, Vice Presidents, and regular\nemployees.",
        "If the number of levels is unknown, so that it is not possible to create a hierarchy with a known number of tables,\nthen in some cases the hierarchical data can be stored in one table. For example, a single table can contain all\nemployees, and can include a column that stores each employee\u2019s manager_ID, which points to another employee in that\nsame table. For example:",
        "Storing an entire hierarchy of data in one table works best if all levels\nof the hierarchy store the same data \u2013 in our example, employee ID, title, etc.\nIf the data at different levels doesn\u2019t fit the same record structure, then\nstoring all the data in one table might not be practical.",
        "In a two-level hierarchy (for example, managers and employees), the data can be queried with a two-way join:",
        "In a three-level hierarchy, you can use a 3-way join:",
        "This concept can be extended to as many levels as needed, as long as you know how many levels are needed. But if\nthe number of levels changes, the queries need to change.",
        "Snowflake provides two ways to query hierarchical data in which the number of levels is not known in advance:",
        "Recursive CTEs (common table expressions).",
        "CONNECT BY clauses.",
        "A recursive CTE allows you to create a WITH clause that can refer to itself. This lets\nyou iterate through each level of your hierarchy and accumulate results.",
        "A CONNECT BY clause allows you to create a type of JOIN operation that processes the hierarchy one level\nat a time, and allows each level to refer to data in the prior level.",
        "For more details, see:",
        "WITH and Working with CTEs (Common Table Expressions).",
        "CONNECT BY.",
        "CONNECT BY allows only self-joins. Recursive CTEs are more flexible and allow a table to be joined to one\nor more other tables.",
        "A CONNECT BY clause has most of the power of a recursive CTE. However,\na recursive CTE can do some things that a CONNECT BY cannot.",
        "For example, if you look at the recursive CTE examples, you see that one\nof the queries indents the output and also sorts the output so that each\n\u201cchild\u201d appears underneath the corresponding \u201cparent\u201d. The sorting is done\nby creating a sort key that contains the chain of IDs from the top all the\nway down to the current level. In the manager/employee example, the chain\ncontains the President\u2019s ID, followed by the Vice President\u2019s ID, etc.\nThis sort key groups rows in a way that looks similar to a sideways tree.\nThe CONNECT BY syntax doesn\u2019t support this because the\n\u201cSTART WITH\u201d clause does not allow the code to specify additional columns\n(beyond those in the table itself), such as the sort_key. Contrast the two\ncode snippets below:",
        "You can, however, use the SYS_CONNECT_BY_PATH function to achieve a similar effect with the\nCONNECT BY clause.",
        "Although the CONNECT BY clause version is limited because the START WITH\nclause cannot add columns to those already in the row (even derived columns\nbased on values already in the row), it also has some advantages:",
        "You have access to all columns of each row without specifying those columns\nin a column list. In a recursive CTE, the recursive clause\ndoes not have access to columns that are not explicitly specified in the CTE.",
        "In a recursive CTE, you must specify the columns in the\nCTE, and the projection lists of the selects in the anchor clause and the\nrecursive clause, must both match the columns in the CTE. If the order of\nthe columns in the various projection clauses does not match, you can\ncause problems such as infinite loops.",
        "The CONNECT BY syntax supports convenient pseudo-columns such as LEVEL,\nCONNECT_BY_ROOT, and CONNECT_BY_PATH",
        "A minor difference between CONNECT BY and recursive CTE is that in CONNECT BY\nyou use the keyword PRIOR to indicate which column values should be taken\nfrom the previous iteration, whereas in a recursive CTE you use the table\nname and the CTE name to indicate which values are taken from the current\niteration and which are taken from the previous iteration. (In a recursive CTE,\nyou can also distinguish between current and previous iterations by using\ndifferent column names in the CTE column list than in the source table or table\nexpression.)",
        "This topic described hierarchies and how parent-child relationships\ncan be used by recursive CTEs (common table expressions) and CONNECT BY\nclauses. In all of this topic\u2019s examples, as well as all the examples in the\nCONNECT BY documentation and the recursive CTE documentation, the hierarchies are\ncontiguous. None of the examples has a parent and a grandchild without having a corresponding child between them.",
        "For example, if you do a \u201cparts explosion\u201d of a car, you\u2019re not going to have\na component for the car, and a component for the tire, without having a\ncomponent for the wheel that contains the tire (and that is contained by the\ncar).",
        "However, there can be cases where data is incomplete. For example, in an\nemployee/manager hierarchy, suppose that the Vice President of Engineering\nretires and the company doesn\u2019t hire a replacement immediately. If the\nVP\u2019s employee record is deleted, then employees below that VP are \u201ccut off\u201d\nfrom the rest of the hierarchy, so the employees table no longer contains a single contiguous hierarchy.",
        "If you use recursive CTEs or CONNECT BY to process data, you need to think about whether the data in your table\nrepresents a single, contiguous tree. You can use recursive CTEs and CONNECT BY on\na single table that contains multiple trees, but you can only\nquery one tree at a time, and that tree must be contiguous.",
        "Was this page helpful?",
        "On this page"
    ]
}