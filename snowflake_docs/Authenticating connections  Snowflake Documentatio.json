{
    "url": "https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-authenticate",
    "title": "Authenticating connections | Snowflake Documentation",
    "paragraphs": [
        "To authenticate to Snowflake, you can use one of the following options:",
        "Password-based authentication",
        "To use this method, set the password option when establishing the connection.",
        "Single sign-on (SSO) through a web browser",
        "Native SSO through Okta",
        "Key pair authentication",
        "OAuth",
        "MFA",
        "Additionally, the Snowflake Node.js driver supports the ability to cache SSO and MFA tokens. For more information, see Authentication token caching.",
        "If you have configured Snowflake to use single sign-on (SSO), you can configure\nyour client application to use browser-based SSO for authentication.",
        "In your application code:",
        "Set the authenticator option to EXTERNALBROWSER.",
        "To establish a connection, call the connectAsync method, rather than the connect method.",
        "For example:",
        "For more information about using browser-based SSO for authentication, see Browser-based SSO.",
        "If you have configured Snowflake to use single sign-on (SSO) through Okta, you can\nconfigure your client application to use native SSO authentication through Okta.",
        "In your application code:",
        "Set the following options:",
        "Set the authenticator option to the Okta URL endpoint for your Okta account (e.g.\nhttps://<okta_account_name>.okta.com).",
        "Set the username and password options to the user name and password for your Identity Provider (IdP).",
        "To establish a connection, call the connectAsync method, rather than the connect method.",
        "For example:",
        "For more information about using native SSO authentication through Okta, see Native SSO \u2014 Okta only.",
        "The driver supports key pair authentication and key rotation. To use key-pair authentication and key rotation, follow the steps below:",
        "Configure key pair authentication, as explained in Key-pair authentication and key-pair rotation.",
        "In your application code:",
        "Set the authenticator option to SNOWFLAKE_JWT.",
        "Use the private key to authenticate in one of the following ways:",
        "Set the privateKey option to the private key.",
        "Set the privateKeyPath option to the path to the private key file.",
        "If the file is encrypted, you must also set the privateKeyPass option to the passphrase to decrypt the private\nkey.",
        "The following example loads the private key from a file and sets the privateKey option to the private key:",
        "The following example sets the privateKeyPath option to an encrypted private key file and sets the\nprivateKeyPass option to the passphrase used to decrypt the private key:",
        "To connect using OAuth, set the authenticator option to OAUTH and the token option to the OAuth access\ntoken. For example:",
        "For more information, see Clients, drivers, and connectors.",
        "Note",
        "This feature requires Snowflake Node.js driver version 1.13.1 or higher.",
        "You can connect to Snowflake by passing a multi-factor authentication (MFA) passcode instead of waiting for an external confirmation, such as a push notification from Duo. The driver provides the following ways to specify an MFA passcode:",
        "Set the passcodeInPassword option to true and include the passcode as part of the password string, similar to the following:",
        "Set the passcode option to the value of the passcode to specify the password and the passcode separately, similar to the following:",
        "To use this approach, ensure that the passcodeInPassword option is false (the default value).",
        "Note",
        "If you enable the passcodeInPassword option and set the passcode option, the passcodeInPassword option takes precedence.",
        "For more information about these options, see passcode.",
        "The Snowflake Node.js driver provides the ability to cache SSO and MFA tokens.",
        "Important",
        "Token caching is disabled by default. Caching tokens locally increases security risks. Because tokens do not expire for four hours, someone who accesses a token on a local system can impersonate the token owner until the token naturally expires. Consequently, before choosing to cache tokens, consider the following:",
        "Be aware and mindful of the potential risks.",
        "Consult with your internal security and compliance personnel to check whether your organization\u2019s policies permit token caching.",
        "With the default settings, the file that stores the cached tokens is written in your $HOME directory, or in a path you cohfigure. You are responsible for the security of the data in the designated directory.",
        "You are responsible to ensure that the file has proper permissions to be accessed only by the file owner.",
        "An SSO (ID) token is generated from the request when you connect to Snowflake with external browser authentication. Caching SSO (ID) tokens on the client driver\u2019s side only works if the server allows them to be cached. Caching SSO tokens can be enabled on the server-side with executing the following SQL statement, as described in Using SSO with client applications that connect to Snowflake:",
        "To use an SSO token cache in the Node.js driver, set the following options in the snowflake.createConnection() call:",
        "Set authenticator to EXTERNALBROWSER. For details, see Authentication options.",
        "Set clientStoreTemporaryCredential to true.",
        "When enabled, driver uses the cached token for subsequent connections until the token expires. If the driver opens a browser to authenticate the connection again, either the driver cannot find the token information in the local credential storage or the token has expired.",
        "An MFA token is generated from the request when you connect to Snowflake with USERNAME_PASSWORD_MFA authentication. Caching MFA tokens on the client driver\u2019s side only works if the server allows them to be cached. Caching MFA tokens can be enabled on the server-side with executing the following SQL statement, as described in Using MFA token caching to minimize the number of prompts during authentication \u2014 optional:",
        "To use an MFA token cache in the Node.js driver, set the following options in the snowflake.createConnection() call:",
        "Set authenticator to USERNAME_PASSWORD_MFA. For details, see Authentication options.",
        "Set clientRequestMFAToken to true.",
        "When enabled, driver uses the cached token for subsequent connections until the token expires. If the driver reaches out to the MFA provider again, either the driver cannot find the token information in the local credential storage or the token has expired.",
        "The Snowflake Node.js driver provides a credential manager and credential storage. By default, the driver stores cached tokens in your $HOME directory. Currently, the driver only supports token caching with the connectAsync() function.",
        "If you want to store the cached tokens in an alternate location, you can specify the desired location in the credentialCacheDir parameter of the snowflake.createConnection() function. You can specify either a relative or absolute path, as shown below:",
        "Relative path",
        "Absolute path",
        "If you do not configure credentialCacheDir, the Snowflake Node.js driver uses $HOME/temporary_credential.json to store the credentials.",
        "The Snowflake node.js driver provides a default credential manager, which uses a local JSON file to store the credentials. When no credential manager is explicitly configured, the driver will use this default credential manager.",
        "If you prefer not to use the default credential manager, you can create a custom credential manager. A custom credential manager must meet the following requirements:",
        "It must minimally contain read, write, and remove functions. You can include other functions as well.",
        "It must be an object data type.",
        "The following example shows a template for minimal custom credential manager.",
        "After completing your custom credential manager, you can configure it for the driver in the snowflake.configure() method, as shown. This example reflects MFA tokens, though you can also create custom credential managers for SSO tokens.",
        "Although the Snowflake Node.js driver provides a plugin-like interface to implement and use custom credential managers, Snowflake is not responsible for creating,  implementing, or supporting custom credential managers for the customers.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}