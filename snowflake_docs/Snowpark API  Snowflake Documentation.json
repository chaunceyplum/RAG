{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/index",
    "title": "Snowpark API | Snowflake Documentation",
    "paragraphs": [
        "The Snowpark API provides an intuitive library for querying and processing data at scale in Snowflake. Using a library for any of three\nlanguages, you can build applications that process data in Snowflake without moving data to the system where your application code runs,\nand process at scale as part of the elastic and serverless Snowflake engine.",
        "Snowflake currently provides Snowpark libraries for three languages: Java, Python, and Scala.",
        "You can use the following Quickstarts to get a hands-on introduction to Snowpark.",
        "Machine Learning with Snowpark Python",
        "Data Engineering Pipelines with Snowpark Python",
        "Getting Started With Snowpark for Python and Streamlit",
        "An Image Recognition App in Snowflake using Snowpark Python, PyTorch, Streamlit and OpenAI",
        "Getting Started With Snowpark Scala",
        "You can use Snowpark libraries for the languages listed in the following table:",
        "Language",
        "Developer Guide",
        "API Reference",
        "Java",
        "Snowpark Developer Guide for Java",
        "Snowpark Library for Java API Reference",
        "Python",
        "Snowpark Developer Guide for Python",
        "Snowpark Library for Python API Reference",
        "Scala",
        "Snowpark Developer Guide for Scala",
        "Snowpark Library for Scala API Reference",
        "You can download the Snowpark library for any of the three supported languages. For downloads, see\nSnowpark Client Download (Snowflake Developer Center).",
        "Snowpark has several features that distinguish it from other client libraries, as described in the following sections.",
        "In comparison to using the Snowflake Connector for Spark, developing with Snowpark includes the following benefits:",
        "Support for interacting with data within Snowflake using libraries and patterns purpose built for different languages without compromising\non performance or functionality.",
        "Support for authoring Snowpark code using local tools such as Jupyter, VS Code, or IntelliJ.",
        "Support for pushdown for all operations, including Snowflake UDFs. This means Snowpark pushes down all data transformation and\nheavy lifting to the Snowflake data cloud, enabling you to efficiently work with data of any size.",
        "No requirement for a separate cluster outside of Snowflake for computations. All of the computations are done within\nSnowflake. Scale and compute management are handled by Snowflake.",
        "The Snowpark API provides programming language constructs for building SQL statements. For example, the API provides a\nselect method that you can use to specify the column names to return, rather than writing\n'select column_name' as a string.",
        "Although you can still use a string to specify the SQL statement to execute, you benefit from features like\nintelligent code completion and type checking when you use the\nnative language constructs provided by Snowpark.",
        "Python code in the following example performs a select operation on the sample_product_data table, specifying the columns\nid, name, and serial_number.",
        "Snowpark operations are executed lazily on the server, meaning that you can use the library to delay running data transformation until as\nlate in the pipeline as possible while batching up many operations into a single operation. This reduces the amount of data transferred\nbetween your client and the Snowflake database. It also improves performance.",
        "The core abstraction in Snowpark is the DataFrame, which represents a set of data and provides methods to operate on that data.\nIn your client code, you construct a DataFrame object and set it up to retrieve the data that you want to use (for example, the\ncolumns containing the data, the filter to apply to rows, etc.).",
        "The data isn\u2019t retrieved when you construct the DataFrame object. Instead, when you are ready to retrieve the data,\nyou can perform an action that evaluates the DataFrame objects and sends the corresponding SQL statements to the Snowflake\ndatabase for execution.",
        "Python code in the following example sets up a query against a table. It calls the collect method to execute the query and retrieve\nresults.",
        "You can create user-defined functions (UDFs) inline in a Snowpark app. Snowpark can push your code to the server, where the code can\noperate on the data at scale. This is useful for looping or batch functionality where creating as a UDF will allow Snowflake to parallelize\nand apply the codeful logic at scale within Snowflake.",
        "You can write functions in the same language that you use to write your client code (for example, by using anonymous functions\nin Scala or by using lambda functions in Python). To use these functions to process data in the Snowflake database, you define\nand call user-defined functions (UDFs) in your custom code.",
        "Snowpark automatically pushes the custom code for UDFs to the Snowflake engine. When you call the UDF in your client code,\nyour custom code is executed on the server (where the data is). You don\u2019t need to transfer the data to your client in order to\nexecute the function on the data.",
        "Python code in the following example creates a UDF called my_udf and assigns it to the add_one variable.",
        "Was this page helpful?",
        "On this page",
        "Related content",
        "Related info",
        "Snowpark Library for Scala and Java release notes",
        "Getting Started With Snowpark in Scala (Snowflake Quickstarts)"
    ]
}