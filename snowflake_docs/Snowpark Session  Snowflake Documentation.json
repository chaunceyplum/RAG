{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/snowpark/session",
    "title": "Snowpark Session | Snowflake Documentation",
    "paragraphs": [
        "Session",
        "Session(conn[,\u00a0options])",
        "Establishes a connection with a Snowflake database and provides methods for creating DataFrames and accessing objects for working with files in stages.",
        "SessionBuilder",
        "Session.SessionBuilder.app_name(app_name[,\u00a0...])",
        "Adds the app name to the SessionBuilder to set in the query_tag after session creation",
        "Session.SessionBuilder.config(key,\u00a0value)",
        "Adds the specified connection parameter to the SessionBuilder configuration.",
        "Session.SessionBuilder.configs(options)",
        "Adds the specified dict of connection parameters to the SessionBuilder configuration.",
        "Session.SessionBuilder.create()",
        "Creates a new Session.",
        "Session.SessionBuilder.getOrCreate()",
        "Gets the last created session or creates a new one if needed.",
        "Methods",
        "Session.add_import(path[,\u00a0import_path,\u00a0...])",
        "Registers a remote file in stage or a local file as an import of a user-defined function (UDF).",
        "Session.add_packages(*packages)",
        "Adds third-party packages as dependencies of a user-defined function (UDF).",
        "Session.add_requirements(file_path)",
        "Adds a requirement file that contains a list of packages as dependencies of a user-defined function (UDF).",
        "Session.append_query_tag(tag[,\u00a0separator])",
        "Appends a tag to the current query tag.",
        "Session.call(sproc_name,\u00a0*args[,\u00a0...])",
        "Calls a stored procedure by name.",
        "Session.cancel_all()",
        "Cancel all action methods that are running currently.",
        "Session.clear_imports()",
        "Clears all files in a stage or local files from the imports of a user-defined function (UDF).",
        "Session.clear_packages()",
        "Clears all third-party packages of a user-defined function (UDF).",
        "Session.close()",
        "Close this session.",
        "Session.createDataFrame(data[,\u00a0schema])",
        "Creates a new DataFrame containing the specified values from the local data.",
        "Session.create_async_job(query_id)",
        "Creates an AsyncJob from a query ID.",
        "Session.create_dataframe(data[,\u00a0schema])",
        "Creates a new DataFrame containing the specified values from the local data.",
        "Session.flatten(input[,\u00a0path,\u00a0outer,\u00a0...])",
        "Creates a new DataFrame by flattening compound values into multiple rows.",
        "Session.generator(*columns[,\u00a0rowcount,\u00a0...])",
        "Creates a new DataFrame using the Generator table function.",
        "Session.getActiveSession()",
        "Gets the active session if one is created.",
        "Session.get_active_session()",
        "Gets the active session if one is created.",
        "Session.get_current_account()",
        "Returns the name of the current account for the Python connector session attached to this session.",
        "Session.get_current_database()",
        "Returns the name of the current database for the Python connector session attached to this session.",
        "Session.get_current_role()",
        "Returns the name of the primary role in use for the current session.",
        "Session.get_current_schema()",
        "Returns the name of the current schema for the Python connector session attached to this session.",
        "Session.get_current_user()",
        "Returns the name of the user in the connection to Snowflake attached to this session.",
        "Session.get_current_warehouse()",
        "Returns the name of the warehouse in use for the current session.",
        "Session.get_fully_qualified_current_schema()",
        "Returns the fully qualified name of the current schema for the session.",
        "Session.get_fully_qualified_name_if_possible(name)",
        "Returns the fully qualified object name if current database/schema exists, otherwise returns the object name",
        "Session.get_imports()",
        "Returns a list of imports added for user defined functions (UDFs).",
        "Session.get_packages()",
        "Returns a dict of packages added for user-defined functions (UDFs).",
        "Session.get_session_stage([statement_params])",
        "Returns the name of the temporary stage created by the Snowpark library for uploading and storing temporary artifacts for this session.",
        "Session.query_history([include_describe,\u00a0...])",
        "Create an instance of QueryHistory as a context manager to record queries that are pushed down to the Snowflake database.",
        "Session.stored_procedure_profiler",
        "Returns a stored_procedure_profiler.StoredProcedureProfiler object that you can use to profile stored procedures.",
        "Session.range(start[,\u00a0end,\u00a0step])",
        "Creates a new DataFrame from a range of numbers.",
        "Session.remove_import(path)",
        "Removes a file in stage or local file from the imports of a user-defined function (UDF).",
        "Session.remove_package(package)",
        "Removes a third-party package from the dependency list of a user-defined function (UDF).",
        "Session.replicate_local_environment([...])",
        "Adds all third-party packages in your local environment as dependencies of a user-defined function (UDF).",
        "Session.sql(query[,\u00a0params])",
        "Returns a new DataFrame representing the results of a SQL query.",
        "Session.table(name)",
        "Returns a Table that points the specified table.",
        "Session.table_function(func_name,\u00a0...)",
        "Creates a new DataFrame from the given snowflake SQL table function.",
        "Session.update_query_tag(tag)",
        "Updates a query tag that is a json encoded string.",
        "Session.use_database(database)",
        "Specifies the active/current database for the session.",
        "Session.use_role(role)",
        "Specifies the active/current primary role for the session.",
        "Session.use_schema(schema)",
        "Specifies the active/current schema for the session.",
        "Session.use_secondary_roles(roles)",
        "Specifies the active/current secondary roles for the session.",
        "Session.use_warehouse(warehouse)",
        "Specifies the active/current warehouse for the session.",
        "Session.write_pandas(df,\u00a0table_name,\u00a0*[,\u00a0...])",
        "Writes a pandas DataFrame to a table in Snowflake and returns a Snowpark DataFrame object referring to the table where the pandas DataFrame was written to.",
        "Attributes",
        "Session.builder",
        "Returns a builder you can use to set configuration properties and create a Session object.",
        "Session.custom_package_usage_config",
        "Get or set configuration parameters related to usage of custom Python packages in Snowflake.",
        "Session.file",
        "Returns a FileOperation object that you can use to perform file operations on stages.",
        "Session.query_tag",
        "The query tag for this session.",
        "Session.lineage",
        "Returns a Lineage object that you can use to explore lineage of snowflake entities.",
        "Session.read",
        "Returns a DataFrameReader that you can use to read data from various supported sources (e.g.",
        "Session.sproc",
        "Returns a stored_procedure.StoredProcedureRegistration object that you can use to register stored procedures.",
        "Session.sql_simplifier_enabled",
        "Set to True to use the SQL simplifier (defaults to True).",
        "Session.telemetry_enabled",
        "Controls whether or not the Snowpark client sends usage telemetry to Snowflake.",
        "Session.udaf",
        "Returns a udaf.UDAFRegistration object that you can use to register UDAFs.",
        "Session.udf",
        "Returns a udf.UDFRegistration object that you can use to register UDFs.",
        "Session.udtf",
        "Returns a udtf.UDTFRegistration object that you can use to register UDTFs.",
        "Session.session_id",
        "Returns an integer that represents the session ID of this session.",
        "Session.connection",
        "Returns a SnowflakeConnection object that allows you to access the connection between the current session and Snowflake server.",
        "Was this page helpful?"
    ]
}