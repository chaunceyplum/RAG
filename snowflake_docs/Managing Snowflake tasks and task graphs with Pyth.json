{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-tasks",
    "title": "Managing Snowflake tasks and task graphs with Python | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "You can use Python to manage Snowflake tasks, with which you can execute SQL statements, procedure calls, and logic in\nSnowflake Scripting. For an overview of tasks, see Introduction to tasks.",
        "The Snowflake Python APIs represents tasks with two separate types:",
        "Task: Exposes a task\u2019s properties such as its schedule, parameters, and predecessors.",
        "TaskResource: Exposes methods you can use to fetch a corresponding Task object, execute the task, and alter the task.",
        "The examples in this topic assume that you\u2019ve added code to connect with Snowflake and to create a Root object from which to use the\nSnowflake Python APIs.",
        "For example, the following code uses connection parameters defined in a configuration file to create a connection to Snowflake:",
        "Using the resulting Session object, the code creates a Root object to use the API\u2019s types and methods. For more information,\nsee Connect to Snowflake with the Snowflake Python APIs.",
        "To create a task, first create a Task object. Then, specifying the database and schema in which to create the task,\ncreate a TaskCollection object. Using TaskCollection.create, add the new task to Snowflake.",
        "Code in the following example creates a Task object representing a task named my_task that runs a SQL query specified in\nthe definition parameter:",
        "This code creates a TaskCollection variable tasks from the my_db database and the\nmy_schema schema. Using TaskCollection.create, it creates a new task in Snowflake.",
        "This code example also specifies a timedelta value of one hour for the task\u2019s schedule. You can define the schedule of a task using\neither a timedelta value or a Cron expression.",
        "You can also create a task that runs a Python function or a stored procedure. Code in the following example creates a task named\nmy_task2 that runs a function represented by a StoredProcedureCall object:",
        "This object specifies a function named\ndosomething located in the @mystage stage location. You must also specify a warehouse when creating a task with a StoredProcedureCall object.",
        "You can set properties of a Task object and pass it to the TaskResource.create_or_alter method to create a task if it\ndoesn\u2019t exist, or alter it according to the task definition if it does exist. The behavior of create_or_alter is intended to be\nidempotent, which means that the resulting task object will be the same regardless of whether the task exists before you call the method.",
        "Note",
        "The create_or_alter method uses default values for any Task\nproperties that you don\u2019t explicitly define. For example, if you don\u2019t set schedule, its value defaults to None even if the\ntask previously existed with a different value.",
        "Code in the following example updates the definition and schedule of the my_task task, and then alters the task on Snowflake:",
        "You can list tasks using the TaskCollection.iter method. The method returns a PagedIter iterator of Task objects.",
        "Code in the following example lists tasks whose name begins with my:",
        "You can perform common task operations\u2014such as executing, suspending, and resuming tasks\u2014with a TaskResource object.",
        "Code in the following example executes, suspends, resumes, and drops the my_task task:",
        "You can manage tasks collected in a task graph. A task graph is a series of tasks with a single root task and additional tasks\norganized by their dependencies.",
        "For more about tasks in a task graph, see Manage task dependencies with task graphs.",
        "To create a task graph, first create a DAG object that specifies its name and other optional properties, such as its schedule.\nYou can define the schedule of a task graph using either a timedelta value or a Cron expression.",
        "Code in the following example defines a Python function dosomething, then specifies the function as a DAGTask object named\ndag_task2 in the task graph:",
        "This code also defines a SQL statement as another DAGTask object named dag_task1, and then specifies\ndag_task1 as a predecessor of dag_task2. Finally, it deploys the task graph to Snowflake in the my_db database and the\nmy_schema schema.",
        "You can also create a task graph with a specified cron schedule, task branches, and function return values that are used as task return\nvalues.",
        "Code in the following example creates a DAG object with a Cron object specifying its schedule. It defines a\nDAGTaskBranch object named task1_branch along with other DAGTask objects, and specifies their dependencies to one\nanother:",
        "This code example also defines task handler functions and creates each DAGTask and DAGTaskBranch object with a specified\ntask handler assigned to the task. The code sets the DAG\u2019s use_func_return_value parameter to True, which specifies to use the\nPython function\u2019s return value as the corresponding task\u2019s return value. Otherwise the default value of use_func_return_value is\nFalse.",
        "When a task\u2019s definition is a StoredProcedureCall object, the handler of the stored procedure (or function) can explicitly set the\nreturn value of the task by using a TaskContext object.",
        "For more information, see SYSTEM$SET_RETURN_VALUE.",
        "Code in the following example defines a task handler function that creates a TaskContext object named context from the\ncurrent session. Then it uses the TaskContext.set_return_value method to explicitly set the return value to a specified string:",
        "In a task graph, an immediate successor task that identifies the previous task as its predecessor can then retrieve the return value\nexplicitly set by the predecessor task.",
        "For more information, see SYSTEM$GET_PREDECESSOR_RETURN_VALUE.",
        "Code in the following example defines a task handler function that uses the TaskContext.get_predecessor_return_value method to get\nthe return value of the predecessor task named pred_task_name:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}