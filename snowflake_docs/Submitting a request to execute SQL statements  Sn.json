{
    "url": "https://docs.snowflake.com/en/developer-guide/sql-api/submitting-requests",
    "title": "Submitting a request to execute SQL statements | Snowflake Documentation",
    "paragraphs": [
        "This topic explains how to submit a request to the SQL API.",
        "To submit SQL statements for execution, send a POST request to the /api/v2/statements/ endpoint. See\nPOST /api/v2/statements for details.",
        "In the request URL, you can set query parameters to:",
        "Specify a request ID that distinguishes this request from other requests.",
        "Execute the statement asynchronously.",
        "For the body of the request, set the following fields:",
        "Set the statement field to the SQL statement that you want to execute. For example:",
        "If you want to submit multiple statements in a single request, use a semicolon (;) between statements.\nSee Submitting multiple SQL statements in a single request for details.",
        "If you include bind variables (? placeholders) in the statement, set the bindings field to an object that specifies\nthe corresponding Snowflake data types and values for each variable.",
        "For details, see Using bind variables in a statement.",
        "To specify the warehouse, database, schema, and role to use, set the warehouse, database, schema, and\nrole fields.",
        "The values in these fields are case-sensitive.",
        "If you omit these fields, the SQL API uses the values of the corresponding properties for the user (i.e. the\nDEFAULT_WAREHOUSE, DEFAULT_NAMESPACE, and DEFAULT_ROLE\nproperties of the user).",
        "To set a timeout for the statement execution, set the timeout field to the maximum number of seconds to wait.\nIf the timeout field is not set, the timeout specified by the STATEMENT_TIMEOUT_IN_SECONDS parameter is\nused.",
        "For example, the following curl command sends a SQL statement for execution. The example uses the file\nrequest-body.json to specify the body of the request.",
        "where:",
        "jwt is the JWT that you generated for authentication.",
        "myApplicationName is an example of an identifier for your application.",
        "account_identifier is your account identifier.",
        "In this example, request-body.json contains the\nbody of the request:",
        "In the body of the request in the example above:",
        "The statement field specifies the SQL statement to execute.",
        "The statement includes a bind variable (the question mark in \"cl=?\"), which\nevaluates to the first binding (\"1\") specified in the bindings field.",
        "The timeout field specifies that the server allows 60 seconds for the statement to be executed.",
        "The database, schema, warehouse, and role fields specify that the TESTDB database,\nTESTSCHEMA schema, TESTWH warehouse, and TESTROLE role should be used when executing the statement.",
        "If you want to use bind variables (? placeholders) in the statement, use the bindings field to specify the values that\nshould be inserted.",
        "Set this field to a JSON object that specifies the Snowflake data type and value\nfor each bind variable.",
        "Choose the binding type that corresponds to the type of the value that you are binding. For example, if the value is a\nstring representing a date (e.g. 2021-04-15) and you want to insert the value into a DATE column, use the\nTEXT binding type.",
        "The following table specifies the values of the type field that you can use to bind to different\nSnowflake data types for this preview release.",
        "The first column on the left specifies the binding types that you can use.",
        "The rest of the columns specify the Snowflake data type of the column where you plan to insert the data.",
        "Each cell specifies the type of value that you can use with a binding type to insert data into a column of a particular\nSnowflake data type.",
        "If the cell for a binding type and Snowflake data type is empty, you cannot use the specified binding type to insert data into\na column of that Snowflake data type.",
        "Snowflake Data Types",
        "INT / NUMBER",
        "FLOAT",
        "VARCHAR",
        "BINARY",
        "BOOLEAN",
        "DATE",
        "TIME",
        "TIMESTAMP_TZ",
        "TIMESTAMP_LTZ",
        "TIMESTAMP_NTZ",
        "Binding . Types",
        "FIXED",
        "integer",
        "integer",
        "integer",
        "0 (false) / nonzero (true)",
        "REAL",
        "integer",
        "int or float",
        "int or float",
        "0/non-0",
        "TEXT",
        "integer",
        "int or float",
        "any text",
        "hexdec",
        "\"true\"/ \"false\"",
        "see notes below",
        "see notes below",
        "see notes below",
        "see notes below",
        "see notes below",
        "BINARY",
        "hexdec",
        "BOOLEAN",
        "true/false, 0/1",
        "true/false",
        "DATE",
        "epoch (ms)",
        "epoch (ms)",
        "epoch (ms)",
        "epoch (ms)",
        "epoch (ms)",
        "TIME",
        "epoch (nano)",
        "epoch (nano)",
        "TIMESTAMP_TZ",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "TIMESTAMP_LTZ",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "TIMESTAMP_NTZ",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "epoch (nano)",
        "Note the following:",
        "The values of the bind variables must be strings (e.g. \"1.0\" for the value 1.0).",
        "When using the DATE binding type, specify the number of milliseconds since the epoch.",
        "When using the TIME or TIMESTAMP* binding type, specify the number of nanoseconds since the epoch.",
        "When using the TIMESTAMP_TZ binding type, specify the number of nanoseconds since the epoch followed by a space and the\ntimezone offset in minutes (e.g. 1616173619000000000 960).",
        "When using the TEXT binding type:",
        "To insert data into a DATE column, you can use any date format that is\nsupported by AUTO detection.",
        "To insert data into a TIME column, you can use any time format that is supported by AUTO\ndetection.",
        "To insert data into a TIMEZONE* column, you can use any\ndate-time format that is supported by AUTO detection.",
        "If the value is in a format not supported by Snowflake, the API returns an error:",
        "Note",
        "Snowflake does not currently support variable binding in multi-statement SQL requests.",
        "The Snowflake SQL API supports sending concurrent requests to the server. Concurrency limits on the API are determined by the concurrency limits enforced by Snowflake.",
        "Depending on the current server load, you might receive an HTTP 429 error which indicates that the server is currently\nreceiving too many requests.",
        "To ensure that your application correctly handles 429 errors, wrap concurrent requests within retry logic.",
        "In some cases, it might not be clear if Snowflake executed the SQL statement in an API request (e.g. due to a network error or a\ntimeout). You might choose to resubmit the same request to Snowflake again, in case Snowflake did not execute the statement.",
        "However, if Snowflake already executed the statement in the initial request and you resubmit the request again, the statement is\nexecuted twice. For some types of requests, repeatedly executing the same statement can have unintended consequences (e.g.\ninserting duplicate data into a table).",
        "To prevent Snowflake from executing the same statement twice when you resubmit a request, you can use a request ID to distinguish\nyour request from other requests. If you specify the same request ID in the initial request along with the retry=true parameter in the resubmitted request, Snowflake does not execute the statement again if the statement has already been executed successfully.",
        "To specify a request ID, generate a\nuniversally unique identifier (UUID). You can then include this identifier in the requestId query parameter. You must also specify the retry=true parameter as part of the request as shown in the following example.",
        "If Snowflake fails to process a request, you can submit the same request again with the same request ID. Using the same request ID\nindicates to the server that you are submitting the same request again.",
        "Note",
        "The retry=true parameter adds overhead to processing the SQL statement because Snowflake must scan and match a\nstatement in the statement history. Use this parameter only when retrying the statement is required.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}