{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/event-old",
    "title": "Previous logging and event sharing functionality \u2014 Deprecated | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "Deprecated Feature",
        "The functionality described in this topic will be deprecated in a future release.",
        "This topic describes the deprecated method for setting up logging and event sharing before the\nintroduction of event definitions.",
        "Providers who are setting up logging and event sharing should use the method described in Configure logging and event tracing for an app.\nSee Considerations when migrating from the previous event sharing functionality for information about migrating from the deprecated\nto the new logging and event sharing functionality.",
        "Warning",
        "The process for setting up logging and event sharing described in this topic will be deprecated\nin a future release.",
        "This topic provides information on setting up logging and event sharing as a provider. Refer to\nEnabling Logging and Event Sharing for an app\nfor the consumer requirements for configuring this feature.",
        "Logging and trace events allow you to collect information about an app to troubleshoot errors. Using logging and trace events,\nyou can also get a better idea of how your app runs and improve your app later.",
        "As a provider, you can set up logging and event sharing for an app by performing the following:",
        "Review the considerations for using logging and event sharing.",
        "Configure logging and trace events for functions and stored procedures.",
        "Set the log and trace level in the manifest file.",
        "Configure an account to store shared events.",
        "After the consumer installs an app and enables logging and event sharing, you can view logging and event information shared by the application:",
        "View the log and trace level.",
        "View the logs and events in the event table.",
        "Before using logging and event sharing for an app, providers must consider the following:",
        "Providers are responsible for all costs associated with event sharing on the provider side, including data\ningestion and storage.",
        "Providers must have an account to store shared events\nin each region where you want to support event sharing.",
        "Providers must define the default log level and trace level for an app in the manifest file.",
        "Note",
        "Event sharing cannot be enabled for an app that is installed in the same account as the application package\nit is based on. To test event sharing for an app, a provider must use multiple accounts.",
        "The Native Apps Framework requires an event table to store log messages and trace events generated from\nfunctions and stored procedures in an app.",
        "Note",
        "If the consumer of an app does not set up an event table and make it the active table\nbefore installing the app, event and logging data are discarded.",
        "An account can have multiple event tables, but only one of them can be set as the active event table for a\nSnowflake account at a time. Without an active event table, log messages and trace events generated by the\napp are not captured. This is true even if the functions and procedures in an app call the logging\nand trace event APIs.",
        "To create an event table, use the CREATE EVENT TABLE command. For more information, see\nEvent table overview.",
        "After code has recorded log messages and trace events, a provider can query recorded data.",
        "For information about recording and querying log and trace data, see the following:",
        "Logging messages from functions and procedures.",
        "Trace events for functions and procedures.",
        "To set the default log and trace event levels for a version of an app, set the\nlog_level and trace_level parameters in the manifest file as shown in the following example:",
        "When a provider enables tracing, a Snowflake Native App automatically captures the start and end\ntimes for all queries and stored procedure calls.",
        "Note",
        "Publishing a Snowflake Native App with the trace_level property set to a value other than OFF\nmight expose calls to hidden stored procedures to any user in the consumer account who can view\nthe event table.",
        "For information on supported values for trace_level and log_level, see\nSetting levels for logging, metrics, and tracing and Setting levels for logging, metrics, and tracing.",
        "When the Snowflake Native App is initially installed, it uses the log levels defined in the manifest file. If the log\nlevel is changed in a subsequent upgrade, the new log level takes effect after the upgrade process completes.",
        "The log and trace level can only be set within the manifest file. The consumer is not allowed to modify the log level using the\nALTER APPLICATION or ALTER DATABASE commands.",
        "Similarly, any session level settings for the logging level are ignored by the app.",
        "To store shared logs and events, a provider must select an account to hold an event table. This can be any\naccount that a provider can access. However, if an organization has multiple providers publishing\napp packages, consider using a Snowflake account that is dedicated to storing shared events from the\nconsumer.",
        "The following restrictions apply to accounts used to store shared events:",
        "You must use the ORGADMIN role to set an account as the account used to store events.",
        "The account must have an active event table.",
        "The specified account cannot be any of the following:",
        "A locked or suspended account.",
        "A reader account.",
        "A trial account.",
        "A Snowflake managed account.",
        "Note",
        "A provider can collect logs and shared events only in the same region where a consumer installs an app.\nProviders must set up an account to store shared events in every region where consumers configure event\nsharing for an app.",
        "To set an account to be the events account for a region, call the SYSTEM$SET_EVENT_SHARING_ACCOUNT_FOR_REGION system function:",
        "Where:",
        "Specifies the region where the account is located, for example: AWS_US_WEST_2, AWS_US_EAST_1.",
        "Specifies the region group, for example: PUBLIC. Refer to\nRegion groups for details.",
        "Specifies the account name. If another account is already set as the events account in the\nspecified region, running this command changes the events account to be the account\nspecified here. Always use the account name and not the Snowflake account identifier.",
        "Note",
        "You must use the ORGADMIN role to call this function.",
        "To unset an account to be the events account for a region, call the SYSTEM$UNSET_EVENT_SHARING_ACCOUNT_FOR_REGION system function:",
        "Where:",
        "Specifies the region where the account is located, for example: AWS_US_WEST_2, AWS_US_EAST_1.",
        "Specifies the region group, for example: PUBLIC.",
        "Specifies the account name. Always use the account name and not the Snowflake account identifier.",
        "Note",
        "You must use the ORGADMIN role to call this function.",
        "To show events accounts in a provider\u2019s organization, call the SYSTEM$SHOW_EVENT_SHARING_ACCOUNTS system function:",
        "Note",
        "You must use the ORGADMIN role to call this function.",
        "This system function returns a string in JSON format containing a list of event accounts within the organization.\nBecause the metadata takes some time to propagate to all regions, this function might experience some delay when\nshowing latest events account after the user set/unset an events account for the organization.",
        "Use the DESCRIBE APPLICATION command to view the logging level of an app, as shown in the\nfollowing command:",
        "Use the SHOW VERSIONS command to view the logging level the app versions defined in an application\npackage, as shown in the following example:",
        "To view the logs and events stored in the event table, use the SELECT command as shown\nin the following example:",
        "The following sections describe the information that the Native Apps Framework shares with providers.",
        "To help providers easily identify the source of the shared events, the following fields are populated into the\nRESOURCE_ATTRIBUTES column of the event table when they are shared with the provider:",
        "snow.application.package.name",
        "snow.application.consumer.organization",
        "snow.application.consumer.name",
        "snow.listing.name",
        "snow.listing.global_name",
        "To protect consumer information, the following fields from the RESOURCE_ATTRIBUTES column are\nnot shared with provider:",
        "snow.database.id",
        "snow.database.name",
        "snow.schema.id",
        "snow.executable.id",
        "snow.owner.name",
        "snow.owner.id",
        "snow.warehouse.name",
        "snow.warehouse.id",
        "snow.query.id",
        "snow.session.id",
        "snow.session.role.primary.name",
        "snow.session.role.primary.id",
        "snow.user.name",
        "snow.user.id",
        "db.user",
        "Instead of directly sharing the snow.database.name and snow.query.id fields with the provider, Snowflake\nshares the hash values (SHA-1) of these two fields as the following fields:",
        "snow.database.hash",
        "snow.query.hash",
        "Snowflake provides the SHA-1 function used to mask these attributes.\nConsumers can calculate the hash values for the database name and query id, and use them as reference values when\ncontacting the provider.",
        "In some contexts, a provider may need to determine if event sharing has been enabled in a consumer\naccount. For example, a provider may need to disable app functionality if the event table is not\navailable.",
        "To determine if event sharing is enabled in a consumer account, providers can call the following\nsystem functions when defining the app logic:",
        "IS_APPLICATION_SHARING_EVENTS_WITH_PROVIDER",
        "Returns TRUE if the app enables event sharing and an active event table is available in the consumer\naccount. Returns FALSE, otherwise.",
        "IS_APPLICATION_INSTALLED_FROM_SAME_ACCOUNT",
        "Returns TRUE if the app was installed in the same account as the application package it is based on.\nReturns FALSE otherwise.",
        "Note",
        "These system functions can only be called from within an app. See\nDetermine if event sharing is enabled using the Python Permission SDK and\nDetermine if event sharing is enabled using SQL",
        "The Python Permission SDK provides the following functions to determine if even sharing is enabled in\na consumer account:",
        "is_event_sharing_enabled()",
        "Returns TRUE if the SHARE_EVENTS_WITH_PROVIDER property is true and the consumer account has\nan active event table configured. Returns FALSE, otherwise.",
        "is_application_local_to_package()",
        "Returns TRUE if the app is in the same account as the application package. Returns FALSE,\notherwise.",
        "The following example shows how to call a stored procedure when event sharing is\nenabled in the consumer account.",
        "Consider the following SQL stored procedure that creates a function to calculate the sum of\ntwo numbers:",
        "When added to the setup script of the app, these SQL commands create the hidden_sum stored procedure\nin the consumer account when the app is installed. However, this stored procedure is not visible to consumers\nbecause the USAGE privilege is not granted on the stored procedure to an application role.",
        "The following example shows how you can use the values returned by the IS_APPLICATION_SHARING_EVENTS_WITH_PROVIDER\nand IS_APPLICATION_INSTALLED_FROM_SAME_ACCOUNT system functions to call the  hidden_sum stored procedure.",
        "In this example, the sum stored procedure tests the values of the\nIS_APPLICATION_SHARING_EVENTS_WITH_PROVIDER and IS_APPLICATION_INSTALLED_FROM_SAME_ACCOUNT\nstored procedures. If one of their values is true, the sum stored procedure calls\nthe hidden_sum stored procedure.",
        "A provider can use the Python Permission SDK to create a Streamlit app to prompt consumers to enable\nevent sharing in their account.",
        "The SDK provides the request_event_sharing() method that displays a dialog in Snowsight\nthat prompts the consumer to enable event sharing in their account. If the event table does not\nexist in the consumer account, the dialog allows the consumer to set the event table if they are using\nthe ACCOUNTADMIN role.",
        "The following Streamlit example shows how to use the Python Permission SDK to do the following:",
        "Determine if event sharing is enabled.",
        "If event sharing is enabled, call the critical_feature_that_requires_event_sharing() function.",
        "If event sharing is not enabled, call the request_event_sharing() function to display a dialog in\nSnowsight that prompts the consumer to enable event sharing.",
        "In this example, the critical_feature_that_requires_event_sharing() method is only called if\none of the following is true:",
        "Event sharing is enabled and the event table exists.",
        "The Snowflake Native App is installed in the same account as the application package.",
        "If neither condition is true, the Streamlit app calls the request_event_sharing() method which\nprompts the consumer to select an event table.",
        "See Determine if event sharing is enabled in the consumer account for more information.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}