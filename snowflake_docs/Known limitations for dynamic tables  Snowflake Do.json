{
    "url": "https://docs.snowflake.com/en/user-guide/dynamic-tables-limitations",
    "title": "Known limitations for dynamic tables | Snowflake Documentation",
    "paragraphs": [
        "This topic describes limitations on the following dynamic table features:",
        "General limitations",
        "Supported data types",
        "Limitations on query constructs",
        "Support for cross-feature interactions",
        "Support for incremental refresh",
        "The following general limitations apply to using dynamic tables:",
        "A single account can hold a maximum of 4000 dynamic tables.",
        "You can\u2019t truncate data from a dynamic table.",
        "You can\u2019t create a temporary dynamic table.",
        "When you use a dynamic table to ingest shared data,\nthe query can\u2019t select from a shared dynamic table or a shared secure view that\nreferences an upstream dynamic table.",
        "You can\u2019t use secondary roles with dynamic tables because dynamic table refreshes\nact as their owner role. For more information, see Enforcement model with primary role and secondary roles.",
        "You can\u2019t set the DATA_RETENTION_TIME_IN_DAYS object parameter in\nyour source tables to zero.",
        "You can\u2019t use dynamic SQL (for example, session variables or unbound variables of\nanonymous blocks) in the dynamic table\u2019s definition.",
        "In a dynamic table definition, SELECT blocks that read from user-defined table\nfunctions (UDTF) must explicitly specify columns and can\u2019t use *.",
        "Dynamic tables can become stale if they are not refreshed within the\nMAX_DATA_EXTENSION_TIME_IN_DAYS period of the input tables. Once stale,\ndynamic tables must be recreated resume refreshes.",
        "Dynamic tables do not currently support tracking in the\nACCESS_HISTORY view. This means that queries and\noperations performed on dynamic tables are not captured in Snowflake\u2019s ACCESS_HISTORY\nfor auditing or monitoring purposes.",
        "Dynamic tables support all Snowflake SQL data types\nfor both incremental and full refresh, except:",
        "Structured data types.",
        "Geospatial data types (full refresh only).",
        "The following constructs are not currently supported in the query for a dynamic\ntable. If you specify these in the query, an error occurs:",
        "External functions.",
        "Sequences.",
        "Functions that rely on CURRENT_USER. Dynamic\ntable refreshes act as their owner role with a special SYSTEM user.",
        "Sources that include directory tables, external tables, streams, and materialized\nviews.",
        "Views on dynamic tables or other unsupported objects.",
        "User-defined table functions (UDTF) written in SQL.",
        "User-defined functions (UDF) written in SQL that contain a subquery (for example,\na SELECT statement).",
        "PIVOT and UNPIVOT\nconstructs are not supported in incremental or full refresh.",
        "SAMPLE / TABLESAMPLE constructs are not supported in dynamic\ntable incremental or full refresh.",
        "The following cross-feature interactions are not supported:",
        "Using the query acceleration service (QAS) for dynamic table refreshes.",
        "Masking policies with database roles on shared tables.",
        "This section describes the expressions, clauses, and functions that are currently\nnot supported for dynamic table incremental refresh.\nIf a query uses these, the automated refresh process uses a full refresh, which\nmight consume more credits. See Determine whether an incremental or full refresh is used.",
        "Non-deterministic functions are not supported with incremental refreshes, but\nsome non-deterministic functions are supported with full refreshes.",
        "When you create a dynamic table,\nthe default value for the refresh mode is AUTO, which selects an incremental\nrefresh of the dynamic table. If the CREATE DYNAMIC TABLE statement doesn\u2019t support\nincremental refresh, full refresh is automatically chosen as the refresh mode.",
        "To determine the most suitable refresh mode for your use case, experiment with refresh modes and\nautomatic recommendations. For consistent behavior across Snowflake releases,\nexplicitly set the refresh mode on all dynamic tables. For example, if you\nwant your dynamic tables to refresh only incrementally, you must explicitly\nset the refresh mode to INCREMENTAL when creating them. For more information,\nsee Set the refresh mode for all production dynamic tables.",
        "To verify the refresh mode for your dynamic tables, see\nView dynamic table refresh mode.",
        "Dynamic tables don\u2019t currently support incremental refreshes on some constructs,\noperators, and functions. If you specify the following in the query, the dynamic\ntable is updated through a full refresh:",
        "Set operators:",
        "UNION, MINUS, EXCEPT, INTERSECT.",
        "The following uses of UNION [ ALL ]:",
        "UNION ALL of a table and itself or a clone of itself.",
        "UNION ALL between a GROUP BY or DISTINCT and another GROUP BY or DISTINCT.",
        "All subquery operators.",
        "The following outer join (left, right, or\nfull) patterns:",
        "Outer joins where both sides are the same table.",
        "Outer joins where both sides are a subquery with GROUP BY clauses.",
        "Outer joins with non-equality predicates.",
        "The following uses of window functions:",
        "Multiple window functions in the same dynamic table definition, where PARTITION BY\nclauses are either non-identical or they appear in separate query blocks.",
        "Using the window functions PERCENT_RANK, DENSE_RANK, RANK with sliding window frames.",
        "Using ANY_VALUE since it\u2019s a non-deterministic function.",
        "The following uses of user-defined functions (UDF):",
        "UDFs and UDTFs written in Python, Java, Scala, or Javascript, and specifying the\nVOLATILE parameter.",
        "SQL UDFs that contain subqueries.",
        "LATERAL joins, except for using\nLATERAL with FLATTEN().",
        "You can\u2019t select the flatten SEQ column from a lateral flatten join. For more\ninformation, see Supported queries in incremental refresh.",
        "ML or LLM functions.",
        "Masking or row access policies on a dynamic table don\u2019t affect its refresh mode.\nHowever, policies applied on source tables might affect the refresh mode:",
        "Incremental refresh is supported if the policies on source tables use the\nCURRENT_ROLE function.",
        "Incremental refresh isn\u2019t supported if the policies on source tables use any\nother functions, INFORMATION_SCHEMA views, or query a table (for example, a\nmapping table lookup).",
        "Replicated dynamic tables with incremental refresh reinitialize after failover before\nthey can resume incremental refresh.",
        "For more information, see Replication and dynamic tables.",
        "Cloned incremental dynamic tables might need to\nreinitialize during their first refresh after being created.",
        "If a dynamic table is cloned from another dynamic table with dropped base tables, the\nclone will be suspended and can\u2019t be resumed or refreshed.",
        "Was this page helpful?",
        "On this page"
    ]
}