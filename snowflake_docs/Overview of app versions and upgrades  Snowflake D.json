{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/update-app-overview",
    "title": "Overview of app versions and upgrades | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic provides information about how versions, patches and upgrades work in the\nSnowflake Native App Framework.",
        "The Snowflake Native App Framework allows providers to create versions and patches of an app. Versions and patches allow providers to\nrelease new functionality and updates to consumers.",
        "Generally contains major updates to a Snowflake Native App. Versions generally introduce new features and changed\nfunctionality for an app.",
        "Generally contains smaller updates to a Snowflake Native App. Unlike versions, patches should only contain small\nupdates such as security fixes.",
        "The versions and patches of an app are specified in the application package.",
        "Caution",
        "An app can only have two active versions at one time. Each version of an app can have up to 130 patches.",
        "To add a new version to an application package that currently has two versions defined, providers must remove one of\nthe existing versions. To remove a version, a provider must:",
        "Ensure that all consumers have upgraded off the version to be removed.",
        "Remove the version from the application package.",
        "Create a new version.",
        "Upgrade the app.",
        "Caution",
        "Although an app might be upgraded in the consumer account, the previous version of the app might still have code that is\nrunning. Providers cannot remove the previous of the app from the application package until all running code from the\nprevious version has completed. This applies to all installed versions of the app across all consumer accounts. If a single\nupgrade fails, providers must fix the reason for the upgrade failure before they can remove the version.",
        "Although an application package can only contain two active versions at one time, a single version can have multiple patches.\nThe Snowflake Native App Framework does not support dropping patches. When a provider adds a new version to an application package, the new version is\nautomatically assigned patch 0 by default. This cannot be changed.",
        "When a provider adds a new patch to a version, they can manually specify the identifier for the patch. If no patch number is\nprovided, Snowflake automatically increments the patch version by 1.",
        "Note",
        "Each version and patch must have its own setup script and application files versions.",
        "When a provider publishes a new version of an app, the Snowflake Native App Framework ensures that only the previous version of the\napp is active. For example, if a provider has published versions v1 and v2 of an app, the Snowflake Native App Framework ensures that only v2 is\ncurrently installed in a consumer account before upgrading to v3. This requires that all installed apps using version\nv1 are migrated to version v2.",
        "This ensures that the setup script of the app only has to account for differences between v2 and v3. The setup script is\nonly backwards compatible with the most recent version of the app. If a provider makes a state change to the app, for example\ncreating a new table or adding columns to a table, providers only have to ensure that there are no compatibility issues between\ntwo versions.",
        "In contrast, when a provider creates a new patch for a version of an app, the Snowflake Native App Framework does not enforce any\nrestrictions on the number of active patches running. Providers must avoid making changes to the state of\nan app in a patch to avoid incompatibility across multiple patches.",
        "When developing a new version of an app, providers must consider if the components they are modifying need to preserve\ntheir state from one version or patch to another. A typical app contains two types of components:",
        "Stateless objects are recreated for each new version or patch of the app. Stateless objects only need to be available\nfor the lifetime of the version and can be recreated as necessary. Stateless objects are typically the code of the app,\nincluding stored procedures, user-defined functions, Streamlit apps, and similar content.",
        "Stateless objects should be created in a versioned schema.",
        "Stateful objects are shared from one version or patch of the app to another. Stateful components are intended to have a\nlifetime across multiple versions of the app. For example, if an app uses a table to store configuration information within\nthe consumer account, the contents of this table would need to be preserved during upgrade.",
        "Stateful objects should be created using a regular schema.",
        "When writing the setup script for the new version of the app, providers must account for stateless and stateful components. To\nhandle stateless objects the Snowflake Native App Framework provides a special type of database schema referred to as versioned schemas. A versioned schema is\nsimilar to a regular database schema with added functionality to handle multiple versions of objects created by different app\nversions.",
        "See Use versioned schema to manage app objects across versions for more information.",
        "The Snowflake Native App Framework allows providers to upgrade an app to a new version or patch. To see how\nupgrades fit in the overall workflow for developing a new version or patch of an app, see\nWorkflow for updating an app.",
        "Providers can initiate an upgrade of an app to a new version or patch by setting a release directive\non the application package. When the release directive is modified, Snowflake automatically upgrades\nall installed instances of the current version of the app to the version specified by the release directive.",
        "When the provider initiates an upgrade, Snowflake adds each app to be upgraded to a queue. Each\napp is upgraded as resources are available. The upgrade process can take a while to complete across all\ninstalled versions of the app. To expedite the upgrade process, consumers can also manually initiate an upgrade\nof an app when a new version or patch is available.",
        "Note",
        "After the upgrade process begins for their app, consumers can no longer manually upgrade the app.",
        "For more information, see Upgrade an app.",
        "See Upgrade an app across regions for information on upgrading an app installed\nacross regions using Cross-Cloud Auto-Fulfillment.",
        "To understand how app versions and patches work together, consider a scenario where a provider\nhas published an initial version, v1, of an app and consumer A and consumer B have installed that\nversion of the app in their accounts.",
        "This scenario is shown in the following sections.",
        "Figure 1 shows version v1.0 of an app that a provider published and two consumers have\ninstalled the app in their accounts:",
        "Figure 1 - version v1.0\u00b6",
        "This figure shows the following:",
        "The application files for v1.0 are stored in a stage.",
        "The release directive of the application package is set to v1.0.",
        "Consumers have installed v1.0 in their account.",
        "The provider has begun development of version v2.0 in their account.",
        "Figure 2 shows that the provider has uploaded version v2.0 and created a new\nversion in the application package:",
        "Figure 2 - upload files to the stage\u00b6",
        "This figures shows the following:",
        "After testing version v2.0 of the app locally, the provider uploads the v2.0 file to the stage",
        "The provider creates a new version for the app in the application package.",
        "The release directive continues to point to version v1.0 of the app.",
        "Consumers continue to have version v1.0 installed in their account.",
        "To perform an upgrade from version v1.0 to version v2.0 of the app, the provider sets the\nrelease directive of the application\npackage to version v2.0. This starts the process of upgrading the app in the consumer\naccounts.",
        "After the upgrade completes, both consumers A and B have version v2.0 installed in their accounts as shown in the\nFigure 3 diagram.",
        "Figure 3 - upgrade from version v1.0 to v2.0\u00b6",
        "Also, in this scenario the provider has begun developing and testing version v3.0 in their local development environment.",
        "When testing is complete, the provider uploads version v3.0 to the stage. When the provider wants to begin the upgrade to\nversion v3.0, they must first ensure that all consumers have migrated off of version v1.0.",
        "In the scenario shown in the previous section, all consumers are currently on v2.0.",
        "The provider must drop version v1.0 from the application package as shown in Figure 4:",
        "Figure 4 - drop version v1.0 from the application package\u00b6",
        "After dropping version v1.0, the provider can then add version v3.0 to the application package. In this context, the\nrelease directive is still pointing to v2.0 and consumers have v2.0 installed in their account.",
        "Figure 5 - add version v3.0 to the application package\u00b6",
        "To upgrade to v3.0, the provider updates the release directive to point to v3.0. This begins the upgrade. When the upgrade\nis complete, consumers are upgraded to version v3.0 as shown in the following figure:",
        "Figure 5 - upgrade to version v3.0\u00b6",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}