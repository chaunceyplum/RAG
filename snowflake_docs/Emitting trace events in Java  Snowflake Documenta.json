{
    "url": "https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-java",
    "title": "Emitting trace events in Java | Snowflake Documentation",
    "paragraphs": [
        "You can use the com.snowflake.telemetry.Telemetry class in the Snowflake Telemetry API library to emit trace events from a function or\nprocedure handler written in Java. The Telemetry class is included with Snowflake.",
        "Note",
        "Using the Snowflake Telemetry Library adds other libraries to your function or procedure\u2019s execution environment. For more information,\nsee Snowflake telemetry package dependencies.",
        "For information on including the Telemetry library when packaging your code with Maven, see\nSetting up your Java and Scala environment to use the Telemetry class.",
        "You can access stored trace event data by executing a SELECT command on the event table. For more information, see\nViewing trace data.",
        "Note",
        "For guidelines to keep in mind when adding trace events, see General guidelines for adding trace events.",
        "For general information about setting up logging and retrieving messages in Snowflake, see\nLogging messages from functions and procedures.",
        "Before logging from code, you must:",
        "Set up an event table to collect messages logged from handler code.",
        "For more information, see Event table overview.",
        "Be sure you have the trace level set so that the data you want are stored in the event table.",
        "For more information, see Setting levels for logging, metrics, and tracing.",
        "To use Telemetry methods, you must make the Snowflake Telemetry library, which is included with Snowflake, available to your\nhandler code.",
        "In the PACKAGES clause in your CREATE PROCEDURE or CREATE FUNCTION statement, include the com.snowflake:telemetry package. The\nPACKAGES clause makes the included Snowflake Telemetry API available to your code.",
        "Code in the following example uses the PACKAGES clause to reference the Telemetry library as well as the Snowpark library (which is\nrequired for stored procedures written in Java \u2013 for more information, see Writing stored procedures in Java).",
        "Import the com.snowflake.telemetry package in your Java handler code.",
        "You can add trace events by calling the Telemetry.addEvent method, passing a name for the event. You can also optionally associate\nattributes \u2013 key-value pairs \u2013 with an event.",
        "The addEvent method has the following signatures:",
        "Code in the following example adds an event called testEvent, associating with the event two attributes: key and result.",
        "Adding these events results in two rows in the event table, each with a different value in the RECORD column:",
        "The testEventWithAttributes event row includes the following attributes in the row\u2019s RECORD_ATTRIBUTES column:",
        "You can set attributes \u2013 key-value pairs \u2013 associated with spans by calling the Telemetry.setSpanAttribute method.",
        "The setSpanAttribute method has the following signatures:",
        "For details on spans, see How Snowflake represents trace events.",
        "Code in the following example creates four attributes and sets their values:",
        "Setting these attributes results in the following in the event table\u2019s RECORD_ATTRIBUTES column:",
        "Note",
        "Support for custom spans is a preview feature available to all accounts.",
        "You can add custom spans that are separate from the default span created by Snowflake. For details on custom spans, see\nAdding custom spans to a trace.",
        "Code in the following example uses the OpenTelemetry API and OpenTelemetry context propagation API to create a new my.span\nspan. It then adds an event with attributes to the new span. Finally, the code ends the span to have the span\u2019s event data\ncaptured in the event table. If the code doesn\u2019t call the Span.end method, data is not captured in the event table.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}