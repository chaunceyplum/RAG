{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/select",
    "title": "SELECT | Snowflake Documentation",
    "paragraphs": [
        "SELECT can be used as either a statement or as a clause within other statements:",
        "As a statement, the SELECT statement is the most commonly executed SQL statement; it queries the database and retrieves a set of rows.",
        "As a clause, SELECT defines the set of columns returned by a query.",
        "Query syntax",
        "The following sections describe the syntax for this command:",
        "Selecting all columns",
        "Selecting specific columns",
        "You can specify the following combinations of keywords after SELECT *. The keywords must be in the order shown below:",
        "A trailing comma is supported in a column list. For example, the following SELECT statement is supported:",
        "For more information about SELECT as a statement and the other clauses within the statement, see\nQuery syntax.",
        "Specifies whether to perform duplicate elimination on the result set:",
        "ALL includes all values in the result set.",
        "DISTINCT eliminates duplicate values from the result set.",
        "Default: ALL",
        "Specifies the maximum number of results to return. See TOP <n>.",
        "Specifies the object identifier or object alias as defined in the FROM clause.",
        "The asterisk is shorthand to indicate that the output should include all columns of the specified object, or all columns of\nall objects if * is not qualified with an object name or alias. The columns are returned in the order shown by\nexecuting the DESCRIBE command on the object.",
        "When you specify *, you can also specify ILIKE, EXCLUDE, REPLACE, and RENAME:",
        "Specifies that only the columns that match pattern should be included in the results.",
        "In pattern, you can use the following SQL wildcards:",
        "Use an underscore (_) to match any single character.",
        "Use a percent sign (%) to match any sequence of zero or more characters.",
        "To match a sequence anywhere within the column name, begin and end the pattern with %.",
        "Matching is case-insensitive.",
        "If no columns match the specified pattern, a compilation error occurs (001080 (42601): ... SELECT with no columns).",
        "Specifies the columns that should be excluded from the results.",
        "If you are selecting from multiple tables, use SELECT table_name.* to specify that you want to select all columns\nfrom a specific table, and specify the unqualified column name in EXCLUDE. For example:",
        "Replaces the value of col_name with the value of the evaluated expression expr.",
        "For example, to prepend the string 'DEPT-' to the values in the department_id column, use:",
        "For col_name:",
        "The column must exist and cannot be filtered out by ILIKE or EXCEPT.",
        "You cannot specify the same column more than once in the list of replacements.",
        "If the column is in multiple tables (for example, in both tables in a join), the statement fails with an \u201cambiguous column\u201d\nerror.",
        "expr must evaluate to a single value.",
        "Specifies the column aliases that should be used in the results.",
        "If you are selecting from multiple tables, use SELECT table_name.* to specify that you want to select all columns\nfrom a specific table, and specify the unqualified column name in RENAME. For example:",
        "Note",
        "When specifying a combination of keywords after SELECT *:",
        "You cannot specify both ILIKE and EXCLUDE.",
        "If you specify EXCLUDE with RENAME or REPLACE:",
        "You must specify EXCLUDE before RENAME or REPLACE:",
        "You cannot specify the same column in EXCLUDE and RENAME.",
        "If you specify ILIKE with RENAME or REPLACE, you must specify ILIKE first:",
        "If you specify REPLACE and RENAME:",
        "You must specify REPLACE first:",
        "You can specify the same column name in REPLACE and RENAME:",
        "Specifies the column identifier as defined in the FROM clause.",
        "Specifies the position of the column (1-based) as defined in the FROM clause. If a column is\nreferenced from a table, this number can\u2019t exceed the maximum number of columns in the table.",
        "Specifies an expression, such as a mathematical expression, that evaluates\nto a specific value for any given row.",
        "Specifies the column alias assigned to the resulting expression. This is used as the display name in a top-level SELECT list, and the column name in an inline view.",
        "Do not assign a column alias that is the same as the name of another column referenced in the query.\nFor example, if you are selecting columns named prod_id and product_id, do not alias prod_id as product_id.\nSee Error case: Specifying an alias that matches another column name.",
        "Aliases and identifiers are case-insensitive by default. To preserve case, enclose them within double quotes (\"). For more\ninformation, see Object identifiers.",
        "Without an ORDER BY clause, the results returned by SELECT are an unordered set. Running the same query repeatedly against the\nsame tables might result in a different output order every time. If order matters, use the ORDER BY clause.",
        "SELECT can be used not only as an independent statement, but also as a clause in other statements, for example\nINSERT INTO ... SELECT ...;. SELECT can also be used in a\nsubquery within a statement.",
        "In many cases, when you use a column alias for an expression (i.e. expr AS col_alias) in other parts of the same\nquery (in JOIN, FROM, WHERE, GROUP BY, other column expressions, etc.), the expression is evaluated only once.",
        "However, note that in some cases, the expression can be evaluated multiple times, which can result in different values for the\nalias used in different parts of the same query.",
        "A few simple examples are provided below.",
        "Setting up the data for the examples",
        "Examples of selecting all columns (SELECT *)",
        "Examples of selecting specific columns (SELECT colname)",
        "Many additional examples are included in other parts of the documentation, including the detailed descriptions of\nQuery syntax.",
        "For examples related to querying an event table (whose schema is predefined by Snowflake), refer to\nViewing log messages and Viewing trace data.",
        "Some of the queries below use the following tables and data:",
        "Selecting all columns in the table",
        "Selecting all columns with names that match a pattern",
        "Selecting all columns except one column",
        "Selecting all columns except two or more columns",
        "Selecting all columns and renaming one column",
        "Selecting all columns and renaming multiple columns",
        "Selecting all columns with names that match a pattern and renaming a column",
        "Selecting all columns, excluding a column, and renaming multiple columns",
        "Selecting all columns and replacing the value of a column",
        "Selecting all columns, replacing the value of a column, and renaming the column",
        "Selecting all columns with names that match a pattern and replacing the value in a column",
        "Selecting all columns from multiple tables, excluding a column, and renaming a column",
        "This example shows how to select all columns in employee_table:",
        "This example shows how to select all columns in employee_table with names that contain id:",
        "This example shows how to select all columns in employee_table except for the department_id column:",
        "This example shows how to select all columns in employee_table except for the department_id and employee_id columns:",
        "This example shows how to select all columns in employee_table and rename the department_id column:",
        "This example shows how to select all columns in employee_table and rename the department_id and employee_id columns:",
        "This example shows how to select all columns in employee_table, exclude the first_name column,  and rename the\ndepartment_id and employee_id columns:",
        "This example shows how to select all columns in employee_table with names that contain id and rename the\ndepartment_id column:",
        "This example shows how to select all columns in employee_table and replace the value in the department_id column with\nthe ID prepended with DEPT-:",
        "This example shows how to select all columns in employee_table, replace the value in the department_id column with\nthe ID prepended with DEPT-, and rename the column:",
        "This example shows how to select all columns in employee_table with names that contain id and prepending DEPT- to the\nvalues in the department_id column:",
        "This example joins two tables and selects all columns from both tables except one column from employee_table. The example also\nrenames one of the columns selected from department_table.",
        "Selecting a single column by name",
        "Selecting multiple columns by name from joined tables",
        "Selecting a column by position",
        "Specifying an alias for a column in the output",
        "Error case: Specifying an alias that matches another column name",
        "This example shows how to look up an employee\u2019s last name if you know their ID.",
        "This example lists each employee and the name of the department that each employee works in. The output is in order by department\nname, and within each department the employees are in order by name. This query uses a join to relate the information in one table\nto the information in another table.",
        "This example shows how to use $ to specify a column by column number, rather than by column name:",
        "This example shows that the output columns do not need to be taken directly from the tables in the FROM clause; the output columns\ncan be general expressions. This example calculates the area of a circle that has a radius of 2.0. This example also shows how to use\na column alias so that the output has a meaningful column name:",
        "This example demonstrates why it is not recommended to use a column alias that matches\nthe name of another column that is used in the query. This GROUP BY query results in a\nSQL compiler error, not an ambiguous column error.\nThe alias prod_id that is assigned to product_id in table1 matches the name\nof the prod_id column in table2. The simplest solution to this error is to give\nthe column a different alias.",
        "Was this page helpful?",
        "On this page"
    ]
}