{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark-ml/reference/latest/api/registry/snowflake.ml.registry.Registry",
    "title": "snowflake.ml.registry.Registry | Snowflake Documentation",
    "paragraphs": [
        "Bases: object",
        "Opens a registry within a pre-created Snowflake schema.",
        "session \u2013 The Snowpark Session to connect with Snowflake.",
        "database_name \u2013 The name of the database. If None, the current database of the session\nwill be used. Defaults to None.",
        "schema_name \u2013 The name of the schema. If None, the current schema of the session\nwill be used. If there is no active schema, the PUBLIC schema will be used. Defaults to None.",
        "options \u2013 Optional set of configurations to modify registry.\nRegistry Options include:\n- enable_monitoring: Feature flag to indicate whether registry can be used for monitoring.",
        "ValueError \u2013 When there is no specified or active database in the session.",
        "Methods",
        "Add a Model Monitor to the Registry.",
        "name \u2013 Name of Model Monitor to create.",
        "source_config \u2013 Configuration options of table for Model Monitor.",
        "model_monitor_config \u2013 Configuration options of Model Monitor.",
        "The newly added Model Monitor object.",
        "ValueError \u2013 If monitoring is not enabled in the Registry.",
        "This function or method is in private preview since 1.7.0.",
        "Delete the model by its name.",
        "model_name \u2013 The name of the model to be deleted.",
        "Delete a Model Monitor by name from the Registry.",
        "name \u2013 Name of the Model Monitor to delete.",
        "ValueError \u2013 If monitoring is not enabled in the registry.",
        "This function or method is in private preview since 1.7.0.",
        "Get the model object by its name.",
        "model_name \u2013 The name of the model.",
        "The corresponding model object.",
        "Get a Model Monitor from the Registry.",
        "name \u2013 Name of Model Monitor to retrieve.",
        "model_version \u2013 Model Version for which to retrieve the Model Monitor.",
        "The fetched Model Monitor.",
        "ValueError \u2013 If monitoring is not enabled in the Registry.",
        "This function or method is in private preview since 1.7.0.",
        "Log a model with various parameters and metadata, or a ModelVersion object.",
        "model \u2013 Supported model or ModelVersion object.\n- Supported model: Model object of supported types such as Scikit-learn, XGBoost, LightGBM, Snowpark ML,\nPyTorch, TorchScript, Tensorflow, Tensorflow Keras, MLFlow, HuggingFace Pipeline, Sentence Transformers,\nor Custom Model.\n- ModelVersion: Source ModelVersion object used to create the new ModelVersion object.",
        "model_name \u2013 Name to identify the model.",
        "version_name \u2013 Version identifier for the model. Combination of model_name and version_name must be unique.\nIf not specified, a random name will be generated.",
        "comment \u2013 Comment associated with the model version. Defaults to None.",
        "metrics \u2013 A JSON serializable dictionary containing metrics linked to the model version. Defaults to None.",
        "signatures \u2013 Model data signatures for inputs and outputs for various target methods. If it is None,\nsample_input_data would be used to infer the signatures for those models that cannot automatically\ninfer the signature. If not None, sample_input_data should not be specified. Defaults to None.",
        "sample_input_data \u2013 Sample input data to infer model signatures from.\nIt would also be used as background data in explanation and to capture data lineage. Defaults to None.",
        "conda_dependencies \u2013 List of Conda package specifications. Use \u201c[channel::]package [operator version]\u201d syntax\nto specify a dependency. It is a recommended way to specify your dependencies using conda. When channel\nis not specified, Snowflake Anaconda Channel will be used. Defaults to None.",
        "pip_requirements \u2013 List of Pip package specifications. Defaults to None.\nCurrently it is not supported since Model can only executed in Snowflake Warehouse where all\ndependencies are required to be retrieved from Snowflake Anaconda Channel.",
        "target_platforms \u2013 List of target platforms to run the model. The only acceptable inputs are a combination of\n{\u201cWAREHOUSE\u201d, \u201cSNOWPARK_CONTAINER_SERVICES\u201d}. Defaults to None.",
        "python_version \u2013 Python version in which the model is run. Defaults to None.",
        "code_paths \u2013 List of directories containing code to import. Defaults to None.",
        "ext_modules \u2013 List of external modules to pickle with the model object.\nOnly supported when logging the following types of model:\nScikit-learn, Snowpark ML, PyTorch, TorchScript and Custom Model. Defaults to None.",
        "task \u2013 The task of the Model Version. It is an enum class Task with values TABULAR_REGRESSION,\nTABULAR_BINARY_CLASSIFICATION, TABULAR_MULTI_CLASSIFICATION, TABULAR_RANKING, or UNKNOWN. By default,\nit is set to Task.UNKNOWN and may be overridden by inferring from the Model Object.",
        "options (Dict[str, Any], optional) \u2013",
        "Additional model saving options.",
        "Model Saving Options include:",
        "Override to True if the local Snowpark ML version is not available in the Snowflake Anaconda\nChannel. Otherwise, defaults to False",
        "Warehouse. It detects any ==x.y.z in specifiers and replaced with >=x.y, <(x+1). Defaults to True.",
        "function_type: Set the method function type globally. To set method function types individually see\nfunction_type in model_options.",
        "This means when you refer the method in the SQL, you need to double quote it.\nThis will be helpful if you need case to tell apart your methods or features, or you have\nnon-alphabetic characters in your method or feature name. Defaults to False.",
        "Defaults to None, determined automatically by Snowflake.",
        "function_type: One of supported model method function types (FUNCTION or TABLE_FUNCTION).",
        "",
        "ModelVersion object corresponding to the model just logged.",
        "ModelVersion",
        "Get all models in the schema where the registry is opened.",
        "A list of Model objects representing all models in the opened registry.",
        "Show all model monitors in the registry.",
        "List of snowpark.Row containing metadata for each model monitor.",
        "ValueError \u2013 If monitoring is not enabled in the Registry.",
        "This function or method is in private preview since 1.7.0.",
        "Show information of all models in the schema where the registry is opened.",
        "A Pandas DataFrame containing information of all models in the schema.",
        "Attributes",
        "Get the location (database.schema) of the registry.",
        "Was this page helpful?"
    ]
}