{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/connector-sdk/using/sproc_and_handlers_customization",
    "title": "Stored procedures and handlers customization | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Available to accounts in all regions in all cloud providers (including government regions). For details, contact your Snowflake representative.",
        "The Snowflake Native SDK for Connectors provides the general structure of the connector,\nhowever, it allows for some customizations, depending on the source system and the actual needs of the developer.\nFor that reason, some features have empty basic implementations and it is possible to overwrite them with custom logic.\nFurthermore, the components can be enabled and disabled according to specific needs, more on this in the choosing components section.",
        "Stored procedures provided by the SDK can be split into two categories:",
        "High-level entry points to the logic implemented in Java",
        "Internal procedures with smaller scope",
        "Because they have different responsibilities, the customization process is also different.",
        "High level procedures are used only as an entry point to the actual logic implemented in Java.\nSo to change the underlying logic a path to the new handler needs to be specified when recreating the stored procedure.\nThis procedure needs to be added as custom code in the setup.sql script.\nThis requires the new Java implementation to be provided, it can be done from scratch or using the provided in the SDK builders,\nwhich are described below:",
        "Some of the procedures provided by the Snowflake Native SDK for Connectors have so little logic that they can be easily written using only SQL.\nFor those procedures it is possible to replace the default implementations using SQL only. For example some procedures with _VALIDATE or _INTERNAL suffixes can be reimplemented this way.\nAll those procedures can be also customized using Java only approach through Builders. This approach is explained below.\nThere is also a possibility to replace a procedure that was using only plain SQL to use handler instead. In this case it will be\nthe same as for the high level stored procedures above.",
        "The Snowflake Native SDK for Connectors defines default handlers for the stored procedures. They can be used as they are, customized or completely replaced.\nFor the latter case, the whole custom implementation does not need to follow standards defined by\nthe SDK and the custom implementation needs to be specified in SQL as it was mentioned above for customizing high level procedures.",
        "However, if you wish to follow the flow of the connector defined by the SDK there is a way to customize only some parts of the flow.\nEach existing handler is using multiple underlying objects, in the most cases those are:\nvalidator, callback or helper classes. Each of them satisfies some interface and it\u2019s\npossible to replace default implementations with the custom implementations of the interface.",
        "To retain the SDK-defined flow in the connector during customization helper objects called builders are provided.\nEach handler class has its own builder bundled. Those allow the user to provide a custom implementation of the underlying Java objects.\nThis way the developer does not need to touch the connector internal flow and can focus on customizing just the needed parts.\nThere is a small catch when using builders, this approach also requires the developer to\nspecify the new entry point method that will be referenced in the stored procedure.",
        "For example, a handler using a customized validator using the builder looks like this:",
        "Then the entry point method in SQL needs to be specified like this:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}