{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/python/creating-udtfs",
    "title": "Creating User-Defined Table Functions (UDTFs) for DataFrames in Python | Snowflake Documentation",
    "paragraphs": [
        "The Snowpark API provides methods that you can use to create a user-defined table function with a handler written in Python.\nThis topic explains how to create these types of functions.",
        "You can create a user-defined table function (UDTF) using the Snowpark API.",
        "You do this in a way similar to creating a scalar user-defined function (UDF) with the API, as described in\nCreating User-Defined Functions (UDFs) for DataFrames in Python. Key differences include UDF handler requirements and parameter values required when registering\nthe UDTF.",
        "To create and register a UDTF with Snowpark, you must:",
        "Implement a UDTF handler.",
        "The handler contains the UDTF\u2019s logic. A UDTF handler must implement functions that Snowflake will invoke at runtime when the UDTF is\ncalled. For more information, see Implementing a UDTF Handler.",
        "Register the UDTF and its handler in the Snowflake database.",
        "You can use the Snowpark API to register the UDTF and its handler. Once you\u2019ve registered the UDTF, you can call it from SQL or by using\nthe Snowpark API. For more information about registering, see Registering a UDTF.",
        "For information on calling a UDTF, see Calling User-Defined Table Functions (UDTFs).",
        "As described in detail in Writing a UDTF in Python, a UDTF handler class must implement methods that\nSnowflake invokes when the UDTF is called. You can use the class you write as a handler whether you\u2019re registering the UDTF with the\nSnowpark API or creating it with SQL using the CREATE FUNCTION statement.",
        "Methods of a handler class are designed to process rows and partitions received by the UDTF.",
        "A UDTF handler class implements the following, which Snowflake invokes at run time:",
        "An __init__ method. Optional. Invoked to initialize stateful processing of input partitions.",
        "A process method. Required. Invoked for each input row. The method returns a tabular value as tuples.",
        "An end_partition method. Optional. Invoked to finalize processing of input partitions.",
        "While Snowflake supports large partitions with timeouts tuned to process them successfully, especially large partitions can cause\nprocessing to time out (such as when end_partition takes too long to complete). Please contact Snowflake Support if you need the\ntimeout threshold adjusted for specific usage scenarios.",
        "For handler details and examples, see Writing a UDTF in Python.",
        "Once you\u2019ve implemented a UDTF handler, you can use the Snowpark API to register the UDTF on the Snowflake database. Registering the UDTF\ncreates the UDTF so that it can be called.",
        "You can register the UDTF as a named or anonymous function, as you can for a scalar UDF. For related information about registering a scalar\nUDF, see Creating an Anonymous UDF and Creating and Registering a Named UDF.",
        "When you register a UDTF, you specify parameter values that Snowflake needs to create the UDTF. (Many of these parameters correspond\nfunctionally to clauses of the CREATE FUNCTION statement in SQL. For more information, see CREATE FUNCTION.)",
        "Most of these parameters are the same as those you specify when you create a scalar UDF (for more information,\nsee Creating User-Defined Functions (UDFs) for DataFrames in Python). The primary differences are due to the fact that a UDTF returns a tabular\nvalue and the fact that its handler is a class, rather than a function. For a complete list of parameters, see the documentation for the\nAPIs linked below.",
        "To register a UDTF with Snowpark, you use one of the following, specifying parameter values required to create the UDTF in the\ndatabase. For information that differentiates these options, see\nUDFRegistration,\nwhich describes similar options for registering a scalar UDF.",
        "Use the register or udtf function, pointing to a runtime Python function. You can also use the udtf function as\na decorator on the handler class.",
        "For reference on these functions, see:",
        "snowflake.snowpark.functions.udtf",
        "snowflake.snowpark.udtf.UDTFRegistration.register",
        "Use the register_from_file function, pointing to a Python file or zip file containing Python source code.",
        "For the function reference, see snowflake.snowpark.udtf.UDTFRegistration.register_from_file.",
        "When you register a UDTF, you specify details about the function\u2019s parameters and output value. You do this so that the function itself\ndeclares types that accurately correspond to those for the function\u2019s underlying handler.",
        "For examples, see Examples in this topic and in the\nsnowflake.snowpark.udtf.UDTFRegistration\nreference.",
        "You specify the following for the UDTF when registering it:",
        "Types of its input parameters as a value of the registering function\u2019s input_types parameter. The input_types parameter is\noptional if you provide type hints in the process method\u2019s declaration.",
        "Specify this value as a list of types based on\nsnowflake.snowpark.types.DataType.\nFor example, you might specify input_types=[StringType(), IntegerType()].",
        "Schema of its tabular output as a value of the registering function\u2019s output_schema parameter.",
        "The output_schema value can be one of the following:",
        "A list of the names for columns in the UDTF\u2019s return value.",
        "The list will include column names only, so you must also provide type hints in the process method\u2019s declaration.",
        "A StructType\nthat represents the output table\u2019s column names and types.",
        "Code in the following example assigns a schema as a value to an output variable, then uses the variable when registering the UDTF.",
        "The following is a brief list of examples. For more examples, see snowflake.snowpark.udtf.UDTFRegistration.",
        "Registering a UDTF with the udtf Function",
        "Register the function.",
        "Call the function.",
        "Registering a UDTF with the register Function",
        "Register the function.",
        "Call the function.",
        "Registering a UDTF with the register_from_file Function",
        "Register the function.",
        "Call the function.",
        "Was this page helpful?",
        "On this page"
    ]
}