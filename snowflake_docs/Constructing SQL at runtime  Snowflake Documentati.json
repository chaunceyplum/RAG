{
    "url": "https://docs.snowflake.com/en/user-guide/querying-construct-at-runtime",
    "title": "Constructing SQL at runtime | Snowflake Documentation",
    "paragraphs": [
        "Snowflake supports several different techniques for constructing strings of SQL statements dynamically at runtime.\nBy using these techniques, you can specify more general and flexible SQL strings for use cases where the full text\nof the SQL statements are unknown until runtime.",
        "A stored procedure or application can accept user input and then use that input in a SQL statement. For example,\na table might store information about sales orders. An application or stored procedure might accept an order ID as\ninput and run a query that only returns the results for that specific order.",
        "A developer can write stored procedure code or application code with SQL statements that contain placeholders, and\nthen bind variables to those placeholders in the code. These placeholders are called\nbind variables. A developer can also write code that constructs SQL\nstatements from an input string (for example, by concatenating strings that contain a SQL command, parameters,\nand values).",
        "The following techniques are available for constructing SQL statements dynamically at runtime:",
        "The TO_QUERY function -  This function takes\na SQL string with optional parameters as input.",
        "Dynamic SQL - Code in a stored procedure or\napplication takes input and constructs a dynamic SQL statement using this input. The code can be part of a\nSnowflake Scripting or\nJavascript\nstored procedure, or a Snowflake Scripting anonymous block. You can also use this technique in your\napplication code that uses a Snowflake driver or the\nSnowflake SQL API.",
        "Note",
        "When programs construct SQL statements with user input, there are potential security risks, such as\nSQL injection. If inputs to SQL statements come from external sources, make sure they are validated.\nFor more information, see SQL injection.",
        "You can use the TO_QUERY function in the code for stored procedures and applications\nthat construct SQL statements dynamically. This table function takes a SQL string as input. Optionally, the\nSQL string can contain parameters, and you can specify the arguments to pass to the parameters as\nbind variables.",
        "The following is a simple example that calls the function:",
        "The following example uses the TO_QUERY function in a stored procedure:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure:",
        "To construct SQL statements that take user input, you can use dynamic SQL in a\nSnowflake Scripting\nor Javascript stored procedure, or in a Snowflake\nScripting anonymous block . You can also use dynamic SQL in your application code that uses a\nSnowflake driver or the Snowflake SQL API.",
        "This example creates a stored procedure with Snowflake Scripting. The stored procedure takes SQL text as input and constructs\na string containing a SQL statement by appending the text to it. The dynamic SQL is then executed using the\nEXECUTE IMMEDIATE command.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following example calls the procedure:",
        "Dynamic SQL supports bind variables. The following Snowflake Scripting example uses bind variables represented\nby the ? placeholders to construct SQL statements dynamically at runtime. This block selects data from the\nfollowing invoices table:",
        "Execute the anonymous block:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following table describes the advantages and disadvantages of the techniques for constructing\nSQL dynamically.",
        "Technique",
        "Advantages",
        "Disadvantages",
        "TO_QUERY function",
        "Simple syntax",
        "Built-in error handling",
        "Specific semantics for the use case of constructing SQL dynamically",
        "Automatically determined result set",
        "Queries cannot be described or explained before execution",
        "Only valid in the FROM clause of a SELECT statement",
        "Snowflake specific",
        "Dynamic SQL",
        "More general and flexible than the TO_QUERY function",
        "Queries can be described or explained before execution",
        "More complex than the TO_QUERY function",
        "Manual error handling",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}