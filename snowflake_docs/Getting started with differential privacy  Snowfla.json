{
    "url": "https://docs.snowflake.com/en/user-guide/tutorials/diff-privacy",
    "title": "Getting started with differential privacy | Snowflake Documentation",
    "paragraphs": [
        "This tutorial demonstrates how to protect sensitive data using a differential privacy policy so that you can share it safely with analysts.",
        "In this tutorial you will learn how to do the following:",
        "Create a differential privacy policy.",
        "Apply that privacy policy to a table to protect it with differential privacy.",
        "Define privacy domains for a table.",
        "Run a query on a table protected by differential privacy.",
        "Determine the amount of noise present in query results.",
        "This tutorial does not fully explain the key concepts of differential privacy, such as noise,\nprivacy budgets, and\nprivacy domains. This tutorial focuses on how to apply differential\nprivacy to your data.",
        "You\u2019ll be assuming two personas in this tutorial:",
        "The admin, who has privileges to the raw data and manages differential privacy policies on a table.",
        "The analyst, who runs queries on this protected data.",
        "In real-world use cases these might be two different people or groups of people, or they could be one person who wants to analyze and\nshare protected results safely with others.",
        "While this tutorial shows how to run queries on protected data, it is intended primarily to show how to implement differential privacy\nrather than how to consume it.",
        "You must be on an account with Enterprise edition or above.",
        "You must be able to use the ACCOUNTADMIN role.",
        "Important",
        "In this tutorial you will perform all of the admin persona steps using the ACCOUNTADMIN role. In general practice, though, you should use roles with privileges specifically defined for the action you\u2019re performing. The privileges required to create and apply privacy policies are described here.",
        "In this section, you will perform the following setup steps:",
        "Create a role for the analyst.",
        "Create the warehouse used to execute the queries against the protected data.",
        "Create mock sensitive data that will be protected by the privacy policy.",
        "None of these setup steps are specific to differential privacy policies. If there already exists a suitable role, warehouse, and/or dataset, you can use those instead.",
        "In a Snowsight worksheet or other environment that is connected to run Snowflake SQL on your Snowflake account, run the following commands\nto create the analyst role and assign it to yourself:",
        "The following commands create a database, schema, and table, and fill it with data. The data simulates a simple diabetes study in which we want to protect patient identities. Later in the tutorial you\u2019ll use differential privacy to protect the identity of individuals in the study.",
        "Notes:",
        "Although it might seem that masking the patient ID would be better than using differential privacy, that would prevent joins against that\ncolumn. Additionally, if you added a table where each patient has multiple rows, such as a medications table or a visits table, simple\nmasking would prevent you from grouping results by person. This is a case where differential privacy can be much more powerful than simple\nmasking and row hiding; you can make more of your data available to analysts and allow more useful queries while still protecting entity\nprivacy.",
        "Applying a privacy policy to a table or view protects it with differential privacy and assigns a privacy budget to groups or users so that Snowflake can prevent multiple queries from revealing too much sensitive information.",
        "You will create the privacy policy in its own database. This is a best practice for all types of policies in Snowflake. If you create the\npolicy in the same database, then cloning the database would create unsynchronized copies of the policy. Putting all policies in a single,\nseparate database, and applying them to multiple tables lets you manage and update a single copy of each policy.",
        "You\u2019ll name this new policy patients_policy.",
        "Notes:",
        "The privacy policy applied depends on the role of the user, as specified in the CASE statement. Role names are given here in uppercase\nbecause CURRENT_ROLE() returns uppercase values.",
        "Creating separate privacy budgets per role allows you to separate the budget used for analysts and other users, and also to monitor\nusage by each group.",
        "If the privacy policy resolves to a valid privacy budget when evaluated, the user cannot run non-aggregated SELECT queries, noise is\nadded to the results, and the number of queries is limited by the privacy budget for that policy.",
        "The account admin role has no privacy policy applied. This means that queries run as that role have no differential privacy applied.\nTo indicate no privacy policy, you must return no_privacy_policy() rather than returning NULL.",
        "The DP_TUTORIAL_ANALYST role uses a privacy policy named \u201cclinical_analysts\u201d with default values for privacy budget, budget window, and\nmaximum budget per aggregate.",
        "Any other user with SELECT access will get a privacy budget named \u201cdefault,\u201d also with default privacy policy values. If you want to\nprevent other users from running queries on this table, you should do so by limiting the SELECT privileges on the table. Table-level\npolicies require an ELSE clause and cannot return NULL.",
        "Next you\u2019ll assign the privacy policy you just created to the table to protect it with differential privacy.",
        "Notes:",
        "The ENTITY KEY clause specifies a column that uniquely identifies the entity that should be protected by differential privacy. In this\ntutorial, which has a single table where each entity is listed in one and only one row, defining the entity key is less important. But if\neach patient could appear in multiple rows (for example, if it captured patient visits or patient medications), then defining the key would\nbe important. It\u2019s still a good practice to define the key here in case a second such table is added to the database later. Learn more about\nentity-level privacy.",
        "Next you\u2019ll set privacy domains on select columns in the table.",
        "A privacy domain tells the system the range of values that can be shown in the results for that column. The system uses this\ninformation in two ways:",
        "Values outside this range will be omitted or pegged to the boundaries, depending on whether the column is a string or numeric/date value.",
        "The system uses this \u201cvalid range\u201d as a way to determine the range of results in order to determine the noise applied to each\nmeasure value.",
        "An analyst can further restrict a domain, for example by using a WHERE clause, to potentially reduce the amount of noise generated by\ndifferential privacy (the smaller the domain, the less the noise). If you don\u2019t set a privacy domain on a column, the analyst must add a\nprivacy domain with a WHERE clause to see values for that column (columns without a privacy domain cannot be shown or used in the query).",
        "For the diabetes survey data, you will set privacy domains on three columns: gender, age, and income_code. You won\u2019t set privacy\ndomains on any boolean columns (with only two possible values, a privacy domain doesn\u2019t make sense and isn\u2019t required), and you should not\nset a privacy domain on the patient_id column because the user can see the values you set in the privacy domain, which would tell them\nwhich patient IDs are in the data. If you need to specify a privacy domain for a limited number of string values, such as ZIP codes, you\nshould pad the domain definition with additional, non-present values to obscure possible values.",
        "Grant access to the table only after you\u2019ve assigned privacy policies to the data. Otherwise, users could see the data before you apply\nprivacy policies.",
        "Finally, you can start running queries against your data!",
        "You will switch roles between admin and analyst to compare the behavior and output for each role.",
        "Use the administrator role to run a query that returns individual rows. This query succeeds because the privacy policy resolves to no_privacy_policy() for the ACCOUNTADMIN role:",
        "Now run the same query using the analyst role. The query fails because differential privacy does not allow SELECT * queries.",
        "Try with a third role to ensure that the default result is the same. (Don\u2019t forget to grant SELECT on the table to the person or role!)",
        "First, run a simple query as the administrator, without differential privcy applied. You will see the exact table values.",
        "Now run the same query as an analyst, and you\u2019ll see that noise has been applied to the results. Note that the query takes a little longer\nbecause differential privacy is being applied.",
        "The results are typically different from the admin results because differential privacy has introduced noise into the results to obscure\nthe presence of an individual in the dataset. However, the results can sometimes be identical because in any given query the randomly\ngenerated noise was small enough to round down to 0. But the analyst cannot know whether or not there is noise applied to any given query.\nYou can try running this query again to see if you get a different result.",
        "Although analysts cannot see results without noise, they do need a way to understand how noisy the result is, in general, to\ndetermine whether the data is usable for their needs. In order to provide this information, we expose the noise interval of each query\nparameter to the analyst. The noise interval is retrieved using the functions DP_INTERVAL_LOW and\nDP_INTERVAL_HIGH.",
        "There is a minimum 95% confidence that the true value of the aggregation is between LOW and HIGH.",
        "Note that the interval for this query on this data is wide compared to the magnitude of the result because of the artificially small\ndataset. This wide noise interval essentially means that there are too few patients here for Snowflake to be able to give an accurate\nanswer while protecting their privacy.",
        "Users running queries on differential privacy protected tables can see their differential privacy budget used, and an estimate of the\nnumber of remaining queries, by calling the ESTIMATE_REMAINING_DP_AGGREGATES table function. Assume the role\nfor which you want to see the budget, then call the function as shown here:",
        "Clean up your resources so that you, or someone else in your org, can run the tutorial again later.",
        "Was this page helpful?"
    ]
}