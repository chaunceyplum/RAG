{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-cli/connecting/configure-connections",
    "title": "Managing Snowflake connections | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "Before you can use Snowflake CLI, you must define connections, which specify how Snowflake CLI connects to Snowflake. Snowflake CLI uses the following precedence hierarchy to determine which value to use when a connection parameter is defined in multiple locations:",
        "Command-line parameters",
        "Environment variables overriding specific config.toml parameters, such as SNOWFLAKE_CONNECTIONS_MYCONNECTION_PASSWORD",
        "Connections defined in config.toml file manually or using snow connection add command",
        "Generic environment variables, such as SNOWFLAKE_USER.",
        "You can also use the --temporary-connection option, which does not require defining it in config.toml.",
        "Caution",
        "For improved security, Snowflake strongly recommends using either SNOWFLAKE_CONNECTIONS_<NAME>_PASSWORD or SNOWFLAKE_PASSWORD environment variable.",
        "Connection definitions are stored in the [connections] section of the config.toml file, similar to the following:",
        "Connection definitions support the same configuration options as the Snowflake Connector for Python.\nAdditionally, you can specify a default connection in the default_connection_name variable at the top of the file. You cannot include it\nwithin a connection definition. For example:",
        "Note",
        "For MacOS and Linux systems, Snowflake CLI requires the config.toml file to limit its file permissions to read and write for the file owner only. To set the file required file permissions execute the following commands:",
        "Note",
        "For Snowflake CLI, Snowflake recommends that you use the config.toml file for configuration definitions. However, you can use the connections.toml file, if desired.",
        "Snowflake CLI also supports the connections.toml configuration file. The file should be placed in the same directory as the config.toml file, and it should contain only connections.\nConfigurations in connections.toml require a different section name, without connections. For example, [connections.myconnection] would be just [myconnection].",
        "Note",
        "If both the config.toml and connections.toml configurations contain connections, Snowflake CLI uses only configurations from connections.toml.",
        "The snow connection commands let you create, manage, and test Snowflake connections.",
        "To create a new connection and add it to the configuration file, do the following:",
        "Execute the snow connection add command:",
        "When prompted, supply the required connection, account, and username parameters, as well as any other desired optional parameters.",
        "You can also add values for specific parameters on the command line, as shown:",
        "Note",
        "If the command finish with an error, such as if the --private_key_file option references a non-existing file, the connection is not saved in the config.toml configuration file.",
        "By default, the snow connection add command prompts for optional parameters if they are not specified on the command line. If you want to add connections without specifying some optional parameter like account and skip the interactive prompts, you can use the --no-interactive option, as shown:",
        "To list the available connections, enter the snow connection list command, as shown:",
        "To test whether a connection can successfully connect to Snowflake, enter the snow connection test command, similar to the following:",
        "You can use the snow connection set-default command to specify which configuration Snowflake CLI should use as the default, overriding the default_connection_name\nconfiguration file and SNOWFLAKE_DEFAULT_CONNECTION_NAME variables, if set.",
        "The following example sets the default connection to myconnection2:",
        "Note",
        "If both connections.toml and config.toml files are present, Snowflake CLI uses only connections defined in connections.toml.",
        "You can specify Snowflake credentials in system environment variables instead of\nin configuration files. You can use the following generic environment variables only to specify connection parameters:",
        "SNOWFLAKE_ACCOUNT",
        "SNOWFLAKE_USER",
        "SNOWFLAKE_PASSWORD",
        "SNOWFLAKE_DATABASE",
        "SNOWFLAKE_SCHEMA",
        "SNOWFLAKE_ROLE",
        "SNOWFLAKE_WAREHOUSE",
        "SNOWFLAKE_AUTHENTICATOR",
        "SNOWFLAKE_PRIVATE_KEY_PATH",
        "SNOWFLAKE_SESSION_TOKEN",
        "SNOWFLAKE_MASTER_TOKEN",
        "You can pass connection parameters directly in every snow command that requires a connection. For a full list of connection configuration parameters, execute the snow sql --help command, as shown. Note that the output shows only the section with the connection configuration options.",
        "Caution",
        "For improved security, Snowflake strongly recommends using either SNOWFLAKE_CONNECTIONS_<NAME>_PASSWORD or SNOWFLAKE_PASSWORD environment variable.",
        "You can also specify connection parameters from the command line using the --temporary-connection [-x] option. It ignores all definitions from the config.toml, using ones specified by command line options instead. This approach can be helpful for CI/CD use cases when you don\u2019t want to use a configuration file. When you use a temporary connection, Snowflake CLI ignores any connection variables defined in the config.toml file, but does still use any environment variables, such as SNOWFLAKE_ACCOUNT, you set.",
        "Caution",
        "For improved security, Snowflake strongly recommends using either SNOWFLAKE_CONNECTIONS_<NAME>_PASSWORD or SNOWFLAKE_PASSWORD environment variable.",
        "You can also use the following methods to authenticate your connection to Snowflake:",
        "Use a private key file for authentication",
        "Use OAuth authentication",
        "Use multi-factor authentication (MFA)",
        "Use SSO (single sign-on)",
        "To use private key file for authentication, your connection configuration requires you to set the authenticator\nparameter to SNOWFLAKE_JWT and provide path to file with your private key similar to the following:",
        "Specify the --private_key-file option in the snow connection add command, as shown:",
        "Use the configuration file:",
        "For more details on configuring key pair authentication, see Key-pair authentication and key-pair rotation.",
        "Note",
        "If your private key is passphrase-protected, set the PRIVATE_KEY_PASSPHRASE environment variable to that passphrase.",
        "To use connect using OATH, you can do either of the following:",
        "Specify the --token-file-path option in the snow connection add command, as shown:",
        "In the config.toml file, set authenticator = \"oauth\", and add the token_file_path parameter to the connection definition, as shown:",
        "To use MFA:",
        "Set up multi-factor authentication in Snowflake and set the authenticator parameter to snowflake (which is a default value).",
        "If you want to use a Duo-generated passcode instead of the push mechanism, use either the --mfa-passcode <passcode> option or set passcode_in_password = true in the config.toml file and include the passcode in your password as described in Using MFA in Python.",
        "Note",
        "If you want use the passcode in the password for authentication, after executing the first snow command, you can no longer provide the passcode as long as the token in valid. You must do the following:",
        "Remove the passcode from the password.",
        "Remove or comment the passcode_in_password = true in the config.toml file.",
        "To enable MFA caching:",
        "For your account, set ALLOW_CLIENT_MFA_CACHING = true.",
        "In your config.toml file, add authenticator = username_password_mfa to your connection.",
        "If you have configured Snowflake to use single sign-on (SSO), you can configure your client application to use SSO for authentication. See Using SSO with client applications that connect to Snowflake for details and configure your connection using the instructions for Python.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}