{
    "url": "https://docs.snowflake.com/en/user-guide/tutorials/data-load-external-tutorial",
    "title": "Tutorial: Bulk loading from Amazon S3 using COPY | Snowflake Documentation",
    "paragraphs": [
        "This tutorial describes how to load data from files in an existing Amazon Simple Storage Service (Amazon S3) bucket into a table. In this tutorial, you will learn how to:",
        "Create named file formats that describe your data files.",
        "Create named stage objects.",
        "Load data located in your S3 bucket into Snowflake tables.",
        "Resolve errors in your data files.",
        "The tutorial covers loading of both CSV and JSON data.",
        "The tutorial assumes the following:",
        "You have a Snowflake account that is configured to use Amazon Web Services (AWS) and a user with a role that grants the necessary\nprivileges to create a database, tables, and virtual warehouse objects.",
        "You have SnowSQL installed.",
        "Refer to the Snowflake in 20 minutes\nfor instructions to meet these requirements.",
        "Snowflake provides sample data files in a public Amazon S3 bucket for use in this tutorial.\nBut before you start, you need to create a database, tables, and a virtual warehouse for\nthis tutorial. These are the basic Snowflake objects needed for most Snowflake activities.",
        "Snowflake provides sample data files staged in a public S3 bucket.",
        "Note",
        "In regular use, you would stage your own data files using the AWS Management Console, AWS Command\nLine Interface, or an equivalent client application. See the\nAmazon Web Services documentation for instructions.",
        "The sample data files include sample contact information in the following formats:",
        "CSV files that contain a header row and five records. The field delimiter is the pipe (|) character.\nThe following example shows a header row and one record:",
        "A single file in JSON format that contains one array and three objects.\nThe following is an example of an array that contains one of the objects:",
        "Execute the following statements to create a database, two tables (for csv and json data),\nand a virtual warehouse needed for this tutorial. After you complete the tutorial, you can\ndrop these objects.",
        "Note the following:",
        "The CREATE DATABASE statement creates a database. The database automatically includes a schema named \u2018public\u2019.",
        "The CREATE TABLE statements create target tables for CSV and JSON data. The tables are temporary, that is, they\npersist only for the duration of the user session and are not visible to other users.",
        "The CREATE WAREHOUSE statement creates an initially suspended warehouse. The\nstatement also sets AUTO_RESUME = true, which starts the warehouse automatically when\nyou execute SQL statements that require compute resources.",
        "When you load data files from an S3 bucket into a table, you must describe the format of the file\nand specify how the data in the file should be interpreted and processed. For example,\nif you are loading pipe-delimited data from a CSV file, you must specify that the file\nuses the CSV format with pipe symbols as delimiters.",
        "When you execute the COPY INTO <table> command, you specify this format information. You can\neither specify this information as options in the command (e.g.\nTYPE = CSV, FIELD_DELIMITER = '|', etc.) or you can specify a\nfile format object that contains this format information. You can create a named file\nformat object using the CREATE FILE FORMAT command.",
        "In this step, you create file format objects describing the data format of the sample CSV and\nJSON data provided for this tutorial.",
        "Execute the CREATE FILE FORMAT command\nto create the mycsvformat file format.",
        "Where:",
        "TYPE = 'CSV' indicates the source file format type. CSV is the default file format type.",
        "FIELD_DELIMITER = '|' indicates the \u2018|\u2019 character is a field separator. The default value is \u2018,\u2019.",
        "SKIP_HEADER = 1 indicates the source file includes one header line. The COPY command skips these header lines when loading data. The default value is 0.",
        "Execute the CREATE FILE FORMAT command to create\nthe myjsonformat file format.",
        "Where:",
        "TYPE = 'JSON' indicates the source file format type.",
        "STRIP_OUTER_ARRAY = TRUE directs the COPY command to exclude the root brackets ([]) when loading data to the table.",
        "A stage specifies where data files are stored (i.e. \u201cstaged\u201d) so that the data\nin the files can be loaded into a table.\nA named external stage\nis a cloud storage location managed by Snowflake.\nAn external stage references data files stored in a S3 bucket. In this case, we are creating a\nstage that references the sample data files necessary to complete the tutorial.",
        "Creating a named external stage is useful if you want multiple users or processes\nto upload files. If you plan to stage data files to load only\nby you, or to load only into a single table, then you may prefer\nto use your user stage or the table stage.  For information, see\nBulk loading from Amazon S3.",
        "In this step, you create named stages for the different types of sample data files.",
        "Execute CREATE STAGE to create the my_csv_stage stage:",
        "Execute CREATE STAGE to create the my_json_stage stage:",
        "Note",
        "In regular use, if you were creating a stage that pointed to your private data files, you would reference a storage integration created using CREATE STORAGE INTEGRATION by an account administrator (i.e. a user with the ACCOUNTADMIN role) or a role with the global CREATE INTEGRATION privilege:",
        "Execute COPY INTO <table> to load staged data into the target tables.",
        "To load the data from the sample CSV files:",
        "Start by loading the data from one of the files\nin the /tutorials/dataloading/ prefix (folder) named contacts1.csv\nin the mycsvtable table.\nExecute the following:",
        "Where:",
        "The FROM clause specifies the location of the staged data\nfile (stage name followed by the file name).",
        "The ON_ERROR = 'skip_file' clause specifies what to do when the COPY command encounters errors\nin the files. In this case, when the command encounters a data error on any of the records\nin a file, it skips the file. If you do not specify an ON_ERROR clause, the default\nis abort_statement, which aborts the COPY command on the first error\nencountered on any of the records in a file.",
        "The COPY command returns a result showing the name of the file copied and related information:",
        "Load the rest of the staged files in the mycsvtable table.",
        "The following example uses pattern matching to load data from files that match the\nregular expression .*contacts[1-5].csv into the mycsvtable table.",
        "Where the PATTERN clause specifies that the command should load data\nfrom the filenames matching this regular expression .*contacts[1-5].csv.",
        "The COPY command returns a result showing the name of the file copied and\nrelated information:",
        "Note the following highlights in the result:",
        "The data in contacts1.csv is ignored because you already loaded\nthe data successfully.",
        "The data in these files was loaded successfully:\ncontacts2.csv, contacts4.csv, and\ncontacts5.csv.",
        "The data in contacts3.csv was skipped due to 2 data errors.\nThe next step in this tutorial addresses how to validate and fix\nthe errors.",
        "Load the contacts.json staged data file into the myjsontable table.",
        "The COPY returns a result showing the name of the file copied and related information:",
        "In the preceding step, the COPY INTO command skipped loading one of the files when\nit encountered the first error. You need to find all the errors.\nIn this step, you use the VALIDATE function\nto validate the previous execution of the COPY INTO command and return all errors.",
        "You first need the retrieve query ID associated with the COPY INTO command\nthat you previously executed. You then call the VALIDATE function,\nspecifying the query ID.",
        "Retrieve the query ID.",
        "Sign in to Snowsight.",
        "Make sure the role in Snowsight is the same as the role you are using\nin SnowSQL to run SQL statements for this tutorial.",
        "Select Monitoring \u00bb Query History.",
        "Select the row for the specific COPY INTO command to open the query\ninformation pane.",
        "Copy the Query ID value.",
        "Validate the COPY INTO command execution, represented by the query ID,\nand save errors to a new table named save_copy_errors.",
        "In SnowSQL, execute the following command. Replace query_id with the Query ID value.",
        "Query the save_copy_errors table.",
        "The query returns the following results:",
        "The result shows two data errors in mycsvtable/contacts3.csv.gz:",
        "Number of columns in file (11) does not match that of the corresponding table (10)",
        "In Row 1, a hyphen was mistakenly replaced with the pipe (|) character, the data file delimiter, effectively creating an additional column in the record.",
        "Field delimiter '|' found while expecting record delimiter 'n'",
        "In Row 5, an additional pipe (|) character was introduced after a hyphen, breaking the record.",
        "In regular use, you would fix the problematic records manually and write them to a new data file.\nYou would then stage the fixed data files to the S3 bucket and attempt to reload the data from\nthe files. For this tutorial, you are using Snowflake provided sample data, which you do not correct.",
        "Execute a SELECT statement to verify that the data was loaded successfully.",
        "The query returns the following results:",
        "The query returns the following results:",
        "Congratulations, you have successfully completed the tutorial.",
        "Execute the following DROP <object> commands to return your system to its state before you began the tutorial:",
        "Dropping the database automatically removes all child database objects such as tables.",
        "Snowflake in 20 minutes",
        "Tutorial: Bulk loading from a local file system using COPY",
        "Was this page helpful?"
    ]
}