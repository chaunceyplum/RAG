{
    "url": "https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-scalar",
    "title": "Writing a scalar UDF in Scala | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "You can write a scalar user-defined function (UDF) in Scala. The Scala handler code executes when the UDF is called. This topic describes how\nto write a handler in Scala and create the UDF.",
        "A UDF is a user-defined function that returns scalar results \u2013 meaning a single value rather than multiple rows. For more general\ninformation about UDFs, see User-defined functions overview.",
        "When you create a UDF, you do the following:",
        "Write a Scala object or class with a method that Snowflake will invoke when the UDF is called.",
        "For more information, see Implementing a handler in this topic.",
        "Create the UDF in SQL with the CREATE FUNCTION command, specifying your object or class and method as the handler. When you create the\nUDF, you specify:",
        "Data types of UDF input parameters.",
        "Data type of the UDF return value.",
        "Code to execute as a handler when the UDF is called.",
        "The language in which the handler is written.",
        "For more about CREATE FUNCTION syntax, see Creating the UDF with CREATE FUNCTION.",
        "You can call a UDF as described in Calling a UDF.",
        "You implement an object or class with a handler method to process UDF argument values into the UDF\u2019s return value.",
        "When writing a handler, you:",
        "Write a public class with a public method to specify as the handler.",
        "This will be the method that Snowflake invokes when the UDF is called in SQL.",
        "You can define multiple other methods in the same object or class, then use each as the handler for a different UDF. For example, you\nmight want to do this when you intend to keep the compiled handler code on a stage and reference it from multiple functions.",
        "For more information on a staged handler, refer to Keeping handler code in-line or on a stage.",
        "Optionally write a zero-argument constructor for Snowflake to invoke to initialize the handler.",
        "Note",
        "Be sure to write your handler in keeping with the Snowflake-imposed constraints in each handler method and methods it calls.\nFor more on these constraints, see Designing Handlers that Stay Within Snowflake-Imposed Constraints.",
        "Code in the following example includes a MyHandler.echoVarchar handler method that receives and returns string. The value received\nby the UDF \u2013 a VARCHAR \u2013 is mapped by Snowflake to the handler method\u2019s parameter type \u2013 a String.",
        "Call the UDF",
        "You can optionally initialize your handler by adding a zero-argument constructor.",
        "If the constructor throws an error, the error is thrown as a user error, along with the exception message.",
        "To process data passed to the UDF as arguments, implement a public method that Snowflake will invoke when the UDF is called in SQL code.\nWhen you create the UDF with a CREATE FUNCTION command, you\u2019ll use the HANDLER clause to specify the method as the handler.",
        "When declaring a handler method, you:",
        "Declare the handler method as public.",
        "You can optionally include a zero-argument constructor to initialize the handler. For more information, refer to\nInitializing the handler in this topic.",
        "If you intend to package the class into a JAR as a staged handler, you can declare multiple handler methods, later specifying each as a\nhandler with the HANDLER clause of a CREATE FUNCTION statement. For more information on a staged handler, refer to\nKeeping handler code in-line or on a stage.",
        "Specify handler method parameter and return types that map to the SQL types specified by the UDF declaration.",
        "For more information, refer to SQL-Scala Data Type Mappings.",
        "Optionally declare additional methods to support the handler method\u2019s processing, such as methods to be called from the handler method.",
        "Code in the following example features a handleStrings handler method that calls a non-handler method concatenate to\nhelp process the array received as an argument.",
        "The following calls the generate_greeting function.",
        "The following illustrates the output from calling generate_greeting with the values above.",
        "You can overload handler methods in the same class or object as long as they have different numbers of parameters.",
        "For Scala UDFs, Snowflake uses only the number of method arguments, not their types, to differentiate handler methods.\nResolving based on data types is impractical because some SQL data types can be mapped to more than one Scala or Java data type and\nthus potentially to more than one handler method signature.",
        "For example, if two Scala methods have the same name and the same number of arguments, but different data types, then calling a UDF using\none of those methods as a handler generates an error similar to the following:",
        "If a warehouse is available, the error is detected at the time that the UDF is created. Otherwise, the error occurs when the UDF is\ncalled.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}