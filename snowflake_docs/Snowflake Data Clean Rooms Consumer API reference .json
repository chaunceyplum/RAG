{
    "url": "https://docs.snowflake.com/en/user-guide/cleanrooms/consumer",
    "title": "Snowflake Data Clean Rooms: Consumer API reference guide | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "The following content details all the developer APIs provided by Snowflake Data Clean Rooms for consumers. All functions reside inside the following schema:",
        "Execute the following commands to set up the Snowflake environment before using developer APIs to work with a Snowflake Data Clean Room. It you don\u2019t have the SAMOOHA_APP_ROLE role, please contact your account administrator.",
        "Assign a name for the clean room that the provider has shared with you:",
        "Install the clean room that the provider has shared via the following commands:",
        "Description: Installs the clean room on the consumer account with the associated provider and selected clean room.",
        "Arguments: cleanroom_name (string), provider_account_locator (string)",
        "Returns: success message (string)",
        "Example:",
        "Description: Once the clean room is installed, it takes about 1 minute for the provider to finish setting it up and enable it on their side. This function allows the user to check the status of the clean room, and see if it is enabled or not. The flag will usually switch to True after about a minute after installing the clean room.",
        "Arguments: cleanroom_name (string)",
        "Returns: is enabled (boolean)",
        "Example:",
        "Description: Uninstalls the clean room on the consumer account. This removes all databases associated with the clean room, including the shared clean room database. Note the clean room can always be installed again with consumer.install_cleanroom.",
        "Arguments: cleanroom_name (string)",
        "Returns: success message (string)",
        "Example:",
        "Description: Checks if this clean room has Provider Run Analysis enabled. Note: explicit approval still needs to be given by calling consumer.enable_templates_for_provider_run (see below).",
        "Arguments: cleanroom_name (string)",
        "Returns: enabled message (string)",
        "Example:",
        "Description: Checks if this clean room has Consumer Run Analysis enabled. This flag determines if the clean room consumer (installer) can run analyses, or else act as a data-contributor to the collaboration.",
        "Arguments: cleanroom_name (string)",
        "Returns: enabled message (string)",
        "Example:",
        "Description: If a clean room has Provider Run Analysis enabled (i.e. the provider of the clean room has marked the clean room to allow providers to run analysis), this procedure must be called by the consumer to enable them. This procedure is needed to give explicit approval on a template-by-template basis to providers who want to run analysis.",
        "The final boolean parameter allows the consumer to enable differential privacy for the provider\u2019s analyses, if set to TRUE.",
        "Arguments:",
        "cleanroom_name (string) - The name of the clean room.",
        "template_names (array of strings) - An array of one or more templates in the clean room which should be enabled for\nprovider analysis",
        "enable_differential_privacy(boolean) - If TRUE, enable differential privacy for all the templates listed in template_names.\nDifferential privacy can be enabled for these templates only if differential privacy is enabled for the clean room itself. You can check\ndifferential privacy status for a clean room by calling consumer.is_dp_enabled.",
        "Returns: success message (string)",
        "Example:",
        "Use the following command to register and unregister databases, schemas, and objects. Tables and views must be registered before they can be linked into the clean room. If you register a database or schema, all of the objects in that database or schema are registered.",
        "Description: By adding a database into the clean room, it enables you to link any dataset from the database. If this isn\u2019t called then grants will have to be made to samooha_app_role individually.",
        "Arguments: db_name (string)",
        "Returns: success message (string)",
        "Example:",
        "Description: Similar to register_db, but operates at a schema level. An array or string representing the fully qualified schema name can be passed in, and grant selects to the SAMOOHA_APP_ROLE role are made, enabling the user to link the objects in the schema into the clean room.",
        "If you want to register a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter), use library.register_managed_access_schema instead.",
        "Arguments: schema_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Description: Similar to register_schema, but registers a schema that was created with the WITH MANAGED ACCESS parameter. An array or string representing the fully qualified schema name can be passed in, and grant selects to the SAMOOHA_APP_ROLE role are made, enabling the user to link the objects in the schema into the clean room.",
        "Arguments: schema_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Description: Grants the clean room access to tables and views of all types, making them available to be linked into the clean room by\ncalling consumer.link_datasets. You can register broader groups of objects by calling library.register_schema,\nlibrary.register_managed_access_schema, or consumer.register_db.",
        "Arguments:",
        "object_names (array) - Array of fully-qualified object names. These objects can then be linked into the clean room.",
        "Returns: success message (string)",
        "Examples",
        "To register a table and a view:",
        "Attention",
        "This command is now deprecated. Please use library.register_objects.",
        "Description: Registers tables and views of all types.",
        "Arguments: object_names (array), is_view (boolean), is_iceberg (boolean), is_external (boolean), is_under_managed_access_schema (boolean)",
        "Output success message (string)",
        "Examples",
        "To register a table:",
        "To register an Iceberg table:",
        "Attention",
        "This command is now deprecated. Please use library.register_objects.",
        "Description: Similar to register_db, but operates at a table level. An array or string representing the fully qualified table name can be passed in, and grant selects to the SAMOOHA_APP_ROLE role are made, enabling the user to link the table into the clean room.",
        "If you want to register tables in a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter), use library.register_managed_access_table instead.",
        "Arguments: table_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Attention",
        "This command is now deprecated. Please use library.register_objects.",
        "Description: Similar to register_table, but registers tables in a schema that was created with the WITH MANAGED ACCESS parameter. An array or string representing the fully qualified table name can be passed in, and grant selects to the SAMOOHA_APP_ROLE role are made, enabling the user to link the table into the clean room.",
        "Arguments: table_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Attention",
        "This command is now deprecated. Please use library.register_objects.",
        "Description: Similar to register_db, but operates at a view level. An array or string representing the fully qualified view name can be passed in, and grant selects to the SAMOOHA_APP_ROLE role are made, enabling the user to link the view into the clean room.",
        "If you want to register views in a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter), use library.register_managed_access_view instead.",
        "Arguments: view_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Attention",
        "This command is now deprecated. Please use library.register_objects.",
        "Description: Similar to register_view, but registers views in a schema that was created with the WITH MANAGED ACCESS parameter. An array or string representing the fully qualified view name can be passed in, and grant selects to the SAMOOHA_APP_ROLE role are made, enabling the user to link the view into the clean room.",
        "Arguments: view_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Description: Reverses the register_db procedure and remove the database-level grants given to the SAMOOHA_APP_ROLE role and Snowflake Data Clean Room native application. This also removes any database from the UI dropdown element.",
        "Arguments: db_name (string)",
        "Returns: success message (string)",
        "Example:",
        "Description: Unregisters a schema, which prevents users from linking its tables and views into the clean room.",
        "If you want to unregister a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter), use library.unregister_managed_access_schema instead.",
        "Arguments: schema_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Description: Similar to unregister_schema, but unregisters a schema that was created with the WITH MANAGED ACCESS parameter.",
        "Arguments: schema_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Description: Revokes clean room access to tables and views of all types. Objects will no longer be available to any users in any clean\nrooms managed by this account.",
        "Arguments:",
        "object_names (array) - Array of fully-qualified object names for which access should be revoked.",
        "Returns: success message (string)",
        "Examples",
        "To unregister a table and a view:",
        "Attention",
        "This command is now deprecated. Please use library.unregister_objects.",
        "Description: Unregisters tables and views of all types.",
        "Arguments: object_names (array), is_view (boolean), is_iceberg (boolean), is_external (boolean), is_under_managed_access_schema (boolean)",
        "Output success message (string)",
        "Examples",
        "To unregister a table:",
        "Attention",
        "This command is now deprecated. Please use library.unregister_objects",
        "Description: Similar to unregister_db, but operates at a table level. An array or string representing the fully qualified table name can be passed in to unregister the tables. Users cannot link unregistered tables into a clean room.",
        "If you want to unregister tables in a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter), use library.unregister_managed_access_table instead.",
        "Arguments: table_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Attention",
        "This command is now deprecated. Please use library.unregister_objects",
        "Description: Similar to unregister_table, but unregisters tables in a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter).",
        "Arguments: table_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Attention",
        "This command is now deprecated. Please use library.unregister_objects",
        "Description: Similar to unregister_db, but operates at a view level. An array or string representing the fully qualified view name can be passed in to unregister the views. Users cannot link unregistered views into a clean room.",
        "If you want to unregister views in a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter), use library.unregister_managed_access_view instead.",
        "Arguments: view_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Attention",
        "This command is now deprecated. Please use library.unregister_objects",
        "Description: Similar to unregister_view, but unregisters views in a managed access schema (that is, a schema created with the WITH MANAGED ACCESS parameter).",
        "Arguments: view_name (array)",
        "Returns: success message (string)",
        "Example:",
        "Once a dataset has been registered, you can link tables or views from that dataset into a specific clean room. You can\nalso unlink a table or view from a specific clean room to remove access to that data from the clean room.",
        "Description: Link a table or view into the clean room, giving templates within that clean room access to the table,\naccording to any join and column policies that you specify.",
        "Arguments:",
        "cleanroom_name (string) - Name of the clean room to grant access",
        "tables_list (array of strings) - List of fully-qualified table or view names to expose to the clean room. These objects must first be\nregistered (made available to the clean room environment) with the appropriate registration method.",
        "Returns: success message (string)",
        "Example:",
        "Description: Removes access to the specified tables or views in the specified clean room for all users. This only works for\nconsumer-provided data.",
        "Arguments:",
        "cleanroom_name (string) - Name of the clean room for which access should be removed.",
        "tables_list (array of strings) - List of fully-qualified table or view names for which access should be blocked.",
        "Returns: success message (string)",
        "Example:",
        "Description: View all tables and views linked into the specified clean room by any consumer in this account.",
        "Arguments:",
        "cleanroom_name (string) - Name of the clean room.",
        "Returns: Table of objects linked into the specified clean room, along with the clean room\u2019s internal view name for each object.",
        "Example:",
        "Description: Specifies which columns the provider is allowed to perform a join on when running templates within the clean room, when using Provider Run Analysis. Note that the column policy is replace only, so if the function is called again, then the previously set column policy is completely replaced by the current one.",
        "Note that the checks are carried out by parsing the SQL query to be run against the data for any unauthorized columns. Queries with wildcards might not be caught using these checks, and discretion should still be used when designing the analysis template.",
        "Arguments: cleanroom_name(string), table_and_col_names(array)",
        "Returns: success message (string)",
        "Example:",
        "Description:  Sets which columns in the data the provider can carry out operations on. This should only be called after adding the template. This is also a function of the template, so inputs need to be of the form template_name:full_table_name:column_name. Note that the column policy is replace only, so if the function is recalled, then the previously set column policy is completely replaced by the current one.",
        "Column policy should not be called on identity columns like email. It should only be used on aggregate and the group by columns.",
        "Note that the checks are carried out by parsing the SQL query to be run against the data for any unauthorized columns. Queries with wildcards might not be caught using these checks, and discretion should still be used when designing the analysis template.",
        "Checks are carried out on SQL Jinja arguments called dimensions or measure_columns. Please make sure you use these tags to enable this check.",
        "Arguments: cleanroom_name(string), analysis_and_table_and_columns(array)",
        "Returns: success message (string)",
        "Example:",
        "The following commands allow users to work with templates available in the clean room.",
        "Description: The clean room template definitions are available to help determine which parameters need to be passed to the template.",
        "Note",
        "Note that all Samooha procedures are encrypted and aren\u2019t viewable by default. However, any custom templates that you add will be visible to you.",
        "Arguments: cleanroom_name (string), template_name (string)",
        "Returns: The template definition (string)",
        "Example:",
        "Description: Defines how the data should be organized and what data is required for each template to ensure that the output is easily digestible.",
        "Arguments: cleanroom_name (string), template_name (string)",
        "Returns: Argument list and specification (table)",
        "Example:",
        "The following commands allow users to work with template chains available in the clean room.  For general information about using template chains, see Using the developer APIs to execute templates sequentially.",
        "Description: Views the template chains currently active in the clean room.",
        "Arguments: cleanroom_name (string)",
        "Returns: The added template chains (table)",
        "Example:",
        "Description: Returns the attributes of a template chain.",
        "Arguments: cleanroom_name (string), template_chain_name (string)",
        "Returns: The template chain definition (string)",
        "Example:",
        "Description: Returns the expected arguments for all of the templates in the template chain.",
        "Arguments: cleanroom_name (string), template__chain_name (string)",
        "Returns: Argument list and specification (table)",
        "Example:",
        "The following commands executes a specific analysis or activation based on the specified template.",
        "Description: Executes an analysis using a template or template chain. The consumer and provider tables need to be specified separately and certain inputs can be empty if they are not required. The template or template chain executes logic that has been configured for the specific analysis and returns the joined data as a table. The only optional input is \u201cepsilon\u201d, i.e. how much of the different privacy budget the query needs to consume. This is defaulted to 0.1, if not specified.",
        "Arguments: cleanroom_name (string), {template_name | template_chain_name} (string), consumer_tables (array), provider_tables (array), analysis_arguments (object)",
        "Returns: Template calculations output (table)",
        "Example:",
        "For more information about activating results, see Using the developer APIs to send results to a Snowflake account for activation.",
        "Description: Defines which columns can be used within activation templates. This ensures that only the columns that are approved by the consumer can be used with the activation template.",
        "Input: cleanroom_name (string), columns (array)",
        "The columns argument is passed in the format <template_name>:<fully_qualified_table_name>:<column_name>.",
        "Output: Success message",
        "Example:",
        "Description: Approves the provider\u2019s request to allow provider activation, which is the ability to push results to the provider\u2019s Snowflake account. Assumes that the provider has already called provider.request_provider_activation_consent to request permission.",
        "Input: cleanroom_name (string), activation_template_name (string)",
        "Output: Success message",
        "Example:",
        "Description: Executes a template that pushes results back to a Snowflake account for activation.",
        "Arguments: cleanroom_name (string), segment_name (string), template_name (string), consumer_tables (array), provider_tables (array), activation_arguments (object), consumer_direct_activation (boolean), application_id (string)",
        "If the consumer is pushing results to their own Snowflake account for activation, set the consumer_direct_activation argument as TRUE.",
        "Pass an empty string as the argument to application_id.",
        "Returns: Success message",
        "Example:",
        "The following APIs allow you to add consumer-defined templates to a clean room. For more information, see Using the developer API to add consumer-defined templates.",
        "Description: Sends a request to the provider of a clean room asking them to approve a custom template so it can be added to the clean room.",
        "Arguments: cleanroom_name (string), template_name (string), template_definition (string)",
        "Returns: success message (string)",
        "Example:",
        "Description: Generates a consumer clean room template that includes custom Python code. The generated template includes your Python code\nand a placeholder for your JinjaSQL template. Pass your final template to consumer.list_template_requests.",
        "Learn more about consumer-defined templates.",
        "Arguments:",
        "function_name (string) - The name of the Python function your SQL template should call to execute your function.",
        "arguments (array of string) - List of arguments for your Python function, where each argument is a space-delimited string pair in the format\n\u201c<argument_name> <argument_type>\u201d. For example: ['data variant', 'scale integer'].",
        "packages (array of string) - Array of package names required for your Python code. If none, specify an empty array. Example:\n['pandas','numpy'].",
        "imports (array of strings) - Any custom Python libraries required for the Python code. Should be an array of zero or more stage addresses.\nExample: ['@db.schema.stage/my_python_sproc.py']",
        "rettype (string) - The SQL return type of your function. Examples: 'integer', 'varchar'.",
        "handler (string) - The name of the main handler function in your Python code. Typically this is 'main'.",
        "code (string) - Your Python code implementation. If you include an import and your designated handler is defined within an import, this\ncan be an empty string.",
        "Returns: Generated python template (string). Replace the placeholder with your SQL code.",
        "Example:",
        "Call the helper function with a trivial Python example.",
        "Here is the response to the previous call. Insert your JinjaSQL as indicated at the placeholder, and pass it into\nconsumer.create_template_request.",
        "Description: Lists the requests that the consumer has made to add a template to a clean room.",
        "Arguments: cleanroom_name (string)",
        "Returns: request_id(string), provider_identifier(string), template_name(string), template_definition(string), request_status(string), reason(string)",
        "Example:",
        "The following methods show relevant properties of the clean room:",
        "Description: Creates a text summary containing all information about what has been added to the clean room, including templates, datasets, policies, etc.",
        "Arguments: cleanroom_name(string)",
        "Returns: Extensive description string of cleanroom (table)",
        "Example:",
        "Description: Views all datasets that have been added to the clean room by the provider.",
        "Arguments: cleanroom_name(string)",
        "Returns: All the provider dataset names in cleanroom (table)",
        "Example:",
        "Description: Outlines which columns users can securely join inside a clean room, set by the consumer on consumer datasets.",
        "Arguments: cleanroom_name (string)",
        "Returns: The join policy (table)",
        "Example:",
        "Description: Outlines which columns users can securely join inside a clean room, set by the provider on provider datasets.",
        "Arguments: cleanroom_name (string)",
        "Returns: The join policy (table)",
        "Example:",
        "Description: Views all active templates in the clean room.",
        "Arguments: cleanroom_name (string)",
        "Returns: The added templates (table)",
        "Example:",
        "Description: Views all column policies that have been applied to the clean room by the consumer.",
        "Arguments: cleanroom_name (string)",
        "Returns: The column policy (table)",
        "Example:",
        "Description: Views all column policies that have been applied to the clean room by the provider.",
        "Arguments: cleanroom_name (string)",
        "Returns: The column policy (table)",
        "Example:",
        "Description: Views all recently created clean rooms sorted by the date they were created on.",
        "Arguments: None",
        "Returns: All existing cleanrooms ordered by create date (table)",
        "Example:",
        "These commands control differential privacy in the clean room. You can also specify differential privacy at the template level when calling\nconsumer.enable_templates_for_provider_run.",
        "Learn more about managing differential privacy.",
        "Description: Checks if differential privacy has been enabled in the clean room.",
        "Arguments: cleanroom_name(string)",
        "Returns: Whether the cleanroom has DP enabled (boolean)",
        "Example:",
        "Description: Views the privacy budget remaining that can be used to make queries from the clean room. Once exhausted, further calls to run_analysis will not be allowed until the budget is reset. The budget resets daily.",
        "When differential privacy is not enabled, the privacy budget is set to an arbitrarily high level (e.g. 10000) and not depleted.",
        "Arguments: cleanroom_name (string)",
        "Returns: The remaining privacy budget (float)",
        "Example:",
        "Use the following methods to assist in general clean room functionality.",
        "Description: Shows or hides clean rooms in the web app for consumers in the current account.",
        "Arguments:",
        "cleanroom_name(string) - The name of the clean room.",
        "visibility_status(string) - One of the following case-sensitive values:",
        "HIDDEN - Hides the specified clean room in the web app from all users in the current consumer account. The clean room will\nstill be accessible via API calls.",
        "EDITABLE - Makes the clean room visible in the web app.",
        "Returns: success message (string)",
        "Example:",
        "Description: Enables the task, samooha_by_snowflake_local_db.admin.expected_version_task, that automatically upgrades the Snowflake Native App for Snowflake Data Clean Rooms as new versions are released.",
        "Arguments: None",
        "Returns: success message (string)",
        "Example:",
        "Description: Disables the task, samooha_by_snowflake_local_db.admin.expected_version_task, that automatically upgrades the Snowflake Native App for Snowflake Data Clean Rooms as new versions are released.",
        "Arguments: None",
        "Returns: success message (string)",
        "Example:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}