{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-ml/feature-store/feature-views",
    "title": "Working with feature views | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "The Snowflake Feature Store requires Enterprise Edition. To inquire about upgrading, please contact\nSnowflake Support.",
        "Note",
        "The Snowflake Feature Store API is available in the Snowpark ML Python package (snowflake-ml-python) v1.5.0 and later.",
        "A feature view encapsulates the transformation of raw data into one or more related features. All features in a\nfeature view are refreshed on the same schedule. Feature stores are backed by a feature table that stores the features.",
        "The Snowflake Feature Store supports two different kinds of feature views:",
        "Snowflake-managed feature view: The feature table is automatically\nrefreshed from raw data by Snowflake on a schedule you specify. A feature view is considered Snowflake-managed if you\nprovide a schedule for refreshing it.",
        "External feature view: If you don\u2019t provide a schedule for\nrefreshing the feature view, it\u2019s considered external. You are responsible for maintaining the feature table,\nupdating features from raw data as needed, for example using a tool such as dbt.",
        "The class snowflake.ml.feature_store.FeatureView is the Python API for interacting with feature views. The\nFeatureView constructor accepts a Snowpark DataFrame that contains the feature generation logic. The provided\nDataFrame must also contain the join_keys columns specified in the entities associated with the feature view. A\ntimestamp column name is required if your feature view includes time-series features.",
        "See the Feature Store API Reference\nfor full details of the Python API.",
        "A Snowflake-managed feature view uses a dynamic table as the feature table.\nFeatures are extracted from the source data on a schedule you specify, handling new data efficiently and incrementally.\nThe illustration below shows the flow of data from its source, through feature transformations, into a feature table.",
        "To create a Snowflake-managed feature view, use code like the following Python block, where entity is the\nentity that the features are associated with, and my_df is the Snowpark DataFrame that contains\nyour feature transformation logic based on your source data.",
        "Setting the refresh_freq parameter designates the feature view as Snowflake-managed. The value can be a time delta\n(minimum value 1 minute), or it can be a cron expression with time zone (e.g. * * * * * America/Los_Angeles).",
        "You can write feature transformations using Snowpark Python or in SQL. The Snowpark Python API provides\nutility functions\nfor defining common feature types such as windowed aggregations. See Common feature and query patterns for examples of using\nthese functions.",
        "To qualify for incremental refresh, each source table must have change tracking enabled.\nIf change tracking is not already enabled on a source table, Snowflake attempts to enable it automatically when creating\nthe feature view\u2019s dynamic table. This requires OWNERSHIP of the table. If you do not own the table, ask the owner to\nenable change tracking, or create the feature view with refresh_mode='FULL', which fully reads the source table\nfor each refresh.",
        "Features generated outside of the Snowflake Feature Store can be registered by setting the refresh_freq\nparameter to None when creating them. In this situation, you must create and maintain the feature table\nyourself. The feature DataFrame is based on the feature table, not on the raw data source, and usually contains a simple\nprojection from this table, with no transformations.",
        "Note",
        "You can perform feature transformations in the feature DataFrame; these calculations are carried out as needed when you\nretrieve data from the feature view. However, external feature views are primarily intended for use with tools such\nas dbt that you already use to perform feature transformations. Generally, you should use\nSnowflake-managed feature views if you want Snowflake to perform\nfeature transformation.",
        "The illustration below shows the flow of data from its source, through feature transformation by an external tool (here\ndbt), into a feature table.",
        "External feature views are implemented as views on your feature table, so they\nincur no additional storage cost.",
        "The code below shows how to create an external feature view.",
        "Adding per-feature descriptions to the FeatureView makes it easier to find features using\nSnowsight Universal Search.  The following example uses a feature view\u2019s\nattach_feature_desc method to provide a short description of each included feature in a Python dictionary:",
        "Both kinds of feature views can be enriched with feature descriptions.",
        "Once a feature view has been completely defined, you can register it in the feature store using the feature store\u2019s\nregister_feature_view method, with a customized name and version. Incremental maintenance (for supported query\ntypes) and automatic refresh occur based on the specified refresh frequency.",
        "When the provided query cannot be maintained via incremental maintenance using a dynamic table, the table will be fully\nrefreshed from the query at the specified frequency. This may lead to greater lag in feature refresh and higher\nmaintenance costs. You can alter the query logic, breaking the query into multiple smaller queries that support\nincremental maintenance, or provision a larger virtual warehouse for dynamic table maintenance.  See\nGeneral limitations for the latest information on dynamic table limitations.",
        "A feature view pipeline definition is immutable after it has been registered, providing consistent feature computation as\nlong as the feature view exists.",
        "Once a feature view has been registered with the feature store, you can retrieve it from there when you need it by using\nthe feature store\u2019s get_feature_view method:",
        "You can list all registered feature views in the feature store, optionally filtering by entity name or feature view\nname, using the list_feature_views method. Information about the matching features is returned as a Snowpark\nDataFrame. The following code shows an example of getting a list of feature views; fs is a reference to the\nfeature store.",
        "Features can also be discovered using the Snowsight Feature Store UI or Universal Search.",
        "You can update some properties of a feature view you have registered in the feature store using the feature store\u2019s\nupdate_feature_view method. The updatable properties are:",
        "The feature view\u2019s refresh frequency",
        "The warehouse where the feature transforms execute",
        "The description of the feature view",
        "Feature definitions and columns cannot be modified. To change the features in a feature store, create a new version of\nthe feature view.",
        "When you call update_feature_view,  specify the feature view version to be updated by providing its name and\nversion. The additional parameters specify the properties to be updated; you can specify just the ones you want to\nchange. The following code shows an example of changing feature view properties; :code:fs is a reference to the\nfeature store.",
        "You can delete a feature view from the feature store with the feature store\u2019s delete_feature_view method. The\nfollowing code shows an example of deleting a feature view; :code:fs is a reference to the feature store.",
        "Warning",
        "Deleting a feature view version breaks any pipelines that use it. Make sure the feature view version is not in use\nbefore deleting it.",
        "Snowflake-managed feature views use Snowflake dynamic tables. See About monitoring dynamic tables for information\non monitoring dynamic tables and Understanding cost for dynamic tables for information on the costs of dynamic tables.\nExternal feature views use views, which do not incur additional storage costs.",
        "The maximum number of Snowflake-managed feature views and the feature transformation queries in feature views are subject to the\nlimitations of dynamic tables.",
        "Not all feature transformation queries are supported by dynamic incremental refresh.\nSee the limitations.",
        "Feature view names are SQL identifiers and subject to Snowflake identifier requirements.",
        "Feature view versions are strings and have a maximum length of 128 characters. Some characters are not permitted and will\nproduce an error message.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}