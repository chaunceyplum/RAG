{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/reference/latest/_autosummary/snowflake.core.dynamic_table.DynamicTable",
    "title": "snowflake.core.dynamic_table.DynamicTable | Snowflake Documentation",
    "paragraphs": [
        "Bases: BaseModel",
        "A model object representing the DynamicTable resource.",
        "Constructs an object of type DynamicTable with the provided properties.",
        "name (str) \u2013 Specifies the name for the dynamic table, must be unique for the schema in which the dynamic table is created",
        "target_lag (TargetLag)",
        "warehouse (str) \u2013 Specifies the name of the warehouse that provides the compute resources for refreshing the dynamic table",
        "query (str) \u2013 Specifies the query whose results the dynamic table should contain",
        "kind (str,  default 'PERMANENT') \u2013 Specifies the dynamic table type, permanent (default) or transient.",
        "columns (List[DynamicTableColumn], optional)",
        "refresh_mode (str, optional) \u2013 Specifies the refresh type for the dynamic table",
        "initialize (str, optional) \u2013 Specifies the behavior of the initial refresh of the dynamic table",
        "cluster_by (List[str], optional) \u2013 Specifies one or more columns or column expressions in the dynamic table as the clustering key",
        "data_retention_time_in_days (int, optional) \u2013 Specifies the retention period for the dynamic table so that Time Travel actions (SELECT, CLONE) can be performed on historical data in the dynamic table",
        "max_data_extension_time_in_days (int, optional) \u2013 Specifies the retention period for the dynamic table so that Time Travel actions (SELECT, CLONE) can be performed on historical data in the dynamic table",
        "comment (str, optional) \u2013 Specifies a comment for the dynamic table.",
        "created_on (datetime, optional) \u2013 Date and time when the dynamic table was created.",
        "database_name (str, optional) \u2013 Database in which the dynamic table is stored",
        "schema_name (str, optional) \u2013 Schema in which the dynamic table is stored",
        "rows (int, optional) \u2013 Number of rows in the dynamic table.",
        "bytes (int, optional) \u2013 Number of bytes that will be scanned if the entire table is scanned in a query. Note that this number may be different than the number of actual physical bytes stored on-disk for the table",
        "scheduling_state (str, optional) \u2013 Scheduling state (RUNNING or SUSPENDED)",
        "automatic_clustering (bool, optional) \u2013 If Automatic Clustering is enabled for your account, specifies whether it is explicitly enabled or disabled for the dynamic table.",
        "owner (str, optional) \u2013 Role that owns the table",
        "owner_role_type (str, optional) \u2013 The type of role that owns the object.",
        "budget (str, optional) \u2013 Name of the budget if the object is monitored by a budget",
        "Create a new model by parsing and validating input data from keyword arguments.",
        "Raises [ValidationError][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.",
        "self is explicitly positional-only to allow self as a field name.",
        "Methods",
        "Create an instance of DynamicTable from a dict.",
        "Create an instance of DynamicTable from a JSON string.",
        "Returns the dictionary representation of the model using alias.",
        "Return the dictionary representation of the model without readonly properties.",
        "Returns the JSON representation of the model using alias.",
        "Returns the string representation of the model using alias.",
        "Was this page helpful?"
    ]
}