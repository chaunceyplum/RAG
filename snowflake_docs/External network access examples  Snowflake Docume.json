{
    "url": "https://docs.snowflake.com/en/developer-guide/external-network-access/external-network-access-examples",
    "title": "External network access examples | Snowflake Documentation",
    "paragraphs": [
        "This topic provides examples of accessing external network locations from user-defined functions and procedures.",
        "You can access the PyPi package repository by creating an external access integration.\nYou might do this when you want to allow Notebook users on Container Runtime to install pip\npackages using the pip install command. With this kind of integration, you can also\nallow Snowpark Container Services to install pip packages.",
        "This example uses the Snowflake-managed network rule snowflake.external_access.pypi_rule\ndescribed in Snowflake-managed network rules.",
        "Create an external access integration using the snowflake.external_access.pypi_rule network rule.",
        "Create a developer role for users who need to use pip install\nin a Snowpark Container or Notebook on Container Runtime.",
        "Grant to the developer role the privileges needed to use the external\naccess integration you created.",
        "The following steps include code to create an external access integration for access to the\nGoogle Translation API. The steps add the security integration and the permissions needed to execute the statements.",
        "Create a network rule representing the external location.",
        "For more information about the role of a network rule in external access, including privileges required, see\nCreating a network rule to represent the external network location.",
        "Create a security integration to hold the OAuth credentials required to authenticate with the external network location specified\nby the google_apis_network_rule network rule.",
        "For reference information on the command, including privileges required, see\nCREATE SECURITY INTEGRATION (External API Authentication).",
        "Create a secret to represent the credentials contained by the google_translate_oauth security integration.",
        "For more information about the role of the secret in external access, including privileges required, see\nCreating a secret to represent credentials.",
        "The secret must specify a refresh token with its OAUTH_REFRESH_TOKEN parameter. To obtain a refresh token from the service provider\n(in this case, from the Google Cloud Translation API service), you can use a way the provider offers or use Snowflake system functions.",
        "To create a secret with a refresh token, use either Google OAuth Playground or Snowflake system functions, as described by the\nfollowing:",
        "Snowflake system functions",
        "Execute CREATE SECRET to create a secret. You\u2019ll update it with the refresh token in a later step.",
        "Execute the SYSTEM$START_OAUTH_FLOW function to retrieve a URL with which you can obtain a\nrefresh token, specifying as its argument the name of the secret you created previously.",
        "The function generates a URL you can use to complete the OAuth consent process.",
        "In a browser, visit the generated URL and complete the OAuth2 consent process. When you\u2019ve finished, leave the browser open to the\nlast page of the process.",
        "From the browser address bar, copy all of the text after the question mark in the URL of the last page of the consent process.",
        "Execute the SYSTEM$FINISH_OAUTH_FLOW function, specifying as an argument the parameters you just\ncopied from the browser address bar to update the secret with a refresh token.",
        "Be sure to execute SYSTEM$FINISH_OAUTH_FLOW in the same session as SYSTEM$START_OAUTH_FLOW. SYSTEM$FINISH_OAUTH_FLOW updates\nthe secret you specified in SYSTEM$START_OAUTH_FLOW with access token and refresh token it obtained from the OAuth server.",
        "Google OAuth Playground",
        "In Google OAuth Playground, select and authorize the Cloud Translation API as\nspecified in step 1.",
        "In Step 2, click exchange authorization code for tokens, then copy the refresh token\ntoken value.",
        "Execute CREATE SECRET to create a secret that specifies the refresh token value you copied.",
        "For more information about the role of a secret in external access, including privileges required, see\nCreating a secret to represent credentials.",
        "Create an external access integration using the network rule and secret.",
        "For more information about the role of an external access integration, including privileges required, see\nCreating an external access integration.",
        "Create a developer role that will be assigned to users who need to create a UDF or procedure that uses the integration.",
        "Grant to the developer role privileges needed to create a UDF that uses the objects for external access. This includes the\nfollowing:",
        "The READ privilege on the secret.",
        "The USAGE privilege on the schema containing the secret.",
        "The USAGE privilege on the integration.",
        "Create a UDF google_translate_python that translates the specified text into a phrase in the specified language. For more\ninformation, see Using the external access integration in a function or procedure.",
        "Grant the USAGE privilege on the google_translate_python function so that those with the user role can call it.",
        "Execute the google_translate_python function to translate a phrase.",
        "This generates the following output.",
        "The following steps include example code to create an external access integration for access to a lambda function external to Snowflake.\nThe example uses a placeholder for the external endpoint itself, but it could be a function available at a REST service endpoint, for example.",
        "The external access is used in a vectorized Python UDF that receives a Pandas\nDataFrame containing the data.",
        "Create a network rule lambda_network_rule representing the external location my_external_service (here, a placeholder\nvalue for the location of an external endpoint).",
        "For more information about the role of a network rule in external access, see\nCreating a network rule to represent the external network location.",
        "Create a secret to represent credentials required by the external service.",
        "Handler code later in this example retrieves the credentials from the secret using a Snowflake API for Python.",
        "For more information about the role of the secret in external access, see Creating a secret to represent credentials.",
        "Create a developer role and grant to it READ privileges on the secret. This role will be assigned to users who need to create\na UDF or procedure that uses the secret.",
        "Also, create the role that users will use to call the function.",
        "Grant to the developer role privileges needed to create a UDF that uses the objects for external access. This includes the\nfollowing:",
        "The READ privilege on the secret.",
        "The USAGE privilege on the schema containing the secret.",
        "Create an external access integration to specify the external endpoint and credentials through the network rule and secret you created.",
        "For more information about the role of an external access integration, including privileges required, see\nCreating an external access integration.",
        "Create a vectorized Python UDF return_double_column\nthat accesses an external network location to process data received as a\nPandas DataFrame.",
        "For more information on using external access in a UDF, see Using the external access integration in a function or procedure.",
        "Grant the USAGE privilege on the return_double_column function so that those with the user role can call it.",
        "Execute the return_double_column function, making a request to the external endpoint.",
        "Code in the following example creates a two-column table and inserts 100,000,000 rows containing 4-byte integers. The code\nthen executes the return_double_column function, passing values from column a for processing by the external endpoint.",
        "The following steps include example code to connect to an AWS S3 bucket using IAM.",
        "For more information about AWS IAM, see AWS IAM documentation.",
        "Create a network rule, aws_s3_network_rule, that represents the AWS S3 bucket at the location specified by the VALUE_LIST\nparameter.",
        "For more information about the role of a network rule in external access, see\nCreating a network rule to represent the external network location.",
        "Create a security integration to hold the AWS IAM Amazon Resource Name (ARN) credentials required to authenticate with the external\nnetwork location specified by the aws_s3_network_rule network rule.",
        "For reference information on the command, including privileges required, see\nCREATE SECURITY INTEGRATION (AWS IAM Authentication).",
        "Get the ARN and ID for the IAM USER.",
        "Execute the DESC command on the security integration you created.",
        "From the output displayed, copy the values of the following properties to use in the next step:",
        "API_AWS_IAM_USER_ARN",
        "API_AWS_EXTERNAL_ID",
        "Grant the IAM user permissions needed to access the bucket.",
        "Use the ARN and ID values when configuring a trust policy as described in Step 5 of Option 1: Configuring a Snowflake storage integration to access Amazon S3.",
        "Create a secret of type CLOUD_PROVIDER_TOKEN to\nrepresent credentials required by the external service.",
        "Handler code later in this example retrieves the credentials from the secret using a\nSnowflake API.",
        "For more information about the role of the secret in external access, see Creating a secret to represent credentials.",
        "Create a developer role and grant to it READ privileges on the secret. This role will be assigned to users who need to create\na UDF or procedure that uses the secret.",
        "Also, create the role that users will use to call the function.",
        "Grant to the developer role the privileges needed to create a UDF that uses the objects for external access. This includes the\nfollowing:",
        "The READ privilege on the secret.",
        "The USAGE privilege on the schema containing the secret.",
        "Create an external access integration\nto specify the external endpoint and credentials through the network rule and secret you created.",
        "For more information about the role of an external access integration, including privileges required, see\nCreating an external access integration.",
        "Create a UDF that uses the external access integration to connect with the Amazon S3 bucket specified in the network rule you created.",
        "The handler code uses Snowflake APIs to retrieve a token from\nthe secret you created. From this token, you can use Snowflake APIs to retrieve values needed to create a session for connecting with\nAmazon S3, including an access key ID, secret access key, and session token.",
        "For more information on using external access in a UDF, see Using the external access integration in a function or procedure.",
        "Grant the USAGE privilege on the UDF so that those with the user role can call it.",
        "Execute the function to connect to the external endpoint.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}