{
    "url": "https://docs.snowflake.com/en/sql-reference/constructs/pivot",
    "title": "PIVOT | Snowflake Documentation",
    "paragraphs": [
        "Query syntax",
        "Rotates a table by turning the unique values from one column in the input expression into multiple columns and aggregating results\nwhere required on any remaining column values. In a query, it is specified in the FROM clause after\nthe table name or subquery.",
        "The operator supports the built-in aggregate functions AVG,\nCOUNT, MAX,\nMIN, and SUM.",
        "PIVOT can be used to transform a narrow table (for example, empid, month, sales) into a wider table\n(for example, empid, jan_sales, feb_sales, mar_sales).",
        "UNPIVOT",
        "The aggregate function for combining the grouped values from pivot_column.",
        "The column from the source table or subquery that will be aggregated.",
        "The column from the source table or subquery that contains the values from which column names will be generated.",
        "A list of values for the pivot column to pivot into headings in the query results.",
        "Pivot on all distinct values of the pivot column. To control the order of the pivot columns in the output,\nspecify an ORDER BY clause after the ANY keyword. If the pivot column contains NULLs,\nthen NULL is also treated as a pivot value.",
        "Pivot on all values found in the subquery. The DISTINCT keyword is required if the subquery includes an\nORDER BY clause. The subquery must be an uncorrelated subquery that returns a single column. Pivoting is\nperformed on all distinct values returned by the subquery. For information about uncorrelated subqueries,\nsee Working with Subqueries.",
        "Replace all NULL values in the pivot result with the specified default value. The default value can be any scalar\nexpression that does not depend on the pivot and aggregation column.",
        "Snowflake supports dynamic pivot. A dynamic pivot query uses the ANY keyword or a subquery in the PIVOT\nsubclause instead of specifying the pivot values explicitly.",
        "When dynamic pivot is used in a view definition, queries on the view\nmight fail if the underlying data changes so that the pivot output columns are changed.",
        "Dynamic pivot isn\u2019t supported in the body of a stored procedure or user-defined function (UDF).",
        "A pivot query that doesn\u2019t use dynamic pivot can return output with duplicate columns. We recommend avoiding\noutput with duplicate columns. A dynamic pivot query deduplicates duplicate columns.",
        "A pivot query that doesn\u2019t use dynamic pivot might fail if it attempts to\nCAST a VARIANT column to a different\ndata type. Dynamic pivot queries don\u2019t have this limitation.",
        "Currently, the PIVOT semantic doesn\u2019t allow multiple aggregations, but you can achieve similar results by using\nPIVOT with the UNION operator. For an example, see\nDynamic pivot with multiple aggregations using UNION.",
        "The PIVOT examples use the following quarterly_sales table:",
        "The following examples use PIVOT:",
        "Dynamic pivot on all distinct column values automatically",
        "Dynamic pivot on column values using a subquery",
        "Dynamic pivot with multiple aggregations using UNION",
        "Dynamic pivot with a join query",
        "Pivot on a specified list of column values for the pivot column",
        "Pivot with a default value for NULL values",
        "Pivot examples that involve multiple columns",
        "Given the table quarterly_sales, pivot on the amount column using the ANY keyword to sum the\ntotal sales per employee for all of the distinct quarters, and specify ORDER BY so that the pivot columns\nare in order:",
        "Assume that in addition to the quarterly_sales table, an ad_campaign_types_by_quarter\ntable tracks the types of advertisements run during particular quarters. This table has the following\nstructure and data:",
        "You can use a subquery in a pivot query to determine the sum of the sales in the quarters that had\nspecific ad campaigns. For example, the following pivot query returns data only for quarters with\ntelevision ad campaigns:",
        "You can use the UNION operator to show multiple aggregations in\na single result set. This example uses dynamic pivot and the UNION operator to show the following\ninformation for each employee in each quarter:",
        "The average amount of a sale, using the AVG function.",
        "The sale with the highest value, using the MAX function.",
        "The sale with the lowest value, using the MIN function.",
        "The number of sales, using the COUNT function.",
        "The total amount for all sales, using the SUM function.",
        "Run the query:",
        "To pivot in a query with a join, you can use a common table expression (CTE)\nfor the pivot query.",
        "For example, assume a simple table maps employees to managers:",
        "Run a query that joins the emp_manager table and the quarterly_sales table and pivots on the\namount column in the quarterly_sales table:",
        "Given the table quarterly_sales, pivot on the amount column to sum the\ntotal sales per employee for the specified quarters:",
        "You can pivot on all of the quarters in the amount column by running the following\nquery:",
        "You can modify the column names in the output with the AS clause. For example, to shorten the column names and\nshow them without quotes, run the following query:",
        "You can also list specific pivot columns in the SELECT list and change the column names:",
        "If the query returns NULL values, you can replace them with a default value by using DEFAULT ON NULL.\nFor example, you can use dynamic pivot and replace the NULL values with a default value of 0 by\nrunning the following query:",
        "You can also use DEFAULT ON NULL with a specified list of columns:",
        "Pivot queries can work with multiple columns. Before running these examples, add a column to the quarterly_sales\ntable and populate the column with random values.",
        "First, add a column that tracks the discount applied to each sale to the quarterly_sales table:",
        "Populate the new column with random values between 0 and 5, which specify the discount\npercentage for each sale:",
        "Query the table to show the new column with the random values added:",
        "Now that the new column is added and populated, run the following examples:",
        "Exclude columns from a pivot query with a CTE",
        "Run a multidimensional pivot query",
        "You can use a common table expression (CTE) to exclude columns\nfrom a pivot query.",
        "The following example uses a CTE to exclude the discount_percent column from a pivot query:",
        "You can use a CTE to exclude the amount column and show the average discount that\neach employee gave in each quarter:",
        "A multidimensional pivot query pivots on more than one column. This example pivots on the amount\ncolumn and the discount_percentage column. The query returns the sum of all sales by all employees\neach quarter and the maximum discount percentage for all sales each quarter.",
        "In the query, the SELECT list uses $col_position parameters to run SUM\nand MAX functions on the returned columns in order, and to name the returned\ncolumns. A subquery in the FROM clause supplies the data for the pivot operations. Because the output shows sales\nresults for all employees, the subquery doesn\u2019t include the empid column.",
        "Was this page helpful?",
        "On this page"
    ]
}