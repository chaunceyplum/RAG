{
    "url": "https://docs.snowflake.com/en/user-guide/oauth-partner",
    "title": "Configure Snowflake OAuth for partner applications | Snowflake Documentation",
    "paragraphs": [
        "This topic explains how to configure Snowflake OAuth access to Snowflake for supported Snowflake partner applications. This process\nrequires creating an integration, a first-class Snowflake object that defines the interface between Snowflake and a third-party application\nor service.",
        "Important",
        "When connecting to Snowflake using any third-party application, Snowflake recommends that you verify that the integration flow used by\nthe application meets your internal security requirements. You can contact the partner directly for details on their end-to-end flow used\nfor this feature.",
        "Note",
        "In-session role switching to secondary roles is not supported with Snowflake OAuth.",
        "If this behavior is necessary with your OAuth workflow, use External OAuth instead.",
        "For more information, see Using secondary roles with External OAuth.",
        "Currently, Snowflake OAuth supports the following applications:",
        "Client",
        "Required Client Version",
        "Client Type",
        "Tableau Desktop / Cloud [1]",
        "2019.1 or higher",
        "Public",
        "Looker [2]",
        "6.20 or higher",
        "Alation",
        "See the Alation documentation",
        "ThoughtSpot",
        "See the ThoughtSpot documentation",
        "Collibra",
        "See the Collibra documentation",
        "If Tableau Cloud (version 2024.2 or higher) is connecting to Snowflake using private connectivity to the Snowflake service, you need\nto use a custom security integration rather than the integration designed for a partner application. The redirect URL of the custom\nintegration must use the following URL form: https://<your_server_url>/auth/add_oauth_token. For instructions, see\nConfigure Snowflake OAuth for custom clients. Tableau Desktop, Tableau Online, and Tableau Server (version 2024.2 or lower) continue to use the partner\napplication integration regardless of whether it uses a private URL.",
        "Looker supports OAuth only when Looker-hosted instances can access the public Internet. Note that this limitation does not\naffect customer-hosted Looker implementations (i.e. on-premises implementations). Customers using\nprivate connectivity to the Snowflake service might experience issues if attempting to use OAuth and Looker with Snowflake. Please contact Looker for questions or more details.",
        "Create an integration using the CREATE SECURITY INTEGRATION command. An integration is a Snowflake object that\nprovides an interface between Snowflake and third-party services, such as a client that supports Snowflake OAuth.",
        "Note",
        "Only account administrators (i.e users with the ACCOUNTADMIN system role) or a role with the global CREATE INTEGRATION privilege can\nexecute this SQL command.",
        "Where:",
        "oauthClientParams",
        "The optional BLOCKED_ROLES_LIST parameter allows you to list Snowflake roles that a user cannot explicitly consent to using with\nthe integration.",
        "By default, the ACCOUNTADMIN, SECURITYADMIN, and ORGADMIN roles are included in this list and cannot be removed. If you have a business\nneed to allow users to use Snowflake OAuth with these roles, and your security team allows it, please contact\nSnowflake Support to request that these roles be allowed for your account.",
        "When a user has authenticated successfully, the partner application can use the issued refresh token to request new, short-lived access\ntokens, and not prompt the user to repeat the login process until the refresh token expires. The optional OAUTH_REFRESH_TOKEN_VALIDITY\nparameter specifies the length of time a refresh token is valid (in seconds). This setting can be used to expire the refresh token\nperiodically, forcing the user to repeat the login process.",
        "The supported minimum, maximum, and default values for the OAUTH_REFRESH_TOKEN_VALIDITY parameter are as follows:",
        "Application",
        "Minimum",
        "Maximum",
        "Default",
        "Tableau Desktop",
        "60 (1 minute)",
        "36000 (10 hours)",
        "36000 (10 hours)",
        "Tableau Cloud",
        "60 (1 minute)",
        "7776000 (90 days)",
        "7776000 (90 days)",
        "If you have a business need to lower the minimum value or raise the maximum value, please contact\nSnowflake Support to request the change for\nyour account.",
        "Snowflake supports using Client Redirect with Snowflake OAuth for Partner Applications, including using Client Redirect and Snowflake OAuth\nwith supported Snowflake Clients.",
        "For more information, see Redirecting client connections.",
        "Snowflake supports network policies for Snowflake OAuth. For more information, see Network policies.",
        "Tableau Desktop",
        "The following example creates a Snowflake OAuth integration with the default settings:",
        "View the integration settings using DESCRIBE INTEGRATION:",
        "The following example creates a Snowflake OAuth integration with refresh tokens that expire after 10 hours (36000 seconds). The\nintegration blocks users from starting a session with SYSADMIN as the active role:",
        "Tableau Cloud",
        "The following example creates a Snowflake OAuth integration with the default settings:",
        "View the integration settings using DESCRIBE INTEGRATION:",
        "The following example creates a Snowflake OAuth integration with refresh tokens that expire after 1 day (86400 seconds). The integration\nblocks users from starting a session with SYSADMIN as the active role:",
        "Follow the instructions provided by Tableau to connect\nto Snowflake using Snowflake OAuth.",
        "Follow the steps provided by Looker to connect to\nSnowflake using Snowflake OAuth.",
        "Access the Alation Community and follow the instructions provided by Alation to connect to\nSnowflake using Snowflake OAuth.",
        "Access the ThoughtSpot documentation and follow\nthe instructions to create a connection to Snowflake, which includes a step on how to configure\nSnowflake OAuth.",
        "Access the Collibra Documentation and follow the instructions provided by Collibra to connect to Snowflake using Snowflake OAuth.",
        "This section describes how to manage delegated authorizations, i.e. user consent given to one or more clients associated with Snowflake\nintegrations.",
        "List the active delegated authorizations for which you have access privileges, using\nSHOW DELEGATED AUTHORIZATIONS:",
        "List the active delegated authorizations for a specified user. Users can list their own delegated authorizations; otherwise, this command\nvariant requires the OWNERSHIP privilege on the user.",
        "List the active delegated authorizations for a specified integration. This command variant requires the OWNERSHIP privilege on the\nintegration (i.e. the ACCOUNTADMIN role):",
        "A user can revoke consent from a specified integration. This has the effect of revoking any access token associated with the integration.",
        "To revoke user consent for a given integration, execute the ALTER USER \u2026 REMOVE DELEGATED AUTHORIZATIONS command.",
        "Note",
        "Only security administrators (i.e. users with the SECURITYADMIN role) or higher can execute this SQL command.",
        "Where:",
        "Specifies the user whose consent you are revoking.",
        "Specifies the integration associated with the access tokens for a specific client.",
        "To revoke user consent associated with a specific role, include the OF ROLE role_name parameter in the statement:",
        "Where:",
        "Specifies the role associated with the access token.",
        "Any access tokens associated with the role are revoked.",
        "See the Error codes for a list of error codes associated with OAuth, as well as errors that are returned in the JSON\nblob, during the authorization flow, token request or exchange, or when creating a Snowflake session after completing the OAuth flow.",
        "Was this page helpful?",
        "On this page"
    ]
}