{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.read_excel",
    "title": "modin.pandas.read_excel | Snowflake Documentation",
    "paragraphs": [
        "Read an Excel file into a Snowpark pandas DataFrame.",
        "Supports xls, xlsx, xlsm, xlsb, odf, ods and odt file extensions read from a local filesystem or URL. Supports an option to read a single sheet or a list of sheets.",
        "io (str, bytes, ExcelFile, xlrd.Book, path object, or file-like object) \u2013",
        "Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: file://localhost/path/to/table.xlsx.\nIf you want to pass in a path object, pandas accepts any os.PathLike.\nBy file-like object, we refer to objects with a read() method, such as a file handle (e.g. via builtin open function) or StringIO.",
        "Deprecated since version 2.1.0: Passing byte strings is deprecated. To read from a byte string, wrap it in a BytesIO object.",
        "",
        "sheet_name (str, int, list, or None, default 0) \u2013 Strings are used for sheet names. Integers are used in zero-indexed sheet positions (chart sheets do not count as a sheet position). Lists of strings/integers are used to request multiple sheets. Specify None to get all worksheets.\nAvailable cases:\n- Defaults to 0: 1st sheet as a DataFrame\n- 1: 2nd sheet as a DataFrame\n- \u201cSheet1\u201d: Load sheet with name \u201cSheet1\u201d\n- [0, 1, \u201cSheet5\u201d]: Load first, second and sheet named \u201cSheet5\u201d as a dict of DataFrame\n- None: All worksheets.",
        "header (int, list of int, default 0) \u2013 Row (0-indexed) to use for the column labels of the parsed DataFrame. If a list of integers is passed those row positions will be combined into a MultiIndex. Use None if there is no header.",
        "names (array-like, default None) \u2013 List of column names to use. If file contains no header row, then you should explicitly pass header=None.",
        "index_col (int, str, list of int, default None) \u2013 Column (0-indexed) to use as the row labels of the DataFrame. Pass None if there is no such column. If a list is passed, those columns will be combined into a MultiIndex. If a subset of data is selected with usecols, index_col is based on the subset.\nMissing values will be forward filled to allow roundtripping with to_excel for merged_cells=True. To avoid forward filling the missing values use set_index after reading the data instead of index_col.",
        "usecols (str, list-like, or callable, default None) \u2013",
        "If None, then parse all columns.",
        "If str, then indicates comma separated list of Excel column letters and column ranges (e.g. \u201cA:E\u201d or \u201cA,C,E:F\u201d). Ranges are inclusive of both sides.",
        "If list of int, then indicates list of column numbers to be parsed (0-indexed).",
        "If list of string, then indicates list of column names to be parsed.",
        "If callable, then evaluate each column name against it and parse the column if the callable returns True.",
        "Returns a subset of the columns according to behavior above.",
        "",
        "dtype (Type name or dict of column -> type, default None) \u2013 Data type for data or columns. E.g. {\u2018a\u2019: np.float64, \u2018b\u2019: np.int32} Use object to preserve data as stored in Excel and not interpret dtype, which will necessarily result in object dtype. If converters are specified, they will be applied INSTEAD of dtype conversion. If you use None, it will infer the dtype of each column based on the data.",
        "engine ({\u2018openpyxl\u2019, \u2018calamine\u2019, \u2018odf\u2019, \u2018pyxlsb\u2019, \u2018xlrd\u2019}, default None) \u2013",
        "If io is not a buffer or path, this must be set to identify io. Engine compatibility :\n- openpyxl supports newer Excel file formats.\n- calamine supports Excel (.xls, .xlsx, .xlsm, .xlsb) and OpenDocument (.ods) file formats.\n- odf supports OpenDocument file formats (.odf, .ods, .odt).\n- pyxlsb supports Binary Excel files.\n- xlrd supports old-style Excel files (.xls).",
        "When engine=None, the following logic will be used to determine the engine:\n- If path_or_buffer is an OpenDocument format (.odf, .ods, .odt), then odf will be used.\n- Otherwise if path_or_buffer is an xls format, xlrd will be used.\n- Otherwise if path_or_buffer is in xlsb format, pyxlsb will be used.\n- Otherwise openpyxl will be used.",
        "",
        "converters (dict, default None) \u2013 Dict of functions for converting values in certain columns. Keys can either be integers or column labels, values are functions that take one input argument, the Excel cell content, and return the transformed content.",
        "true_values (list, default None) \u2013 Values to consider as True.",
        "false_values (list, default None) \u2013 Values to consider as False.",
        "skiprows (list-like, int, or callable, optional) \u2013 Line numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file. If callable, the callable function will be evaluated against the row indices, returning True if the row should be skipped and False otherwise. An example of a valid callable argument would be lambda x: x in [0, 2].",
        "nrows (int, default None) \u2013 Number of rows to parse.",
        "na_values (scalar, str, list-like, or dict, default None) \u2013 Additional strings to recognize as NA/NaN. If dict passed, specific per-column NA values. By default the following values are interpreted as NaN: \u2018\u2019, \u2018#N/A\u2019, \u2018#N/A N/A\u2019, \u2018#NA\u2019, \u2018-1.#IND\u2019, \u2018-1.#QNAN\u2019, \u2018-NaN\u2019, \u2018-nan\u2019, \u20181.#IND\u2019, \u20181.#QNAN\u2019, \u2018<NA>\u2019, \u2018N/A\u2019, \u2018NA\u2019, \u2018NULL\u2019, \u2018NaN\u2019, \u2018None\u2019, \u2018n/a\u2019, \u2018nan\u2019, \u2018null\u2019.",
        "keep_default_na (bool, default True) \u2013",
        "Whether or not to include the default NaN values when parsing the data. Depending on whether na_values is passed in, the behavior is as follows:\n- If keep_default_na is True, and na_values are specified, na_values is appended to the default NaN values used for parsing.\n- If keep_default_na is True, and na_values are not specified, only the default NaN values are used for parsing.\n- If keep_default_na is False, and na_values are specified, only the NaN values specified na_values are used for parsing.\n- If keep_default_na is False, and na_values are not specified, no strings will be parsed as NaN.",
        "Note that if na_filter is passed in as False, the keep_default_na and na_values parameters will be ignored.",
        "",
        "na_filter (bool, default True) \u2013 Detect missing value markers (empty strings and the value of na_values). In data without any NAs, passing na_filter=False can improve the performance of reading a large file.",
        "verbose (bool, default False) \u2013 Indicate number of NA values placed in non-numeric columns.",
        "parse_dates (bool, list-like, or dict, default False) \u2013",
        "The behavior is as follows:\n- bool. If True -> try parsing the index.\n- list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3 each as a separate date column.\n- list of lists. e.g. If [[1, 3]] -> combine columns 1 and 3 and parse as a single date column.\n- dict, e.g. {\u2018foo\u2019 : [1, 3]} -> parse columns 1, 3 as date and call result \u2018foo\u2019",
        "If a column or index contains an unparsable date, the entire column or index will be returned unaltered as an object data type. If you don`t want to parse some cells as date just change their type in Excel to \u201cText\u201d. For non-standard datetime parsing, use pd.to_datetime after pd.read_excel.\nNote: A fast-path exists for iso8601-formatted dates.",
        "",
        "date_parser (function, optional) \u2013",
        "Function to use for converting a sequence of string columns to an array of datetime instances. The default uses dateutil.parser.parser to do the conversion. Pandas will try to call date_parser in three different ways, advancing to the next if an exception occurs: 1) Pass one or more arrays (as defined by parse_dates) as arguments; 2) concatenate (row-wise) the string values from the columns defined by parse_dates into a single array and pass that; and 3) call date_parser once for each row using one or more strings (corresponding to the columns defined by parse_dates) as arguments.",
        "Deprecated since version 2.0.0: Use date_format instead, or read in as object and then apply to_datetime() as-needed.",
        "",
        "date_format (str or dict of column -> format, default None) \u2013",
        "If used in conjunction with parse_dates, will parse dates according to this format. For anything more complex, please read in as object and then apply to_datetime() as-needed.",
        "Added in version 2.0.0.",
        "",
        "thousands (str, default None) \u2013 Thousands separator for parsing string columns to numeric. Note that this parameter is only necessary for columns stored as TEXT in Excel, any numeric columns will automatically be parsed, regardless of display format.",
        "decimal (str, default \u2018.\u2019) \u2013",
        "Character to recognize as decimal point for parsing string columns to numeric. Note that this parameter is only necessary for columns stored as TEXT in Excel, any numeric columns will automatically be parsed, regardless of display format.(e.g. use \u2018,\u2019 for European data).",
        "Added in version 1.4.0.",
        "",
        "comment (str, default None) \u2013 Comments out remainder of line. Pass a character or characters to this argument to indicate comments in the input file. Any data between the comment string and the end of the current line is ignored.",
        "skipfooter (int, default 0) \u2013 Rows at the end to skip (0-indexed).",
        "storage_options (dict, optional) \u2013 Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to urllib.request.Request as header options. For other URLs (e.g. starting with \u201cs3://\u201d, and \u201cgcs://\u201d) the key-value pairs are forwarded to fsspec.open. Please see fsspec and urllib for more details, and for more examples on storage options refer here.",
        "dtype_backend ({\u2018numpy_nullable\u2019, \u2018pyarrow\u2019}, default \u2018numpy_nullable\u2019) \u2013",
        "Back-end data type applied to the resultant DataFrame (still experimental). Behaviour is as follows:\n- \u201cnumpy_nullable\u201d: returns nullable-dtype-backed DataFrame (default).\n- \u201cpyarrow\u201d: returns pyarrow-backed nullable ArrowDtype DataFrame.",
        "Added in version 2.0.",
        "",
        "engine_kwargs (dict, optional) \u2013 Arbitrary keyword arguments passed to excel engine.",
        "DataFrame from the passed in Excel file. See notes in sheet_name argument for more information on when a dict of DataFrames is returned.",
        "DataFrame or dict of DataFrames",
        "See also",
        "Write DataFrame to an Excel file.",
        "Write DataFrame to a comma-separated values (csv) file.",
        "Read a comma-separated values (csv) file into DataFrame.",
        "Read a table of fixed-width formatted lines into DataFrame.",
        "Notes",
        "For specific information on the methods used for each Excel engine, refer to the pandas user guide.",
        "Examples",
        "The file can be read using the file name as string or an open file object:",
        "Index and header can be specified via the index_col and header arguments",
        "Column types are inferred but can be explicitly specified",
        "True, False, and NA values, and thousands separators have defaults, but can be explicitly specified, too. Supply the values you would like as strings or lists of strings!",
        "Comment lines in the excel input file can be skipped using the comment kwarg.",
        "Was this page helpful?"
    ]
}