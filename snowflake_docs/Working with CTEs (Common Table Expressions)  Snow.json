{
    "url": "https://docs.snowflake.com/en/user-guide/queries-cte",
    "title": "Working with CTEs (Common Table Expressions) | Snowflake Documentation",
    "paragraphs": [
        "CONNECT BY , WITH",
        "A CTE (common table expression) is a named subquery defined in a WITH clause. You can\nthink of the CTE as a temporary view for use in the statement that defines the\nCTE. The CTE defines the temporary view\u2019s name, an optional list of column names, and a query expression (i.e. a SELECT\nstatement). The result of the query expression is effectively a table. Each column of that table corresponds to a column\nin the (optional) list of column names.",
        "The following code is an example of a query that uses a CTE:",
        "In the example above, the CTE starts on the line containing my_cte (cte_col_1, cte_col_2) AS (, and ends on the line containing\n).",
        "Avoid choosing CTE names that match the following:",
        "SQL function names",
        "Tables, views, or materialized views. If a query defines a CTE with a particular name, the CTE takes precedence over tables, etc.",
        "A CTE can be recursive or non-recursive. A recursive CTE is a CTE that references itself. A recursive CTE can join a\ntable to itself as many times as necessary to process hierarchical data in the table.",
        "CTEs increase modularity and simplify maintenance.",
        "Recursive CTEs enable you to process hierarchical data, such as a parts explosion (component, sub-components) or a\nmanagement hierarchy (manager, employees). For more information about hierarchical data, and other ways to query\nhierarchical data, see Querying Hierarchical Data.",
        "A recursive CTE allows you to join all the levels of a hierarchy without knowing in advance how many levels there are.",
        "This section provides an overview of the syntax and how the syntax relates to the way that the recursion works:",
        "Selects an initial row or set of rows that represent the top of the hierarchy. For\nexample, if you are trying to display all the employees in a company, the anchor clause would select the President\nof the company.",
        "The anchor clause is a SELECT statement and can contain any supported SQL constructs.\nThe anchor clause cannot reference the cte_name.",
        "Selects the next layer of the hierarchy based on the previous layer. In the first iteration, the previous layer is the\nresult set from the anchor clause. In subsequent iterations, the previous layer is the most recent completed iteration.",
        "The recursive_clause is a SELECT statement; however, the statement is restricted\nto projections, joins, and filters. In addition, the following are not allowed in the statement:",
        "Aggregate or window functions.",
        "GROUP BY, ORDER BY, LIMIT, or DISTINCT.",
        "The recursive clause can reference the cte_name like a regular table or view.",
        "For a more detailed description of the syntax, see WITH.",
        "Logically, the recursive CTE is evaluated as follows:",
        "The anchor_clause is evaluated and its result is written to both the final result set and to a working table.\nThe cte_name is effectively an alias to the working table; in other words, a query referencing the\ncte_name reads from the working table.",
        "While the working table is not empty:",
        "The recursive_clause is evaluated, using the current contents of the working table wherever cte_name\nis referenced.",
        "The result of recursive_clause is written to both the final result set and a temp table.",
        "The working table is overwritten by the content of the temp table.",
        "Effectively, the output of the previous iteration is stored in a working table named cte_name, and that table is\nthen one of the inputs to the next iteration. The working table contains only the result of the most recent iteration.\nThe accumulated results from all iterations so far are stored elsewhere.",
        "After the final iteration, the accumulated results are available to the main SELECT statement by referencing cte_name.",
        "Constructing a recursive CTE incorrectly can cause an infinite loop. In these cases, the query continues to run until the query\nsucceeds, the query times out (e.g. exceeds the number of seconds specified by the\nSTATEMENT_TIMEOUT_IN_SECONDS parameter), or you cancel the query.",
        "For information on how infinite loops can occur and for guidelines on how to avoid this problem, see\nTroubleshooting a Recursive CTE.",
        "This topic described hierarchies and how parent-child relationships can be used by recursive CTEs. In all of the examples\nin this topic, the hierarchies are contiguous.",
        "For information about non-contiguous hierarchies, see Querying Hierarchical Data.",
        "This section includes both non-recursive and recursive CTEs examples to contrast the two types.",
        "This example uses a table of employees and managers:",
        "A two-level self-join of this employee table looks like:",
        "The query above shows all the employees. Each manager\u2019s employees appear near their manager in the report. However, the\nreport doesn\u2019t visually show the hierarchy. Without looking carefully at the data, you don\u2019t know how many levels there\nare in the organization, and you need to read each row in order to see which employees are associated with a specific\nmanager.",
        "A recursive CTE can display this hierarchical data as a sideways tree, as shown in the next section.",
        "Below are two examples of using a recursive CTE:",
        "The first uses indentation to show the different levels of the hierarchy. To simplify this example, the code does not\nproduce the rows in a particular order.",
        "The second example uses indentation and shows each manager\u2019s employees immediately below their manager.",
        "Here is the first example.",
        "The query includes the following sections:",
        "Line 2 contains the column names for the \u201cview\u201d (CTE).",
        "Lines 4 - 21 contain the CTE.",
        "Lines 6 - 11 contain the anchor clause of the CTE.",
        "Lines 15 - 21 contain the recursive clause of the CTE.",
        "Lines 23 - 26 contain the main SELECT that uses the CTE as a view. This SELECT references:",
        "The CTE name (managers), defined in line 1.",
        "The CTE\u2019s columns (indent, employee_id, etc.) defined in line 2.",
        "The CTE contains two SELECT statements:",
        "The SELECT statement in the anchor clause is executed once and provides the set of rows from the\nfirst (top) level of the hierarchy.",
        "The SELECT in the recursive clause can reference the CTE. You can think of the query as\niterating, with each iteration building on the previous iterations\u2019 query results.",
        "In the manager/employee example, the anchor clause emits the first row, which is the row that describes the company\npresident.",
        "In the next iteration of the recursive clause, the recursive clause finds all the rows whose manager is the company\npresident (i.e. it finds all of the vice presidents). The 3rd iteration finds all the employees whose manager is one\nof the vice presidents. Iteration continues until there is an iteration in which all of the rows retrieved are rows of\nleaf-level employees who do not manage anyone. The statement does one more iteration, looking for (but not finding)\nany employees whose managers are leaf-level employees. That iteration produces 0 rows, and the iteration stops.",
        "Throughout these iterations, the UNION ALL clause accumulates the results. The results of each iteration are added\nto the results of the previous iterations. After the last iteration completes, the accumulated rows (like any rows\nproduced in a WITH clause) are made available to the main SELECT clause in the query. That main SELECT can then query\nthose rows.",
        "This particular example query uses indentation to show the hierarchical nature of the data. If you look at the output,\nyou see that the lower the level of the employee, the further that employee\u2019s data is indented.",
        "The indentation is controlled by the column named indent. The indentation starts at 0 characters (an empty string\nin the anchor clause), and increases by 4 characters (---) for each iteration (i.e. for each level in the hierarchy).",
        "Not surprisingly, it is very important to construct the join(s) correctly, and to select the correct columns in the\nrecursive clause. The columns in the SELECT of the recursive clause must correspond correctly to the columns in\nthe anchor clause. Remember that the query starts with the President, then selects the Vice Presidents, and then\nselects the people who report directly to the Vice Presidents, etc. Each iteration looks for employees whose\nmanager_id field corresponds to one of the managers.employee_id values produced in the previous iteration.",
        "Expressed another way, the employee ID in the managers \u201cview\u201d is the manager ID for the next level of employees. The\nemployee IDs must progress downward through the hierarchy (President, Vice President, senior manager, junior manager, etc.)\nduring each iteration. If the employee IDs don\u2019t progress, then the query can loop infinitely (if the same manager_ID\nkeeps appearing in the managers.employee_ID column in different iterations), or skip a level, or fail in other ways.",
        "The previous example had no ORDER BY clause, so even though each employee\u2019s record is indented properly, each employee did\nnot necessarily appear directly underneath their manager. The example below generates output with correct indentation, and\nwith each manager\u2019s employees directly underneath their manager.",
        "The query\u2019s ORDER BY clause uses an additional column, named sort_key. The sort key accumulates as the recursive clause\niterates; you can think of the sort key as a string that contains the entire chain of command above you (your manager, your\nmanager\u2019s manager, etc.). The most senior person in that chain of command (the President) is at the beginning of the sort\nkey string. Although you normally wouldn\u2019t display the sort key, the query below includes the sort key in the output so that\nit is easier to understand the output.",
        "Each iteration should increase the length of the sort key by the same amount (same number of characters), so the query uses\na UDF (user-defined function) named skey, with the following definition, to generate consistent-length segments of the\nsort key:",
        "Here is an example of output from the SKEY function:",
        "Here is the final version of the query. This puts each manager\u2019s employees immediately underneath that manager, and indents based\non the \u201clevel\u201d of the employee:",
        "The next query shows how to reference a field from the previous (higher) level in the hierarchy; pay particular attention to the\nmgr_title column:",
        "Manager/employee hierarchies are not the only type of variable-depth hierarchies that you can store in a single table and process\nwith a recursive CTE. Another common example of hierarchical data is a \u201cparts explosion\u201d, in which each component can be listed with\nits sub-components, each of which can be listed with its sub-sub-components.",
        "For example, suppose that your table contains hierarchical data, such as the components of a car. Your car probably contains\ncomponents such as an engine, wheels, etc. Many of those components contain sub-components (e.g. an engine might contain a fuel pump).\nThe fuel pump might contain a motor, tubing, etc. You could list all the components and their sub-components using a recursive CTE.",
        "For an example of a query that produces a parts explosion, see WITH.",
        "This issue can be caused by two different scenarios:",
        "Your data hierarchy might have a cycle.",
        "You might have created an infinite loop.",
        "If your data hierarchy contains a cycle (i.e. it is not a true tree), there are multiple possible solutions:",
        "If the data is not supposed to contain a cycle, correct the data.",
        "Limit the query in some way (e.g. limit the number of rows of output). For example:",
        "Do not use a query that contains a recursive CTE, which expects hierarchical data.",
        "An infinite loop can happen if the projection clause in the recursive_clause outputs a value\nfrom the \u201cparent\u201d (the previous iteration) instead of the \u201cchild\u201d (the current iteration) and then the next\niteration uses that value in a join when it should use the current iteration\u2019s value in the join.",
        "The following pseudo-code shows an approximate example of this:",
        "In this example, the recursive clause passes its parent value (manager_id) in the column that should have the\ncurrent/child value (employee_id). The parent will show up as the \u201ccurrent\u201d value in the next iteration, and will\nbe passed again as the \u201ccurrent\u201d value to the following generation, so the query never progresses down through the\nlevels; it keeps processing the same level each time.",
        "Suppose that the anchor clause selects the values employee_id = 1 and manager_id = NULL.",
        "CTE:",
        "During the first iteration of the recursive clause, employee_id = 2 and manager_id = 1 in table1.",
        "CTE:",
        "table1:",
        "Result of the join in the recursive clause:",
        "Projection:",
        "However, because the employee_id and manager_id columns are reversed in the projection, the actual output of\nthe query (and thus the content of the CTE at the start of the next iteration) is:",
        "During the second iteration of the recursive clause:",
        "CTE:",
        "table1:",
        "Result of join in recursive clause:",
        "Projection:",
        "Result of the query (contents of CTE at start of next iteration):",
        "As you can see, at the end of the second iteration, the row in the CTE is the same as it was at the start of the\niteration:",
        "employee_id is 1.",
        "manager_id is 2.",
        "Thus, the result of the join during the next iteration will be the same as the result of the join during the current\niteration, and the query loops infinitely.",
        "If you have created an infinite loop:",
        "Make sure that the recursive clause passes the correct variables in the correct order.",
        "Also make sure that the JOIN condition in the recursive clause is correct. In a typical case, the parent of the\n\u201ccurrent\u201d row should be joined to the child/current value of the parent row.",
        "Was this page helpful?",
        "On this page"
    ]
}