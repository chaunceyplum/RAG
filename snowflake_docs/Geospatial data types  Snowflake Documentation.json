{
    "url": "https://docs.snowflake.com/en/sql-reference/data-types-geospatial#supported-geospatial-object-types",
    "title": "Geospatial data types | Snowflake Documentation",
    "paragraphs": [
        "Snowflake offers native support for geospatial features such as points, lines, and polygons on the Earth\u2019s surface.",
        "Tip",
        "You can use the search optimization service to improve query performance.\nFor details, see Search Optimization Service.",
        "Snowflake provides the following data types for geospatial data:",
        "The GEOGRAPHY data type, which models Earth as though it were a perfect sphere.",
        "The GEOMETRY data type, which represents features in a planar (Euclidean, Cartesian)\ncoordinate system.",
        "The GEOGRAPHY data type follows the WGS 84 standard (spatial reference ID 4326; for details, see\nhttps://epsg.io/4326).",
        "Points on the earth are represented as degrees of longitude (from -180 degrees to +180 degrees) and latitude\n(-90 to +90). Snowflake uses 14 decimal places to store GEOGRAPHY coordinates. When the data includes decimal\nplaces exceeding this limit, the coordinates are rounded to ensure compliance with the specified length constraint.",
        "Altitude currently isn\u2019t supported.",
        "Line segments are interpreted as geodesic arcs on the Earth\u2019s surface.",
        "Snowflake also provides\ngeospatial functions that\noperate on the GEOGRAPHY data type.",
        "If you have geospatial data (for example, longitude and latitude data, WKT, WKB, GeoJSON, and so on), we suggest converting and\nstoring this data in GEOGRAPHY columns, rather than keeping the data in their original formats in VARCHAR, VARIANT or NUMBER columns.\nStoring your data in GEOGRAPHY columns can significantly improve the performance of queries that use geospatial functionality.",
        "The GEOMETRY data type represents features in a planar (Euclidean, Cartesian) coordinate system.",
        "The coordinates are represented as pairs of real numbers (x, y). Currently, only 2D coordinates are supported.",
        "The units of the X and Y are determined by the spatial reference system (SRS) associated with the GEOMETRY object.\nThe spatial reference system is identified by the spatial reference system identifier (SRID) number. Unless\nthe SRID is provided when creating the GEOMETRY object or by calling ST_SETSRID, the SRID is 0.",
        "Snowflake uses 14 decimal places to store GEOMETRY coordinates. When the data includes decimal\nplaces exceeding this limit, the coordinates are rounded to ensure compliance with the specified length constraint.",
        "Snowflake provides a set of\ngeospatial functions that operate on the GEOMETRY data type. For these functions:",
        "All functions assume planar coordinates, even if the geometry uses a non-planar SRS.",
        "The measurement functions (for example, ST_LENGTH) use the same units as the coordinate system.",
        "For functions that accept multiple GEOMETRY expressions as arguments (for example, ST_DISTANCE),\nthe input expressions must be defined in the same SRS.",
        "The following sections cover the supported standard formats and object types when reading and writing geospatial data.",
        "Supported standard input and output formats",
        "Supported geospatial object types",
        "Specifying the output format for result sets",
        "Examples of inserting and querying GEOGRAPHY data",
        "The GEOGRAPHY and GEOMETRY data types support the following standard industry formats for input and output:",
        "Well-Known Text\n(WKT)",
        "Well-Known Binary\n(WKB)",
        "Extended WKT and WKB (EWKT and EWKB)\n(see the note on EWKT and EWKB handling)",
        "IETF GeoJSON\n(see the note on GeoJSON handling)",
        "You might also find the following Open Geospatial Consortium\u2019s Simple Feature Access references helpful:",
        "Common Architecture",
        "SQL Option",
        "Any departure from these standards is noted explicitly in the Snowflake documentation.",
        "The WKT and WKB standards specify a format only. The semantics of WKT/WKB objects depend on the reference system (for\nexample, a plane or a sphere).",
        "The GeoJSON standard, on the other hand, specifies both a format and its semantics: GeoJSON points are explicitly\nWGS 84 coordinates, and GeoJSON line segments are planar edges (straight lines).",
        "Contrary to that, the Snowflake GEOGRAPHY data type interprets all line segments, including those input from or\noutput to GeoJSON format, as geodesic arcs. In essence, Snowflake treats GeoJSON as JSON-formatted WKT with spherical\nsemantics.",
        "EWKT and EWKB are non-standard formats introduced by PostGIS.\nThey enhance the WKT and WKB formats by including a spatial reference system identifier (SRID), which specifies the\ncoordinate reference system to use with the data. Snowflake currently supports only WGS84, which maps to SRID=4326.",
        "By default, Snowflake issues an error if an EWKB or EWKT input value contains an SRID other than 4326. Conversely, all EWKB and EWKT output values have SRID=4326.",
        "The GEOGRAPHY and GEOMETRY data types can store the following types of geospatial objects:",
        "WKT / WKB / EWKT / EWKB / GeoJSON geospatial objects:",
        "Point",
        "MultiPoint",
        "LineString",
        "MultiLineString",
        "Polygon",
        "MultiPolygon",
        "GeometryCollection",
        "These GeoJSON-specific geospatial objects:",
        "Feature",
        "FeatureCollection",
        "The session parameters GEOGRAPHY_OUTPUT_FORMAT and\nGEOMETRY_OUTPUT_FORMAT control the rendering of GEOGRAPHY and GEOMETRY columns in\nresult sets (respectively).",
        "These parameters can have one of the following values:",
        "Parameter value",
        "Description",
        "GeoJSON (default)",
        "The GEOGRAPHY / GEOMETRY result is rendered as an OBJECT in GeoJSON format.",
        "WKT",
        "The GEOGRAPHY / GEOMETRY result is rendered as a VARCHAR in WKT format.",
        "WKB",
        "The GEOGRAPHY / GEOMETRY result is rendered as a BINARY in WKB format.",
        "EWKT",
        "The GEOGRAPHY / GEOMETRY result is rendered as a VARCHAR in EWKT format.",
        "EWKB",
        "The GEOGRAPHY / GEOMETRY result is rendered as a BINARY in EWKB format.",
        "For EWKT and EWKB, the SRID is always 4326 in the output. See EWKT and EWKB handling for GEOGRAPHY values.",
        "This parameter affects all clients, including the Snowflake UI and the SnowSQL command-line client, as well as the\nJDBC, ODBC, Node.js, Python, and so on drivers and connectors.",
        "For example, the JDBC Driver returns the following metadata for a GEOGRAPHY-typed result column (column i in this\nexample):",
        "If GEOGRAPHY_OUTPUT_FORMAT='GeoJSON' or GEOMETRY_OUTPUT_FORMAT='GeoJSON':",
        "ResultSetMetaData.getColumnType(i) returns java.sql.Types.VARCHAR.",
        "ResultSetMetaData.getColumnClassName(i) returns \"java.lang.String\".",
        "If GEOGRAPHY_OUTPUT_FORMAT='WKT' or 'EWKT', or if: GEOMETRY_OUTPUT_FORMAT='WKT' or 'EWKT':",
        "ResultSetMetaData.getColumnType(i) returns java.sql.Types.VARCHAR.",
        "ResultSetMetaData.getColumnClassName(i) returns \"java.lang.String\".",
        "If GEOGRAPHY_OUTPUT_FORMAT='WKB' or 'EWKB', or if GEOMETRY_OUTPUT_FORMAT='WKB' or 'EWKB':",
        "ResultSetMetaData.getColumnType(i) returns java.sql.Types.BINARY.",
        "ResultSetMetaData.getColumnClassName(i) returns \"[B\" (array of byte).",
        "Note",
        "APIs for retrieving database-specific type names (getColumnTypeName in JDBC and the\nSQL_DESC_TYPE_NAME descriptor in ODBC) always return GEOGRAPHY and GEOMETRY for the type name,\nregardless of the values of the GEOGRAPHY_OUTPUT_FORMAT and GEOMETRY_OUTPUT_FORMAT parameters. For details, see:",
        "Snowflake-specific behavior in the JDBC Driver documentation.",
        "Retrieving results and information about results in the ODBC Driver documentation.",
        "The code below shows sample input and output for the GEOGRAPHY data type. Note the following:",
        "For the coordinates in WKT, EWKT, and GeoJSON, longitude appears before latitude (for example, POINT(lon lat)).",
        "For the WKB and EWKB output, it is assumed that the BINARY_OUTPUT_FORMAT parameter\nis set to HEX (the default value for the parameter).",
        "The following example creates a table with a GEOGRAPHY column, inserts data in WKT format, and returns\nthe data in different output formats.",
        "The following sections cover the supported standard formats and object types when reading and writing geospatial data.",
        "Understanding the effects of using different SRIDs with GEOMETRY",
        "Changing the spatial reference system (SRS) and SRID of a GEOMETRY object",
        "Performing DML operations on GEOGRAPHY and GEOMETRY columns",
        "Loading geospatial data from stages",
        "Using geospatial data with Java UDFs",
        "Using geospatial data with JavaScript UDFs",
        "Using geospatial data with Python UDFs",
        "Using GEOGRAPHY objects with H3",
        "In a GEOMETRY column, you can insert objects that have different SRIDs. If the column contains more than one SRID, some of the\nimportant performance optimizations aren\u2019t applied. This can result in slower queries, in particular when joining on a geospatial\npredicate.",
        "To change the SRS and SRID of an existing GEOMETRY object, call the ST_TRANSFORM function,\npassing in the new SRID. The function returns a new GEOMETRY object with the new SRID and the coordinates converted to use the\nSRS. For example, to return a GEOMETRY object for geometry_expression that uses the SRS for SRID 32633, execute the following\nstatement:",
        "If the original SRID isn\u2019t set correctly in the existing GEOMETRY object, specify the original SRID as an additional argument.\nFor example, if geometry_expression is a GEOMETRY object that uses the SRID 4326, and you want to transform this to use the\nSRID 28992, execute the following statement:",
        "If a GEOMETRY object uses the correct coordinates for a SRS but has the wrong SRID, you can fix the SRID by calling the\nST_SETSRID function. For example, the following statement sets the SRID for\ngeometry_expression to 4326, while leaving the coordinates unchanged:",
        "When a GEOGRAPHY or GEOMETRY column is the target of a DML operation (INSERT, COPY, UPDATE, MERGE, or CREATE TABLE AS\u2026), the\ncolumn\u2019s source expression can be any of the following types:",
        "GEOGRAPHY or GEOMETRY : An expression of type GEOGRAPHY or GEOMETRY is usually the result of a parsing function, a constructor\nfunction, or an existing GEOGRAPHY or GEOMETRY column. For a complete list of supported functions and categories of functions,\nsee Geospatial functions.",
        "VARCHAR: Interpreted as a WKT, WKB (in hex format), EWKT, EWKB (in hex format), or GeoJSON formatted string (see\nTO_GEOGRAPHY(VARCHAR)).",
        "BINARY: Interpreted as a WKB binary (see TO_GEOGRAPHY(BINARY) and",
        "TO_GEOMETRY(BINARY)).",
        "VARIANT: Interpreted as a GeoJSON object (see TO_GEOGRAPHY(VARIANT) and\nTO_GEOMETRY(VARIANT)).",
        "You can load data from CSV or JSON/AVRO files in a stage directly (that is, without copy transforms) into a\nGEOGRAPHY column.",
        "CSV: String values from the corresponding CSV column are parsed as GeoJSON, WKT, EWKT, WKB, or EWKB (see\nTO_GEOGRAPHY(VARCHAR)).",
        "JSON/AVRO: The JSON values in the file are interpreted as GeoJSON (see\nTO_GEOGRAPHY(VARIANT)).",
        "See also GeoJSON handling for GEOGRAPHY values.",
        "Loading data from other file formats (Parquet, ORC, and so on) is\npossible through a COPY transform.",
        "Java UDFs allow the GEOGRAPHY type as an argument and as a return value. See SQL-Java Data Type Mappings and\nPassing a GEOGRAPHY value to an in-line Java UDF for details.",
        "JavaScript UDFs allow the GEOGRAPHY or GEOMETRY type as an argument and as a return value.",
        "If a JavaScript UDF has an argument of type GEOGRAPHY or GEOMETRY, that argument is visible as a JSON object in GeoJSON\nformat inside the UDF body.",
        "If a JavaScript UDF returns GEOGRAPHY or GEOMETRY, the UDF body is expected to return a JSON object in GeoJSON format.",
        "For example, these two JavaScript UDFs are roughly equivalent to the built-in functions ST_X and ST_MAKEPOINT:",
        "Python UDFs allow the GEOGRAPHY and GEOMETRY type as an argument and as a return value.",
        "If a Python UDF has an argument of type GEOGRAPHY or GEOMETRY, that argument is represented as a\nGeoJSON object, which is converted to a Python dict object inside the UDF body.",
        "If a Python UDF returns GEOGRAPHY or GEOMETRY, the UDF body is expected to return a Python dict object\nthat complies with the structure of GeoJSON.",
        "For example, this Python UDF returns the number of distinct geometries that constitute a composite GEOGRAPHY type:",
        "Check Snowflake Labs for more samples\nof Python UDFs. Some of them enable complex spatial manipulations or simplify data ingestion. For example,\nthis UDF allows\nreading formats that aren\u2019t supported natively, such as Shapefiles (.SHP), TAB, KML, GPKG, and others.",
        "Note",
        "The code samples in Snowflake Labs are intended solely for reference and educational purposes. These code samples aren\u2019t covered\nby any Service Level Agreement.",
        "H3 is a hierarchical geospatial index that partitions\nthe world into hexagonal cells in a discrete global grid system.",
        "Snowflake provides SQL functions that enable you to use H3 with GEOGRAPHY objects. You can\nuse these functions to:",
        "Get the H3 cell ID (index) for a GEOGRAPHY object that represents a Point (and vice versa).",
        "Get the IDs of the minimal set of H3 cells that cover a GEOGRAPHY object.",
        "Get the IDs of the H3 cells that have centroids within a GEOGRAPHY object that represents a Polygon.",
        "Get the GEOGRAPHY object that represents the boundary of an H3 cell.",
        "Get the parents and children of a given H3 cell.",
        "Get the longitude and latitude of the centroid of an H3 cell (and vice versa).",
        "Get the resolution of an H3 cell.",
        "Get the hexadecimal representation of an H3 cell ID (and vice versa).",
        "For more information about these functions, see Geospatial functions.",
        "The next sections explain the differences between the GEOGRAPHY and GEOMETRY data types:",
        "Understanding the differences between GEOGRAPHY and GEOMETRY",
        "Examples comparing the GEOGRAPHY and GEOMETRY data types",
        "Understanding the differences in input data validation",
        "Although both the GEOGRAPHY and GEOMETRY data types define geospatial features, the types use different models. The following\ntable summarizes the differences.",
        "GEOGRAPHY data type",
        "GEOMETRY data type",
        "Defines features on a sphere.",
        "Only the WGS84 coordinate system. SRID is always 4326.",
        "Coordinates are latitude (-90 to 90) and longitude (-180 to 180) in degrees.",
        "Results of measurement operations (ST_LENGTH, ST_AREA, and so on) are in meters.",
        "Segments are interpreted as geodesic arcs on the Earth\u2019s surface.",
        "Defines features on a plane.",
        "Any coordinate system is supported.",
        "Unit of coordinate values are defined by the spatial reference system.",
        "Results of measurement operations (ST_LENGTH, ST_AREA, and so on) are in the same unit as coordinates. For example, if the\ninput coordinates are in degrees, the results are in degrees.",
        "Segments are interpreted as straight lines on the plane.",
        "The following examples compare the output of the geospatial functions when using the GEOGRAPHY and GEOMETRY data types as input.",
        "The following table compares the output of ST_DISTANCE for GEOGRAPHY types and GEOMETRY types:",
        "ST_DISTANCE using . GEOGRAPHY input",
        "ST_DISTANCE using . GEOMETRY input",
        "As shown in the example above:",
        "With GEOGRAPHY input values, the input coordinates are in degrees, and the output value is in meters. (The result is 9,182 km.)",
        "With GEOMETRY input values, the input coordinates and output value are degrees. (The result is 136.208 degrees.)",
        "The following table compares the output of ST_AREA for GEOGRAPHY types and GEOMETRY types:",
        "ST_AREA using . GEOGRAPHY input",
        "ST_AREA using . GEOMETRY input",
        "As shown in the example above:",
        "With GEOGRAPHY input values, the input coordinates are in degrees, the output value is in square meters. (The result is\n356,379 km^2.)",
        "With GEOMETRY input values, the input coordinates in degrees, and the output value is in square degrees. (The result is\n45.930 square degrees.)",
        "The following table compares the output of ST_INTERSECTS for GEOGRAPHY types and GEOMETRY types:",
        "ST_INTERSECTS using . GEOGRAPHY input",
        "ST_INTERSECTS using . GEOMETRY input",
        "To create a GEOMETRY or GEOGRAPHY object for an input shape, you must use a shape that is well-formed and valid, according to the\nOGC rules for Simple Features. The next sections explain how the validity of input data differs between GEOMETRY and GEOGRAPHY.",
        "A given shape can be a valid GEOGRAPHY object but an invalid GEOMETRY object (and vice versa).",
        "For example, self-intersecting polygons are disallowed by the OGC rules. A given set of points might define edges that intersect in\nCartesian domain but not on a sphere. Consider the following polygon:",
        "In the Cartesian domain, this polygon degrades to a line and, as a result, is invalid.",
        "However, on a sphere, this same polygon doesn\u2019t intersect itself and is valid:",
        "When the input data is invalid, the GEOMETRY and GEOGRAPHY functions handle validation in different ways:",
        "The functions for constructing and converting to GEOGRAPHY objects (for example, TO_GEOGRAPHY) might\nattempt to repair the shape to handle problems like unclosed loops, spikes, cuts, and self-intersecting loops in polygons.",
        "If the function is successful in repairing the shape, the function returns a GEOGRAPHY object.",
        "The functions for constructing and converting to GEOMETRY objects (for example, TO_GEOMETRY) don\u2019t\nsupport the ability to repair the shape.",
        "Snowflake supports converting from a GEOGRAPHY object to a GEOMETRY object (and vice versa). Snowflake also supports\ntransformations of objects that use different spatial reference systems (SRS).",
        "The following example converts a GEOGRAPHY object that represents a point to a GEOMETRY object with the SRID 0:",
        "To set the SRID of the new GEOMETRY object, pass the SRID as an argument to the constructor function. For example:",
        "If you need to set the SRID of an existing GEOMETRY object, see Changing the spatial reference system (SRS) and SRID of a GEOMETRY object.",
        "By default, when you use a geospatial conversion function to convert\ndata in a supported input format to a GEOGRAPHY or GEOMETRY object, the function\ndoes the following:",
        "The function attempts to validate the shape in the input data.",
        "The function determines if the shape is valid according to the\nOpen Geospatial Consortium\u2019s Simple Feature Access / Common Architecture standard.",
        "If the shape is invalid, the function attempts to repair the data (for example, fixing polygons by closing the rings).",
        "If the shape is still invalid after the repairs, the function reports an error and doesn\u2019t create the GEOGRAPHY or GEOMETRY\nobject. (For the TRY_* functions, the functions return NULL, rather than reporting an error.)",
        "With this feature, you have more control over the validation and repair process. You can:",
        "Allow these conversion functions to create GEOGRAPHY and GEOMETRY objects for invalid shapes.",
        "Determine if the shape for a GEOGRAPHY or GEOMETRY object is invalid.",
        "Different geospatial functions have different effects when you pass in a GEOGRAPHY\nor GEOMETRY object for an invalid shape.",
        "For GEOMETRY objects:",
        "The following functions return results based on the original invalid shape:",
        "ST_AREA",
        "ST_ASGEOJSON",
        "ST_ASWKB",
        "ST_ASWKT",
        "ST_CENTROID",
        "ST_CONTAINS",
        "ST_DIMENSION",
        "ST_DISTANCE",
        "ST_ENVELOPE",
        "ST_INTERSECTS",
        "ST_LENGTH",
        "ST_NPOINTS , ST_NUMPOINTS",
        "ST_PERIMETER",
        "ST_SETSRID",
        "ST_SRID",
        "ST_X",
        "ST_XMAX",
        "ST_XMIN",
        "ST_Y",
        "ST_YMAX",
        "ST_YMIN",
        "The following functions validate the shape and fail with an error if the shape is invalid:",
        "ST_MAKELINE",
        "ST_MAKEPOLYGON",
        "For GEOGRAPHY objects:",
        "The following functions return results based on the original invalid shape:",
        "ST_ASWKB",
        "ST_ASWKT",
        "ST_ASGEOJSON",
        "ST_AZIMUTH",
        "ST_COLLECT",
        "ST_DIMENSION",
        "ST_GEOHASH",
        "ST_HAUSDORFFDISTANCE",
        "ST_MAKELINE",
        "ST_NPOINTS , ST_NUMPOINTS",
        "ST_POINTN",
        "ST_SRID",
        "ST_ENDPOINT",
        "ST_STARTPOINT",
        "ST_X",
        "ST_Y",
        "The following functions validate the shape and fail with an error if the shape is invalid:",
        "ST_COLLECT",
        "ST_MAKEPOLYGON",
        "ST_MAKEPOLYGONORIENTED",
        "The following functions return NULL if it isn\u2019t possible to compute the value:",
        "ST_AREA",
        "ST_CENTROID",
        "ST_CONTAINS",
        "ST_COVERS",
        "ST_DIFFERENCE",
        "ST_DISTANCE",
        "ST_DWITHIN",
        "ST_ENVELOPE",
        "ST_INTERSECTION",
        "ST_INTERSECTION_AGG",
        "ST_INTERSECTS",
        "ST_LENGTH",
        "ST_PERIMETER",
        "ST_SIMPLIFY",
        "ST_SYMDIFFERENCE",
        "ST_UNION",
        "ST_UNION_AGG",
        "ST_XMAX",
        "ST_XMIN",
        "ST_YMAX",
        "ST_YMIN",
        "The next sections explain how to allow functions to create invalid shapes and how to determine if a GEOGRAPHY or GEOMETRY object\nrepresents an invalid or repaired shape.",
        "To allow the following conversion functions to create invalid geospatial objects, pass TRUE for the second argument\n(allowInvalid):",
        "By default, the allowInvalid argument is FALSE.",
        "When you pass TRUE for the allowInvalid argument, the conversion function returns a GEOGRAPHY or GEOMETRY\nobject, even when the input shape is invalid and can\u2019t be repaired successfully.",
        "For example, the following input shape is a LineString that consists of the same two Points. Passing TRUE for the\nallowInvalid argument returns a GEOMETRY object that represents an invalid shape:",
        "To determine if a GEOGRAPHY or GEOMETRY object is invalid, call the ST_ISVALID function.",
        "The following example checks if an object is valid:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}