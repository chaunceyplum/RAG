{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/decrypt_raw",
    "title": "DECRYPT_RAW | Snowflake Documentation",
    "paragraphs": [
        "Encryption functions",
        "Decrypts a BINARY value using a BINARY key.",
        "ENCRYPT , ENCRYPT_RAW , DECRYPT , TRY_DECRYPT , TRY_DECRYPT_RAW",
        "Required:",
        "The binary value to decrypt.",
        "The key to use to encrypt/decrypt the data. The key must be a BINARY value. The key can be any value as long as the\nlength is correct. For example, for AES128, the key must be 128 bits (16 bytes), and for AES256, the key must be\n256 bits (32 bytes).",
        "The key used to encrypt the value must be used to decrypt the value.",
        "This parameter contains the Initialization Vector (IV) to use to encrypt and decrypt this piece of\ndata. The IV must be a BINARY value of a specific length:",
        "For GCM, this field must be 96 bits (12 bytes). While the GCM encryption method allows this field to be a different\nsize, Snowflake currently only supports 96 bits.",
        "For CCM, this should be 56 bits (7 bytes).",
        "For ECB, this parameter is unneeded.",
        "For all other supported encryption modes, this should be 128 bits (16 bytes).",
        "This value is used to initialize the first encryption round. You should never use the same IV and key combination\nmore than once, especially for encryption modes like GCM.",
        "If this parameter is set to NULL, the implementation will choose a new pseudo-random IV during each call.",
        "Optional:",
        "Additional authenticated data (AAD) is additional data whose confidentiality and authenticity is assured during the\ndecryption process. However, this AAD is not encrypted and is not included as a field in the returned value from the\nENCRYPT or ENCRYPT_RAW function.",
        "If AAD is passed to the encryption function (ENCRYPT or ENCRYPT_RAW), then the same AAD must be passed to the\ndecryption function (DECRYPT or DECRYPT_RAW). If the AAD passed to the decryption function does not match the\nAAD passed to the encryption function, then decryption fails.",
        "The difference between the AAD and the passphrase is that the passphrase is intended to be kept\nsecret (otherwise, the encryption is essentially worthless) while the AAD can be left public. The AAD helps\nauthenticate that a public piece of information and an encrypted value are associated with each other. The\nexamples section in the ENCRYPT function includes an example showing the behavior\nwhen the AAD matches and the behavior when it doesn\u2019t match.",
        "For ENCRYPT_RAW and DECRYPT_RAW, the data type of the AAD should be BINARY.\nFor ENCRYPT and DECRYPT, the data type of the AAD can be either VARCHAR or BINARY, and does not need to match\nthe data type of the value that was encrypted.",
        "AAD is supported only by AEAD-enabled encryption modes like GCM (default).",
        "This string specifies the method to use for encrypting/decrypting the data. This string contains subfields:",
        "The algorithm is currently limited to:",
        "'AES': When a passphrase is passed (e.g. to ENCRYPT), the function uses AES-256 encryption (256 bits). When a key\nis passed (e.g. to ENCRYPT_RAW), the function uses 128, 192, or 256-bit encryption, depending upon the key\nlength.",
        "The algorithm is case-insensitive.",
        "The mode specifies which block cipher mode should be used to encrypt messages.\nThe following table shows which modes are supported, and which of those modes support padding:",
        "Mode",
        "Padding",
        "Description",
        "'ECB'",
        "Yes",
        "Encrypt every block individually with the key. This mode is generally discouraged and is included only for compatibility with external implementations.",
        "'CBC'",
        "Yes",
        "The encrypted block is XORed with the previous block.",
        "'GCM'",
        "No",
        "Galois/Counter Mode is a high-performance encryption mode that is AEAD-enabled. AEAD additionally assures the authenticity and confidentiality of the encrypted data by generating an AEAD tag. Moreover, AEAD supports AAD (additional authenticated data).",
        "'CTR'",
        "No",
        "Counter mode.",
        "'OFB'",
        "No",
        "Output feedback. The ciphertext is XORed with the plaintext of a block.",
        "'CFB'",
        "No",
        "Cipher feedback is a combination of OFB and CBC.",
        "The mode is case-insensitive.",
        "The padding specifies how to pad messages whose length is not a multiple of the block size. Padding is\napplicable only for ECB and CBC modes; padding is ignored for other modes. The possible values for padding are:",
        "'PKCS': Uses PKCS5 for block padding.",
        "'NONE': No padding. The user needs to take care of the padding when using ECB or CBC mode.",
        "The padding is case-insensitive.",
        "Default setting: 'AES-GCM'.",
        "If the mode is not specified, GCM is used.",
        "If the padding is not specified, PKCS is used.",
        "This BINARY value is needed for AEAD-enabled decryption modes to check the authenticity and confidentiality of the\nencrypted data. Use the AEAD tag that was returned by the ENCRYPT_RAW function. An example below shows how to\naccess and use this value.",
        "The function returns the decrypted value. The data type of the returned value is BINARY.",
        "To decrypt data encrypted by ENCRYPT(), use DECRYPT(). Do not use DECRYPT_RAW().",
        "To decrypt data encrypted by ENCRYPT_RAW(), use DECRYPT_RAW(). Do not use DECRYPT().",
        "The function\u2019s parameters are masked for security. Sensitive information such as the following is\nnot visible in the query log and is not visible to Snowflake:",
        "The string or binary value to encrypt or decrypt.",
        "The passphrase or key.",
        "The functions use a FIPS-compliant cryptographic library to effectively perform the encryption and decryption.",
        "The passphrase or key used to decrypt a piece of data must be the same as the passphrase or key used to encrypt that\ndata.",
        "When extracting fields (ciphertext, initialization vector, or tag) from an encrypted binary value, use:",
        "For example, use:",
        "Do not use encrypted_value:field_name::binary. The field-access operator : converts the extracted field\nvalue to a string; however, because the source is BINARY, that string is not always a valid UTF-8 string.",
        "This example shows encryption and decryption.",
        "For readability, set the BINARY_OUTPUT_FORMAT to HEX:",
        "Create a table and load it.",
        "Caution",
        "To simplify this example, the encryption/decryption key is stored in the table with the value that has\nbeen encrypted. This is insecure; the key should never be stored as an unencrypted value in the table\nthat stores the encrypted data.",
        "Encrypt:",
        "This shows the corresponding call to the DECRYPT_RAW() function. The initialization vector (IV)\nis taken from the encrypted value; you do not need to store the initialization vector separately. Similarly,\nthe AEAD tag is also read from the encrypted value.",
        "Caution",
        "To simplify this example, the encryption/decryption key is read from the table with the value that has\nbeen encrypted. This is insecure; the key should never be stored as an unencrypted value in the table\nthat stores the encrypted data.",
        "The previous example duplicated a long call to DECRYPT_RAW(). You can use a WITH clause to reduce\nthe duplication:",
        "Was this page helpful?",
        "On this page"
    ]
}