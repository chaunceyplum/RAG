{
    "url": "https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-consume",
    "title": "Consuming results | Snowflake Documentation",
    "paragraphs": [
        "The most common way of consuming results is by passing a complete callback to connection.execute(). When the statement has finished executing and the result is ready to be consumed, the complete\ncallback is invoked with the result rows returned inline:",
        "You can also consume a result as a stream of rows by setting the streamResult connection parameter to true\nin connection.execute when calling the statement.streamRows() method. Enabling this parameter causes\nthe method to return a Node.js Readable stream, which you can use to consume rows as they are received.",
        "For more information about the Readable stream, refer to the Node.js documentation.",
        "Important",
        "For any result set that might exceed Node\u2019s default memory, Snowflake highly recommends that you set\nstreamResult to true when streaming results. With the default value (false), the connector\nstores all of the rows in an array before streaming the results. With smaller result sets, this factor is\nnot normally an issue. However, with larger result sets, storing all the results in memory can contribute to an OOM error.",
        "Recent versions of the Snowflake Node.js driver (1.6.23 and later) implement backpressure functionality to ensure that,\nwhen consuming results,\ndata is not pushed to the stream faster than data is read from the stream.",
        "For example, the following code fragment consumes the results using the Readable event:",
        "By default, the statement.streamRows() method produces a stream that includes every row in the result. However, if you only want to consume a subset of the result, or if you want to consume result rows\nin batches, you can call streamRows() with start and end arguments. When these additional options are specified, only rows in the requested range are streamed:",
        "When result rows are produced, the driver automatically maps SQL data types to their corresponding JavaScript equivalents. For example, values of type TIMESTAMP and DATE are returned as JavaScript Date\nobjects.",
        "For the full mapping of JavaScript to SQL data types, refer to the table below:",
        "SQL Data Type",
        "JavaScript Data Type",
        "Notes",
        "VARCHAR, CHAR, CHARACTER, STRING, TEXT",
        "String",
        "INT, INTEGER, BIGINT, SMALLINT",
        "Number",
        "This is the default mapping. Use the session parameter JS_TREAT_INTEGER_AS_BIGINT to map to JavaScript Bigint.",
        "NUMBER(precision, scale), DECIMAL(p, s), NUMERIC(p, s) where scale = 0",
        "Number",
        "This is the default mapping. Use the session parameter JS_TREAT_INTEGER_AS_BIGINT to map to JavaScript Bigint.",
        "NUMBER(precision, scale), DECIMAL(p, s), NUMERIC(p, s) where scale > 0",
        "Number",
        "FLOAT, FLOAT4, FLOAT8, DOUBLE, DOUBLE PRECISION, REAL",
        "Number",
        "TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, TIMESTAMP_TZ",
        "Date",
        "TIMESTAMP_NTZ values are returned in UTC.",
        "DATE",
        "Date",
        "TIME",
        "String",
        "The TIME data type in SQL has no equivalent in JavaScript, so it is mapped to a JavaScript string.",
        "BOOLEAN",
        "Boolean",
        "VARIANT, ARRAY, OBJECT",
        "JSON",
        "By default, Snowflake INTEGER columns (including BIGINT, NUMBER(p, 0), etc.) are converted to JavaScript\u2019s Number data type.\nHowever, the largest legal Snowflake integer values are larger than the largest legal JavaScript Number values. To convert Snowflake INTEGER\ncolumns to JavaScript Bigint, which can store larger values than JavaScript Number, set the session parameter JS_TREAT_INTEGER_AS_BIGINT.",
        "You can use the following methods to set these parameter values:",
        "Use the ALTER SESSION statement, as shown below:",
        "Specify the parameter in the connection configuration information:",
        "When calling connection.execute(), you can use the fetchAsString option to return the following\ndata types as strings: Boolean, Number, Date, Buffer, and JSON.",
        "You can use this option, for example, to return:",
        "Formatted versions of values of type DATE and TIMESTAMP (or its variants).",
        "String versions of numerical SQL types that can\u2019t be converted to JavaScript numbers without loss in precision.",
        "The following example uses fetchAsString to convert a high-precision Number value to a string.:",
        "Beginning with version 1.7.0 of the driver, you can use the following fast-xml-parser\nlibrary configuration options to customize how the driver processes XML document attributes when querying columns\nwith XML content. For more information about these supported options and how they affect XML data parsing,\nsee xmlParserConfig options.",
        "You can download the fast-xml-parser.",
        "By default, the Node.js driver ignores XML element attributes when returning XML data from a query. For example,\nin the following XML content, the <piece> element includes an id attribute:",
        "By default, when the Node.js driver returns the result set, it ignores the id attribute and returns the following\noutput. Notice the attribute names and values are not included.",
        "To set the fast-xml-parser options, create an xmlParserConfig\nelement similar to the following example:",
        "With these settings, the driver parses the XML data and produces the following:",
        "In version 1.8.0, the Snowflake Node.js Driver introduced a new rowMode configuration option\nthat lets you specify how you want the driver to return result sets that contain duplicate column names.",
        "Prior to version 1.8.0, the Snowflake Node.js Driver always returned the result set from a SELECT command as a JavaScript\nobject. In cases where the result set contained duplicate column names and values, some elements could be omitted due to the way\nJavaScript objects handle duplicate names.",
        "The rowMode option lets you specify how result set data is returned to avoid potential loss of information, including as:",
        "array",
        "object (default)",
        "object_with_renamed_duplicated_columns",
        "To illustrate, assume you submit the following query:",
        "Based on the value of rowMode, the driver returns the result sets as follows:",
        "object (or unset)",
        "array",
        "object_with_renamed_duplicated_columns",
        "You can set the rowMode parameter in the connection or statement configuration level, as shown below. If set in\nboth places, the statement level value takes precedence.",
        "Configuration level",
        "Statement level",
        "The Snowflake Node.js driver provides the following default parsers for processing JSON and XML data in result sets:",
        "JSON: Returns the result from a new Function object.",
        "XML: fast-xml-parser.",
        "The default fast-xml-parser module supports a subset of features, as described in Parsing XML data.",
        "You can download fast-xml-parser.",
        "If you prefer to use a custom parser, you can use the following examples to configure them:",
        "Use the eval JSON parser, which the driver used prior to version 1.6.21:",
        "Use the fast-xml-parser parser, with the ability to customize all of its options:",
        "Configure custom parsers for both in the same declaration:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}