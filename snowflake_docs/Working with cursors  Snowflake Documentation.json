{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-scripting/cursors",
    "title": "Working with cursors | Snowflake Documentation",
    "paragraphs": [
        "You can use a cursor to iterate through query results one row at a time.",
        "To retrieve data from the results of a query, you can use a cursor. To iterate over the rows in the results,\nyou can use a cursor in loops.",
        "To use a cursor, do the following:",
        "In the DECLARE section,\ndeclare the cursor. The declaration includes the query for the cursor.",
        "Before you use the cursor for the first time, execute the OPEN command to\nopen the cursor. This executes the query and loads the results into the cursor.",
        "Execute the FETCH command to\nfetch one or more rows and process those rows.",
        "When you are done with the results or the cursor is no longer needed, execute the CLOSE\ncommand to close the cursor.",
        "Note",
        "You can also use a RESULTSET to retrieve the results of a query when you use Snowflake Scripting. For information\nabout the differences between a cursor and a RESULTSET, see Understanding the differences between a cursor and a RESULTSET.",
        "The examples in this section uses the following data:",
        "You can declare a cursor for a SELECT statement or a RESULTSET.",
        "You declare a cursor in the DECLARE section of a block or in the\nBEGIN \u2026 END section of the block:",
        "Within the DECLARE section, use the syntax described in Cursor declaration syntax.",
        "For example, to declare a cursor for a query:",
        "To declare a cursor for a RESULTSET:",
        "Within the BEGIN \u2026 END block, use the syntax described in Cursor assignment syntax. For example:",
        "In the SELECT statement, you can specify bind parameters (? characters) that you can bind to variables when opening the\ncursor. To bind variables to the parameters, specify the variables in the USING clause of the OPEN command. For example:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Although the statement that declares a cursor defines the query associated with that cursor, the query is not executed until you\nopen the cursor by executing the OPEN command. For example:",
        "Note",
        "When using a cursor in a FOR loop, you do not need to open the cursor explicitly.",
        "If you declare a cursor for a RESULTSET object, the query is executed when you associate the object with the query. In this\ncase, opening the cursor does not cause the query to be executed again.",
        "If your query contains any bind parameters (? characters), add a USING clause to specify the list of variables to bind\nto those parameters. For example:",
        "Opening the cursor executes the query, retrieves the specified rows into the cursor, and sets up an internal pointer that points\nto the first row. You can use the FETCH command to\nfetch (read) individual rows using the cursor.",
        "As with any SQL query, if the query definition does not contain an ORDER BY at the outermost level, then the result set has no\ndefined order. When the result set for the cursor is created, the order of the rows is persistent until the cursor is closed.\nIf you declare or open the cursor again, the rows might be in a different order. Similarly, if you close the cursor and\nthe underlying table is updated before you open the cursor again, the result set can change.",
        "Use the FETCH command to retrieve the current row from the result set and\nadvance the internal current row pointer to point to the next row in the result set.",
        "In the INTO clause, specify the variables that hold the values from the row.",
        "For example:",
        "If the number of variables does not match the number of expressions in the SELECT clause of the cursor declaration, Snowflake\nattempts to match the variables with the columns by position:",
        "If there are more variables than columns, Snowflake leaves the remaining variables unset.",
        "If there are more columns than variables, Snowflake ignores the remaining columns.",
        "Each subsequent FETCH command that you execute gets the next row until the last row has been fetched. If you try to FETCH\na row after the last row, you get NULL values.",
        "A RESULTSET or cursor does not necessarily cache all the rows of the result set at the time that the query is executed. FETCH operations can experience latency.",
        "If the results include a column of the type GEOGRAPHY, the type of the value in the column is OBJECT, not GEOGRAPHY. This means\nthat you cannot directly pass this value to geospatial functions that accept a\nGEOGRAPHY object as input:",
        "To work around this, cast the column value to the GEOGRAPHY type:",
        "If you need to return a table of data from a cursor, you can pass the cursor to RESULTSET_FROM_CURSOR(cursor), which in\nturn you can pass to TABLE(...).",
        "The following block returns a table of data from a cursor:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Even if you have already used the cursor to fetch rows,\nRESULTSET_FROM_CURSOR still returns a RESULTSET containing all of the rows, not just the rows starting from the internal\nrow pointer.",
        "As shown above, the example fetches the first row and sets the internal row pointer to the second row.\nRESULTSET_FROM_CURSOR returns a RESULTSET containing both rows (not just the second row).",
        "When you are done with the result set, close the cursor by executing the CLOSE\ncommand. For example:",
        "Note",
        "When using a cursor in a FOR loop, you do not need to close the cursor explicitly.",
        "You cannot execute the FETCH command on a cursor that has been closed.",
        "In addition, after you close a cursor, the current row pointer becomes invalid. If you open the cursor again, the pointer points\nto the first row in the new result set.",
        "This example uses data that you set up in Setting up the data for the examples.",
        "Here is an anonymous block that uses a cursor to read two rows and sum the prices in those rows:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "You can achieve the same result by using a cursor with a FOR loop:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following section describes common problems with cursors and identifies a possible cause and solution in each case.",
        "Possible cause: You might have executed FETCH inside a FOR <record> IN <cursor> loop. A FOR loop over a cursor\nautomatically fetches the next row. If you do another fetch inside the loop, you get every second row.",
        "Possible solution: Remove any unneeded FETCH commands inside a FOR loop.",
        "Possible cause: You might have executed FETCH inside a FOR <record> IN <cursor> loop. A FOR loop over a cursor\nautomatically fetches the next row. If you do another fetch inside the loop, you get every second row. If\nthere is an odd number of rows, the last fetch will try to fetch a row beyond the last row, and the\nvalues will be NULL.",
        "Possible solution: Remove any unneeded FETCH commands inside a FOR loop.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}