{
    "url": "https://docs.snowflake.com/en/user-guide/querying-semistructured",
    "title": "Querying Semi-structured Data | Snowflake Documentation",
    "paragraphs": [
        "This topic explains how to use special operators and functions to query complex hierarchical data stored in a VARIANT.",
        "(For simple examples of how to extract values from ARRAYs and OBJECTs, see Accessing elements of an array by index or by slice and\nAccessing elements of an OBJECT value by key.)",
        "Typically, hierarchical data has been imported into a VARIANT from one of the following supported data formats:",
        "JSON",
        "Avro",
        "ORC",
        "Parquet",
        "(For information about querying XML data (e.g. data that originated in XML data format and was converted to an OBJECT by calling\nPARSE_XML), see XMLGET.)",
        "Tip",
        "You can use the search optimization service to improve query performance.\nFor details, see Search Optimization Service.",
        "Except where noted, the examples in this topic refer to a table named car_sales that contains a single\nVARIANT column named src. This VARIANT contains nested ARRAYs\nand OBJECTs.",
        "Create the table and load it:",
        "Select the data:",
        "Insert a colon : between the VARIANT column name and any first-level element: <column>:<level1_element>.",
        "Note",
        "In the following examples, the query output is enclosed in double quotes because the query output is\nVARIANT, not VARCHAR. (The VARIANT values are not strings; the VARIANT values contain strings.) Operators : and subsequent . and [] always return VARIANT values containing strings.",
        "For example, get a list of all dealership names:",
        "There are two ways to access elements in a JSON object:",
        "Dot Notation (in this topic).",
        "Bracket Notation (in this topic).",
        "Important",
        "Regardless of which notation you use, the column name is case-insensitive but element names are case-sensitive.\nFor example, in the following list, the first two paths are equivalent, but the third is not:",
        "src:salesperson.name",
        "SRC:salesperson.name",
        "SRC:Salesperson.Name",
        "Use dot notation to traverse a path in a JSON object: <column>:<level1_element>.<level2_element>.<level3_element>. Optionally enclose element names in double quotes:\n<column>:\"<level1_element>\".\"<level2_element>\".\"<level3_element>\".",
        "Note",
        "The rules for JSON keys (element names) are different from the rules for\nSnowflake SQL identifiers.",
        "For more information about the rules for Snowflake SQL identifiers, see: Identifier requirements.",
        "For more information about JSON keys, see http://json.org, in particular the description of a \u201cstring\u201d.",
        "If an element name does not conform to Snowflake SQL identifier rules,\nfor example if it contains spaces, then you must enclose the\nname in double quotes. Below are some examples (not all of which are\nfrom the car_sales example above) of valid JSON element names that are not valid Snowflake identifier names\nunless they are surrounded by double quotes:",
        "Get the names of all salespeople who sold cars:",
        "Alternatively, use bracket notation to traverse the path in an object: <column>['<level1_element>']['<level2_element>']. Enclose element names in single quotes. Values are retrieved as strings.",
        "Get the names of all salespeople who sold cars:",
        "Retrieve a specific numbered instance of a child element in a repeating array by adding a numbered predicate (starting from 0) to the array reference.",
        "Note that to retrieve all instances of a child element in a repeating array, it is necessary to flatten the array. See an example in Using the FLATTEN Function to Parse Arrays in this topic.",
        "Get the vehicle details for each sale:",
        "Get the price of each car sold:",
        "When you extract values from a VARIANT, you can explicitly cast the values to the desired data type.\nFor example, you can extract the prices as numeric values and perform calculations on them:",
        "By default, when VARCHARs, DATEs, TIMEs, and TIMESTAMPs are retrieved from a VARIANT column, the values are surrounded by double\nquotes. You can eliminate the double quotes by explicitly casting the values. For example:",
        "For more information about casting VARIANT values, see Inserting VARIANT data.",
        "For more information about casting in general, see Data type conversion.",
        "The FLATTEN function explodes nested values into separate columns. You can use the function to filter query results in a WHERE clause.",
        "The following example returns key-value pairs that match a WHERE clause and displays them in separate columns:",
        "When working with unfamiliar semi-structured data, you might not know the key names in an OBJECT. You can use the FLATTEN function\nwith the RECURSIVE argument to return the list of distinct key names in all nested elements in an OBJECT:",
        "The REGEXP_REPLACE function removes the array index values (e.g. [0]) and replaces them with brackets ([]) to group array elements.",
        "For example:",
        "Related to Using FLATTEN to List Distinct Key Names, you can use the FLATTEN function with the RECURSIVE argument to retrieve all keys and paths in an OBJECT.",
        "The following query returns keys, paths, and values (including VARIANT \u201cnull\u201d values) for all data types stored in a VARIANT\ncolumn. The code assumes that the VARIANT column contains an OBJECT in each row.",
        "The following query is similar to the first query, but excludes nested OBJECTs and ARRAYs:",
        "The queries return the following values:",
        "OBJECT stored as a row in the VARIANT column.",
        "Unique sequence number associated with the data in the row.",
        "String associated with a value in the data structure.",
        "Path to the element within the data structure.",
        "Level of the key-value pair within the data structure.",
        "Data type for the value.",
        "Index of the element in the data structure. Applies to ARRAY values only; otherwise NULL.",
        "Value at the current level in the data structure.",
        "Value one level higher in the data structure.",
        "Parse an array using the FLATTEN function. FLATTEN is a table function that produces a lateral view of a VARIANT, OBJECT, or ARRAY column. The function returns a row for each object, and the LATERAL modifier joins the data with any information outside of the object.",
        "Get the names and addresses of all customers. Cast the VARIANT output to string values:",
        "The extras array is nested within the vehicle array in the sample data:",
        "Add a second FLATTEN clause to flatten the extras array within the flattened vehicle array and retrieve the \u201cextras\u201d purchased for each car sold:",
        "Parse text as a JSON document using the PARSE_JSON function.",
        "If the input is NULL, the output will also be NULL. However, if the input string is null, it is interpreted as a VARIANT null value; that is, the result is not a SQL NULL but a real value used to represent a null value in semi-structured formats.",
        "For an example, see Sample Data Used in Examples in this topic.",
        "GET accepts a VARIANT, OBJECT, or ARRAY value as the first argument and extracts the VARIANT value of the element in the path provided as the second argument.",
        "Compute and extract the last element of each array in a VARIANT column using the GET and ARRAY_SIZE functions. ARRAY_SIZE returns the size of the input array:",
        "Note",
        "This example departs from the car_sales table used elsewhere in this topic.",
        "Extract a value from a VARIANT column using the GET_PATH , : function. The function is a variation of GET, used to extract a value using a path name. GET_PATH is equivalent to a chain of GET functions.",
        "Get the vehicle make for the car purchased by each customer:",
        "Traversing Semi-structured Data describes the path syntax used to retrieve elements in a VARIANT column. The syntax is shorthand for the GET or GET_PATH , : function. Unlike the path syntax, these functions can handle irregular paths or path elements.",
        "The following queries produce the same results:",
        "Assume a staged file named contacts.json.gz contains the following data:",
        "Also assume a file format named my_json_format includes TYPE=JSON in its definition.",
        "Query the name of the first employee in the staged file. In this example, the file is located in the customers table stage, but it could be located in any internal (i.e. Snowflake) or external stage:",
        "Snowflake higher-order functions enable you to use lambda functions to filter, reduce, and transform semi-structured\nand structured data. When you call a Snowflake higher-order function, you use a lambda expression to create\nthe lambda function that operates on the data, which is specified in an array.\nSnowflake higher-order functions provide a concise, readable, and efficient way to perform data manipulation\nand advanced analysis.",
        "The following higher-order functions are available:",
        "FILTER",
        "REDUCE",
        "TRANSFORM",
        "When you use semi-structured data in data analytics, you typically need to loop over an array and perform actions\nfor each value in the array. You can perform these operations with a call to a Snowflake higher-order function.\nThese higher-order functions provide the following benefits:",
        "Streamline advanced analytics - By simplifying the iteration over array elements, the functions facilitate the implementation\nof custom logic for data filtering, reduction, and transformation, which streamlines analytical processes. Without higher-order functions,\nthis type of manipulation requires LATERAL FLATTEN operations or user-defined functions (UDFs).",
        "Enhance the developer experience - Higher-order functions encapsulate the manipulation logic in lambda expressions, enabling\nmore readable and maintainable SQL statements. By using higher-order functions, you can avoid writing verbose and convoluted\nSQL queries.",
        "Avoid unnecessary UDFs - With higher-order functions, there is less need to create, maintain, and manage access to\nUDFs for ad-hoc array manipulation logic. These functions can reduce overhead and simplify data manipulation processes.",
        "A lambda expression is a short block of code that takes an argument and returns a value. In the lambda expression,\nyou specify the argument on the left side of the lambda operator (->) and an expression on the right side. You\ncan use lambda expressions to complete a variety of operations.",
        "For example, you can use a lambda expression to generate numeric output. The following lambda expression multiplies\nelements by two:",
        "You can use a lambda expression to filter elements and return the elements for which the filter condition\nreturns TRUE. For example, the following lambda expression returns elements with a value greater than 50:",
        "You can use a lambda expression to add text to elements. For example, the following lambda expression\nadds the text some string to elements:",
        "You can specify the data types of lambda arguments. For example, the following lambda expression\nspecifies two INTEGER values and adds them:",
        "You can use function calls in a lambda expression. For example, the following lambda expression\ncalls the UPPER function:",
        "You can execute an uncorrelated scalar subquery in a lambda\nexpression. For example, the following lambda expression includes such a subquery:",
        "You can call a user-defined SQL function in a lambda expression.\nFor example, the following lambda expression calls the function mysqlfunction:",
        "Lambda expressions aren\u2019t supported as standalone objects. They must be specified as arguments to Snowflake\nhigher-order functions.",
        "Lambda expressions must be anonymous. Named functions can\u2019t be passed in as lambda arguments to Snowflake\nhigher-order functions.",
        "Lambda expressions only accept built-in functions (excluding aggregate and window functions), SQL user-defined functions,\nand uncorrelated scalar subqueries. They don\u2019t support user-defined functions created in languages other than SQL,\nreferencing nested context (such as Snowflake Scripting variables), CTE expressions, column references in the current or\nnesting query block, arguments in user-defined functions, or correlated subqueries.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}