{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/snowpark/functions",
    "title": "Functions | Snowflake Documentation",
    "paragraphs": [
        "Provides utility and SQL functions that generate Column expressions that you can pass to DataFrame transformation methods.",
        "These utility functions generate references to columns, literals, and SQL expressions (e.g. \u201cc + 1\u201d).",
        "Use col() to convert a column name to a Column object. Refer to the API docs of Column to know more ways of referencing a column.",
        "Use lit() to convert a Python value to a Column object that represents a constant value in Snowflake SQL.",
        "Use sql_expr() to convert a Snowflake SQL expression to a Column.",
        "Some DataFrame methods accept column names or SQL expressions text aside from a Column object for convenience.\nFor instance:",
        "whereas Column objects enable you to use chained column operators and transformations with\nPython code fluently:",
        "The Snowflake database has hundreds of SQL functions\nThis module provides Python functions that correspond to the Snowflake SQL functions. They typically accept Column\nobjects or column names as input parameters and return a new Column objects.\nThe following examples demonstrate the use of some of these functions:",
        "If you want to use a SQL function in Snowflake but can\u2019t find the corresponding Python function here,\nyou can create your own Python function with function():",
        "or call the SQL function directly:",
        "Similarly, to call a table function, you can use table_function(), or call_table_function().",
        "How to find help on input parameters of the Python functions for SQL functions\nThe Python functions have the same name as the corresponding SQL functions.",
        "By reading the API docs or the source code of a Python function defined in this module, you\u2019ll see the type hints of the input parameters and return type.\nThe return type is always Column. The input types tell you the acceptable values:",
        "ColumnOrName accepts a Column object, or a column name in str. Most functions accept this type.\nIf you still want to pass a literal to it, use lit(value), which returns a Column object that represents a literal value.",
        "LiteralType accepts a value of type bool, int, float, str, bytearray, decimal.Decimal,\ndatetime.date, datetime.datetime, datetime.time, or bytes. An example is the third parameter of lead().",
        "ColumnOrLiteral accepts a Column object, or a value of LiteralType mentioned above.\nThe difference from ColumnOrLiteral is ColumnOrLiteral regards a str value as a SQL string value instead of\na column name. When a function is much more likely to accept a SQL constant value than a column expression, ColumnOrLiteral\nis used. Yet you can still pass in a Column object if you need to. An example is the second parameter of\n:func:when.",
        "int, bool, str, or another specific type accepts a value of that type. An example is to_decimal().",
        "ColumnOrSqlExpr accepts a Column object, or a SQL expression. For instance, the first parameter in :func:when.",
        "Functions",
        "abs(e)",
        "Returns the absolute value of a numeric expression.",
        "acos(e)",
        "Computes the inverse cosine (arc cosine) of its input; the result is a number in the interval [-pi, pi].",
        "add_months(date_or_timestamp,\u00a0number_of_months)",
        "Adds or subtracts a specified number of months to a date or timestamp, preserving the end-of-month information.",
        "any_value(e)",
        "Returns a non-deterministic any value for the specified column.",
        "approx_count_distinct(e)",
        "Uses HyperLogLog to return an approximation of the distinct cardinality of the input (i.e.",
        "approx_percentile(col,\u00a0percentile)",
        "Returns an approximated value for the desired percentile.",
        "approx_percentile_accumulate(col)",
        "Returns the internal representation of the t-Digest state (as a JSON object) at the end of aggregation.",
        "approx_percentile_combine(state)",
        "Combines (merges) percentile input states into a single output state.",
        "approx_percentile_estimate(state,\u00a0percentile)",
        "Returns the desired approximated percentile value for the specified t-Digest state.",
        "array_agg(col[,\u00a0is_distinct])",
        "Returns the input values, pivoted into an ARRAY.",
        "array_append(array,\u00a0element)",
        "Returns an ARRAY containing all elements from the source ARRAY as well as the new element.",
        "array_cat(array1,\u00a0array2)",
        "Returns the concatenation of two ARRAYs.",
        "array_compact(array)",
        "Returns a compacted ARRAY with missing and null values removed, effectively converting sparse arrays into dense arrays.",
        "array_construct(*cols)",
        "Returns an ARRAY constructed from zero, one, or more inputs.",
        "array_construct_compact(*cols)",
        "Returns an ARRAY constructed from zero, one, or more inputs.",
        "array_contains(variant,\u00a0array)",
        "Returns True if the specified VARIANT is found in the specified ARRAY.",
        "array_distinct(col)",
        "The function excludes any duplicate elements that are present in the input ARRAY.",
        "array_flatten(array)",
        "Returns a single array from an array or arrays.",
        "array_generate_range(start,\u00a0stop[,\u00a0step])",
        "Generate a range of integers from start to stop, incrementing by step.",
        "array_insert(array,\u00a0pos,\u00a0element)",
        "Returns an ARRAY containing all elements from the source ARRAY as well as the new element.",
        "array_intersection(array1,\u00a0array2)",
        "Returns an array that contains the matching elements in the two input arrays.",
        "array_max(array)",
        "Returns largest defined non-NULL element in the input array.",
        "array_min(array)",
        "Returns smallest defined non-NULL element in the input array.",
        "array_position(variant,\u00a0array)",
        "Returns the index of the first occurrence of an element in an ARRAY.",
        "array_prepend(array,\u00a0element)",
        "Returns an ARRAY containing the new element as well as all elements from the source ARRAY.",
        "array_remove(array,\u00a0element)",
        "Given a source ARRAY, returns an ARRAY with elements of the specified value removed.",
        "array_size(array)",
        "Returns the size of the input ARRAY.",
        "array_slice(array,\u00a0from_,\u00a0to)",
        "Returns an ARRAY constructed from a specified subset of elements of the input ARRAY.",
        "array_sort(array[,\u00a0sort_ascending,\u00a0nulls_first])",
        "Returns rows of array column in sorted order.",
        "array_to_string(array,\u00a0separator)",
        "Returns an input ARRAY converted to a string by casting all values to strings (using TO_VARCHAR) and concatenating them (using the string from the second argument to separate the elements).",
        "array_unique_agg(col)",
        "Returns a Column containing the distinct values in the specified column col.",
        "arrays_overlap(array1,\u00a0array2)",
        "Compares whether two ARRAYs have at least one element in common.",
        "as_array(variant)",
        "Casts a VARIANT value to an array.",
        "as_binary(variant)",
        "Casts a VARIANT value to a binary string.",
        "as_char(variant)",
        "Casts a VARIANT value to a string.",
        "as_date(variant)",
        "Casts a VARIANT value to a date.",
        "as_decimal(variant[,\u00a0precision,\u00a0scale])",
        "Casts a VARIANT value to a fixed-point decimal (does not match floating-point values).",
        "as_double(variant)",
        "Casts a VARIANT value to a floating-point value.",
        "as_integer(variant)",
        "Casts a VARIANT value to an integer.",
        "as_number(variant[,\u00a0precision,\u00a0scale])",
        "Casts a VARIANT value to a fixed-point decimal (does not match floating-point values).",
        "as_object(variant)",
        "Casts a VARIANT value to an object.",
        "as_real(variant)",
        "Casts a VARIANT value to a floating-point value.",
        "as_time(variant)",
        "Casts a VARIANT value to a time value.",
        "as_timestamp_ltz(variant)",
        "Casts a VARIANT value to a TIMESTAMP with a local timezone.",
        "as_timestamp_ntz(variant)",
        "Casts a VARIANT value to a TIMESTAMP with no timezone.",
        "as_timestamp_tz(variant)",
        "Casts a VARIANT value to a TIMESTAMP with a timezone.",
        "as_varchar(variant)",
        "Casts a VARIANT value to a string.",
        "asc(c)",
        "Returns a Column expression with values sorted in ascending order.",
        "asc_nulls_first(c)",
        "Returns a Column expression with values sorted in ascending order (null values sorted before non-null values).",
        "asc_nulls_last(c)",
        "Returns a Column expression with values sorted in ascending order (null values sorted after non-null values).",
        "ascii(e)",
        "Returns the ASCII code for the first character of a string.",
        "asin(e)",
        "Computes the inverse sine (arc sine) of its input; the result is a number in the interval [-pi, pi].",
        "atan(e)",
        "Computes the inverse tangent (arc tangent) of its input; the result is a number in the interval [-pi, pi].",
        "atan2(y,\u00a0x)",
        "Computes the inverse tangent (arc tangent) of its input; the result is a number in the interval [-pi, pi].",
        "avg(e)",
        "Returns the average of non-NULL records.",
        "bitnot(e)",
        "Returns the bitwise negation of a numeric expression.",
        "bitshiftleft(to_shift_column,\u00a0n)",
        "Returns the bitwise negation of a numeric expression.",
        "bitshiftright(to_shift_column,\u00a0n)",
        "Returns the bitwise negation of a numeric expression.",
        "builtin(function_name)",
        "Function object to invoke a Snowflake system-defined function (built-in function).",
        "bround(col,\u00a0scale)",
        "Rounds the number using HALF_TO_EVEN option.",
        "call_builtin(function_name,\u00a0*args)",
        "",
        "Invokes a Snowflake system-defined function (built-in function) with the specified name and arguments.",
        "",
        "call_function(function_name,\u00a0*args)",
        "",
        "Invokes a Snowflake system-defined function (built-in function) with the specified name and arguments.",
        "",
        "call_table_function(function_name,\u00a0*args,\u00a0...)",
        "Invokes a Snowflake table function, including system-defined table functions and user-defined table functions.",
        "call_udf(udf_name,\u00a0*args)",
        "Calls a user-defined function (UDF) by name.",
        "cast(column,\u00a0to)",
        "Converts a value of one data type into another data type.",
        "ceil(e)",
        "Returns values from the specified column rounded to the nearest equal or larger integer.",
        "char(col)",
        "Converts a Unicode code point (including 7-bit ASCII) into the character that matches the input Unicode.",
        "charindex(target_expr,\u00a0source_expr[,\u00a0position])",
        "Searches for target_expr in source_expr and, if successful, returns the position (1-based) of the target_expr in source_expr.",
        "check_json(col)",
        "Checks the validity of a JSON document.",
        "check_xml(col)",
        "Checks the validity of an XML document.",
        "coalesce(*e)",
        "Returns the first non-NULL expression among its arguments, or NULL if all its arguments are NULL.",
        "col()",
        "",
        "collate(e,\u00a0collation_spec)",
        "Returns a copy of the original Column with the specified collation_spec property, rather than the original collation specification property.",
        "collation(e)",
        "Returns the collation specification of expr.",
        "collect_list(col[,\u00a0is_distinct])",
        "Returns the input values, pivoted into an ARRAY.",
        "collect_set(col)",
        "Returns a Column containing the distinct values in the specified column col.",
        "column()",
        "",
        "concat(*cols)",
        "Concatenates one or more strings, or concatenates one or more binary values.",
        "concat_ws(*cols)",
        "Concatenates two or more strings, or concatenates two or more binary values.",
        "contains(col,\u00a0string)",
        "Returns if col contains string for each row.",
        "convert_timezone(target_timezone,\u00a0source_time)",
        "Converts the given source_time to the target timezone.",
        "corr(column1,\u00a0column2)",
        "Returns the correlation coefficient for non-null pairs in a group.",
        "cos(e)",
        "Computes the cosine of its argument; the argument should be expressed in radians.",
        "cosh(e)",
        "Computes the hyperbolic cosine of its argument.",
        "count(e)",
        "Returns either the number of non-NULL records for the specified columns, or the total number of records.",
        "countDistinct(*cols)",
        "Returns either the number of non-NULL distinct records for the specified columns, or the total number of the distinct records.",
        "count_distinct(*cols)",
        "Returns either the number of non-NULL distinct records for the specified columns, or the total number of the distinct records.",
        "covar_pop(column1,\u00a0column2)",
        "Returns the population covariance for non-null pairs in a group.",
        "covar_samp(column1,\u00a0column2)",
        "Returns the sample covariance for non-null pairs in a group.",
        "create_map(*cols)",
        "Transforms multiple column pairs into a single map Column where each pair of columns is treated as a key-value pair in the resulting map.",
        "cume_dist()",
        "Finds the cumulative distribution of a value with regard to other values within the same window partition.",
        "current_account()",
        "Returns the name of the account used in the current session.",
        "current_available_roles()",
        "Returns a JSON string that lists all roles granted to the current user.",
        "current_database()",
        "Returns the name of the database in use for the current session.",
        "current_date()",
        "Returns the current date for the system.",
        "current_region()",
        "Returns the name of the region for the account where the current user is logged in.",
        "current_role()",
        "Returns the name of the role in use for the current session.",
        "current_schema()",
        "Returns the name of the schema in use for the current session.",
        "current_schemas()",
        "Returns active search path schemas.",
        "current_session()",
        "Returns a unique system identifier for the Snowflake session corresponding to the present connection.",
        "current_statement()",
        "Returns the SQL text of the statement that is currently executing.",
        "current_time()",
        "Returns the current time for the system.",
        "current_timestamp()",
        "Returns the current timestamp for the system.",
        "current_user()",
        "Returns the name of the user currently logged into the system.",
        "current_version()",
        "Returns the current Snowflake version.",
        "current_warehouse()",
        "Returns the name of the warehouse in use for the current session.",
        "date_format(c,\u00a0fmt)",
        "Converts an input expression into the corresponding date in the specified date format.",
        "date_from_parts(y,\u00a0m,\u00a0d)",
        "Creates a date from individual numeric components that represent the year, month, and day of the month.",
        "date_part(part,\u00a0e)",
        "Extracts the specified date or time part from a date, time, or timestamp.",
        "date_trunc(part,\u00a0expr)",
        "Truncates a DATE, TIME, or TIMESTAMP to the specified precision.",
        "dateadd(part,\u00a0col1,\u00a0col2)",
        "Adds the specified value for the specified date or time part to date or time expr.",
        "datediff(part,\u00a0col1,\u00a0col2)",
        "Calculates the difference between two date, time, or timestamp columns based on the date or time part requested, and returns result of col2 - col1 based on the requested date or time part.",
        "date_add(col,\u00a0num_of_days)",
        "Adds a number of days to a date column.",
        "date_sub(col,\u00a0num_of_days)",
        "Subtracts a number of days from a date column.",
        "daydiff(col1,\u00a0col2)",
        "Calculates the difference between two dates, or timestamp columns based in days.",
        "dayname(e)",
        "Extracts the three-letter day-of-week name from the specified date or timestamp.",
        "dayofmonth(e)",
        "Extracts the corresponding day (number) of the month from a date or timestamp.",
        "dayofweek(e)",
        "Extracts the corresponding day (number) of the week from a date or timestamp.",
        "dayofyear(e)",
        "Extracts the corresponding day (number) of the year from a date or timestamp.",
        "degrees(e)",
        "Converts radians to degrees.",
        "dense_rank()",
        "Returns the rank of a value within a group of values, without gaps in the ranks.",
        "desc(c)",
        "Returns a Column expression with values sorted in descending order.",
        "desc_nulls_first(c)",
        "Returns a Column expression with values sorted in descending order (null values sorted before non-null values).",
        "desc_nulls_last(c)",
        "Returns a Column expression with values sorted in descending order (null values sorted after non-null values).",
        "div0(dividend,\u00a0divisor)",
        "Performs division like the division operator (/), but returns 0 when the divisor is 0 (rather than reporting an error).",
        "endswith(col,\u00a0str)",
        "Returns true if col ends with str.",
        "equal_nan(e)",
        "Return true if the value in the column is not a number (NaN).",
        "exp(e)",
        "Computes Euler's number e raised to a floating-point value.",
        "explode(col)",
        "Flattens a given array or map type column into individual rows.",
        "explode_outer(col)",
        "Flattens a given array or map type column into individual rows.",
        "expr(sql)",
        "Creates a Column expression from raw SQL text.",
        "factorial(e)",
        "Computes the factorial of its input.",
        "first_value(e[,\u00a0ignore_nulls])",
        "Returns the first value within an ordered group of values.",
        "flatten(col[,\u00a0path,\u00a0outer,\u00a0recursive,\u00a0mode])",
        "FLATTEN explodes compound values into multiple rows.",
        "floor(e)",
        "Returns values from the specified column rounded to the nearest equal or smaller integer.",
        "from_unixtime(e[,\u00a0fmt])",
        "Converts an input expression into the corresponding timestamp.",
        "from_utc_timestamp(e,\u00a0tz)",
        "Interprets an input expression as a UTC timestamp and converts it to the given time zone.",
        "function(function_name)",
        "",
        "Function object to invoke a Snowflake system-defined function (built-in function).",
        "",
        "get(col1,\u00a0col2)",
        "Extracts a value from an object or array; returns NULL if either of the arguments is NULL.",
        "get_ignore_case(obj,\u00a0field)",
        "Extracts a field value from an object.",
        "get_path(col,\u00a0path)",
        "Extracts a value from semi-structured data using a path name.",
        "greatest(*columns)",
        "Returns the largest value from a list of expressions.",
        "grouping(*cols)",
        "Describes which of a list of expressions are grouped in a row produced by a GROUP BY query.",
        "grouping_id(*cols)",
        "Describes which of a list of expressions are grouped in a row produced by a GROUP BY query.",
        "hash(*cols)",
        "Returns a signed 64-bit hash value.",
        "hour(e)",
        "Extracts the hour from a date or timestamp.",
        "iff(condition,\u00a0expr1,\u00a0expr2)",
        "Returns one of two specified expressions, depending on a condition.",
        "in_(cols,\u00a0*vals)",
        "Returns a conditional expression that you can pass to the filter or where methods to perform the equivalent of a WHERE .",
        "initcap(e[,\u00a0delimiters])",
        "Returns the input string with the first letter of each word in uppercase and the subsequent letters in lowercase.",
        "insert(base_expr,\u00a0position,\u00a0length,\u00a0insert_expr)",
        "Replaces a substring of the specified length, starting at the specified position, with a new string or binary value.",
        "is_array(col)",
        "Returns true if the specified VARIANT column contains an ARRAY value.",
        "is_binary(col)",
        "Returns true if the specified VARIANT column contains a binary value.",
        "is_boolean(col)",
        "Returns true if the specified VARIANT column contains a boolean value.",
        "is_char(col)",
        "Returns true if the specified VARIANT column contains a string.",
        "is_date(col)",
        "Returns true if the specified VARIANT column contains a date value.",
        "is_date_value(col)",
        "Returns true if the specified VARIANT column contains a date value.",
        "is_decimal(col)",
        "Returns true if the specified VARIANT column contains a fixed-point decimal value or integer.",
        "is_double(col)",
        "Returns true if the specified VARIANT column contains a floating-point value, fixed-point decimal, or integer.",
        "is_integer(col)",
        "Returns true if the specified VARIANT column contains a integer value.",
        "is_null(e)",
        "Return true if the value in the column is null.",
        "is_null_value(col)",
        "Returns true if the specified VARIANT column contains a JSON null value.",
        "is_object(col)",
        "Returns true if the specified VARIANT column contains an OBJECT value.",
        "is_real(col)",
        "Returns true if the specified VARIANT column contains a floating-point value, fixed-point decimal, or integer.",
        "is_time(col)",
        "Returns true if the specified VARIANT column contains a TIME value.",
        "is_timestamp_ltz(col)",
        "Returns true if the specified VARIANT column contains a TIMESTAMP_LTZ value to be interpreted using the local time zone.",
        "is_timestamp_ntz(col)",
        "Returns true if the specified VARIANT column contains a TIMESTAMP_NTZ value with no time zone.",
        "is_timestamp_tz(col)",
        "Returns true if the specified VARIANT column contains a TIMESTAMP_TZ value with a time zone.",
        "is_varchar(col)",
        "Returns true if the specified VARIANT column contains a string.",
        "json_extract_path_text(col,\u00a0path)",
        "Parses a JSON string and returns the value of an element at a specified path in the resulting JSON document.",
        "kurtosis(e)",
        "Returns the population excess kurtosis of non-NULL records.",
        "lag(e[,\u00a0offset,\u00a0default_value,\u00a0ignore_nulls])",
        "Accesses data in a previous row in the same result set without having to join the table to itself.",
        "last_day(expr[,\u00a0part])",
        "Returns the last day of the specified date part for a date or timestamp.",
        "last_value(e[,\u00a0ignore_nulls])",
        "Returns the last value within an ordered group of values.",
        "lead(e[,\u00a0offset,\u00a0default_value,\u00a0ignore_nulls])",
        "Accesses data in a subsequent row in the same result set without having to join the table to itself.",
        "least(*columns)",
        "Returns the smallest value from a list of expressions.",
        "left(str_expr,\u00a0length)",
        "Returns a left most substring of str_expr.",
        "length(e)",
        "Returns the length of an input string or binary value.",
        "listagg(e[,\u00a0delimiter,\u00a0is_distinct])",
        "Returns the concatenated input values, separated by delimiter string.",
        "lit(literal[,\u00a0datatype])",
        "Creates a Column expression for a literal value.",
        "ln(c)",
        "Returns the natrual logarithm of given column expression.",
        "locate(expr1,\u00a0expr2[,\u00a0start_pos])",
        "Searches for the first occurrence of the first argument in the second argument.",
        "log(base,\u00a0x)",
        "Returns the logarithm of a numeric expression.",
        "lower(e)",
        "Returns the input string with all characters converted to lowercase.",
        "lpad(e,\u00a0len,\u00a0pad)",
        "Left-pads a string with characters from another string, or left-pads a binary value with bytes from another binary value.",
        "ltrim(e[,\u00a0trim_string])",
        "Removes leading characters, including whitespace, from a string.",
        "make_interval([years,\u00a0quarters,\u00a0months,\u00a0...])",
        "Creates an interval column with the specified years, quarters, months, weeks, days, hours, minutes, seconds, milliseconds, microseconds, and nanoseconds.",
        "max(e)",
        "Returns the maximum value for the records in a group.",
        "md5(e)",
        "Returns a 32-character hex-encoded string containing the 128-bit MD5 message digest.",
        "mean(e)",
        "Return the average for the specific numeric columns.",
        "median(e)",
        "Returns the median value for the records in a group.",
        "min(e)",
        "Returns the minimum value for the records in a group.",
        "minute(e)",
        "Extracts the minute from a date or timestamp.",
        "mode(e)",
        "Returns the most frequent value for the records in a group.",
        "monotonically_increasing_id([sign])",
        "Returns a sequence of monotonically increasing integers, with wrap-around which happens after largest representable integer of integer width 8 byte.",
        "month(e)",
        "Extracts the month from a date or timestamp.",
        "monthname(e)",
        "Extracts the three-letter month name from the specified date or timestamp.",
        "months_between(date1,\u00a0date2)",
        "Returns the number of months between two DATE or TIMESTAMP values.",
        "negate(e)",
        "Returns the negation of the value in the column (equivalent to a unary minus).",
        "next_day(date,\u00a0day_of_week)",
        "Returns the date of the first specified DOW (day of week) that occurs after the input date.",
        "not_(e)",
        "Returns the inverse of a boolean expression.",
        "ntile(e)",
        "Divides an ordered data set equally into the number of buckets specified by n.",
        "object_agg(key,\u00a0value)",
        "Returns one OBJECT per group.",
        "object_construct(*key_values)",
        "Returns an OBJECT constructed from the arguments.",
        "object_construct_keep_null(*key_values)",
        "Returns an object containing the contents of the input (i.e.",
        "object_delete(obj,\u00a0key1,\u00a0*keys)",
        "Returns an object consisting of the input object with one or more keys removed.",
        "object_insert(obj,\u00a0key,\u00a0value[,\u00a0update_flag])",
        "Returns an object consisting of the input object with a new key-value pair inserted (or an existing key updated with a new value).",
        "object_keys(obj)",
        "Returns an array containing the list of keys in the input object.",
        "object_pick(obj,\u00a0key1,\u00a0*keys)",
        "Returns a new OBJECT containing some of the key-value pairs from an existing object.",
        "pandas_udf([func,\u00a0return_type,\u00a0input_types,\u00a0...])",
        "Registers a Python function as a vectorized UDF and returns the UDF.",
        "pandas_udtf([handler,\u00a0input_types,\u00a0...])",
        "Registers a Python class as a vectorized Python UDTF and returns the UDTF.",
        "parse_json(e)",
        "Parse the value of the specified column as a JSON string and returns the resulting JSON document.",
        "parse_xml(e)",
        "Parse the value of the specified column as a JSON string and returns the resulting XML document.",
        "percent_rank()",
        "Returns the relative rank of a value within a group of values, specified as a percentage ranging from 0.0 to 1.0.",
        "percentile_cont(percentile)",
        "Return a percentile value based on a continuous distribution of the input column.",
        "pow(left,\u00a0right)",
        "Returns a number (left) raised to the specified power (right).",
        "previous_day(date,\u00a0day_of_week)",
        "Returns the date of the first specified DOW (day of week) that occurs before the input date.",
        "quarter(e)",
        "Extracts the quarter from a date or timestamp.",
        "radians(e)",
        "Converts degrees to radians.",
        "random([seed])",
        "Each call returns a pseudo-random 64-bit integer.",
        "rank()",
        "Returns the rank of a value within an ordered group of values.",
        "regexp_count(subject,\u00a0pattern[,\u00a0position])",
        "Returns the number of times that a pattern occurs in the subject.",
        "regexp_extract(value,\u00a0regexp,\u00a0idx)",
        "Extract a specific group matched by a regex, from the specified string column.",
        "regexp_replace(subject,\u00a0pattern[,\u00a0...])",
        "Returns the subject with the specified pattern (or all occurrences of the pattern) either removed or replaced by a replacement string.",
        "repeat(s,\u00a0n)",
        "Builds a string by repeating the input for the specified number of times.",
        "replace(subject,\u00a0pattern[,\u00a0replacement])",
        "Removes all occurrences of a specified subject and optionally replaces them with replacement.",
        "right(str_expr,\u00a0length)",
        "Returns a right most substring of str_expr.",
        "round(e[,\u00a0scale])",
        "Returns rounded values from the specified column.",
        "row_number()",
        "Returns a unique row number for each row within a window partition.",
        "rpad(e,\u00a0len,\u00a0pad)",
        "Right-pads a string with characters from another string, or right-pads a binary value with bytes from another binary value.",
        "rtrim(e[,\u00a0trim_string])",
        "Removes trailing characters, including whitespace, from a string.",
        "second(e)",
        "Extracts the second from a date or timestamp.",
        "seq1([sign])",
        "Returns a sequence of monotonically increasing integers, with wrap-around which happens after largest representable integer of integer width 1 byte.",
        "seq2([sign])",
        "Returns a sequence of monotonically increasing integers, with wrap-around which happens after largest representable integer of integer width 2 byte.",
        "seq4([sign])",
        "Returns a sequence of monotonically increasing integers, with wrap-around which happens after largest representable integer of integer width 4 byte.",
        "seq8([sign])",
        "Returns a sequence of monotonically increasing integers, with wrap-around which happens after largest representable integer of integer width 8 byte.",
        "sequence(start,\u00a0stop[,\u00a0step])",
        "Generate a sequence of integers from start to stop, incrementing by step.",
        "sha1(e)",
        "Returns a 40-character hex-encoded string containing the 160-bit SHA-1 message digest.",
        "sha2(e,\u00a0num_bits)",
        "Returns a hex-encoded string containing the N-bit SHA-2 message digest, where N is the specified output digest size.",
        "sin(e)",
        "Computes the sine of its argument; the argument should be expressed in radians.",
        "sinh(e)",
        "Computes the hyperbolic sine of its argument.",
        "size(col)",
        "Returns the size of the input ARRAY, OBJECT or MAP.",
        "skew(e)",
        "Returns the sample skewness of non-NULL records.",
        "snowflake_cortex_summarize(text)",
        "Summarizes the given English-language input text.",
        "sort_array(array[,\u00a0sort_ascending,\u00a0nulls_first])",
        "Returns rows of array column in sorted order.",
        "soundex(e)",
        "Returns a string that contains a phonetic representation of the input string.",
        "split(str,\u00a0pattern)",
        "Splits a given string with a given separator and returns the result in an array of strings.",
        "sproc([func,\u00a0return_type,\u00a0input_types,\u00a0...])",
        "Registers a Python function as a Snowflake Python stored procedure and returns the stored procedure.",
        "sql_expr(sql)",
        "Creates a Column expression from raw SQL text.",
        "sqrt(e)",
        "Returns the square-root of a non-negative numeric expression.",
        "startswith(col,\u00a0str)",
        "Returns true if col starts with str.",
        "stddev(e)",
        "Returns the sample standard deviation (square root of sample variance) of non-NULL values.",
        "stddev_pop(e)",
        "Returns the population standard deviation (square root of variance) of non-NULL values.",
        "stddev_samp(e)",
        "Returns the sample standard deviation (square root of sample variance) of non-NULL values.",
        "strip_null_value(col)",
        "Converts a JSON \"null\" value in the specified column to a SQL NULL value.",
        "strtok_to_array(text[,\u00a0delimiter])",
        "Tokenizes the given string using the given set of delimiters and returns the tokens as an array.",
        "struct(*cols)",
        "Returns an OBJECT constructed with the given columns.",
        "substr(str,\u00a0pos[,\u00a0len])",
        "Returns the portion of the string or binary value str, starting from the character/byte specified by pos, with limited length.",
        "substring(str,\u00a0pos[,\u00a0len])",
        "Returns the portion of the string or binary value str, starting from the character/byte specified by pos, with limited length.",
        "sum(e)",
        "Returns the sum of non-NULL records in a group.",
        "sum_distinct(e)",
        "Returns the sum of non-NULL distinct records in a group.",
        "sysdate()",
        "Returns the current timestamp for the system, but in the UTC time zone.",
        "system_reference(object_type,\u00a0object_identifier)",
        "Returns a reference to an object (a table, view, or function).",
        "table_function(function_name)",
        "Create a function object to invoke a Snowflake table function.",
        "tan(e)",
        "Computes the tangent of its argument; the argument should be expressed in radians.",
        "tanh(e)",
        "Computes the hyperbolic tangent of its argument.",
        "time_from_parts(hour,\u00a0minute,\u00a0second[,\u00a0...])",
        "Creates a time from individual numeric components.",
        "timestamp_from_parts()",
        "Creates a timestamp from individual numeric components.",
        "timestamp_ltz_from_parts(year,\u00a0month,\u00a0day,\u00a0...)",
        "Creates a timestamp from individual numeric components.",
        "timestamp_ntz_from_parts()",
        "Creates a timestamp from individual numeric components.",
        "timestamp_tz_from_parts(year,\u00a0month,\u00a0day,\u00a0...)",
        "Creates a timestamp from individual numeric components and a string timezone.",
        "to_array(e)",
        "Converts any value to an ARRAY value or NULL (if input is NULL).",
        "to_binary(e[,\u00a0fmt])",
        "Converts the input expression to a binary value.",
        "to_char(c[,\u00a0format])",
        "Converts a Unicode code point (including 7-bit ASCII) into the character that matches the input Unicode.",
        "to_date(e[,\u00a0fmt])",
        "Converts an input expression into a date.",
        "to_decimal(e,\u00a0precision,\u00a0scale)",
        "Converts an input expression to a decimal.",
        "to_double(e[,\u00a0fmt])",
        "Converts an input expression to a decimal.",
        "to_geography(e)",
        "Parses an input and returns a value of type GEOGRAPHY.",
        "to_geometry(e)",
        "Parses an input and returns a value of type GEOMETRY.",
        "to_json(e)",
        "Converts any VARIANT value to a string containing the JSON representation of the value.",
        "to_object(e)",
        "Converts any value to a OBJECT value or NULL (if input is NULL).",
        "to_time(e[,\u00a0fmt])",
        "Converts an input expression into the corresponding time.",
        "to_timestamp(e[,\u00a0fmt])",
        "Converts an input expression into the corresponding timestamp.",
        "to_utc_timestamp(e,\u00a0tz)",
        "Interprets an input expression as a timestamp and converts from given time zone to UTC.",
        "to_varchar(c[,\u00a0format])",
        "Converts a Unicode code point (including 7-bit ASCII) into the character that matches the input Unicode.",
        "to_variant(e)",
        "Converts any value to a VARIANT value or NULL (if input is NULL).",
        "to_xml(e)",
        "Converts any VARIANT value to a string containing the XML representation of the value.",
        "translate(src,\u00a0source_alphabet,\u00a0target_alphabet)",
        "Translates src from the characters in source_alphabet to the characters in target_alphabet.",
        "trim(e[,\u00a0trim_string])",
        "Removes leading and trailing characters from a string.",
        "trunc(e[,\u00a0scale])",
        "Rounds the input expression down to the nearest (or equal) integer closer to zero, or to the nearest equal or smaller value with the specified number of places after the decimal point.",
        "try_cast(column,\u00a0to)",
        "A special version of CAST for a subset of data type conversions.",
        "typeof(col)",
        "Reports the type of a value stored in a VARIANT column.",
        "udaf([handler,\u00a0return_type,\u00a0input_types,\u00a0...])",
        "Registers a Python class as a Snowflake Python UDAF and returns the UDAF.",
        "udf([func,\u00a0return_type,\u00a0input_types,\u00a0name,\u00a0...])",
        "Registers a Python function as a Snowflake Python UDF and returns the UDF.",
        "udtf([handler,\u00a0input_types,\u00a0name,\u00a0...])",
        "Registers a Python class as a Snowflake Python UDTF and returns the UDTF.",
        "uniform(min_,\u00a0max_,\u00a0gen)",
        "Returns a uniformly random number.",
        "unix_timestamp(e[,\u00a0fmt])",
        "Converts a timestamp or a timestamp string to Unix time stamp (in seconds).",
        "upper(e)",
        "Returns the input string with all characters converted to uppercase.",
        "var_pop(e)",
        "Returns the population variance of non-NULL records in a group.",
        "var_samp(e)",
        "Returns the sample variance of non-NULL records in a group.",
        "variance(e)",
        "Returns the sample variance of non-NULL records in a group.",
        "vector_inner_product(v1,\u00a0v2)",
        "Returns the inner product between two vectors of equal dimension and element type.",
        "vector_l2_distance(v1,\u00a0v2)",
        "Returns the l2 distance between two vectors of equal dimension and element type.",
        "weekofyear(e)",
        "Extracts the corresponding week (number) of the year from a date or timestamp.",
        "when(condition,\u00a0value)",
        "Works like a cascading if-then-else statement.",
        "when_matched([condition])",
        "Specifies a matched clause for the Table.merge action.",
        "when_not_matched([condition])",
        "Specifies a not-matched clause for the Table.merge action.",
        "window(time_column,\u00a0window_duration[,\u00a0...])",
        "Converts a time column into a window object with start and end times.",
        "xmlget(xml,\u00a0tag[,\u00a0instance_num])",
        "Extracts an XML element object (often referred to as simply a tag) from a content of outer XML element object by the name of the tag and its instance number (counting from 0).",
        "year(e)",
        "Extracts the year from a date or timestamp.",
        "Was this page helpful?"
    ]
}