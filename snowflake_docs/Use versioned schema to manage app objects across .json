{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/update-app-versioned-schema",
    "title": "Use versioned schema to manage app objects across versions | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic describes how to use versioned schema to manage app state when installing and upgrading a Snowflake Native App.",
        "Versioned schemas are special types of database schema that are designed to handle stateless objects from one version\nto another.",
        "A versioned schema contains metadata about the objects in an app that are associated with a specific version.\nVersion pinning is a feature of versioned schemas that allows an app to know what job, queries, etc. are associated with\nthese objects.",
        "When an object in a versioned schema runs a query, for example, that query is \u201cpinned\u201d to the version of the app running the query.",
        "Version pinning is important when upgrading an app to a new version. Consider the context where V1 of an app runs a\ncomplex query that takes a long time to complete.",
        "If an upgrade occurs while this query is still running, the upgrade state of the app changes to COMPLETE and\nthe app is upgraded to v2. The previous version state changes to FINALIZING until all jobs from version\nv1 have completed.",
        "See Upgrade states for more information on the upgrade states for an app.",
        "Snowpark Container Services is not supported in versioned schemas.",
        "Versioned schema are only available within the context of an application object. They are created only within the setup script.\nEach version of an app has its own setup script and contains versioned schema that are specific to that version.",
        "A versioned schema can only be used within the setup script of an application package. They can only be created within the\ncontext of an application object.",
        "Tasks are not supported on versioned schemas. For example, providers cannot include tags when creating or altering a\nversioned schema. However, providers can use tags inside a versioned schema, as long as they only apply those tags objects\nwithin a versioned schema in the same app.",
        "Tags and masking policies are not supported in versioned schemas.",
        "Grants and future grants are not supported in versioned schemas.",
        "Versioned schemas cannot be used as either the source or destination of a clone operation.",
        "Dropping a versioned schema is not supported. Dropping a versioned schema would drop all versions of the objects it contains and\nwould impact queries running against older versions or patches of the app.",
        "Note",
        "To use application roles, tasks, tags, masking policies and Snowpark Container Services within the setup script of an app, you\nmust create them in a normal schema.",
        "Internally, versioned schemas contain subschema that correspond to each version of the app.",
        "However, these subschema are not directly accessible to the consumer within the application object. A consumer will only see\nobjects within the versioned schema that correspond to the version of the app they have installed in their account.",
        "For example, if a consumer uses the SHOW OBJECTS command to view the objects\nin a versioned schema, they will only see the objects for the version they are currently using.",
        "When writing the setup script, providers must recreate objects in a versioned schema using CREATE OR REPLACE or CREATE IF NOT EXISTS.\nThis is important because internally, each version of the app has its own objects within the subschema of the versioned schema.",
        "To manage the state of an app during upgrades, the Snowflake Native App Framework uses versioned schemas. A versioned schema\nis similar to regular database schema with added functionality to handle multiple versions of objects\ncreated by different application versions.",
        "Versioned schema are only available within the context of an application object. They are created\nonly within the setup script. Each version of an app has its own setup script and contains versioned\nschema that are specific to that version.",
        "When developing a new version of an app, providers must account for changes to the objects that the\napp creates using the setup script.",
        "The following example shows a common situation where both versioned and normal schema can be\nused in a setup script to create stateless and stateful components:",
        "To create a versioned schema with the setup script, use the\nCREATE OR ALTER VERSIONED SCHEMA command as shown in the following example:",
        "Note",
        "You should always include the CREATE OR ALTER version of this command to ensure that\nversioned schemas are compatible across versions and patches.",
        "Objects within an app may need to preserve state across versions. For example, configuration\ndata or data collected while the app has been running may be to be preserved.",
        "These types of objects must reside in a normal database schema and they should be created to persist\nduring initial installation and upgrades.",
        "The following example shows how to create a stateful object in the setup script:",
        "In this example, the setup script defines a configuration table that would persist from one version\nof an app to another. If the previous version of the application did not have a modified_on column,\nthe setup script first attempts to fully create the table (in the case of initial installation) or modify\nthe existing table by adding the column (in the case of an upgrade).",
        "Some objects within an app do not persist state between versions of an application. For example, code that\ndefines the application logic, including stored procedures, functions, etc. can be fully recreated in the\nsetup script without losing any user data or state.",
        "Snowflake recommends that these objects be contained within a versioned schema.",
        "The following example shows how to create a UDF within a versioned schema.",
        "A versioned schema contains metadata about which objects in a Snowflake Native App are associated\nwith a specific version. Version pinning is a feature of versioned schemas that allows an\napp to know what job, queries, etc. are associated with these objects.",
        "When an object in a versioned schema runs a query, for example, that query is \u201cpinned\u201d\nto the version of the app running the query.",
        "Version pinning is important when upgrading an app to a new version. Consider the context\nwhere V1 of an app runs a complex query that takes a long time to complete. If an\nupgrade occurs while this query is still running, the app will not upgrade until the query\nis complete.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}