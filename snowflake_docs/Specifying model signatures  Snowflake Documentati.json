{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-ml/model-registry/model-signature",
    "title": "Specifying model signatures | Snowflake Documentation",
    "paragraphs": [
        "To ensure a consistent experience no matter where a model is run, the Snowflake Model Registry needs to know the input\nand output schema of the model\u2019s inference methods: that is, the name and type of all columns in the input or output\nDataFrame. This allows these columns to be mapped between Python and SQL data types when necessary. This schema is\nreferred to as a signature by analogy to the arguments of a function and their types.",
        "For certain ML frameworks, the model registry can infer these schemas, either from data structures in the model itself\nor from sample input data. However, models often accept or return objects that lack this information, such as NumPy\narrays. In these cases, Snowpark ML infers the input feature names as input_feature_1, input_feature_2, and so\non. Similarly, output features are named output_feature_1, output_feature_2, and so on.",
        "To use more meaningful names in your custom models, you can use one of the following methods:",
        "Update sample_input_data with column names, usually by converting the dataset to a pandas or\nSnowpark DataFrame.",
        "Explicitly pass signatures to log_model. When a model does not produce names in its output, explicit signatures\nmight be the only option.",
        "Like the model registry itself, you can generate signatures automatically. Use\nsnowflake.ml.model.model_signature.infer_signature to infer a signature based on provided sample input, output, and\ncolumn names, and then apply that signature to the appropriate methods when logging the model, as in the following example:",
        "This example applies the signature to only one method, but you can infer a signature for each method your model exposes.\nYou can use the same signature object (sig in the example) for all methods that have the same signature.",
        "You can also manually construct a signature by using snowflake.ml.model.model_signature.ModelSignature. Both scalar and\ntensor types (including ragged tensors) are supported.",
        "Example:",
        "Then pass the signature object, sig, to log_model with the signatures argument as in the example above\nfor the methods to which it applies.",
        "This section describes the equivalence of types in the Snowflake Model Registry for supported type systems.",
        "The following table shows the equivalence of model signature (SQL) type, pandas DataFrames (NumPy) type, and Snowpark\nPython type.",
        "Model signature (SQL) type",
        "pandas DataFrame (NumPy) type",
        "Snowpark Python type",
        "INT8",
        "np.int8",
        "ByteType",
        "INT16",
        "np.int16",
        "ShortType",
        "INT32",
        "np.int32",
        "IntegerType",
        "INT64",
        "np.int64",
        "LongType",
        "FLOAT",
        "np.float32",
        "FloatType",
        "DOUBLE",
        "np.float64",
        "DoubleType",
        "UINT8",
        "np.uint8",
        "ByteType",
        "UINT16",
        "np.uint16",
        "ShortType",
        "UINT32",
        "np.uint32",
        "IntegerType",
        "UINT64",
        "np.uint64",
        "LongType",
        "BOOL",
        "np.bool_",
        "BooleanType",
        "STRING",
        "np.str_",
        "StringType",
        "BYTES",
        "np.bytes_",
        "BinaryType",
        "TIMESTAMP_NTZ",
        "np.datetime64",
        "TimestampType",
        "The representation of tensor features where the shape is specified uses np.object_.",
        "NULL values are not permitted in the sample input data or the inference input data.",
        "If the NumPy data type can be safely cast to a NumPy type shown in Column data types, it is\ninferred as the corresponding data type.",
        "PyTorch type",
        "Model signature (SQL) type",
        "torch.uint8",
        "UINT8",
        "torch.int8",
        "INT8",
        "torch.int16",
        "INT16",
        "torch.int32",
        "INT32",
        "torch.int64",
        "INT64",
        "torch.float32",
        "FLOAT",
        "torch.float64",
        "DOUBLE",
        "torch.bool",
        "BOOL",
        "In addition to the mappings shown in Column data types, the following conversions apply:",
        "DecimalType with scale of 0 maps to INT64.",
        "DecimalType with scale greater than 0 maps to DOUBLE.",
        "Was this page helpful?",
        "On this page"
    ]
}