{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/adding-application-logic",
    "title": "Add application logic to an application package | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic describes how to add application logic to the setup script of an application package. It\nalso describes how to use external code files in an application package.",
        "See Add a Streamlit app for information about including a Streamlit in Snowflake app in an application package.",
        "The Snowflake Native App Framework allows you to include stored procedures, user-defined functions\n(UDFs), and external functions in an application package. These can be written in any of the\nlanguages Snowflake supports.",
        "If you plan to publish your Snowflake Native App to the Snowflake Marketplace as a limited trial listing and want to limit the functionality\nof your application that is available to those trial consumers, see Preparing to offer a limited trial listing.",
        "All stored procedures and UDFs within a Snowflake Native App run as the application and\nhave access to all objects within the installed Snowflake Native App. This can lead to SQL\ninjection attacks.",
        "When developing procedures and functions for use within a Snowflake Native App, Snowflake recommends\nthat all SQL commands requiring input from users be run using bound parameters. This includes\ninput provided through procedure arguments.",
        "See Creating a stored procedure for more information.",
        "All procedures created by the setup script or that run\nwithin the installed Snowflake Native App must be run with the rights of the owner (EXECUTE AS OWNER).",
        "This restriction exists because if the Snowflake Native App were to run with caller\u2019s rights (EXECUTE AS CALLER) in\na procedure that the Snowflake Native App does not own, the procedure would run as the Snowflake Native App\nitself and allow a consumer to create code to view or modify the contents of the Snowflake Native App and shared data content.",
        "See Understanding caller\u2019s rights and owner\u2019s rights stored procedures for more information.",
        "Context functions provide information about the context\nin which a statement is run. Within the context of the Snowflake Native App Framework, some context\nfunctions are not available. Context functions that are not available are either blocked and\nreturn an error or always return a null value.",
        "Use caution when using context functions in policies applied to shared data\ncontent within a Snowflake Native App. Some functions, for example CURRENT_IP_ADDRESS, behave differently\nin the context of a Snowflake Native App.",
        "When using context functions that depend on the namespace within the client organization\nthere may be conflicts with functions in other namespaces. For example, a row access policy\nusing CURRENT_USER should be aware that the same username can exist in multiple accounts.",
        "When using a Streamlit app within a Snowflake Native App, context functions\nhave additional constraints. For example, CURRENT_USER returns NULL when invoked from Streamlit in Snowflake.",
        "The following table lists the context functions that are not supported by the Snowflake Native App Framework:",
        "Context Function",
        "Blocked in shared content (returns null)",
        "Blocked in setup scripts and stored procedure and UDFs owned by the Snowflake Native App (throws an exception)",
        "CURRENT_ROLE",
        "\u2714",
        "CURRENT_ROLE_TYPE",
        "\u2714",
        "CURRENT_USER",
        "\u2714",
        "CURRENT_SESSION",
        "\u2714",
        "IS_ROLE_IN_SESSION",
        "\u2714",
        "CURRENT_IP_ADDRESS",
        "\u2714",
        "\u2714",
        "CURRENT_AVAILABLE_ROLES",
        "\u2714",
        "\u2714",
        "CURRENT_SECONDARY_ROLES",
        "\u2714",
        "\u2714",
        "ALL_USER_NAMES",
        "\u2714",
        "GET_USERS_FOR_COLLABORATION",
        "\u2714",
        "CURRENT_WAREHOUSE",
        "\u2714",
        "SYSTEM$ALLOWLIST",
        "\u2714",
        "Note",
        "CURRENT_USER and CURRENT_SESSION return NULL when invoked from Streamlit in Snowflake within a Snowflake Native App unless\npermission is granted to the app with GRANT READ SESSION ON ACCOUNT TO APPLICATION.",
        "The Snowflake Native App Framework supports the Snowpark libraries for creating stored procedures in Java, Scala, and Python.",
        "There are two types of code files that you can include in an application package:",
        "Referenced files: include binaries, libraries and other code files. These files are specific\nto a version defined in an application package. These files must be located in the root directory of the stage\nwhen creating or adding a version to an application package.",
        "Referenced files are different from user-defined functions and stored procedures because they are not\ndefined in the setup script of an application package. These files are referenced by import statements within the\nstored procedures and UDFs that are defined in the setup script.",
        "Resource files: include semi-structured data, structured data, and binaries, for example, a machine\nlearning model.  These files must be uploaded to a named stage that is accessible to\nthe application package.",
        "A stored procedure, user-defined function, or external function that references these types of\ncode files must be created within a versioned schema in the setup script. When creating stored\nprocedures or functions within a versioned schema, you must reference a code file relative\nto the root directory of the named stage.",
        "For example, if the root directory of the named stage is /app_files/dev, this directory would\ncontain the following files and directories:",
        "A manifest.yml file.",
        "A directory containing the setup script, for example scripts/setup_version.sql.",
        "Referenced files that are imported when creating a stored procedure, UDF, or external function\nwithin the setup script, for example:",
        "libraries/jars/lookup.jar",
        "libraries/jars/log4j.jar",
        "libraries/python/evaluate.py",
        "In this scenario, the directory structure would be as follows:",
        "To access the JAR files in this directory structure, a stored procedure defined in the setup\nscript would reference these files as shown in the following example:",
        "In this example, the IMPORTS statement has a path relative to the root directory used to create the\nversion, for example, the location of the manifest.yml file.",
        "The Snowflake Native App Framework supports using Java and Scala in stored procedures and in external\ncode files.",
        "The Snowflake Native App Framework supports creating stored procedures containing\nJava and\nScala. The code that defines the\nstored procedure must be added to the setup script.",
        "The following example shows a stored procedure containing a Java function:",
        "The syntax for creating pre-compiled UDFs requires that imported JARs be included as part\nof a set of versioned artifacts. To refer to pre-compiled JARs, use the relative path instead\nof specifying the full stage location in the IMPORT clause.",
        "The path must be relative to the root directory containing the version starting with a single\nforward slash, for example IMPORTS = ('/path/to/JARs/from/version/root'). See\nReference external code files for\nmore information on relative paths.",
        "The following shows an example directory structure for the code files.",
        "The following example shows how to create a Java function using a JAR file:",
        "The Snowflake Native App Framework imposes the following restrictions when using Java and Scala:",
        "Imports are only allowed for UDFs created in a versioned schema.",
        "Imports can only access the version artifacts using a relative path.",
        "UDFs created outside of versioned schemas can only be created inline.",
        "Relative paths are not supported for TARGET_PATH.",
        "The Snowflake Native App Framework supports using Python in stored procedures and in external code\nfiles.",
        "The Snowflake Native App Framework supports creating stored procedures in\nPython.",
        "The following example shows a stored procedure containing a Python function:",
        "The following example shows how to include an external Python file in an application package:",
        "See to Reference external code files for more information on relative paths.",
        "Snowflake Native App Framework imposes the following restrictions on Python UDFs:",
        "Imports are only allowed for UDFs created in a versioned schema.",
        "Imports can only access the version artifacts using a relative path.",
        "UDFs created outside of versioned schemas can only be created inline.",
        "The Snowflake Native App Framework supports using JavaScript in stored procedures and user-defined\nfunctions using the JavaScript API.",
        "When using JavaScript within an application package, Snowflake recommends that you catch and\nhandle errors. If not, the error message and stack trace that the\nerror returns are visible to the consumer. To ensure that data content and application logic\nare kept private, use try/catch blocks in situations where sensitive objects or data is\nbeing accessed.",
        "The following example shows a JavaScript stored procedure that catches an error and returns\na message:",
        "This example creates a JavaScript stored procedure that contains a try/catch block. If the\nstored procedure encounters an error when running the statement in the try block, it\nreturns the message \u201cThere is an error\u201d which is visible to the consumer.",
        "Without the try/catch block, the stored procedure would return the original error message\nand the full stack trace which would be visible to the consumer.",
        "Note",
        "Other languages supported by the Snowflake Native App Framework return redact error messages that occur in a Snowflake Native App.",
        "External functions allow a Snowflake Native App\nto make calls to application code that is hosted outside of Snowflake. External functions\nrequire you to create an API Integration object.",
        "Because API integrations allow connectivity outside of the consumer environment, the consumer\nmust provide the method of integration to the Snowflake Native App.",
        "The following example shows a stored procedure created by the setup script that accepts the integration\nand creates an external function. This example shows how to create an external function in the setup script of the\napplication package:",
        "This example defines a stored procedure, written in SQL, and creates an external function\nthat references an application hosted on a system outside of Snowflake. The external function returns an\nAPI integration.",
        "This example also grants USAGE on the stored procedure to an application role. The consumer must grant this\nprivilege to the Snowflake Native App before invoking this procedure in the setup script.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}