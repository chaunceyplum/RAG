{
    "url": "https://docs.snowflake.com/en/sql-reference/data-types-semistructured#label-data-type-array",
    "title": "Semi-structured data types | Snowflake Documentation",
    "paragraphs": [
        "The following Snowflake data types can contain other data types:",
        "VARIANT (can contain a value of any other data type).",
        "OBJECT (can directly contain a VARIANT value, and thus indirectly contain a value of any\nother data type, including itself).",
        "ARRAY (can directly contain a VARIANT value, and thus indirectly contain a value of any\nother data type, including itself).",
        "We often refer to these data types as semi-structured data types. Strictly speaking, OBJECT is the only one of these\ndata types that, by itself, has all of the characteristics of a true\nsemi-structured data type. However, combining these data types allows you to\nexplicitly represent arbitrary hierarchical data structures,\nwhich can be used to load and operate on data in semi-structured formats (such as JSON, Avro, ORC, Parquet, or XML).",
        "Note",
        "For information about structured data types (for example, ARRAY(INTEGER), OBJECT(city VARCHAR), or MAP(VARCHAR, VARCHAR),\nsee Structured data types.",
        "A VARIANT value can store a value of any other type, including OBJECT and ARRAY values.",
        "A VARIANT value can have a maximum size of up to 16 MB of uncompressed data. However, in practice,\nthe maximum size is usually smaller due to internal overhead. The maximum size is also dependent\non the object being stored.",
        "To insert VARIANT data directly, use INSERT INTO ... SELECT. The following example shows how to insert JSON-formatted\ndata into a VARIANT value:",
        "To convert a value to or from the VARIANT data type, you can explicitly cast using the CAST\nfunction, the TO_VARIANT function, or the :: operator (for example, expression::VARIANT).",
        "In some situations, a value can be implicitly cast to a VARIANT value. For details, see Data type conversion.",
        "The following example shows how to use a VARIANT value, including how to convert from a VARIANT value and to a VARIANT value.",
        "Create a table and insert a value:",
        "The first UPDATE converts a FLOAT value to a VARIANT value. The second UPDATE converts a VARIANT\nvalue to a FLOAT value.",
        "SELECT all the values:",
        "As shown in the previous example, to convert a value from the VARIANT data type, cast the VARIANT value to the\ntarget data type. For example, the following statement uses the :: operator to convert the VARIANT\nto a FLOAT:",
        "VARIANT data stores both the value and the data type of the value. Therefore, you can use VARIANT values in expressions where the\nvalue\u2019s data type is valid without first casting the VARIANT. For example, if VARIANT column my_variant_column contains a\nnumeric value, then you can directly multiply my_variant_column by another numeric value:",
        "You can retrieve the value\u2019s native data type by using the TYPEOF function.",
        "By default, when VARCHAR, DATE, TIME, and TIMESTAMP values are retrieved from a VARIANT column, the values are surrounded by double\nquotes. You can eliminate the double quotes by explicitly casting the values to the underlying data types (for example, from VARIANT to\nVARCHAR). For example:",
        "A VARIANT value can be missing (contain SQL NULL), which is different from a VARIANT null value, which is a real value used to\nrepresent a null value in semi-structured data. VARIANT null is a true value that compares as equal to itself.\nFor more information, see NULL Values.",
        "If data was loaded from JSON format and stored in a VARIANT column, then the following considerations apply:",
        "For data that is mostly regular and uses only native JSON types (such as strings and numbers), the performance is very similar for\nstorage and query operations on relational data and data in a VARIANT column.",
        "For non-native data (such as dates and timestamps), the values are stored as strings when loaded into a VARIANT column. Therefore,\noperations on these values might be slower and also consume more space than when stored in a relational column with the corresponding\ndata type.",
        "For more information about using the VARIANT data type, see Considerations for Semi-structured Data Stored in VARIANT.",
        "For more information about querying semi-structured data stored in a VARIANT column, see Querying Semi-structured Data.",
        "VARIANT data is typically used when:",
        "You want to create hierarchical data by explicitly defining a hierarchy that contains two or\nmore ARRAY values or OBJECT values.",
        "You want to load JSON, Avro, ORC, or Parquet data directly, without explicitly describing the hierarchical structure of the data.",
        "Snowflake can convert data from JSON, Avro, ORC, or Parquet format to an internal hierarchy of\nARRAY, OBJECT, and VARIANT data and store that hierarchical data directly in a VARIANT value. Although you can manually construct\nthe data hierarchy yourself, it is usually easier to let Snowflake do it for you.",
        "For more information about loading and converting semi-structured data, see Loading Semi-structured Data.",
        "A Snowflake OBJECT value is analogous to a JSON \u201cobject\u201d. In other programming\nlanguages, the corresponding data type is often called a \u201cdictionary,\u201d \u201chash,\u201d or \u201cmap.\u201d",
        "An OBJECT value contains key-value pairs.",
        "In Snowflake semi-structured OBJECT data, each key is a VARCHAR value, and each\nvalue is a VARIANT value.",
        "Because a VARIANT value can store a value of any other data type, different VARIANT values (in different key-value pairs) can have\ndifferent underlying data types. For example, an OBJECT value can hold a person\u2019s name as a VARCHAR value and a person\u2019s age as an INTEGER\nvalue. In the following example, both the name and the age are cast to VARIANT values.",
        "The following considerations apply to OBJECT data:",
        "Currently, Snowflake doesn\u2019t support explicitly-typed objects.",
        "In a key-value pair, the key shouldn\u2019t be an empty string, and neither the key nor the value should be NULL.",
        "The maximum length of an OBJECT value is 16 MB.",
        "An OBJECT value can contain semi-structured data.",
        "An OBJECT value can be used to create hierarchical data structures.",
        "Note",
        "Snowflake also supports the structured OBJECT data type, which allows for values other than VARIANT values. A structured OBJECT type also defines\nthe keys that must be present in an OBJECT value of that type. For more information, see Structured data types.",
        "To insert OBJECT data directly, use INSERT INTO ... SELECT.",
        "The following example uses the OBJECT_CONSTRUCT function to construct the OBJECT value that it inserts.",
        "In each key-value pair, the value was explicitly cast to VARIANT. Explicit casting wasn\u2019t required in these cases.\nSnowflake can implicitly cast to VARIANT. For information about implicit casting, see\nData type conversion.",
        "You can also use an OBJECT constant to specify the OBJECT value to insert. For more information, see\nOBJECT constants.",
        "A constant (also known as a literal) refers to a fixed data value. Snowflake supports using constants to specify OBJECT values.\nOBJECT constants are delimited with curly braces ({ and }).",
        "OBJECT constants have the following syntax:",
        "Where:",
        "The key in a key-value pair. The key must be a string literal.",
        "The value that is associated with the key. The value can be a literal or an expression.\nThe value can be any data type.",
        "The following are examples that specify OBJECT constants:",
        "{} is an empty OBJECT value.",
        "{ 'key1': 'value1' , 'key2': 'value2' } contains the specified key-value pairs for the OBJECT value using\nliterals for the values.",
        "{ 'key1': c1+1 , 'key2': c1+2 } contains the specified key-value pairs for the OBJECT value using\nexpressions for the values.",
        "{*} is a wildcard that constructs the OBJECT value from the specified data using the attribute names\nas keys and the associated values as values.",
        "When it is specified in an object constant, the wildcard can be unqualified or qualified with a table name or alias.\nFor example, both of these wildcard specifications are valid:",
        "You can use the ILIKE and EXCLUDE keywords in an object constant. To select specific columns, use the\nILIKE keyword. For example, the following query selects columns that match the pattern col1% in\nthe table my_table:",
        "To exclude specific columns, use the EXCLUDE keyword. For example, the following query excludes col1 in\nthe table my_table:",
        "The following query excludes col1 and col2 in the table my_table:",
        "Wildcards can\u2019t be mixed with key-value pairs. For example, the following wildcard specification isn\u2019t allowed:",
        "More than one wildcard can\u2019t be used in one object constant. For example, the following\nwildcard specification isn\u2019t allowed:",
        "The following statements use an OBJECT constant and the OBJECT_CONSTRUCT function to perform\nan insert of OBJECT data into a table. The OBJECT values contain the names and capital cities of two Canadian\nprovinces.",
        "The following example uses a wildcard ({*}) to insert OBJECT data by getting the attribute names and\nvalues from the FROM clause. First, create a table named demo_ca_provinces with VARCHAR\nvalues that contain the province and capital names:",
        "Insert object data into the my_object_table using the data in the demo_ca_provinces\ntable:",
        "The following example uses expressions for the values in an OBJECT constant:",
        "SQL statements specify string literals inside an OBJECT value with single quotes (as elsewhere in Snowflake SQL), but string\nliterals inside an OBJECT value are displayed with double quotes:",
        "To retrieve the value in an OBJECT value, specify the key in\nsquare brackets, as shown below:",
        "You can also use the colon operator. The following command shows that the results are the same whether you use\nthe square brackets or the colon:",
        "For more information about the colon operator, see Dot Notation, which describes\nthe use of the : and . operators to access nested data.",
        "OBJECT data is typically used when one or more of the following are true:",
        "You have multiple pieces of data that are identified by strings. For example, if\nyou want to look up information by province name, you might want to use an OBJECT value.",
        "You want to store information about the data with the data. The names (keys) aren\u2019t merely distinct identifiers, but are\nmeaningful.",
        "The information has no natural order, or the order can be inferred solely from the keys.",
        "The structure of the data varies, or the data can be incomplete. For example, if you want to create a catalog of books that\nusually contains the title, author name, and publication date, but in some cases the publication date is unknown, then you might\nwant to use an OBJECT value.",
        "A Snowflake array is similar to an array in many other programming languages. An array contains 0 or more pieces of data.\nEach element is accessed by specifying its position in the array.",
        "Each value in a semi-structured array is of type VARIANT. A VARIANT value can contain a value of any\nother data type.",
        "Values of other data types can be cast to VARIANT values and then stored in an array. Some functions for arrays, including\nARRAY_CONSTRUCT, can implicitly cast values to VARIANT\nvalues.",
        "Because arrays store VARIANT values, and because VARIANT values can store other data types within them, the underlying data types\nof the values in an array can be different. However, in most cases, the data elements are of the same or compatible\ntypes, so they can all be processed the same way.",
        "The following considerations apply to arrays:",
        "Snowflake doesn\u2019t support arrays of elements of a specific non-VARIANT type.",
        "A Snowflake array is declared without specifying the number of elements. An array can grow dynamically based on operations such\nas ARRAY_APPEND. Snowflake doesn\u2019t currently support fixed-size arrays.",
        "An array can contain NULL values.",
        "The theoretical maximum combined size of all values in an array is 16 MB. However, arrays have internal overhead.\nThe practical maximum data size is usually smaller, depending upon the number and values of the elements.",
        "Note",
        "Snowflake also supports structured arrays, which allow for elements of types other than VARIANT.\nFor more information, see Structured data types.",
        "To insert ARRAY data directly, use INSERT INTO ... SELECT.",
        "The following code uses the ARRAY_CONSTRUCT function to construct the array that it inserts.",
        "You can also use an ARRAY constant to specify the array to insert. For more information, see\nARRAY constants.",
        "A constant (also known as a literal) refers to a fixed data value. Snowflake supports using constants to specify ARRAY values.\nARRAY constants are delimited with square brackets ([ and ]).",
        "ARRAY constants have the following syntax:",
        "Where:",
        "The value that is associated with an array element. The value can be a literal or an expression.\nThe value can be any data type.",
        "The following are examples that specify ARRAY constants:",
        "[] is an empty ARRAY value.",
        "[ 1 , 'value1' ] contains the specified values for the ARRAY constant using\nliterals for the values.",
        "[ c1+1 , c1+2 ] contains the specified values for the ARRAY constant using\nexpressions for the values.",
        "The following example uses an ARRAY constant to specify the array to insert.",
        "The following statements use an ARRAY constant and the ARRAY_CONSTRUCT function to perform the same task:",
        "The following example uses expressions for the values in an ARRAY constant:",
        "SQL statements specify string literals inside an array with single quotes (as elsewhere in Snowflake SQL), but string\nliterals inside an array are displayed with double quotes:",
        "Array indexes are 0-based, so the first element in an array is element 0.",
        "Values in an array are accessed by specifying an array element\u2019s index number in square brackets. For example, the following query\nreads the value at index position 2 in the array stored in my_array_column.",
        "Arrays can be nested. The following query reads the zeroth element of the zeroth element of a nested array:",
        "Attempting to access an element beyond the end of an array returns NULL.",
        "A slice of an array is a sequence of adjacent elements (that is, a contiguous subset of the array).",
        "You can access a slice of an array by calling the ARRAY_SLICE function. For example:",
        "The ARRAY_SLICE function returns elements from the specified starting element (5 in the example above) up to\nbut not including the specified ending element (10 in the example above).",
        "An empty array or an empty slice is often denoted by a pair of square braces with nothing between them ([]).",
        "An array can be dense or sparse.",
        "In a dense array, the index values of the elements start at zero and are sequential (0, 1, 2, and so on). However,\nin a sparse array, the index values can be non-sequential (for example, 0, 2, 5). The values don\u2019t need to start at 0.",
        "If an index has no corresponding element, then the value corresponding to that index is said to be undefined. For example, if a\nsparse array has three elements, and those elements are at indexes 0, 2, and 5, then the elements at indexes 1, 3, and 4 are\nundefined.",
        "An undefined element is treated as an element. For example, consider the earlier example of a sparse array that contains elements\nat indexes 0, 2, and 5 (and doesn\u2019t have any elements after index 5). If you read the slice containing elements at indexes 3 and 4,\nthen the output is similar to the following:",
        "Attempting to access a slice beyond the end of an array results in an empty array, not an array of undefined values.\nThe following SELECT statement attempts to read beyond the last element in the sample sparse array:",
        "The output is an empty array:",
        "Note that undefined is different from NULL. A NULL value in an array is a defined element.",
        "In a dense array, each element consumes storage space, even if the value of the element is NULL.\nIn a sparse array, undefined elements don\u2019t directly consume storage space.",
        "In a dense array, the theoretical range of index values is from 0 to 16777215. (The maximum theoretical number of elements\nis 16777216 because the upper limit on size is 16 MB, or 16777216 bytes, and the smallest possible value is one byte.)",
        "In a sparse array, the theoretical range of index values is from 0 to 231 - 1. However, due to the 16 MB limitation, a\nsparse array can\u2019t hold 231 values. The maximum theoretical number of values is still limited to 16777216.",
        "Due to internal overhead, the practical size limit in both dense and sparse arrays is at least slightly less than\nthe theoretical maximum of 16 MB.",
        "You can create a sparse array by using the ARRAY_INSERT function to insert values at specific\nindex points in an array (leaving other array elements undefined). Because ARRAY_INSERT pushes elements to the right, which\nchanges the index values required to access them, it is normally best to fill a sparse array from left to right\n(that is, from 0 up, increasing the index value for each new value inserted).",
        "ARRAY data is typically used when one or more of the following are true:",
        "There is a collection of data, and each piece in the collection is structured the same or similarly.",
        "Each piece of data is processed similarly. For example, you might loop through the data, processing each piece the same way.",
        "The data has a natural order, for example, chronological.",
        "The following example shows the output of a DESC TABLE command on a table with VARIANT, ARRAY, and OBJECT data.",
        "This example shows how to load simple values into a table, and what those values look like when you query the table.",
        "Create a table and load the data:",
        "Now show the data in the table.",
        "For additional examples, see Querying Semi-structured Data.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}