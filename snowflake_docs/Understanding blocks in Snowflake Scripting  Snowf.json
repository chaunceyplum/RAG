{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-scripting/blocks.html#using-an-anonymous-block",
    "title": "Understanding blocks in Snowflake Scripting | Snowflake Documentation",
    "paragraphs": [
        "In Snowflake Scripting, you write procedural code in a Snowflake Scripting block. This topic explains how to write procedural\ncode in a block.",
        "A block has the following basic structure:",
        "A block consists of required and optional sections that are delimited by keywords. Each section serves a different purpose:",
        "DECLARE: If you need to use any variables, cursors, RESULTSETs, or exceptions\nin the block, you can either declare these in the DECLARE section of the block or in the BEGIN \u2026 END section\nof the block.",
        "You can declare:",
        "Variables",
        "Cursors",
        "RESULTSETs",
        "Exceptions",
        "This section of the block is optional.",
        "BEGIN \u2026 END: Write SQL statements and Snowflake Scripting constructs in the\nsection of the block between BEGIN and END.",
        "EXCEPTION: If you need to add exception handling code, add this to the\nEXCEPTION section of the block.",
        "This section of the block is optional.",
        "A simple block only requires the keywords BEGIN and END. For example:",
        "Important",
        "The keyword BEGIN that starts a block is different from the keyword BEGIN that starts a transaction.\nTo minimize confusion, Snowflake strongly recommends starting transactions with BEGIN TRANSACTION (or the older form\nBEGIN WORK), rather than BEGIN.",
        "Any database objects that you create in a block (e.g. the tables in the example above) can be used outside of the block.",
        "If the code uses variables, you can declare those variables in the block. One way to do\nthis is in the DECLARE section of the block. For example:",
        "This example declares a variable, uses the variable, and returns the value of the variable. For details on how values are\nreturned from a block, see Returning a value.",
        "These variables cannot be used outside of the block. See Understanding the scope of declarations.",
        "You can also declare a variable in the BEGIN \u2026 END section of the block by using\nLET. For details, see Declaring a variable.",
        "You can use a block in the definition of a stored procedure. The following is an example that you can run in\nSnowsight to create a stored procedure containing a Snowflake Scripting block:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "You can call a stored procedure using the CALL command. The following example calls\nthe stored procedure area in the previous example:",
        "The stored procedure returns the following output:",
        "If you do not want to store the block in a stored procedure in the database, you can define and use an anonymous block. An\nanonymous block is a block that is not part of a stored procedure. You define the block as a separate, standalone SQL statement.",
        "The BEGIN  statement that defines the block also executes the block. (You don\u2019t\nrun a separate CALL command to execute the block.)",
        "The following is an example of an anonymous block that you can run in\nSnowsight:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The example produces the following output:",
        "The column header in the output is anonymous block. If the code had been executed in a stored procedure, the\ncolumn header would have been the name of the stored procedure.",
        "The following example defines an anonymous block that creates two tables that are related. In this example, the block of\nprocedural code does not need to use variables, so the DECLARE section of the block is omitted.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}