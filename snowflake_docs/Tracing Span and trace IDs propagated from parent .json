{
    "url": "https://docs.snowflake.com/en/release-notes/bcr-bundles/2024_06/bcr-1683",
    "title": "Tracing: Span and trace IDs propagated from parent to child through procedure calls | Snowflake Documentation",
    "paragraphs": [
        "Attention",
        "This behavior change is in the 2024_06 bundle.",
        "For the current status of the bundle, refer to Bundle History.",
        "In event tracing, span and trace IDs behave as follows:",
        "The trace_id of each of the spans created by chained stored procedures or UDFs is unique when the handler is written in\nJavaScript or Snowflake Scripting.",
        "The parent_span_id field does not exist in the RECORD column of the event table.",
        "Native apps providers and consumers see different trace_id values for shared events. The provider sees the hashed version.",
        "This change adds trace ID propagation support for handlers written in JavaScript and Snowflake Scripting. This already exists for\nhandlers written in Python, Java, and Scala. The new behavior applies to stored procedures and UDFs whose handlers are written in\nJavaScript, as well as to stored procedure handlers written in Snowflake Scripting.",
        "Spans generated by chained stored procedures or UDFs with JavaScript or Snowflake Scripting handlers have the same trace_id.\nThe RECORD column may have a parent_span_id attribute.",
        "Spans generated by chained stored procedures or UDFs with JavaScript or Snowflake Scripting handlers have a parent-child relationship\nbetween parent_span_id and span_id. Stored procedures with JavaScript or Snowflake Scripting handlers can call other\nstored procedures in a chain of any length. UDFs can\u2019t execute SQL statements, so calling a UDF ends the chain. However, the trace info\nis still propagated to the UDF\u2019s spans.",
        "If the stored procedure or UDF with a JavaScript or Snowflake Scripting handler was called by the user directly (the root), then the\ntrace_id will be a random ID and there will be no parent_span_id. If tracing is disabled for a stored procedure and it\ncalls another stored procedure or UDF, then the trace_id of the child\u2019s spans will be random and they will have no\nparent_span_id. In other words, the trace is restarted at the child.",
        "Native apps providers and consumers see the same trace_id for shared JavaScript or Snowflake Scripting stored procedure or UDF\nevents, so they can be debugged more easily.",
        "This change is being made to improve debugging.",
        "Ref: 1683",
        "Was this page helpful?"
    ]
}