{
    "url": "https://docs.snowflake.com/en/developer-guide/udf/javascript/udf-javascript-introduction",
    "title": "Introduction to JavaScript UDFs | Snowflake Documentation",
    "paragraphs": [
        "You can write the handler for a user-defined function (UDF) in JavaScript. Topics in this section describe how to design and write a\nJavaScript handler.",
        "For an introduction to UDFs, including a list of languages in which you can write a UDF handler, refer to User-defined functions overview.",
        "Once you have a handler, you create the UDF with SQL. For information on using SQL to create or call a UDF, refer to\nCreating a UDF or Calling a UDF.",
        "You can capture log and trace data as your handler code executes. For more information, refer to\nLogging, tracing, and metrics.",
        "Note",
        "For limitations related to JavaScript UDF handlers, refer to JavaScript UDF limitations.",
        "When a user calls a UDF, the user passes UDF\u2019s name and arguments to Snowflake. Snowflake calls the associated handler code\n(with arguments, if any) to execute the UDF\u2019s logic. The handler function then returns the output to Snowflake, which passes it back to the\nclient.",
        "For each row passed to a UDF, the UDF returns either a scalar (i.e. single) value or, if defined as a table function, a set of rows.",
        "Code in the following example creates a UDF called my_array_reverse with a handler code that accepts an input ARRAY and\nreturns an ARRAY containing the elements in reverse order. The JavaScript argument and return types are converted to and from SQL\nby Snowflake, according to mappings described in SQL-JavaScript Data Type Mappings.",
        "Note that the JavaScript code must refer to the input parameter names as all uppercase, even if the names are not uppercase in the\nSQL code.",
        "SQL and JavaScript UDFs provide similar, but different, data types, based on their native data type support. Objects within Snowflake\nand JavaScript are transferred using the following mappings.",
        "JavaScript has no integer type; all numbers are represented as doubles. JavaScript UDFs do not accept or return integer values except\nthrough type conversion (i.e. you can pass an integer to a JavaScript UDF that accepts a double).",
        "Both Snowflake SQL and JavaScript support double values. These values are transferred as-is.",
        "Both Snowflake SQL and JavaScript support string values. These values are transferred as-is.",
        "All binary values are converted into JavaScript Uint8Array objects. These typed arrays can be accessed in the same way as\nregular JavaScript arrays, but they are more efficient and support additional methods.",
        "If a JavaScript UDF returns a Uint8Array object, it is converted into a Snowflake SQL binary value.",
        "All timestamp and date types are converted into JavaScript Date() objects. The JavaScript date type is equivalent to\nTIMESTAMP_LTZ(3) in Snowflake SQL.",
        "Consider the following notes for JavaScript UDFs that accept a date or time:",
        "All precision beyond milliseconds is lost.",
        "A JavaScript Date generated from SQL TIMESTAMP_NTZ no longer acts as \u201cwallclock\u201d time; it is influenced by daylight saving time.\nThis is similar to behavior when converting TIMESTAMP_NTZ to TIMESTAMP_LTZ.",
        "A JavaScript Date generated from SQL TIMESTAMP_TZ loses time zone information, but represents the same moment in time as the\ninput (similar to when converting TIMESTAMP_TZ to TIMESTAMP_LTZ).",
        "SQL DATE is converted to JavaScript Date representing midnight of the current day in the local time zone.",
        "Additionally, consider the following notes for JavaScript UDFs that return DATE and TIMESTAMP types:",
        "JavaScript Date objects are converted to the UDF\u2019s result data type, adhering to the same conversion semantics as casts from\nTIMESTAMP_LTZ(3) to the return data type.",
        "JavaScript Date objects nested inside VARIANT objects are always of type TIMESTAMP_LTZ(3).",
        "JavaScript UDFs allow easy, intuitive manipulation of variant and JSON data. Variant objects passed to a UDF are transformed to native\nJavaScript types and values. Any of the previously-listed values are translated into their corresponding JavaScript types. Variant objects\nand arrays are converted to JavaScript objects and arrays. Similarly, all values returned by the UDF are transformed into the appropriate\nvariant values. Note that objects and arrays returned by the UDF are subject to size and depth limitations.",
        "Arguments may be referenced directly by name within JavaScript. Note that an unquoted identifier must be referenced with the\ncapitalized variable name. As arguments and the UDF are referenced from within JavaScript, they must be legal JavaScript identifiers.\nSpecifically, UDF and argument names must begin with a letter or $, while subsequent characters can be alphanumeric, $,\nor _. Additionally, names can not be JavaScript-reserved words.",
        "The following three examples illustrate UDFs that use arguments referenced by name:",
        "When using JavaScript UDFs, pay close attention to rows and variables that might contain NULL values. Specifically, Snowflake\ncontains two distinct NULL values (SQL NULL and variant\u2019s JSON null), while JavaScript contains the undefined\nvalue in addition to null.",
        "SQL NULL arguments to a JavaScript UDF will translate to the JavaScript undefined value. Likewise, returned\nJavaScript undefined values translate back to SQL NULL. This is true for all data types, including variant.\nFor non-variant types, a returned JavaScript null will also result in a SQL NULL value.",
        "Arguments and returned values of the variant type distinguish between JavaScript\u2019s undefined and null values.\nSQL NULL continues to translate to JavaScript undefined (and JavaScript undefined back to SQL NULL);\nvariant JSON null translates to JavaScript null (and JavaScript null back to variant JSON null).\nAn undefined value embedded in a JavaScript object (as the value) or array will cause the element to be omitted.",
        "Create a table with one string and one NULL value:",
        "Create a function that converts a string to a NULL and a NULL to a string:",
        "Call the function:",
        "Create a function that shows the difference between passing a SQL NULL and passing a variant JSON null:",
        "Create a function that shows the difference between returning undefined, null, and a variant that contains\nundefined and null (note that the undefined value is removed from the returned variant):",
        "JavaScript will implicitly convert values between many different types. When any value is returned, the value is first converted to\nthe requested return type before being translated to a SQL value. For example, if a number is returned, but the UDF is declared as\nreturning a string, this number will converted to a string within JavaScript. Keep in mind that JavaScript programming errors, such as\nreturning the wrong type, may be hidden by this behavior. In addition, if an error is thrown while converting the value\u2019s type, an\nerror will result.",
        "The range for numbers with precision intact is from",
        "-(2^53 -1)",
        "to",
        "(2^53 -1)",
        "The range of valid values in Snowflake NUMBER(p, s) and DOUBLE data types is larger. Retrieving a value from Snowflake\nand storing it in a JavaScript numeric variable can result in loss of precision. For example:",
        "The first two columns should match, and the third should contain 0.0.",
        "The problem applies to JavaScript user-defined functions (UDFs) and stored procedures.",
        "If you experience the problem in stored procedures when using getColumnValue(), you might be able to avoid the\nproblem by retrieving a value as a string, e.g. with:",
        "You can then return the string from the stored procedure, and cast the string to a numeric data type in SQL.",
        "Any errors encountered while executing JavaScript appear to the user as SQL errors. This includes parsing errors, runtime errors,\nand uncaught error thrown within the UDF. If the error contains a stacktrace, it will be printed along with the error message. It is\nacceptable to throw an error without catching it in order to end the query and produce a SQL error.",
        "When debugging, you may find it useful to print argument values along with the error message so that they appear in the SQL error\nmessage text. For deterministic UDFs, this provides the necessary data to reproduce errors in a local JavaScript engine. One common\npattern is to place an entire JavaScript UDF body in a try-catch block, append argument values to the caught error\u2019s message, and\nthrow an error with the extended message. You should consider removing such mechanisms prior to deploying UDFs to a production\nenvironment; recording values in error messages may unintentionally reveal sensitive data.",
        "The function can throw and catch pre-defined exceptions or custom exceptions. A simple example of throwing a\ncustom exception is here.",
        "See also Troubleshooting JavaScript UDFs.",
        "JavaScript UDFs are designed to be safe and secure by providing several layers of query and data isolation:",
        "Compute resources within the virtual warehouse that executes a JavaScript UDF are accessible only from within your account\n(i.e. warehouses do not share resources with other Snowflake accounts).",
        "Table data is encrypted within the virtual warehouse to prevent unauthorized access.",
        "JavaScript code is executed within a restricted engine, preventing system calls from the JavaScript context (e.g. no network and\ndisk access) and constraining the system resources available to the engine, specifically memory.",
        "As a result, JavaScript UDFs can access only the data needed to perform the defined function and can not affect the state of the\nunderlying system, other than consuming a reasonable amount of memory and processor time.",
        "Was this page helpful?",
        "On this page"
    ]
}