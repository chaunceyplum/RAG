{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/create-masking-policy",
    "title": "CREATE MASKING POLICY | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact\nSnowflake Support.",
        "Creates a new masking policy in the current/specified schema or replaces an existing masking policy.",
        "After creating a masking policy, apply the masking policy to a column in a table using an ALTER TABLE \u2026 ALTER COLUMN command or a view using\nan ALTER VIEW command.",
        "Choosing a centralized, hybrid, or decentralized approach, Advanced Column-level Security topics",
        "Masking policy DDL",
        "Identifier for the masking policy; must be unique for your schema.",
        "The identifier value must start with an alphabetic character and cannot contain spaces or special characters unless the entire identifier\nstring is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.",
        "For more details, see Identifier requirements.",
        "The signature for the masking policy; specifies the input columns and data types to evaluate at query runtime.",
        "For more details, see SQL data types reference.",
        "The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent\npolicy conditions.",
        "Note that you can not specify a virtual column as the first column argument in a conditional masking policy.",
        "Specifies the conditional columns and their data types to evaluate to determine whether the policy conditions should mask or tokenize\nthe data in the first column in each row of the query result.",
        "If these additional columns and data types are not specified, Snowflake evaluates the policy as a normal masking policy.",
        "The return data type must match the input data type of the first column that is specified as an input column.",
        "SQL expression that transforms the data in the column designated by arg_name_to_mask.",
        "The expression can include Conditional expression functions to represent conditional logic, built-in functions, or UDFs to\ntransform the data.",
        "If a UDF or external function is used inside the masking policy body, the policy owner must have USAGE on the UDF or external function.\nThe USAGE privilege on the UDF or external function is not required for the role used to query a column that has a masking policy applied\nto it.",
        "If a UDF or external function is used inside the conditional masking policy body, the policy owner must have OWNERSHIP on the UDF or\nexternal function. Users querying a column that has a conditional masking policy applied to it do not need to have USAGE on the UDF or\nexternal function.",
        "Adds a comment or overwrites an existing comment for the masking policy.",
        "One of the following depending on the usage:",
        "Specifies whether a row access policy or conditional masking policy can reference a column that is already protected by this masking\npolicy.",
        "Specifies whether a masking policy assigned to a virtual column overrides the masking policy that the virtual column inherits from the\nVALUE column. When working with external tables, specify this property in the masking policy that protects the VALUE column.",
        "Allows a different policy to reference the masked column or allows the masking policy set on a virtual column to override the masking\npolicy the virtual column inherits from the VALUE column in an external table.",
        "Does not allow a different policy to reference the masked column or allow the masking policy and does not allow the masking policy the virtual column inherits from the VALUE column in an external table.",
        "Note the following:",
        "The value of this property in the masking policy cannot change after setting the masking policy on a table or view. To update\nthe value of this property setting, execute a CREATE OR REPLACE MASKING POLICY statement on the masking policy.",
        "When the property is set to true it is included in the output of calling the GET_DDL function on the\npolicy.",
        "A role used to execute this SQL command must have the following\nprivileges at a minimum:",
        "Privilege",
        "Object",
        "Notes",
        "CREATE MASKING POLICY",
        "Schema",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "For instructions on creating a custom role with a specified set of privileges, see Creating custom roles.",
        "For general information about roles and privilege grants for performing SQL actions on\nsecurable objects, see Overview of Access Control.",
        "When specifying the EXEMPT_OTHER_POLICIES property in a masking policy, the role that owns the masking policy\n(i.e. the role with OWNERSHIP privilege on the policy) must be in the role hierarchy of the role that owns the row access\npolicy or the conditional masking policy.",
        "For example, the policy administrator custom roles can form a role hierarchy as\nfollows:",
        "masking_admin \u00bb rap_admin \u00bb SYSADMIN",
        "masking_admin \u00bb cond_masking_admin \u00bb SYSADMIN",
        "Where:",
        "Specifies the custom role that owns the masking policy that is set on the column that will be specified in the signature of a row access\npolicy or a conditional masking policy.",
        "Specifies the custom role that owns the row access policy.",
        "Specifies the custom role that owns the conditional masking policy.",
        "For additional details on masking policy DDL and privileges, see Managing Column-level Security.",
        "If you want to replace an existing masking policy and need to see the current definition of the policy, call the\nGET_DDL function or run the DESCRIBE MASKING POLICY command.",
        "For masking policies that include a subquery in the masking policy body, use EXISTS in the\nWHEN branch of the CASE function. For a representative example, refer to the custom entitlement table example in the\nNormal Masking Policy section (in this topic).",
        "If the policy body contains a mapping table lookup, create a centralized mapping table and store the mapping table\nin the same database as the protected table. This is particularly important if the body calls the\nIS_DATABASE_ROLE_IN_SESSION function. For details, see the function usage notes.",
        "A given table or view column can be specified in either a masking policy signature or a row access policy signature. In other words, the\nsame column cannot be specified in both a masking policy signature and a row access policy signature at the same time.",
        "For more information, see CREATE ROW ACCESS POLICY.",
        "A data sharing provider cannot create a masking policy in a reader account.",
        "If using a UDF in a masking policy, ensure the data type of the column, UDF, and masking\npolicy match. For more information, see User-defined functions in a masking policy.",
        "If you specify the CURRENT_DATABASE or CURRENT_SCHEMA function in the\nbody of a masking or row access policy, the function returns the database or schema that contains the protected table, not the database or\nschema in use for the session.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "CREATE OR REPLACE <object> statements are atomic. That is, when an object is replaced, the old object is deleted and the new object is created in a single transaction.",
        "You can use Conditional expression functions, Context functions, and UDFs to write the SQL expression.",
        "The following are representative examples of the policy body to show how to create masking policy conditions using different SQL\nexpressions, functions, and data types.",
        "These examples mostly use the CURRENT_ROLE context function. If role activation and role hierarchy is\nnecessary in the policy conditions, use IS_ROLE_IN_SESSION.",
        "Full mask:",
        "The analyst custom role can see the plain-text value. Users without the analyst custom role see a full mask.",
        "Allow a production account to see unmasked values and all other accounts\n(e.g. development, test) to see masked values.",
        "Return NULL for unauthorized users:",
        "Return a static masked value for unauthorized users:",
        "Return a hash value using SHA2 , SHA2_HEX for unauthorized users. Using a hashing function in a masking policy may result in collisions; therefore, exercise caution with this approach. For more information, see Advanced Column-level Security topics.",
        "Apply a partial mask or full mask:",
        "Using timestamps.",
        "Important",
        "Currently, Snowflake does not support different input and output data types in a masking policy, such as defining the masking policy to target a timestamp and return a string (e.g. ***MASKED***); the input and output data types must match.",
        "A workaround is to cast the actual timestamp value with a fabricated timestamp value. For more information, see DATE_FROM_PARTS and CAST , ::.",
        "Using a UDF:",
        "On variant data:",
        "Using a custom entitlement table. Note the use of EXISTS in the WHEN clause. Always use EXISTS when including a subquery in the masking policy body. For more information on subqueries that Snowflake supports, see Working with Subqueries.",
        "Using DECRYPT on previously encrypted data with either ENCRYPT or ENCRYPT_RAW, with a passphrase on the encrypted data:",
        "Using a <JavaScript UDF on JSON (VARIANT):",
        "In this example, a JavaScript UDF masks location data in a JSON string. It is important to set the data type as VARIANT in the UDF and\nthe masking policy. If the data type in the table column, UDF, and masking policy signature do not match, Snowflake returns an error\nmessage because it cannot resolve the SQL.",
        "Using the GEOGRAPHY data type:",
        "In this example, a masking policy uses the TO_GEOGRAPHY function to convert all GEOGRAPHY data in a\ncolumn to a fixed point, the longitude and latitude for Snowflake in San Mateo, California, for users whose CURRENT_ROLE is not\nANALYST.",
        "Set the masking policy on a column with the GEOGRAPHY data type and set the GEOGRAPHY_OUTPUT_FORMAT value for the session to\nGeoJSON:",
        "Snowflake returns the following:",
        "The query result values in column B depend on the GEOGRAPHY_OUTPUT_FORMAT parameter value for the session. For example, if the parameter\nvalue is set to WKT, Snowflake returns the following:",
        "For examples using other context functions and role hierarchy, see Advanced Column-level Security topics.",
        "The following example returns unmasked data for users whose CURRENT_ROLE is the admin custom role, or\nwhose value in the visibility column is Public. All other conditions result in a fixed masked value.",
        "The following example returns detokenized data for users whose CURRENT_ROLE is the admin custom role,\nand whose value in a different column is Public. All other conditions result in a tokenized value.",
        "Replace a masking policy that either allows viewing the email address, viewing only the email address domain, or a viewing fixed masked\nvalue:",
        "This policy can now be set on a column and a row access policy or a conditional masking policy can reference the column protected by this\nmasking policy as needed.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}