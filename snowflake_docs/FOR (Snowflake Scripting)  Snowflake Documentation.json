{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/for",
    "title": "FOR (Snowflake Scripting) | Snowflake Documentation",
    "paragraphs": [
        "A FOR loop repeats a sequence of steps a specific number of times. The number of times might be specified by the\nuser, or might be specified by the number of rows in a cursor. The syntax\nof these two types of FOR loops is slightly different.",
        "For more information on loops, see Working with loops.",
        "Note",
        "This Snowflake Scripting construct is valid only within a\nSnowflake Scripting block.",
        "BREAK, CONTINUE",
        "To loop over all rows in a cursor, use:",
        "To loop a specified number of times, use:",
        "Where:",
        "Specify a variable name that follows the rules for Object identifiers.",
        "Do not add a declaration for this variable in the DECLARE or BEGIN \u2026 END sections.\nThe name should not already be defined in the scope of the local block.",
        "The name is valid inside the FOR loop, but not outside the FOR loop.",
        "The row_variable holds one row from the cursor. Fields within that row are accessed using dot notation. For example:",
        "my_row_variable.my_column_name",
        "A more complete example is included in the examples below.",
        "Specify a variable name that follows the rules for Object identifiers.",
        "The name of the counter_variable is valid only inside the FOR loop.\nIf a variable with the same name is declared outside the loop, the outer variable and the loop variable are separate. Inside the\nloop, references to that name are resolved to the loop variable.",
        "The code inside the FOR loop is allowed to read the value of the counter variable, but should not change it. For\nexample, do not increment the counter variable manually to change the step size.",
        "This is the initial value of counter_variable.",
        "The starting value should be an INTEGER or an expression that evaluates to an INTEGER.",
        "This is the final value of counter_variable, after the counter_variable has been incremented as you loop.",
        "The ending value should be an INTEGER or an expression that evaluates to an INTEGER.",
        "The end value should be greater than or equal to the start value. If end is less than\nstart, the loop executes 0 times (even if the REVERSE keyword is used).",
        "A statement can be any of the following:",
        "A single SQL statement (including CALL).",
        "A control-flow statement (for example, a looping or\nbranching statement).",
        "A nested block.",
        "The name of the cursor to iterate through.",
        "An optional label. Such a label can be a jump target for a BREAK (Snowflake Scripting) or\nCONTINUE (Snowflake Scripting) statement. A label must follow the naming rules for\nObject identifiers.",
        "The loop iterates up to and including the end point.",
        "For example, FOR i IN 1 TO 10 loops 10 times, and during the final iteration the value of i is 10.",
        "If you use the REVERSE keyword, then the loop iterates backwards down to and including the start value.",
        "A loop can contain multiple statements. You can use, but are not required to use, a BEGIN \u2026 END (Snowflake Scripting)\nblock to contain those statements.",
        "The optional keyword REVERSE causes Snowflake to start with the end value and decrement down to the start value.",
        "Although you can change the value of the counter_variable inside the loop, Snowflake recommends that you avoid doing this.\nChanging the value makes the code more difficult to understand.",
        "If you use the keyword DO, then use END FOR at the end of the FOR loop. If you use the keyword LOOP, then use\nEND LOOP at the end of the FOR loop.",
        "",
        "This example shows how to use a cursor to sum the values in the price\ncolumn of all the rows returned by a query. This stored procedure behaves somewhat like an aggregate function.",
        "Here is the output of the stored procedure:",
        "",
        "This example shows how to use a FOR loop to iterate a specified number of times:",
        "Here is the output of the stored procedure:",
        "The following example shows how to use the REVERSE keyword to count backwards.",
        "Here is the output of the stored procedure:",
        "The following example shows the behavior when the loop counter variable has the same name (i) as a variable that was already\ndeclared. Within the FOR loop, references to i resolve to the loop counter variable (not to the variable declared outside of\nthe loop).",
        "Here is the output of the stored procedure:",
        "Was this page helpful?",
        "On this page"
    ]
}