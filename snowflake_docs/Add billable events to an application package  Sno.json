{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/adding-custom-event-billing",
    "title": "Add billable events to an application package | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "When you use Custom Event Billing for a Snowflake Native App, you can charge for specific types of application usage in addition to the existing\nusage-based pricing plans. To set it up, you must perform two high-level steps:",
        "Set up your application package to emit billable events by following the steps in this topic.",
        "Select a usage-based pricing plan with billable events\nfor the listing you use to publish your Snowflake Native App to consumers.",
        "This topic describes how to set up your application package to emit billable events using the SYSTEM$CREATE_BILLING_EVENT and SYSTEM$CREATE_BILLING_EVENTS system functions.",
        "You can set up your application package to emit billable events in response to specific usage events so that you can charge consumers based on\nhow much they use your Snowflake Native App.",
        "For example, you can add a billable event to charge a consumer a specific amount for each call to a stored procedure in your Snowflake Native App.",
        "To add billable events to an application package, do the following:",
        "Create stored procedures to define which usage events trigger calls to the\nSYSTEM$CREATE_BILLING_EVENT and SYSTEM$CREATE_BILLING_EVENTS system functions.",
        "Note",
        "You cannot test the output of the system function at this stage. This system function can only be called from a Snowflake Native App\ninstalled in a consumer account.",
        "Add those stored procedures to the setup script of the application package.",
        "Important",
        "Snowflake supports billable events that are emitted by calling the system function within a stored procedure in the application,\nas outlined by the examples in this topic.",
        "Snowflake does not support other methods of calculating the base charge for billable events, such as methods that use the output of a\ntable or user-defined function that outputs consumer activity or methods that use telemetry logged in an event table.",
        "If you\u2019re uncertain whether a proposed implementation will be supported, contact your Snowflake account representative.",
        "The examples in this section show how to create stored procedures to emit billable events for common billing\nscenarios. Each of these examples calls the createBillingEvent function.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "The following example shows how to create a wrapper function in a stored procedure to call the\nSYSTEM$CREATE_BILLING_EVENT system function.",
        "Note",
        "You can call this system function in a stored procedure written in JavaScript, Python, or Java.",
        "This example creates a JavaScript stored procedure named custom_event_billing in the schema version that is accessible to the procedures that emit billing. The stored procedure creates a helper function called createBillingEvent which takes arguments that correspond to the typed parameters expected by the SYSTEM$CREATE_BILLING_EVENT system function.",
        "For more details about the parameters and the required types, see SYSTEM$CREATE_BILLING_EVENT.",
        "The examples in this topic call this helper function.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "The following example stored procedure shows how to batch multiple Snowflake Native App billing events with the SYSTEM$CREATE_BILLING_EVENTS system function. By using batches, you save time, reduce the likelihood of exceeding call limits, and ensure your billing events are set up correctly.",
        "For more details about the parameters and the required types, see SYSTEM$CREATE_BILLING_EVENTS.",
        "The following example shows how to create a stored procedure to emit a billable event when a consumer calls\nthat stored procedure in a Snowflake Native App.",
        "Add this example code to your setup script in the same stored procedure that defines the helper function:",
        "This example code creates a stored procedure that calls the  createBillingEvent function to emit a billable event\nwith the class name  PROCEDURE_CALL and a base charge of 1.0.",
        "Note",
        "The types of the arguments passed to the createBillingEvent function must correspond to the typed parameters\nexpected by the SYSTEM$CREATE_BILLING_EVENT system function.",
        "The following example shows how to create a stored procedure to emit a billable event based on the number of\nrows consumed within a table in the consumer account.",
        "Add this example code to your setup script in the same stored procedure that defines the helper function:",
        "This example code creates a stored procedure that calls the  createBillingEvent function to emit a billable event\nwith the class name  ROWS_CONSUMED and a calculated base charge of 2.5 multiplied by the number of rows in the\ndb_1.public.t1 table in the consumer account.",
        "Note",
        "The types of the arguments passed to the createBillingEvent function must correspond to the typed parameters\nexpected by the SYSTEM$CREATE_BILLING_EVENT system function.",
        "The following example shows how to create a stored procedure to emit a billable event based on the number of rows\ningested into a table.",
        "Add this example code to your setup script in the same stored procedure that defines the helper function:",
        "This example code creates a stored procedure that calls the  createBillingEvent function to emit a billable event\nwith the class name  ROWS_CHANGED and a calculated base charge of 2.5 multiplied by the number of rows\ningested in the db_1.target_table table.",
        "Note",
        "The types of the arguments passed to the createBillingEvent function must correspond to the typed parameters\nexpected by the SYSTEM$CREATE_BILLING_EVENT system function.",
        "Monthly active rows are the number of rows inserted or updated for the first time within a calendar month. Some\nproviders use this metric to only charge consumers for unique rows updated in a month. You can modify this example to instead\ncount unique users, or identify a unique data load location to determine a base charge.",
        "The following example shows how to create a stored procedure to emit a billable event based on the number of\nmonthly active rows. Add this example code to your setup script in the same stored procedure that defines the helper function:",
        "This example code creates a stored procedure that determines the number of monthly active rows using a merge query to identify unique\nrows. The example then calculates the base charge using the value of the monthlyActiveRows variable and the billing_quantity.\nThe base charge is then passed to the createBillingEvent function.",
        "Note",
        "The types of the arguments passed to the createBillingEvent function must correspond to the typed parameters\nexpected by the SYSTEM$CREATE_BILLING_EVENT system function.",
        "In your setup script, add this stored procedure after the stored procedure that calls the SYSTEM$CREATE_BILLING_EVENT system function.",
        "To write your stored procedure in Snowpark Python to bill based on rows consumed by your Snowflake Native App, use the following example:",
        "This example code creates a stored procedure that defines a helper method that calls the SYSTEM$CREATE_BILLING_EVENT system function,\nas well as a method that calls that helper method,  createBillingEvent, to emit a billable event\nwith the class name  ROWS_CONSUMED and a base charge calculated by multiplying a price of 2.5 US dollars by the number of rows in\nthe db_1.public.t1 table in the consumer account.",
        "Note",
        "The types of the arguments passed to the createBillingEvent function must correspond to the typed parameters\nexpected by the SYSTEM$CREATE_BILLING_EVENT system function.",
        "To make sure that you set up Custom Event Billing properly and that billable events are emitted for usage events as you expect,\ndo the following:",
        "Update your application package:",
        "Update your setup script to include the stored procedures that emit billable events.",
        "Update your application package with the new setup script.",
        "Update the version and release directive for your application package.",
        "Share the application package with a consumer account in your organization that you have access to:",
        "Create a private listing.",
        "Add Custom Event Billing as the pricing plan for the listing.",
        "Share it with the consumer account.",
        "Sign in to the consumer account using Snowsight.",
        "Install the Snowflake Native App.",
        "Confirm that the stored procedures successfully emit billable events.",
        "Confirm that the listing is set up properly.",
        "Note",
        "When you test Custom Event Billing, you must\nset up a payment method\nbut you will not be charged for usage within your organization.",
        "While signed in to the consumer account with which you shared your listing, call the stored procedures that you added to your Snowflake Native App.",
        "For example, to test the stored procedure created for billing based on monthly active rows, do the following:",
        "Sign in to the consumer account in Snowsight.",
        "Open a worksheet and set the context to db_1.public.",
        "Run the following SQL statement:",
        "If the stored procedure returns Success, your code is working.",
        "Note",
        "If you run these SQL commands in the provider account that you used to create the application package, you see an error.",
        "To validate the consumer experience of a Snowflake Native App and confirm that the listing and application package are set up properly, you can query\nthe MARKETPLACE_PAID_USAGE_DAILY view in the DATA_SHARING_USAGE schema of the shared SNOWFLAKE database.",
        "Note",
        "Due to latency in the view, run these queries at least two days after first using the Snowflake Native App.",
        "To confirm that billable events are successfully generated by a Snowflake Native App and listing,\nrun the following SQL statement in the consumer account that you shared the listing with:",
        "Note",
        "Replace the PROVIDER_ACCOUNT_NAME and PROVIDER_ORGANIZATION_NAME values with those of the provider account.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}