{
    "url": "https://docs.snowflake.com/en/user-guide/search-optimization/queries-that-benefit",
    "title": "Identifying queries that can benefit from search optimization | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact Snowflake Support.",
        "Search optimization can improve the performance of many queries. This topic describes characteristics of the kinds of\nqueries that search optimization helps the most with, and conversely, the kinds of queries that do not benefit.",
        "Search optimization works best to improve the performance of queries with the following characteristics:",
        "The query involves a column or columns other than the primary cluster key.",
        "The query typically runs for a few seconds or longer (before applying search optimization). In most cases, search optimization will\nnot substantially improve the performance of a query that has a sub-second execution time.",
        "At least one of the columns accessed by the query filter operation has on the order of 100,000 distinct values or more.",
        "To determine the number of distinct values, you can use either of the following:",
        "Use APPROX_COUNT_DISTINCT to get the approximate number of distinct values:",
        "Use COUNT(DISTINCT <col_name>) to get the actual number of distinct values:",
        "Because you need only an approximation of the number of distinct values, consider using APPROX_COUNT_DISTINCT, which\nis generally faster and cheaper than COUNT(DISTINCT <col_name>).",
        "The search optimization service currently supports the following data types:",
        "Fixed-point numbers (for example, INTEGER, NUMERIC)",
        "DATE, TIME, and TIMESTAMP",
        "VARCHAR",
        "BINARY",
        "VARIANT, OBJECT, and ARRAY",
        "GEOGRAPHY",
        "Queries that involve other types of values (i.e., FLOAT, GEOMETRY) do not benefit.",
        "Search optimization can improve the performance of queries using these kinds of predicates:",
        "Point lookup queries using equality and IN.",
        "Character data (text) queries using the SEARCH and SEARCH_IP functions.",
        "Substring queries using wildcards and regular expressions.",
        "Searches in semi-structured data.",
        "Geospatial queries.",
        "Queries using conjunctions (AND) and disjunctions (OR).",
        "Search optimization can also improve the performance of views and of queries that use JOIN.",
        "The search optimization service can indirectly improve the performance of views (including secure views). If a base table for a\nview has search optimization enabled, and the query uses a selective predicate for that table, the search optimization service\ncan improve performance when filtering rows. See Supported predicate types.",
        "Not all tables in the view need to have search optimization enabled. Search optimization is performed on each table\nindependently.",
        "The search optimization service does not directly improve the performance of joins. However, it can improve the performance\nof filtering rows from either table prior to the join. This improvement may occur when the table has search optimization enabled and the predicate is selective, as discussed under Supported predicate types.",
        "Both tables do not need to have search optimization enabled. The decision to use search optimization is made for each table\nindependently.",
        "Currently, the search optimization service does not support floating point data types, GEOMETRY, or other data types not already discussed.\nSnowflake might add support for more data types in the future.",
        "Additionally, the search optimization service does not support the following:",
        "External tables.",
        "Materialized views.",
        "Columns defined with a COLLATE clause.",
        "Column concatenation.",
        "Analytical expressions.",
        "Casts on table columns (except for fixed-point numbers cast to strings).",
        "Although search optimization supports predicates with implicit and explicit casts on constant values, it does not support\npredicates that cast values in the actual table column (except for casts from INTEGER and NUMBER to VARCHAR).",
        "For example, the following predicates are supported because they use implicit and explicit casts on constant values (not values\nin the table column):",
        "The following predicate is not supported because it uses a cast on values in the table column:",
        "The search optimization service considers the original column values, not the values after the cast. As a result,\nthe search optimization service is not used for queries with these predicates.",
        "As noted, the exception to this rule is casting NUMBER or INTEGER values to VARCHAR values in the table column. The\nsearch optimization service does support this type of predicate:",
        "Search optimization does not improve performance of queries that use Time Travel\nbecause search optimization works only on active data.",
        "Was this page helpful?",
        "On this page"
    ]
}