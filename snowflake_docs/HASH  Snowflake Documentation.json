{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/hash",
    "title": "HASH | Snowflake Documentation",
    "paragraphs": [
        "Hash functions",
        "Returns a signed 64-bit hash value. Note that HASH never returns NULL, even for NULL inputs.",
        "Possible uses for the HASH function include:",
        "Convert skewed data values to values that are likely to be more randomly or more evenly distributed.",
        "For example, you can hash a group of highly skewed values and generate a set of values that are more likely to be randomly distributed or evenly distributed.",
        "Put data in buckets. Because hashing can convert skewed data values to closer-to-evenly distributed values, you can use hashing to help take skewed values and\ncreate approximately evenly-sized buckets.",
        "If hashing alone is not sufficient to get the number of distinct buckets that you want, you can combine hashing with the ROUND or WIDTH_BUCKET\nfunctions.",
        "Note",
        "HASH is a proprietary function that accepts a variable number of input expressions of arbitrary types and returns a signed value. It is not a\ncryptographic hash function and should not be used as such.",
        "Cryptographic hash functions have a few properties which this function does not, for example:",
        "The cryptographic hashing of a value cannot be inverted to find the original value.",
        "Given a value, it is infeasible to find another value with the same cryptographic hash.",
        "For cryptographic purposes, use the SHA families of functions (in String & binary functions).",
        "HASH_AGG",
        "The expression can be a general expression of any Snowflake data type.",
        "Returns a single hashed value based on all columns in each record,\nincluding records with NULL values.",
        "When you pass a wildcard to the function, you can qualify the wildcard with the name or alias for the table.\nFor example, to pass in all of the columns from the table named mytable, specify the following:",
        "You can also use the ILIKE and EXCLUDE keywords for filtering:",
        "ILIKE filters for column names that match the specified pattern. Only one\npattern is allowed. For example:",
        "EXCLUDE filters out column names that don\u2019t match the specified column or columns. For example:",
        "Qualifiers are valid when you use these keywords. The following example uses the ILIKE keyword to\nfilter for all of the columns that match the pattern col1% in the table mytable:",
        "The ILIKE and EXCLUDE keywords can\u2019t be combined in a single function call.",
        "For this function, the ILIKE and EXCLUDE keywords are valid only in a SELECT list or GROUP BY clause.",
        "For more information about the ILIKE and EXCLUDE keywords, see the \u201cParameters\u201d section in SELECT.",
        "Returns a signed 64-bit value as NUMBER(19,0).",
        "HASH never returns NULL, even for NULL inputs.",
        "HASH is stable in the sense that it guarantees:",
        "Any two values of type NUMBER that compare equally will hash to the same hash value, even if the\nrespective types have different precision and/or scale.",
        "Any two values of type FLOAT that can be converted to NUMBER(38, 0) without loss of precision will\nhash to the same value. For example, the following all return the same hash value:",
        "HASH(10::NUMBER(38,0))",
        "HASH(10::NUMBER(5,3))",
        "HASH(10::FLOAT)",
        "Any two values of type TIMESTAMP_TZ that compare equally will hash to the same hash value, even if\nthe timestamps are from different time zones.",
        "This guarantee also applies to NUMBER, FLOAT, and TIMESTAMP_TZ values within a VARIANT column.",
        "Note that this guarantee does not apply to other combinations of types, even if implicit conversions exist\nbetween the types. For example, with overwhelming probability, the following will not return the same hash values\neven though 10 = '10' after implicit conversion:",
        "HASH(10)",
        "HASH('10')",
        "HASH(*) means to create a single hashed value based on all columns in the row.",
        "Do not use HASH to create unique keys. HASH has a finite resolution of 64 bits, and is guaranteed to return\nnon-unique values if more than 2^64 values are entered (e.g. for a table with more than 2^64 rows). In practice, if\nthe input is on the order of 2^32 rows (approximately 4 billion rows) or more, the function is reasonably likely\nto return at least one duplicate value.",
        "No impact.",
        "Two strings that are identical but have different collation specifications have the same hash value. In other words,\nonly the string, not the collation specification, affects the hash value.",
        "Two strings that are different, but compare equal according to a collation, might have a different hash value. For\nexample, two strings that are identical using punctuation-insensitive collation will normally have different hash\nvalues because only the string, not the collation specification, affects the hash value.",
        "The example below shows that even if the table contains multiple columns, HASH(*) returns a single value per row.",
        "Was this page helpful?",
        "On this page"
    ]
}