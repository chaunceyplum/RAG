{
    "url": "https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-python",
    "title": "Logging messages in Python | Snowflake Documentation",
    "paragraphs": [
        "You can log messages from a function or procedure handler written in Python by using\nlogging, the logging module in Python\u2019s standard library. When you\u2019ve set up an event\ntable to store log entries, Snowflake stores log entries generated by your handler code in the table.",
        "For more information about logging levels supported by Python, see the\nlogging levels documentation. Note that Snowflake treats two of the Python\nlogging levels in a particular way:",
        "The Python CRITICAL level will be treated as FATAL.",
        "The Python NOTSET level will be treated as TRACE.",
        "For general information about setting up logging and retrieving messages in Snowflake, see\nLogging messages from functions and procedures.",
        "Before logging from code, you must:",
        "Set up an event table to collect messages logged from handler code.",
        "For more information, see Event table overview.",
        "Be sure you have the logging level set so that the messages you want are stored in the event table.",
        "For more information, see Setting levels for logging, metrics, and tracing.",
        "You can use Python handler code to override the log threshold levels that have been\nlog level set with SQL. When you set the log level with Python, log entries will\nuse the logging levels defined by Python.",
        "By setting log levels in Python, you can do the following:",
        "Override the threshold set for the Snowflake session or for objects such as the procedure or UDF.",
        "Set thresholds scoped to specified Python packages.",
        "For example, you can use the logger name you set (and which is stored in the\nevent table) to set a threshold for that logger with Python.",
        "Python code in the following example sets the log level for the Snowpark session package to DEBUG.",
        "You can use the logger name recorded in the event table to set a threshold for log entries from that logger. This can be useful when you want\nto set a logger\u2019s threshold so that it filters out unwanted log entries above a particular level.",
        "To do that, you\u2019d first query the event table to discover the logger name associated with the entries for which you want to capture a different\nlogging level. Then, using that logger name, you\u2019d set the log level to the threshold you want.",
        "Code in the following example queries for log entries, including the logger name in the returned data. You can get the name as the value\nof the Scope column.",
        "This query might return many entries from several loggers. If, after looking through the results, you decide that you\u2019re getting many\nINFO messages that you don\u2019t want from the numpy logger, you can use Python to set that logger\u2019s threshold to capture log entries\nat the ERROR level and above.",
        "For more about querying the event table, see Viewing log messages.",
        "When you create a log entry, you can add your own attributes in key-value pairs. Snowflake saves these custom attributes to the event\ntable\u2019s RECORD_ATTRIBUTES column.",
        "To add custom attributes when calling one of the logging level functions \u2014 including logger.info, logger.error, and so\non \u2014 add an extra keyword argument, setting the argument\u2019s value to the key-value pairs to record as custom attributes.",
        "Code in the following example logs a message \u201cLogging with attributes\u201d to the event table\u2019s VALUE column. It also adds two custom\nattributes to the RECORD_ATTRIBUTES column.",
        "Output of the logger.info call appears in the event table as follows. Note that the RECORD_ATTRIBUTES column will include\nattributes that Snowflake adds automatically.",
        "The following sections provide examples of adding support for logging from Python code.",
        "Code in the following example imports the logging module, gets a logger, and logs a message at the INFO level.",
        "For more information about logging levels supported by Python, see the\nlogging levels documentation.",
        "You can access log messages by executing a SELECT command on the event table. For more information, see\nViewing log messages.",
        "Code in the following example queries the event table where the log messages are stored. The query reports on the severity and message of\neach log entry from the handler class.",
        "The preceding example generates the following output.",
        "Code in the following example imports the logging module, gets a logger, and logs a message at the INFO level.",
        "For more information about logging levels supported by Python, see the\nlogging levels documentation.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}