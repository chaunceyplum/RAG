{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/python/creating-session",
    "title": "Creating a Session for Snowpark Python | Snowflake Documentation",
    "paragraphs": [
        "To use Snowpark in your application, you need to create a session. For convenience in writing code, you can also import the names\nof packages and objects.",
        "The first step in using the library is establishing a session with the Snowflake database.",
        "Import the Session class.",
        "To authenticate, you use the same mechanisms that the Snowflake Connector for Python supports.",
        "Establish a session with a Snowflake database using the same parameters (for example, the account name, user name, etc.) that you use in the connect function in the Snowflake\nConnector for Python. For more information, see the parameters for the connect function in the Python Connector API documentation.",
        "To add credentials in a connections configuration file:",
        "In a text editor, open the connections.toml file for editing. For example, to open the file in the Linux vi editor:",
        "Add a new Snowflake connection definition.",
        "For example, to add a Snowflake connection called myconnection with the account myaccount,\nuser johndoe, and password credentials, as well as database information,\nadd the following lines to the configuration file:",
        "Connection definitions support the same configuration options available in the\nsnowflake.connector.connect method.",
        "Optional: Add more connections, as shown:",
        "Save changes to the file.",
        "In your Python code, supply connection name to snowflake.connector.connect and then add it to session, similar to the following:",
        "For more information, see configuration file.",
        "Construct a dictionary (dict) containing the names and values of these parameters\n(e.g. account, user, role, warehouse, database, schema, etc.).",
        "To create the session:",
        "Create a Python dictionary (dict) containing the names and values of the parameters for connecting to Snowflake.",
        "Pass this dictionary to the Session.builder.configs method to return a builder object that has these connection parameters.",
        "Call the create method of the builder to establish the session.",
        "The following example uses a dict containing connection parameters to create a new session:",
        "For the account parameter, use your account identifier.\nNote that the account identifier does not include the snowflakecomputing.com suffix.",
        "Note",
        "This example shows you one way to create a session but there are several other ways that you can connect, including:\nthe default authenticator, single sign-on (SSO), multi-factor authentication (MFA), key pair authentication,\nusing a proxy server, and OAuth. For more information, see Connecting to Snowflake with the Python Connector.",
        "If you have configured Snowflake to use single sign-on (SSO), you can configure\nyour client application to use browser-based SSO for authentication.",
        "Construct a dictionary (dict) containing the names and values of these parameters\n(e.g. account, user, role, warehouse, database, authenticator, etc.).",
        "To create the session:",
        "Create a Python dictionary (dict) containing the names and values of the parameters for connecting to Snowflake.",
        "Pass this dictionary to the Session.builder.configs method to return a builder object that has these connection parameters.",
        "Call the create method of the builder to establish the session.",
        "The following example uses a dict containing connection parameters to create a new session. Set the authenticator option to externalbrowser.",
        "If you no longer need to use a session for executing queries and you want to\ncancel any queries that are currently running, call the close method of the Session object.\nFor example:",
        "Was this page helpful?",
        "On this page"
    ]
}