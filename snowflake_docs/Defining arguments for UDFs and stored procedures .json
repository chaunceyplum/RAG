{
    "url": "https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-arguments",
    "title": "Defining arguments for UDFs and stored procedures | Snowflake Documentation",
    "paragraphs": [
        "In the CREATE FUNCTION or CREATE PROCEDURE that you execute to define a\nfunction or procedure, you specify arguments that can be passed in. For example:",
        "When you call a function or procedure, the argument values are bound to the handler\u2019s arguments. They may be bound based on\nmatching names or by argument position, depending on the language you\u2019re using for the handler.",
        "This topic provides guidelines on specifying the arguments for a function or procedure.",
        "Scalar functions (UDFs) have a limit of 500 input arguments.",
        "Choose the SQL data type that corresponds to the data type of the argument that you are using in the handler code.",
        "For information about how Snowflake maps SQL data types to handler data types, see\nData Type Mappings Between SQL and Handler Languages.",
        "In the CREATE PROCEDURE statement for a procedure written in Java, Python, or Scala, do not define the\nargument for the Snowpark Session object.",
        "For example, suppose that your handler code passes in a Session object and a String object:",
        "In the CREATE PROCEDURE statement, do not define an argument for the Session object. Instead, just define an argument\nfor the input string:",
        "Session is an implicit argument that you do not specify when calling the procedure. At runtime, when you call your stored\nprocedure, Snowflake creates a Session object and passes it to your stored procedure.",
        "You can specify that an argument is optional. For details, see the next sections:",
        "Designating an argument as optional",
        "Overloading functions and procedures with optional arguments",
        "Calling functions and procedures that have optional arguments",
        "If you want an argument to be optional, use the DEFAULT keyword to specify the default value for the argument.\nFor example:",
        "For the default value of the argument, you can use an expression. For example:",
        "You must specify optional arguments after the required arguments (if any). You cannot\nspecify an optional argument before a required argument.",
        "If you are overloading a function or procedure, you cannot use an optional\nargument to distinguish between different signatures. For example, suppose that you create the following UDF that passes in\nno arguments:",
        "If you attempt to create a UDF with the same name that passes in an optional argument, the CREATE FUNCTION statement fails:",
        "As another example, suppose that you create a UDF that passes in a required INTEGER argument:",
        "If you attempt to create a UDF with the same name that passes in a required INTEGER argument and an optional argument, the CREATE\nFUNCTION statement fails:",
        "This also affects cases in which you use ALTER FUNCTION \u2026 RENAME or\nALTER PROCEDURE \u2026 RENAME to rename a function or procedure. If you want to rename a\nfunction or procedure, there cannot be an existing function with the same name and signature. Optional arguments do not\ndistinguish one signature from another.",
        "For example, suppose that you create a UDF named abc_udf that passes in a required INTEGER argument:",
        "Suppose that you create a UDF with a different name (def_udf) that passes in a required INTEGER argument and an optional\nargument:",
        "If you attempt to change the name of def_udf to abc_udf, an error occurs because there is already a UDF that has the\nsame name and the same types of required arguments:",
        "To call functions and procedures that have optional arguments, see:",
        "Calling a UDF that has optional arguments",
        "Specifying optional arguments",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}