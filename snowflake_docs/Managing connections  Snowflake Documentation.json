{
    "url": "https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-connect",
    "title": "Managing connections | Snowflake Documentation",
    "paragraphs": [
        "To execute statements against Snowflake, you first need to establish a connection. The Snowflake Node.js Driver lets you\nestablish connections as follows:",
        "Create a single connection",
        "Create a pool of connections",
        "Connect through a proxy",
        "Connect through an authenticated proxy",
        "Important",
        "Beginning with Snowflake version 8.24, network administrators have the option to require multi-factor authentication (MFA) for all connections to Snowflake. If your administrator decides to enable this feature, you must configure your client or driver to use MFA when connecting to Snowflake. For more information, see the following resources:",
        "8.24 release notes",
        "Multi-factor authentication (MFA)",
        "Troubleshooting service users authentication issues with Snowflake MFA Knowledge Base article",
        "To create a single connection to Snowflake:",
        "Call snowflake.createConnection to create a new Connection object, and pass in a JavaScript object that\nspecifies the connection options.",
        "Using the Connection object, call the connect method to establish a connection.",
        "Note",
        "If you set the authenticator option to EXTERNALBROWSER (in order to use\nbrowser-based SSO) or https://<okta_account_name>.okta.com\n(in order to use native SSO through Okta), call the connectAsync method, rather than\nthe connect method.",
        "To handle connection errors, pass in a callback function that has the following signature:",
        "where:",
        "err is a JavaScript Error object.",
        "conn is the current Connection object.",
        "If an error occurs during connection, the connect method passes an Error object to your callback function.\nYou can use this object in your callback function to get details about the error. If you need information about the current\nConnection object, you can use the conn argument passed to your callback function.",
        "The following example establishes a connection and uses a password for authentication. To use other authentication methods, see\nAuthentication options.",
        "When creating a connection, you can set the connection options as described\nin Options Reference.",
        "Before submitting Snowflake queries, you can use the connection.isValidAsync() method (in version 1.6.23 and later)\nto ensure the connection is up\nand ready to execute requests on Snowflake. The method returns true if the connection is ready or false otherwise.",
        "Instead of creating a connection each time your client application needs to access Snowflake, you can define a\ncache of Snowflake connections to reuse as needed. Connection pooling usually reduces the lag time to\nmake a connection. However, it can slow down client failover to an alternative DNS when a DNS problem occurs.",
        "To create a connection pool:",
        "Call snowflake.createPool(connectionOptions, poolOptions) to create a new ConnectionPool object, and\npass in two JavaScript objects that specify the connection options\nand pool options.",
        "Note",
        "The Snowflake Node.js Driver uses the open-source node-pool library for implementing connection pools. For information about\nthe supported poolOptions, see the description of the opts argument in the\nnode-pool library documentation.",
        "With the ConnectionPool object, call the use function to execute statements for a single connection\nin the connection pool.",
        "To handle connection errors, pass in a callback function that has the following signature:",
        "where:",
        "err is a JavaScript Error object.",
        "stmt is an object with information about the SQL statement that was executed, including the literal\ntext of the statement.",
        "rows is an array containing the \u201cresult set\u201d of the statement.",
        "If an error occurs while executing the statement, the connect method passes an Error object to your callback function.\nYou can use this object in your callback function to get details about the error.",
        "The following example creates a connection pool that supports a maximum of ten active connections. It uses a password\nfor authentication. To use other authentication methods, see Authentication options.",
        "The following example uses the connectionPool.use method to execute a SQL statement using the connections in the pool.\nThe clientConnection.execute method specifies the SQL statement to execute and defines a callback function.",
        "When creating a connection pool, you can set the connection options as described\nin Options Reference.",
        "With the default setting of the node-pool\u2019s evictionRunIntervalMillis option set to 0, idle connection eviction checks are not run. If you have a longer running application, this behavior can lead to terminated connections lingering around in the connection pool, which when the driver acquires them and tries to send a query over them to Snowflake, causes an error.",
        "To address this behavior in a long-running application, you could consider the following ways to handle it:",
        "Create the Snowflake ConnectionPool with an enabled evictor.",
        "You can add the evictionRunIntervalMillis option to the pool options, as shown in the following example:",
        "This example runs the evictor every minute and evicts any connections that are idle for more than one minute. You can also tweak numTestsPerEvictionRun (default: 3) to change the number of resources checked during each eviction run.",
        "See the node-pool library documentation < https://github.com/coopernurse/node-pool/blob/master/README.md> for details and more options.",
        "Keep existing connections alive in the pool",
        "If you need to keep a connection alive more frequently than every hour, you can add the following to the pool options:",
        "clientSessionKeepAlive: true",
        "clientSessionKeepAliveHeartbeatFrequency: n, where n is between 900 (15m) and 3600 (1h) seconds (default: 3600).",
        "The following example sends a keep-alive heartbeat every 15 minutes to keep the connection alive even if no other activity, such as a query from a client, occurs.",
        "You can also use the clientSessionKeepAlive option without using pooled connections.",
        "For more information about the session keep-alive, see Node.js options reference.",
        "You can connect to Snowflake through a proxy, by supplying the details as connection  options when creating a Connection object.",
        "The following example shows how to connect to a proxy using HTTP:",
        "Beginning with version 1.15.0, the Snowflake Node.js driver fully supports the HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environment variables in addition to their corresponding connection parameters.",
        "By default, the new useEnvProxy global configuration setting is set to true, which enables support for the environment variables.",
        "With the ability to set these proxies both in the Connection object and in the environment variables, the driver uses the following hierarchy to determine which values to use:",
        "If a proxy is defined in the Connection, it takes precedence. The driver ignores the HTTP_PROXY and HTTPS_PROXY environment variables.",
        "If the Connection does not set the proxy values, the driver uses the values in the HTTP_PROXY and HTTPS_PROXY environment variables if they are defined.",
        "If the useEnvProxy connection setting is set to false, the driver ignores HTTP_PROXY and HTTPS_PROXY environment variables if they are defined.",
        "If you want to disable support for proxy environment variables, you must disable it in the global configuration, as follows:",
        "Note",
        "The environmental variables are case-sensitive on Linux and MacOS. On Windows, they are not.",
        "If both the lower-case (https_proxy) and upper-case (HTTPS_PROXY) variants are defined for the same environment variable, the driver uses the value from the lower-case (https_proxy) variable.",
        "If only the upper-case (HTTPS_PROXY) variant is present, the driver use the upper-case variable\u2019s value.",
        "You can connect to Snowflake through an authenticated proxy by supplying authentication credentials as connection\noptions when creating a Connection object.",
        "Note",
        "Connecting through an authenticated proxy server is supported starting with version 1.6.4 of the Snowflake Node.js Driver.",
        "The following example shows how to connect to an authenticated proxy using HTTP:",
        "To connect to an authenticated proxy using HTTPS you must also provide the proxyProtocol connection property as shown below:",
        "After configuring your driver, you can evaluate and troubleshoot your network connectivity to Snowflake using SnowCD.",
        "You can use SnowCD during the initial configuration process and on-demand at any time to evaluate and troubleshoot your network connection to Snowflake.",
        "When the driver connects, Snowflake sends a certificate to confirm that the connection is to Snowflake rather than to\na host that is impersonating Snowflake. The driver sends that certificate to an OCSP (Online Certificate Status\nProtocol) server to verify that the certificate has not been revoked.",
        "If the driver cannot reach the OCSP server to verify the certificate, the driver can\n\u201cfail open\u201d or \u201cfail closed\u201d.",
        "A connection can be terminated by calling the connection.destroy() method. This immediately ends the session associated with the connection without waiting for running statements to complete:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}