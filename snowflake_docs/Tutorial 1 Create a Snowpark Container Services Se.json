{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark-container-services/tutorials/tutorial-1",
    "title": "Tutorial 1: Create a Snowpark Container Services Service | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Available to accounts in AWS and Microsoft Azure commercial regions, with some exceptions. For more information, see Available regions.",
        "After completing the common setup, you are ready to create a service. In this tutorial, you create a\nservice (named echo_service) that simply echoes back text that you provide as input. For example, if the input string is\n\u201cHello World,\u201d the service returns \u201cI said, Hello World.\u201d",
        "There are two parts to this tutorial:",
        "Part 1: Create and test a service. You download code provided for this tutorial and follow step-by-step instructions:",
        "Download the service code for this tutorial.",
        "Build a Docker image for Snowpark Container Services, and upload the image to a repository in your account.",
        "Create a service by providing the service specification file and the compute pool in which to run the service.",
        "Create a service function to communicate with the service.",
        "Use the service. You send echo requests to the service and verify the response.",
        "Part 2: Understand the service. This section provides an overview of the service code and highlights how different\ncomponents collaborate.",
        "Code (a Python application) is provided to create the Echo service.",
        "Download SnowparkContainerServices-Tutorials.zip.",
        "Unzip the content, which includes one directory for each tutorial. The Tutorial-1 directory has the following files:",
        "Dockerfile",
        "echo_service.py",
        "templates/basic_ui.html",
        "Build an image for the linux/amd64 platform that Snowpark Container Services supports, and then upload the image to the image\nrepository in your account (see Common Setup).",
        "You will need information about the repository (the repository URL and the registry hostname) before you can build and upload the image. For more information, see\nRegistry and Repositories.",
        "Get information about the repository",
        "To get the repository URL, execute the SHOW IMAGE REPOSITORIES SQL command.",
        "The repository_url column in the output provides the URL. An example is shown:",
        "The host name in the repository URL is the registry host name. An example is shown:",
        "Build image and upload it to the repository",
        "Open a terminal window, and change to the directory containing the files you unzipped.",
        "To build a Docker image, execute the following docker build command using the Docker CLI.\nNote the command specifies current working directory (.)\nas the PATH for files to use for building the image.",
        "For image_name, use my_echo_service_image:latest.",
        "Example",
        "Upload the image to the repository in your Snowflake account. In order for Docker to upload an image on your behalf to your repository,\nyou must first authenticate Docker with the registry.",
        "To authenticate Docker with the image registry, execute the following command.",
        "For username, specify your Snowflake username. Docker will prompt you for your password.",
        "To upload the image execute the following command:",
        "Example",
        "In this section you create a service and also create a service function to communicate with the service.",
        "To create a service, you need the following:",
        "A compute pool. Snowflake runs your service in the specified compute pool. You created\na compute pool as part of the common setup.",
        "A service specification. This specification provides Snowflake with the information\nneeded to configure and run your service. For more information, see Snowpark Container Services: Working with services. In this tutorial, you provide the specification inline, in CREATE SERVICE command. You can also save the specification to a file in your Snowflake stage and provide file information in the CREATE SERVICE command as shown in Tutorial 2.",
        "A service function is one of the methods available to communicate with your service. A service function is a user-defined\nfunction (UDF) that you associate with the service endpoint. When the service function is executed, it sends a request to the\nservice endpoint and receives a response.",
        "Verify that the compute pool is ready and that you are in the right context to create the service.",
        "Previously you set the context in the Common Setup step. To ensure you are in the right context for the SQL statements in this step, execute the following:",
        "To ensure the compute pool you created in the  common setup is ready, execute DESCRIBE COMPUTE POOL, and verify that the state is ACTIVE or IDLE. If the state is STARTING, you need to wait until the state changes to either  ACTIVE or IDLE.",
        "To create the service, execute the following command using test_role:",
        "Note",
        "If a service with that name already exists, use the DROP SERVICE command to delete the previously created service, and then\ncreate this service.",
        "Execute the following SQL commands to get detailed information about the service you just created. For more information, see\nSnowpark Container Services: Working with services.",
        "To list services in your account, execute the SHOW SERVICES command:",
        "To get information about your service including the service status, execute the DESCRIBE SERVICE command.",
        "Verify the status column shows the service status as RUNNING; if the status is PENDING, it indicates the service is still starting. To investigate why the service is not RUNNING, execute the SHOW SERVICE CONTAINERS IN SERVICE command and review the status of individual containers:",
        "To create a service function, execute the following command:",
        "Note the following:",
        "The SERVICE property associates the UDF with the echo_service service.",
        "The ENDPOINT property associates the UDF with the echoendpoint endpoint within the service.",
        "AS \u2018/echo\u2019 specifies the HTTP path to the Echo server. You can find this path in the service code (echo_service.py).",
        "First, setup the context for the SQL statements in this section, execute the following:",
        "Now you can communicate with the Echo service.",
        "Using a service function: You can invoke the service function in a query.\nThe example service function (my_echo_udf) can take either a single string or a list of strings as input.",
        "Example 1.1: Pass a single string",
        "To call the my_echo_udf service function, execute the following\nSELECT statement, passing one input string ('hello'):",
        "Snowflake sends a POST request to the service endpoint (echoendpoint). Upon receiving the request, the service echos the input string in the response.",
        "Example 1.2: Pass a list of strings",
        "When you pass a list of strings to the service function, Snowflake batches these input strings and sends a series of POST\nrequests to the service. After the service processes all the strings, Snowflake combines the results and returns them.",
        "The following example passes a table column as input to the service function.",
        "Create a table with multiple strings:",
        "Verify that the table was created:",
        "To call the service function, execute the following SELECT statement, passing table rows as input:",
        "Output:",
        "Using a web browser: The service exposes the endpoint publicly (see the inline specification provided in the CREATE SERVICE command). Therefore, you can log in to a web UI the service exposes to the internet, and then send requests to the service from a web browser.",
        "Find the URL of the public endpoint the service exposes:",
        "The ingress_url column in the response provides the URL.",
        "Example",
        "Append /ui to the endpoint URL, and paste it in the web browser. This causes the service to execute the ui() function (see echo_service.py).",
        "Note that the first time you access the endpoint URL, you will be asked to log in to Snowflake. For this test, use the same user that you used to create the service to ensure the user has the necessary privileges.",
        "Enter the string \u201cHello\u201d in the Input box, and press Return.",
        "Note",
        "You can access the public endpoint programmatically. For sample code, see Public endpoint access from outside Snowflake and authentication. Note that you need to append /ui to the endpoint URL in the code so that Snowflake can route the request to the ui() function in the service code.",
        "In the preceding section, you tested the Echo service using a web browser. In the browser, you accessed the public endpoint (ingress endpoint) and sent requests using the web UI that the service exposed. In this section you test the same public endpoint programmatically.",
        "The example uses key pair authentication. Using the key pair you provide, the sample code first generates a JSON Web Token (JWT)  and then exchanges the token with Snowflake for an OAuth token. The code then uses the OAuth token for authentication when communicating with the Echo service public endpoint.",
        "Make sure you have the following information:",
        "Ingress URL of the public endpoint. Execute the SHOW ENDPOINTS IN SERVICE command to get the URL:",
        "Your Snowflake account name. For more information, see the Common Setup: Verify that you are ready to continue.",
        "Your Snowflake account URL: It is <acctname>.snowflakecomputing.com.",
        "User name in the Snowflake account. This is the user you chose in Common Setup: Create Snowflake objects. You login to Snowflake as this user and test the programmatic access.",
        "Role name: You created a role (test_role) as part of the common setup. The user assumes this role to perform actions.",
        "Follow the steps to communicate with the Echo service programmatically. Using the Python code provided, you send\nrequests to the public endpoint that the Echo service exposes.",
        "At a command prompt, create a directory and navigate to it.",
        "Configure key pair authentication for the user.",
        "Generate a key pair:",
        "Generate a private key. To simplify the exercise steps, you generate an unencrypted private key. You can also use an encrypted private key but it will require you to enter the password.",
        "Generate a public key (rsa_key.pub) by referencing the private key you created.",
        "Verify you have the private key and public key generated in the directory.",
        "Assign the public key to the user you are using to test the programmatic access. This lets the user specify the key for authentication.",
        "Save the provided sample code in Python files.",
        "Save the following code in generateJWT.py.",
        "Save the following code in access-via-keypair.py.",
        "Execute the access-via-keypair.py Python code to make the ingress call to the Echo service public endpoint.",
        "For more information about account-identifier, see Account identifiers.",
        "The code first converts the provided key pair into a JWT token. It then sends the JWT token to Snowflake to obtain an OAuth token. Finally, the code uses the OAuth token to connect to Snowflake and access the public endpoint. Specifically, the code does the following:",
        "Calls the _get_token(args) function to generate a JWT token from the key pair you provide. The function implementation is shown:",
        "JWTGenerator is a helper class that is provided to you. Note the following about the parameters you provide when creating this object:",
        "args.account and the args.user parameters: A JWT token has several fields\n(see token format), iss is one of the fields. This field value includes\nthe Snowflake account name and a user name. Therefore, you provide these values as parameters.",
        "The two timedelta parameters provide the following information:",
        "lifetime specifies the number of minutes during which the key will be valid (60 minutes).",
        "renewal_delay specifies the number of minutes from now after which the JWT generator should renew the JWT.",
        "Calls the token_exchange() function to connect to Snowflake and exchange the JWT token for an OAuth token.",
        "The preceding code constructs a JSON setting the scope for the OAuth token, the public endpoint that can be accessed using the specified role. This code then makes a POST request to Snowflake passing the JSON to exchange the JWT token\nfor an OAuth token (see Token exchange) as shown:",
        "The code then calls connect_to_spcs() function to connect to the public endpoint of the Echo service. It provides the URL (https://<ingress-URL>/ui) of the endpoint and the OAuth token for authentication.",
        "The url is the spcs_url you provided to the program and the token is the OAuth token.",
        "The Echo service in this example serves an HTML page (as explained in the preceding section).\nThis sample code simply prints the HTML in the response.",
        "If you do not plan to continue with Tutorial 2 or Tutorial 3, you should remove billable\nresources you created. For more information, see Step 5 in Tutorial 3.",
        "This section covers the following topics:",
        "Examining the tutorial 1 code: Review the code files that implement the Echo service.",
        "Understanding the service function: This section explains how the service function in this tutorial is linked\nwith the service.",
        "Building and testing an image locally. The section provides an explanation of how you can locally test the\nDocker image before uploading it to a repository in your Snowflake account.",
        "The zip file you downloaded in Step 1 includes the following files:",
        "Dockerfile",
        "echo_service.py",
        "templates/basic_ui.html",
        "You also use service specification when creating the service. The following section explains how these code components work together to create the service.",
        "This Python file contains the code that implements a minimal HTTP server that returns (echoes back) input text. The code\nprimarily performs two tasks: handling echo requests from Snowflake service functions, and providing a web user interface (UI)\nfor submitting echo requests.",
        "In the code:",
        "The echo function enables a Snowflake service function to communicate with the service. This function specifies the\n@app.post() decoration as shown:",
        "When the echo server receives your HTTP POST request with the /echo path, the server routes the request to this\nfunction. The function executes and echoes back the strings from the request body in the response.",
        "To support communication from a Snowflake service function, this server implements the external functions. That is, the\nserver implementation follows a certain input/output data format in order to serve a SQL function, and this is the same\ninput/output data format used by\nExternal Functions.",
        "The ui function section of the code displays a web form and handles echo requests submitted from the web form. This\nfunction uses the @app.route() decorator to specify that requests for /ui are handled by this function:",
        "The Echo service exposes the echoendpoint endpoint publicly (see service specification), enabling communication with\nthe service over the web. When you load the URL of the public endpoint with /ui appended in your browser, the browser sends\nan HTTP GET request for this path, and the server routes the request to this function. The function executes and returns a\nsimple HTML form for the user to enter a string in.",
        "After the user enters a string and submits the form, the browser sends an HTTP post request for this path, and the server\nroutes the request to this same function. The function executes and returns an HTTP response containing the original string.",
        "The readiness_probe function uses the @app.get() decorator to specify that requests for /healthcheck\nare handled by this function:",
        "This function enables Snowflake to check the readiness of the service. When the container starts, Snowflake wants to confirm\nthat the application is working and that the service is ready to serve the requests. Snowflake sends an HTTP GET request with\nthis path (as a health probe, readiness probe) to ensure that only healthy containers serve traffic. The function can do\nwhatever you want.",
        "The get_logger function helps set up logging.",
        "This file contains all the commands to build an image using Docker.",
        "The Dockerfile contains instructions to install the Flask library in the Docker container. The code in echo_service.py\nrelies on the Flask library to handle HTTP requests.",
        "The Echo service exposes the echoendpoint endpoint publicly (see service specification), enabling communication with the\nservice over the web. When you load the public endpoint URL with /ui appended in your browser, the Echo service displays\nthis form. You can enter a string in the form and submit the form, and the service returns the string in an HTTP response.",
        "Snowflake uses information you provide in this specification to configure and run your service.",
        "In the service specification:",
        "The containers.image specifies the image for Snowflake to start a container.",
        "The optional endpoints field specifies the endpoint the service exposes.",
        "The name specifies a user-friendly name for the TCP network port the container is listening on. You use this\nuser-friendly endpoint name to send requests to the corresponding port. Note that the env.SERVER_PORT controls this\nport number.",
        "The endpoint is also configured as public. This allows traffic to this endpoint from the public web.",
        "The optional containers.env field is added to illustrate how you might override environment variables that Snowflake\npasses to all processes in your container. For example, the service code (echo_service.py) reads the environment\nvariables with default values as shown:",
        "It works as follows:",
        "When the Echo service receives an HTTP POST request with a string (e.g., \u201cHello\u201d) in the request body, the service returns\n\u201cI said Hello\u201d by default. The code uses the CHARACTER_NAME environment variable to determine the word before\n\u201csaid.\u201d By default, CHARACTER_NAME is set to \u201cI.\u201d",
        "You can overwrite the CHARACTER_NAME default value in the service specification. For example, if you set the value to \u201cBob,\u201d\nthe Echo service returns a \u201cBob said Hello\u201d response.",
        "Similarly, the service specification overrides the port (SERVER_PORT) that the service listens on to 8000, overriding the\ndefault port 8080.",
        "The readinessProbe field identifies the port and path that Snowflake can use to send an  HTTP GET\nrequest to the readiness probe to verify that the service is ready to handle traffic.",
        "The service code (echo_python.py) implements the readiness probe as follows:",
        "Therefore, the specification file includes the container.readinessProbe field accordingly.",
        "For more information about service specifications, see Service specification reference.",
        "A service function is one of the methods of communicating with your service (see\nUsing a service). A service function is a user-defined function (UDF) that you associate\nwith a service endpoint. When the service function is executed, it sends a request to the associated service endpoint and\nreceives a response.",
        "You create the following service function by executing the CREATE FUNCTION command with the following parameters:",
        "Note the following:",
        "The my_echo_udf function takes a string as input and returns a string.",
        "The SERVICE property identifies the service (echo_service), and the ENDPOINT property identifies the user-friendly\nendpoint name (echoendpoint).",
        "The AS \u2018/echo\u2019 specifies the path for the service. In echo_service.py, the @app.post decorator associates this\npath with the echo function.",
        "This function connects with the specific ENDPOINT of the specified SERVICE. When you invoke this function, Snowflake sends a\nrequest to the /echo path inside the service container.",
        "You can test the Docker image locally before uploading it to a repository in your Snowflake account. In local testing, your\ncontainer runs standalone (it is not a service that Snowflake runs).",
        "To test the Tutorial 1 Docker image:",
        "To create a Docker image, in the Docker CLI, execute the following command:",
        "To launch your code, execute the following command:",
        "Send an echo request to the service using one of the following methods:",
        "Using the cURL command:",
        "In another terminal window, using cURL, send the following POST request to port 8080:",
        "Note that the request body includes two strings. This cURL command sends a POST request to port 8080 on which the service\nis listening. The 0 in the data is the index of the input string in the list. The Echo service echoes the input strings\nin response as shown:",
        "Using a web browser:",
        "In your browser, on the same computer, open http://localhost:8080/ui.",
        "This sends a GET request to port 8080, which the service is listening on. The service executes the ui()\nfunction, which renders a HTML form as shown:",
        "Enter the string \u201cHello\u201d in the Input box, and press Return.",
        "You can now test the Tutorial 2 that executes a job.",
        "Was this page helpful?"
    ]
}