{
    "url": "https://docs.snowflake.com/en/developer-guide/stored-procedure/python/procedure-python-profiler",
    "title": "Profiling Python procedure handler code | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "The Python profiler is in preview and is available to all accounts.",
        "You can discover how much time or memory was spent executing your handler code by using the built-in code profiler. The profiler generates\ninformation describing how much time or memory was spent executing each line of the procedure handler.",
        "Using the profiler, you can generate reports that focus on one of the following at a time:",
        "Amount of time per line, in which the report shows the number of times a line was executed, how long the execution took, and so on.",
        "Amount of memory usage per line, in which the report shows the amount of memory consumed per line.",
        "The profiler saves the generated report to a Snowflake internal user stage you specify.\nYou can read the profiler output using the GET_PYTHON_PROFILER_OUTPUT (SNOWFLAKE.CORE)\nsystem function.",
        "Note",
        "Profiling introduces performance overhead on Python execution and can affect the performance of the query.\nIt\u2019s intended for development, testing, and troubleshooting and should not be enabled on continuous production workloads.",
        "Setting the session-level parameter does not trigger privilege check, but when a stored procedure is executed with ACTIVE_PYTHON_PROFILER\nsession parameter to either LINE or MEMORY, Snowflake will check the following privileges.",
        "You must have read/write privileges on the profiling output stage.",
        "If the profiled stored procedure is a caller\u2019s rights stored procedure,\nyou must use a role with USAGE privilege on the stored procedure.",
        "If the profiled stored procedure is an owner\u2019s rights stored procedure,\nyou must use a role with OWNERSHIP privilege on the stored procedure.",
        "Only stored procedures are supported. UDFs support is not available yet.",
        "Recursive profiling is not supported. Only top-level functions of the specified modules are profiled. Functions defined inside\nfunctions are not.",
        "Support for profiling stored procedures created on the client-side via the snowflake.snowpark API is not supported (for example,\nstored procedures created from Session.sproc.register).",
        "Python functions running in parallel through joblib will not be profiled.",
        "System defined stored procedures cannot be profiled. They will produce no output.",
        "Once you\u2019ve set up the profiler for use, you can use it simply by calling the stored procedure to generate profiler output. After the\nprocedure finishes executing, the profiler\u2019s output is written to a file on the stage you specify. You can fetch the profiler output\nusing a system function.",
        "Follow these steps to set up and use the profiler:",
        "Specify the Snowflake stage where profile output should be written.",
        "Set the parameter PYTHON_PROFILER_TARGET_STAGE to the stage\u2019s fully-qualified name.",
        "Enable the profiler and specify what the profile should focus on.",
        "Set the ACTIVE_PYTHON_PROFILER session parameter.",
        "Call the stored procedure.",
        "After the profiler is enabled, call your stored procedure.",
        "View profiling output.",
        "At the end of execution, the profiling output will be uploaded as a file to the output stage with the naming pattern of <query_id>_<sproc_name>.lprof\nor <query_id>_<sproc_name>.mprof.",
        "Before running the profiler, you must specify a stage to which its report will be saved. To specify the stage, set the\nPROFILER_TARGET_STAGE parameter to the stage\u2019s fully-qualified name.",
        "Use a temporary stage to store output only for the duration of the session.",
        "Use a permanent stage to preserve the profiler output outside of the scope of a session.",
        "Code in the following example creates a temporary profiler_output stage to receive the profiler output.",
        "Set the ACTIVE_PYTHON_PROFILER session parameter to a value specifying which kind of profile report you want to generate.",
        "To have the profile focus on line use activity, set the parameter to the LINE value (case insensitive), as shown below:",
        "To have the profile focus on memory use activity, set the parameter to the MEMORY value (case insensitive), as shown below:",
        "After the profiler is enabled, call your stored procedure.",
        "By default, the profiler will profile methods that are defined in the user\u2019s module. You can register other modules to profile as well. For more information,\nsee Profile Additional Modules.",
        "At the end of execution, the profiling output will be uploaded as a file to the output stage with the naming pattern of <query_id>_<sproc_name>.lprof\nor <query_id>_<sproc_name>.mprof.",
        "The output can be accessed via a system function GET_PYTHON_PROFILER_OUTPUT\nin the SNOWFLAKE database.",
        "The format of the system function\u2019s signature is as follows:",
        "Replace <query_id> with the query ID of the stored procedure query for which profiling was enabled.",
        "You can also directly access the output file on the output stage. For more information, see Viewing staged files.",
        "Note",
        "The system function looks for profiling output files from the stage specified with the PYTHON_PROFILER_TARGET_STAGE parameter.",
        "The profiling output for child stored procedures is not appended into the parent procedure output.\nTo view the output for a child stored procedure, call the system function on the child procedure query ID explicitly.",
        "You can include for profiling modules that aren\u2019t included by default. To include additional modules for profiling, set the\nPYTHON_PROFILER_MODULES parameter to the names of modules you want to include.",
        "By default, methods defined in the your module will be profiled. These methods include the following:",
        "The handler method",
        "Methods defined in the module",
        "Methods imported from packages or other modules.",
        "In the example below, handler, helper and some_method will all be profiled by default.",
        "You can use the PYTHON_PROFILER_MODULES parameter to include for profiling modules that wouldn\u2019t be included by default. When\nyou include a module in this way, all functions used from that module will be included in the profiler output. By default, the\nPYTHON_PROFILER_MODULES parameter value is an empty string (''), in which the profile would profile only inline handler code, if\nany.",
        "To include modules for profiling, specify their names as the parameter\u2019s value in a comma-separated list, as illustrated below.",
        "To profile handler code that is staged rather than inline \u2014 including helper functions \u2014 you must explicitly specify the staged handler\nfor profiling using the PYTHON_PROFILER_MODULES parameter.",
        "By default, the profiler doesn\u2019t profile handler code that is staged, rather than inline \u2014\nthat is, when the handler module is specified with the IMPORTS clause.",
        "For example, by default this procedure will generate no detailed profiling output.",
        "To include staged code for profiling, specify staged module names as the PYTHON_PROFILER_MODULES parameter\u2019s value in a comma-separated\nlist, as illustrated below.",
        "Code in this example illustrates how to use the profiler to generate and retrieve a report of line usage.",
        "The line profiler output will look like this:",
        "The memory profiler output will look like this:",
        "Was this page helpful?",
        "On this page"
    ]
}