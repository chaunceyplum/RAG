{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-ml/model-registry/model-management",
    "title": "Managing models with the Snowflake Model Registry | Snowflake Documentation",
    "paragraphs": [
        "The Snowflake Model Registry simplifies the process of bringing a machine learning model from development to production.\nA well-organized model registry serves as the central hub and single source for all models, their metrics, and their\nmetadata. Logging your model in the registry is the first and most significant step in your Snowflake ML Ops journey,\nbringing your machine learning operations under the control, security, and governance Snowflake is known for.",
        "The Snowflake Model Registry is flexible enough to address a wide range of ML model management use cases and scenarios.\nThis topic offers guidance on how best to use the registry to seamlessly manage models from development to production,\nincluding:",
        "How to control access to models so that the right group of users or roles con perform various operations.",
        "How to query the metrics and other metadata of all your models.",
        "How to manage the lifecycle of a model from development to production.",
        "How to roll out a new version of a model without any changes to production code.",
        "Because machine learning models are first-class objects in Snowflake, you\ncan use all standard Snowflake governance capabilities with them, including role-based access control and the\ninformation schema.",
        "Model objects have two privileges: OWNERSHIP and USAGE.",
        "Privilege",
        "Description",
        "OWNERSHIP",
        "Full control of the model, including managing model versions, accessing artifacts, and updating model metadata.\nOnly one role can own the model, but you can grant that role to multiple\nusers or to other roles.",
        "USAGE",
        "Read-only access to the model, allowing inference (prediction) and use of the SHOW MODELS and SHOW VERSIONS IN MODEL\ncommands. Roles with only USAGE cannot access the model code, weights, or other artifacts.",
        "The owner of a model can grant access to any role as follows:",
        "Like all Snowflake objects, models are represented in a view in the Snowflake Information Schema. The view for\nmodels and their versions is INFORMATION_SCHEMA.MODEL_VERSIONS.\nModel version information is a superset of the information for models, so there is no separate MODEL view.",
        "Through this view, you can query the registry itself. For example, assume that you maintain an accuracy metric, adding\nit to each model version using SQL like the following.",
        "Note",
        "You can also set metrics with the registry\u2019s Python API.",
        "After you have added this metric to all versions of your models, you can use a query like the one here to retrieve information\nabout all model objects and list them in order of highest accuracy to lowest.",
        "You can create more complex queries that join to other information schema views or other tables for more detailed\nanalysis.",
        "To meet the diverse needs of small and large enterprises, the Snowflake Model Registry provides four simple, yet\npowerful, schemes for managing the lifecycle of a model from development to production. Choose the one that works\nbest for you based on the governance structure you prefer.",
        "Using the default version",
        "Using aliases",
        "Using tags",
        "Using multiple schemas",
        "Models are versioned, and one version is designated as the default version. You can treat the default version of a model\nas the production version by convention; production code only ever calls the default version of the model.",
        "In this scenario, you promote a model version to production simply by setting it as the default, perhaps after it meets\nyour model scoring or performance evaluation workflow requirements. This is the simplest way to control which version of\na model is used in production.",
        "Use this method when:",
        "The owner of the model has the authority to decide which version to use in production.",
        "You don\u2019t need to track any lifecycle stages besides development/production.",
        "The model owner grants usage on the model to a production role.",
        "When the model is initially logged, its sole version is the default, and that version is ready to be used.",
        "Important",
        "A model must always have a default version. Under this scheme, then, you can\u2019t designate a model as not yet having a\nproduction version. If you need to prevent models from being used before they\u2019re ready, you might log an initial\nversion that immediately throws an error. This version would remain the default until some other version is ready.",
        "When a new version, called new_version in the SQL below, has cleared the quality bar, designate it as the\ndefault to mark it as the production version.",
        "In production, call the model directly to use the default version.",
        "To use a pre-release version, call the desired model version by name:",
        "Many organizations manage model lifecycles using multiple stages, such as development, canary, staging, production, and\ndeprecation. Model versions can have aliases, user-defined\nlabels or tags that you can exclusively attach to any of a model\u2019s versions. You can you use aliases to represent the\nlifecycle stages your organization uses.",
        "Use this method when:",
        "The model owner has the authority to make model lifecycle stage decisions.",
        "You want to track multiple lifecycle stages, not just development/production.",
        "The example below uses two preproduction stages (alpha and beta) and one production stage (production).",
        "The model owner grants usage on the model to a production role.",
        "When you log the model, set the production alias to point to the first version, here named v1.",
        "Initially, the model has no designated alpha or beta version. When you add a new version, initially designate it\nalpha.",
        "Later, to promote the nev version to beta:",
        "When a new version of a model has passed muster, remove the production alias from the current production version,\nhere v1, and apply it to the new version, here v2.",
        "Call the production version of the model through the production alias.",
        "To use pre-release versions, call the model through the alpha or beta alias instead. For example, to test the\nalpha version:",
        "The default version and\nalias lifecycle management schemes already described assume that the\nmodel owner can manage model lifecycles. In many organizations, though, this responsibility rests with a separate production\nengineering role, and data scientists don\u2019t have the authority to promote model versions to production. Because models\nare first-class Snowflake objects, you can apply tags to them for this purpose. Tags are\nsecurable by role-based access control and are suitable for this separation of responsibility.",
        "Use this method when:",
        "A role other than the model owner determines when to promote a model version from one lifecycle stage to the next.",
        "The model owner grants usage on the model to a production role.",
        "The production role also needs the ability to see the tags on a model and to read the tag values. Here, the\nformer is achieved by granting the broad APPLY TAG ON ACCOUNT privilege to the role.  The latter is achieved\nby granting USAGE on the schema.",
        "To create tags, a role needs the CREATE TAG ON SCHEMA privilege.",
        "Create a tag named live_version in a schema owned by prod_role to hold the name of the current production\nversion of the model.",
        "Note",
        "Here, the tag is created in the production schema, as it is managed by the production role. When using it in other\nschemas, use its fully-qualified name.",
        "To make a model available in production, apply the live_version tag to the model, specifying the initial production\nversion as the value of the tag.",
        "When a new version of the model is ready, update the live_version tag with the name of that version.",
        "Call the production version of the model by retrieving the value of the live_version tag from the model using\nSYSTEM$GET_TAG, then calling the model version that has that name. The following SQL\nshows this two-step process.",
        "Note",
        "The SQL domain of models, for use with SYSTEM$GET_TAG, is MODULE.",
        "For pre-release versions, you can use the same method with additional tags (such as alpha_version and\nbeta_version). In many organizations, however, only promotion to production is managed by engineering, and it\u2019s\nreasonable to manage pre-release stages using the simpler alias\nmethod.",
        "You can use multiple schemas to manage lifecycle stages. With this approach, code exclusively calls models in a\ndesignated production schema, which holds only models being used in production. Models in other stages are stored\nelsewhere. When a model version is ready for production, it is copied to the production schema. Because the production\nmodels are separate objects with their own access control, you can protect them from accidental modification while\nmodel developers have free rein over models in development stages.",
        "Use this method when:",
        "A role other than the owner of the model promotes models to production.",
        "You want strong separation between development and production environments.",
        "Create a role (called, for example, ml_admin) that has access to both the development and production schemas. In\nthis example, access to these two environments is encapsulated in existing roles named model_owner and\nprod_role, which contain privileges like USAGE and CREATE MODEL on the development and production schemas,\nrespectively. The new ml_admin role gets the privileges it needs by being granted those roles.",
        "Use the ml_admin role to copy model versions from the development schema to the production schema, performing the\ninitial copy using CREATE MODEL \u2026 FROM MODEL to copy just the desired version. You can use the same identifier for the\nproduction version or establish a different numbering scheme for production. Here, development version V12 becomes\nproduction version V1.",
        "After creating the initial production version of the model, grant USAGE and any other necessary privileges to the roles\nthat will use it in production.",
        "When a new version of the model is ready for production, copy just the new model version to the production environment.\nHere, development version V24 becomes production version V2. V2 is then set as the default version.",
        "Tip",
        "It\u2019s a good idea to keep previous production versions in case you need to roll back, which you can do by\nsetting the default version to a previous version, as shown below.",
        "Establish a policy around how many old versions to keep and how long to keep them.",
        "In production, call the default version of the model.",
        "To manage pre-release versions, you could use additional schemas, promoting versions from one stage to the next by\ncopying them from one schema to the next. If the owner of the model can maange pre-production stages, you could\nuse a simpler method such as aliases to manage these versions. Using\nadditional schemas still may be useful to segregate multiple pre-production environments, such as development and\ntesting, when one or more of these stages is maneged by another role.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}