{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/grant-privilege",
    "title": "GRANT <privileges> | Snowflake Documentation",
    "paragraphs": [
        "Grants one or more access privileges on a securable object to a role or database role. The privileges that can be granted are object-specific.",
        "For information on granting privileges on securable objects to a share, see GRANT <privilege> \u2026 TO SHARE.",
        "The privileges that can be granted to roles are grouped into the following categories:",
        "Global privileges.",
        "Privileges for account objects, such as resource monitors, virtual warehouses, and databases.",
        "Privileges for schemas.",
        "Privileges for schema objects, such as tables, views, stages, file formats, UDFs, and sequences.",
        "The privileges that can be granted to database roles are grouped into the following categories:",
        "Privileges for the database that contains the database role.",
        "Privileges for schemas in the database that contains the database role.",
        "Privileges for schema objects, such as tables, views, stages, file formats, UDFs, and sequences in the database that contains the\ndatabase role.",
        "For more details about roles and securable objects, see Overview of Access Control.",
        "GRANT OWNERSHIP , GRANT <privilege> \u2026 TO SHARE",
        "REVOKE <privileges>",
        "Account roles:",
        "Database roles:",
        "Where:",
        "For more details about the privileges supported for each object type, see Access control privileges.",
        "Specifies the identifier for the object on which the privileges are granted.",
        "Specifies the type of object for schema-level objects.",
        "AGGREGATION POLICY",
        "ALERT",
        "AUTHENTICATION POLICY",
        "CORTEX SEARCH SERVICE",
        "DATA METRIC FUNCTION",
        "DYNAMIC TABLE",
        "EVENT TABLE",
        "EXTERNAL TABLE",
        "FILE FORMAT",
        "FUNCTION",
        "GIT REPOSITORY",
        "HYBRID TABLE",
        "IMAGE REPOSITORY",
        "ICEBERG TABLE",
        "MASKING POLICY",
        "MATERIALIZED VIEW",
        "MODEL",
        "NETWORK RULE",
        "NOTEBOOK",
        "PACKAGES POLICY",
        "PASSWORD POLICY",
        "PIPE",
        "PRIVACY POLICY",
        "PROCEDURE",
        "PROJECTION POLICY",
        "ROW ACCESS POLICY",
        "SECRET",
        "SERVICE",
        "SESSION POLICY",
        "SEQUENCE",
        "SNAPSHOT",
        "STAGE",
        "STREAM",
        "STREAMLIT",
        "TABLE",
        "TAG",
        "TASK",
        "VIEW",
        "Plural form of object_type (e.g. TABLES, VIEWS).",
        "Note that bulk grants on pipes are not allowed.",
        "Specifies the identifier for the recipient role (i.e. the role to which the privileges are granted).",
        "Specifies the identifier for the recipient database role (i.e. the role to which the privileges are granted). If the identifier is not\nfully qualified in the form of db_name.database_role_name, the command looks for the database role in the current database\nfor the session.",
        "All privileges are limited to the database that contains the database role, as well as other objects in the same database.",
        "Specifies that privileges are granted on new (i.e. future) database or schema objects of a specified type (e.g. tables or views) rather\nthan existing objects. Note that future grants can be revoked at any time using REVOKE <privileges> with the\nON FUTURE keywords; any privileges granted on existing objects are retained. For more information about future grants, see\nFuture Grants on Database or Schema Objects in this topic.",
        "If specified, allows the recipient role to grant the privileges to other roles.",
        "Default: No value, which means the recipient role cannot grant the privileges to other roles.",
        "Note",
        "The WITH GRANT OPTION parameter does not support the IMPORTED PRIVILEGES privilege. For more information, see\nGranting privileges on an imported database.",
        "Privileges cannot be granted or revoked directly on any class. You can, however, create an instance of a class and\ngrant instance roles to an\naccount role. Grant the CREATE <class_name> privilege on the schema to enable a role to create an instance of a\nclass.",
        "To grant the OWNERSHIP privilege on an object (or all objects of a specified type in a schema) to a role, transferring ownership of the\nobject from one role to another role, use GRANT OWNERSHIP instead. The GRANT OWNERSHIP command has a different\nsyntax.",
        "Multiple privileges can be specified for the same object type in a single GRANT statement (with each privilege separated by commas), or\nthe special ALL [ PRIVILEGES ] keyword can be used to grant all applicable privileges to the specified object type. Note,\nhowever, that only privileges held and grantable by the role executing the GRANT command are actually granted to the target role. A\nwarning message is returned for any privileges that could not be granted.",
        "You cannot specify this keyword for tags.",
        "This keyword does not grant privileges on a class if you try to grant ALL privileges on a schema. To allow a role to create\ninstances of a particular class, grant the CREATE privilege directly as shown in the Classes example.",
        "Privileges granted to a particular role are automatically inherited by any other roles to which the role is granted, as well as any other\nhigher-level roles within the role hierarchy. For more details, see Overview of Access Control.",
        "For databases, the IMPORTED PRIVILEGES privilege only applies to shared databases (i.e. databases created from a share). For more details,\nsee Consume imported data. Note that the IMPORTED PRIVILEGES privilege cannot be granted to a database role.",
        "For schemas and objects in schemas, an ALL object_type_plural in container option is provided to grant privileges on all\nobjects of the same type within the container (i.e. database or schema). This is a convenience option; internally, the command is expanded\ninto a series of individual GRANT commands on each object. Only objects that currently exist within the container are affected.",
        "However, note that, in the Snowflake model, bulk granting of privileges is not a recommended practice. Instead, Snowflake recommends\ncreating a shared role and using the role to create objects that are automatically accessible to all users who have been granted the role.",
        "You cannot specify ALL TAGS or ALL MASKING POLICIES.",
        "In managed access schemas:",
        "The OWNERSHIP privilege on objects can only be transferred to a subordinate role of the schema owner.",
        "For stages:",
        "USAGE only applies to external stages.",
        "READ | WRITE only applies to internal stages. In addition, to grant the WRITE privilege on an internal stage, the READ privilege must\nfirst be granted on the stage.",
        "For more details about external and internal stages, see CREATE STAGE.",
        "When granting privileges on an individual UDF or stored procedure, you must specify the data types of the arguments, if any,\nusing the syntax shown below:",
        "Snowflake uses argument data types to resolve UDFs or stored procedures that have the same name within a schema. For more\ninformation, see Overloading procedures and functions.",
        "For dynamic tables, the receiving role must be granted the USAGE privilege on the database and schema that contains the dynamic table, and\non the warehouse used to refresh the table. For more information, see Dynamic table access control.",
        "In general, a role with any one of the following sets of privileges can grant privileges on an object to other roles:",
        "The global MANAGE GRANTS privilege.",
        "Only the SECURITYADMIN and ACCOUNTADMIN system roles have the MANAGE GRANTS privilege; however, the privilege can be granted\nto custom roles.",
        "The OWNERSHIP privilege on the object. When granting privileges on schema objects (e.g. tables and views), the role must\nalso have the USAGE privilege on the parent database and schema.",
        "If a privilege was granted to a role with the WITH GRANT OPTION parameter included in the\nGRANT <privileges> \u2026 TO ROLE statement, the role can grant the same privilege to other roles.",
        "In managed access schemas (i.e. schemas created using the CREATE SCHEMA \u2026 WITH MANAGED ACCESS syntax), object owners lose\nthe ability to make grant decisions. Only the schema owner (i.e. the role with the OWNERSHIP privilege on the schema) or a\nrole with the global MANAGE GRANTS privilege can grant privileges on objects in the schema.",
        "Note that a role that holds the global MANAGE GRANTS privilege can grant additional privileges to the current (grantor) role.",
        "Database level",
        "The global MANAGE GRANTS privilege is required to grant privileges on future objects in a database. Only the SECURITYADMIN and\nACCOUNTADMIN system roles have the MANAGE GRANTS privilege; however, the privilege can be granted to custom roles.",
        "Schema level",
        "In managed access schemas (i.e. schemas created using the CREATE SCHEMA \u2026 WITH MANAGED ACCESS syntax), either the schema owner\n(i.e. the role with the OWNERSHIP privilege on the schema) or a role with the global MANAGE GRANTS privilege can grant privileges\non future objects in the schema.",
        "In standard schemas, the global MANAGE GRANTS privilege is required to grant privileges on future objects in the schema.",
        "For more information about defining grants on future objects of a specified type, see\nFuture Grants on Database or Schema Objects (in this topic).",
        "The notes in this section apply when assigning future grants on objects in a schema or a database; i.e. when using the ON FUTURE\nkeyword.",
        "For more information, see managed access schemas.",
        "When future grants are defined on the same object type for a database and a schema in the same database, the schema-level\ngrants take precedence over the database level grants, and the database level grants are ignored. This behavior applies to privileges\non future objects granted to one role or different roles.",
        "For example, the following statements grant different privileges on objects of the same type at the database and schema levels.",
        "Grant the SELECT privilege on all future tables in database d1 to role r1. This grant gives access to all future tables in all\nschemas in d1:",
        "Grant the INSERT and DELETE privileges on all future tables only in the d1.s1 schema to role r2.",
        "The future grants assigned to the r1 role are ignored completely. When new table are created in schema d1.s1, only the\nfuture privileges defined on tables for the r2 role are granted.",
        "Database level future grants apply to both regular and\nmanaged access schemas.",
        "No more than one future grant of the OWNERSHIP privilege is allowed on each securable object type.",
        "Future grants cannot be defined on objects of the following types:",
        "Compute pool",
        "External function",
        "Image repository",
        "Policy objects:",
        "Aggregation policy",
        "Masking policy",
        "Packages policy",
        "Projection policy",
        "Row access policy",
        "Session policy",
        "Snapshot",
        "Tag",
        "A future grant of the OWNERSHIP privilege on objects of a specified type in a database do not apply to new objects in a managed\naccess schema.",
        "The following restrictions apply to future grants on objects in a managed access schema:",
        "A future grant of the OWNERSHIP privilege on objects can only be applied to a subordinate role of the schema owner (i.e. the role\nthat has the OWNERSHIP privilege on the schema).",
        "Before ownership of a managed access schema can be transferred to a different role, all open future grants of the OWNERSHIP\nprivilege must be revoked using REVOKE <privileges> with the ON FUTURE keywords.",
        "Future grants are not applied when renaming or swapping a table.",
        "Future grants are supported on named stages with the following restrictions:",
        "The WRITE privilege cannot be specified without the READ privilege.",
        "The READ privilege cannot be revoked if the WRITE privilege is present.",
        "For internal stages, only future grants with the READ or WRITE privilege are materialized.",
        "For external stages, only future grants with the USAGE privileges are materialized.",
        "Grant the necessary privileges to operate (i.e. suspend or resume) the report_wh warehouse to the analyst role:",
        "Same as previous example, but also allow the analyst role to grant the privilege to other roles:",
        "Grant the SELECT privilege on all existing tables in the mydb.myschema schema to the analyst role:",
        "Grant all privileges on two UDFs in the mydb.myschema schema to the analyst role:",
        "Note that the UDFs have different arguments, which is how Snowflake uniquely identifies UDFs with the same name. For more details about\nUDF naming, see User-defined functions overview.",
        "Grant usage privilege on a stored procedure in the mydb.myschema schema to the analyst role:",
        "Note that stored procedure names (like UDF names) can be overloaded, so you must specify the data type of the arguments(s). For\nmore details about name overloading, see Overloading procedures and functions.",
        "Grant the privilege to create materialized views in the specified schema:",
        "Grant the SELECT and INSERT privileges on all future tables created in the mydb.myschema schema to the role1 role:",
        "Grant the USAGE privilege on all future schemas in the mydb database to the role1 role:",
        "Grant the SELECT privilege on all existing tables in the mydb.myschema schema to the mydb.dr1 database role:",
        "Grant all privileges on two UDFs in the mydb.myschema schema to the mydb.dr1 database role:",
        "Note that the UDFs have different arguments, which is how Snowflake uniquely identifies UDFs with the same name. For more details about\nUDF naming, see User-defined functions overview.",
        "Grant usage privilege on a stored procedure in the mydb.myschema schema to the mydb.dr1 database role:",
        "Note that stored procedure names (like UDF names) can be overloaded, so you must specify the data type of the arguments(s). For\nmore details about overloading stored procedures, see Overloading procedures and functions.",
        "Grant the privilege to create materialized views in the specified schema to the mydb.dr1 database role:",
        "Grant the SELECT and INSERT privileges on all future tables created in the mydb.myschema schema to the mydb.dr1 database role:",
        "Grant the USAGE privilege on all future schemas in the mydb database to the role1 role:",
        "To allow an account role to create budgets in a schema, grant the CREATE SNOWFLAKE.CORE.BUDGET privilege on the schema to the role:",
        "To allow an account role to create an ML Function model or instance (forecast, anomaly detection, or classification) in a schema,\ngrant the appropriate privilege on the schema to the role. The following privileges are available.",
        "CREATE SNOWFLAKE.ML.ANOMALY_DETECTION",
        "CREATE SNOWFLAKE.ML.CLASSIFICATION",
        "CREATE SNOWFLAKE.ML.FORECAST",
        "CREATE SNOWFLAKE.ML.TOP_INSIGHTS",
        "Was this page helpful?",
        "On this page"
    ]
}