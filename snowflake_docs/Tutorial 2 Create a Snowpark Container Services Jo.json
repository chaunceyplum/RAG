{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark-container-services/tutorials/tutorial-2",
    "title": "Tutorial 2: Create a Snowpark Container Services Job Service | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Available to accounts in AWS and Microsoft Azure commercial regions, with some exceptions. For more information, see Available regions.",
        "After completing the Tutorial Common Setup, you are ready to create a job service. In this tutorial, you create a\nsimple job  service that connects to Snowflake, executes a SQL SELECT query, and saves the result to a table.",
        "There are two parts to this tutorial:",
        "Part 1: Create and test a job service. You download code provided for this tutorial and follow step-by-step instructions:",
        "Download the job service code for this tutorial.",
        "Build a Docker image for Snowpark Container Services, and upload the image to a repository in your account.",
        "Stage the service specification file, which gives Snowflake the container configuration information. In addition to the name of\nthe image to use to start a container, the specification file specifies three arguments: a SELECT query, a virtual warehouse to execute the query, and the name of the table to save the result to.",
        "Execute the job service. Using the EXECUTE JOB SERVICE command, you can execute the job service by providing the specification file and the\ncompute pool where Snowflake can run the container. And finally, verify the service results.",
        "Part 2: Understand the job service code. This section provides an overview of the job service code and highlights how different\ncomponents collaborate.",
        "Code (a Python application) is provided to implement a job service.",
        "Download SnowparkContainerServices-Tutorials.zip.",
        "Unzip the content, which includes one directory for each tutorial. The Tutorial-2 directory has the following files:",
        "main.py",
        "Dockerfile",
        "my_job_spec.yaml",
        "Build an image for the linux/amd64 platform that Snowpark Container Services supports, and then upload the image to the image\nrepository in your account (see Common Setup).",
        "You will need information about the repository (the repository URL and the registry hostname) before you can build and upload the image. For more information, see\nRegistry and Repositories.",
        "Get information about the repository",
        "To get the repository URL, execute the SHOW IMAGE REPOSITORIES SQL command.",
        "The repository_url column in the output provides the URL. An example is shown:",
        "The host name in the repository URL is registry host name. An example is shown:",
        "Build image and upload it to the repository",
        "Open a terminal window, and change to the directory containing the files you unzipped.",
        "To build a Docker image, execute the following docker build command using the Docker CLI.\nNote the command specifies current working directory (.)\nas the PATH for files to use for building the image.",
        "For image_name, use my_job_image:latest.",
        "Example",
        "Upload the image to the repository in your Snowflake account. In order for Docker to upload an image on your behalf to your repository,\nyou must first authenticate Docker with the registry.",
        "To authenticate Docker with the Snowflake registry, execute the following command.",
        "For username, specify your Snowflake username. Docker will prompt you for your password.",
        "To upload the image execute the following command:",
        "Example",
        "To upload your service specification file (my_job_spec.yaml) to the stage, use one of the following options:",
        "The Snowsight web interface: For instructions, see Choosing an internal stage for local files.",
        "The SnowSQL CLI: Execute the following PUT command:",
        "For example:",
        "Linux or macOS",
        "Windows",
        "You can also specify a relative path.",
        "The command sets OVERWRITE=TRUE so that you can upload the file again, if needed (for example, if you fixed an error in\nyour specification file). If the PUT command is executed successfully, information about the uploaded file is printed out.",
        "Now you are ready to create a job.",
        "To start a job service, run the EXECUTE JOB SERVICE command:",
        "Note the following:",
        "FROM and SPEC provide the stage name and the name of the job service specification file. When the job service is executed, it runs the\nSQL statement and saves the result to a table as specified in my_job_spec.yaml.",
        "The SQL statement is not executed within the Docker container. Instead, the running container connects to\nSnowflake and runs the SQL statement in a Snowflake warehouse.",
        "COMPUTE_POOL provides the compute resources where Snowflake executes the job service.",
        "EXECUTE JOB SERVICE returns output that includes the job name, as shown in the following sample output:",
        "The job service runs a simple query and saves result to the results table.\nYou can verify the job service successfully completed by querying the results table:",
        "Sample output:",
        "If you want to debug execution of your job service, execute SHOW SERVICE CONTAINERS IN SERVICE to determine if the job service is still running, if it failed to start, or why it failed if it did. Also,\nassuming your code outputs useful logs to standard output or standard error, you can access the logs using SYSTEM$GET_SERVICE_LOGS.",
        "To get the job service status, execute SHOW SERVICE CONTAINERS IN SERVICE:",
        "Sample output:",
        "To get the job service log information, use the system function SYSTEM$GET_SERVICE_LOGS:",
        "If you do not plan to continue with Tutorial 3, you should remove billable resources you created. For more\ninformation, see Step 5 in Tutorial 3.",
        "This section covers the following topics:",
        "Examining the files provided: Review various code files that implement the job service.",
        "Building and testing an image locally. The section provides an explanation of how you can locally test the\nDocker image before uploading it to a repository in your Snowflake account.",
        "The zip file you downloaded at the beginning of the tutorial includes the following files:",
        "main.py",
        "Dockerfile",
        "my_job_spec.yaml",
        "This section provides an overview of the code.",
        "In the code:",
        "Python code executes at main, which then executes the run_job() function:",
        "The run_job() function reads the environment variables and uses them to set default values for various parameters.\nThe container uses these parameters to connect to Snowflake. Note that:",
        "You can override the parameter values, used in the service, using  the containers.env and containers.args fields in the service specification. For more information, see Service specification reference.",
        "When the image runs in Snowflake, Snowflake populates some of these parameters (see source code) automatically. However,\nwhen testing the image locally, you need to explicitly provide these parameters (as shown in the next section,\nBuilding and testing an image locally).",
        "This file contains all the commands to build an image using Docker.",
        "Snowflake uses information you provide in this specification to configure and run your job service.",
        "In addition to the container.name and container.image required fields (see Service specification reference),\nthe specification includes the optional container.args field to list the arguments:",
        "--query provides the query to execute when the service runs.",
        "--result_table identifies the table to save the query results.",
        "You can test the Docker image locally before uploading it to a repository in your Snowflake account. In local testing, your\ncontainer runs standalone (it is not a job service that Snowflake executes).",
        "Use the following steps to test the Tutorial 2 Docker image:",
        "To create a Docker image, in the Docker CLI, execute the docker build command:",
        "To launch your code, execute the docker run command, providing <orgname>-<acctname>, <username>, and\n<password>:",
        "When testing the image locally, note that, in addition to the three arguments (a query, the warehouse to run the query, and\na table to save the result to), you also provide the connection parameters for the container running locally to connect to\nSnowflake.",
        "When you run the container as a service, Snowflake provides these parameters to the container as the environment variables. For\nmore information, see Configure Snowflake Client.",
        "The job service executes the query (select current_time() as time,'hello') and writes result to the table\n(tutorial_db.data_schema.results). If the table does not exist, it is created. If the table exists, the job service adds a row.",
        "Sample result of querying the results table:",
        "You can now test Tutorial 3, which shows how service-to-service communication works.",
        "Was this page helpful?"
    ]
}