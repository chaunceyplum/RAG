{
    "url": "https://docs.snowflake.com/en/user-guide/scim-user-api-reference",
    "title": "SCIM user API reference | Snowflake Documentation",
    "paragraphs": [
        "You can use the SCIM user API to access, create, and modify user data.",
        "The Snowflake SCIM API uses bearer tokens for HTTP authentication.",
        "Each HTTP request to the Snowflake SCIM API allows the following HTTP headers:",
        "Header",
        "Value",
        "Authorization (Required)",
        "Bearer <access_token>",
        "Content-Type",
        "application/scim+json",
        "Accept-Encoding",
        "utf-8",
        "Accept-Charset",
        "utf-8",
        "You can specify user attributes in the body of the API requests as key-value pairs in JSON format. These pairs contain information about the\nuser, such as the user\u2019s display name or their email address. Identity providers can specify their own key names for each attribute. For\nexample, identity providers can use the key lastName, instead of familyName, to represent the user\u2019s last name. Snowflake\ndoes not support multi-value user attributes.",
        "Important",
        "In the table below, the attributes userName and loginName both refer to the attribute userName. Snowflake\nsupports specifying different values for the userName and loginName attributes.",
        "Snowflake supports the following attributes for user lifecycle management:",
        "SCIM User Attribute",
        "Snowflake User Attribute",
        "Type",
        "Description",
        "id",
        "ID",
        "string",
        "The immutable, unique identifier (GUID) of the user in Snowflake.",
        "Snowflake does not return this value in the DESCRIBE USER or SHOW USERS output.",
        "For requests on endpoints that require this attribute, such as PATCH scim/v2/Users/{{id}},  the id attribute can be found\nusing the REST_EVENT_HISTORY function. Check the IdP logs to ensure the values match.",
        "userName",
        "NAME, LOGIN_NAME",
        "string",
        "The identifier used to login into Snowflake. For more information about these attributes, see CREATE USER.",
        "name.givenName",
        "FIRST_NAME",
        "string",
        "The first name of the user.",
        "name.familyName",
        "LAST_NAME",
        "string",
        "The last name of the user.",
        "emails",
        "EMAIL",
        "string",
        "The email address of the user.",
        "displayName",
        "DISPLAY_NAME",
        "string",
        "The text shown in the user interface when referring to the user.",
        "externalID",
        "N/A",
        "string",
        "The unique identifier set by the provisioning client (e.g. Azure, Okta).",
        "password",
        "PASSWORD",
        "string",
        "The password for the user.",
        "This value is not returned in the JSON response.",
        "If the SYNC_PASSWORD property in the SCIM security integration is set to FALSE, and the SCIM API request specifies\nthe password attribute, Snowflake ignores the value for the password attribute. All other attributes in the API\nrequest are processed normally.",
        "active",
        "DISABLED",
        "boolean",
        "Disables the user when set to false.",
        "groups",
        "N/A",
        "string",
        "A list of groups to which the user belongs. The group displayName is required.",
        "The user\u2019s groups are immutable and their membership must be updated using the SCIM groups API.",
        "meta.created",
        "CREATED_ON",
        "string",
        "The time the user was added to Snowflake.",
        "meta.lastModified",
        "UPDATED_ON",
        "string",
        "The time the user was last modified in Snowflake.",
        "meta.resourceType",
        "N/A",
        "string",
        "The type of resource for the user. You should use user as a value for this attribute.",
        "schemas",
        "N/A",
        "string",
        "A comma-separated array of strings specifying the namespace URIs. Snowflake supports the following values:",
        "urn:ietf:params:scim:schemas:core:2.0:User",
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
        "urn:ietf:params:scim:schemas:extension:2.0:User",
        "You can set custom attributes that are not defined by RFC 7643, such as\ndefaultRole.",
        "You can use the following namespaces to set custom attributes when making POST, PUT, and PATCH requests:",
        "This namespace was part of the original SCIM implementation in Snowflake. You can only use this namespace for setting custom attributes in\nOkta SCIM security integrations.",
        "You cannot use this namespace to set custom attributes in Microsoft Azure SCIM security integrations or\ncustom SCIM integrations.",
        "You can use this namespace to set custom attributes for all SCIM integrations. You must use this namespace for setting custom attributes\nin Microsoft Azure SCIM security integrations or\nCustom SCIM security integrations.",
        "Snowflake supports the following custom attributes:",
        "SCIM User Custom Attribute",
        "Snowflake User Attribute",
        "Type",
        "Description",
        "defaultWarehouse",
        "DEFAULT_WAREHOUSE",
        "string",
        "The virtual warehouse that is active by default for the user\u2019s session upon login.",
        "defaultRole",
        "DEFAULT_ROLE",
        "string",
        "The primary role that is active by default for the user\u2019s session upon login.",
        "defaultSecondaryRoles",
        "DEFAULT_SECONDARY_ROLES",
        "string",
        "The list of secondary roles that are active for the user\u2019s session upon login. You can set this\nattribute to ALL as an alias for ('ALL'), or you can set this attribute to\nNONE or \"\" as an alias for ().",
        "type",
        "TYPE",
        "string",
        "The type of user. Default: null. You can set this attribute to person, service,\nlegacy_service, or null. For more information about types of users, see the\nTYPE object property of users.",
        "GET /scim/v2/Users?filter=userName eq \"{{user_name}}\"",
        "Returns details about a user associated with the userName query parameter.",
        "Returns the HTTP response status code 200 if the HTTP request successfully completed.",
        "GET /scim/v2/Users/{{user_id}}",
        "Returns details about a user associated with the user_id path parameter.",
        "Returns the HTTP response status code 200 if the HTTP request successfully completed.",
        "POST /scim/v2/Users",
        "Creates a user in Snowflake.",
        "Returns the HTTP response status code 201 if the HTTP request successfully completed.",
        "If the user already exists or the HTTP request failed for a different reason, then Snowflake returns the HTTP response status code\n409.",
        "Create a user with userName and loginName mapped to the same value:",
        "Create a user with userName and loginName mapped to different values:",
        "Note",
        "If you use Okta as your identity provider, follow this procedure.",
        "PATCH /scim/v2/Users/{{id}}",
        "Replaces attributes of the user associated with the id path parameter.",
        "You must set op to replace to perform this HTTP request.",
        "active allows the following values:",
        "false: deactivates the user.",
        "true: activates the user.",
        "Returns the HTTP response status code 200 if the HTTP request was successfully completed.",
        "If unsuccessful, returns the HTTP response code 204.",
        "Deactivate a user and update their givenName to deactivated_user:",
        "Update a user with userName and loginName mapped to the same value:",
        "Update a user with userName and loginName mapped to different values.",
        "If Okta is your identity provider, follow this procedure.",
        "PUT /scim/v2/Users/{{id}}",
        "Updates the attributes of the user associated with the id path parameter.",
        "If unsuccessful, returns the HTTP response code 400. The HTTP request is unsuccessful if the request tries to change immutable\nattributes or if the attributes being changed do not exist in Snowflake.",
        "Update a user and their \"defaultRole\", \"defaultSecondaryRoles\", and \"defaultWarehouse\" attributes.",
        "To specify the \"defaultRole\", \"defaultSecondaryRoles\", and \"defaultWarehouse\" attributes, you must use one of the\nextension schemas. The defaultSecondaryRoles attribute only accepts \"ALL\" as\na value.",
        "Note",
        "The PUT method is more expensive than the PATCH method. Use the PATCH operation instead.",
        "DELETE /scim/v2/Users/{{id}}",
        "Deletes the user associated with the id path parameter.",
        "Was this page helpful?",
        "On this page"
    ]
}