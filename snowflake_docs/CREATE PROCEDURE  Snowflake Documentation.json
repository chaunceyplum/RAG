{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/create-procedure#id3",
    "title": "CREATE PROCEDURE | Snowflake Documentation",
    "paragraphs": [
        "Creates a new stored procedure.",
        "A procedure can be written in one of the following languages:",
        "Java (using Snowpark)",
        "JavaScript",
        "Python (using Snowpark)",
        "Scala (using Snowpark)",
        "Snowflake Scripting",
        "Note",
        "When you want to create and call a procedure that is anonymous (rather than stored), use CALL (with anonymous procedure).\nCreating an anonymous procedure does not require a role with CREATE PROCEDURE schema privileges.",
        "This command supports the following variants:",
        "CREATE OR ALTER PROCEDURE: Creates a new procedure if it doesn\u2019t exist or alters an existing procedure.",
        "ALTER PROCEDURE, DROP PROCEDURE , SHOW PROCEDURES , DESCRIBE PROCEDURE, CALL",
        "CREATE OR ALTER <object>",
        "You can create a stored procedure that either includes its handler code in-line, or refers to its handler code in a JAR file. For more\ninformation, see Keeping handler code in-line or on a stage.",
        "Preview Feature \u2014 Open",
        "Using tabular stored procedures with a Java handler is a preview feature\nthat is available to all accounts.",
        "For in-line stored procedures, use the following syntax:",
        "For a stored procedure that uses a precompiled handler, use the following syntax.",
        "Important",
        "JavaScript is case-sensitive, whereas SQL is not. See Case-sensitivity in JavaScript arguments for\nimportant information about using stored procedure argument names in the JavaScript code.",
        "For in-line stored procedures, use the following syntax:",
        "For a stored procedure in which the code is in a file on a stage, use the following syntax:",
        "You can create a stored procedure that either includes its handler code in-line, or refers to its handler code in a JAR file. For more\ninformation, see Keeping handler code in-line or on a stage.",
        "Preview Feature \u2014 Open",
        "Using tabular stored procedures with a Scala handler via RETURNS TABLE(...)\nis a preview feature that is available to all accounts.",
        "For in-line stored procedures, use the following syntax:",
        "For a stored procedure that uses a precompiled handler, use the following syntax.",
        "Note",
        "If you are creating a Snowflake Scripting procedure in SnowSQL or the Classic Console, you must\nuse string literal delimiters (' or $$) around\nprocedure definition. See Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Creates a new procedure if it doesn\u2019t already exist, or transforms an existing procedure into the procedure defined in the\nstatement. A CREATE OR ALTER PROCEDURE statement follows the syntax rules of a CREATE PROCEDURE statement and has the same\nlimitations as an ALTER PROCEDURE statement.",
        "Alterations to the following are supported:",
        "LOG_LEVEL, TRACE_LEVEL, COMMENT, SECURE",
        "SECRETS and EXTERNAL_ACCESS_INTEGRATIONS for Python, Scala, and Java Stored Procs",
        "Execution Privileges (EXECUTE AS CALLER or EXECUTE AS OWNER)",
        "For more information, see CREATE OR ALTER PROCEDURE usage notes.",
        "Specifies the identifier (name), any input arguments, and the default values for any optional arguments for the\nstored procedure.",
        "For the identifier:",
        "The identifier does not need to be unique for the schema in which the procedure is created because stored procedures are\nidentified and resolved by the combination of the name and argument types.",
        "The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the entire\nidentifier string is enclosed in double quotes (e.g. \u201cMy object\u201d). Identifiers enclosed in double quotes are also\ncase-sensitive. See Identifier requirements.",
        "For the input arguments:",
        "For arg_name, specify the name of the input argument.",
        "For arg_data_type, use the Snowflake data type that corresponds to the language that you are using.",
        "For Java stored procedures, see SQL-Java Data Type Mappings.",
        "For JavaScript stored procedures, see\nSQL and JavaScript data type mapping.",
        "For Python stored procedures, see\nSQL-Python Data Type Mappings.",
        "For Scala stored procedures, see SQL-Scala Data Type Mappings.",
        "For Snowflake Scripting, a SQL data type.",
        "Note",
        "For stored procedures you write in Java, Python, or Scala (which use Snowpark APIs), omit the argument for the Snowpark\nSession object.",
        "The Session argument is not a formal parameter that you specify in CREATE PROCEDURE or CALL. When you call your\nstored procedure, Snowflake automatically creates a Session object and passes it to the handler function for your\nstored procedure.",
        "To indicate that an argument is optional, use DEFAULT default_value to specify the default value of the argument.\nFor the default value, you can use a literal or an expression.",
        "If you specify any optional arguments, you must place these after the required arguments.",
        "If a procedure has optional arguments, you cannot define additional procedures with the same name and different signatures.",
        "For details, see Specify optional arguments.",
        "Specifies the type of the result returned by the stored procedure.",
        "For result_data_type, use the Snowflake data type that corresponds to the type of the language that you are using.",
        "For Java stored procedures, see SQL-Java Data Type Mappings.",
        "For JavaScript stored procedures, see\nSQL and JavaScript data type mapping.",
        "For Python stored procedures, see\nSQL-Python Data Type Mappings.",
        "For Scala stored procedures, see SQL-Scala Data Type Mappings.",
        "For Snowflake Scripting, a SQL data type.",
        "Note",
        "Stored procedures you write in Snowpark (Java or Scala) must have a return value. In Snowpark (Python), when a stored procedure\nreturns no value, it is considered to be returning None. Note that every CREATE PROCEDURE statement must include a RETURNS\nclause that defines a return type, even if the procedure does not explicitly return anything.",
        "For RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] ), if you know the\nSnowflake data types of the columns in the returned table, specify the column names and\ntypes:",
        "Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types:",
        "Note",
        "Currently, in the RETURNS TABLE(...) clause, you can\u2019t specify GEOGRAPHY as a column type. This\napplies whether you are creating a stored or anonymous procedure.",
        "If you attempt to specify GEOGRAPHY as a column type, calling the stored procedure results in the error:",
        "To work around this issue, you can omit the column arguments and types in RETURNS TABLE().",
        "RETURNS TABLE(\u2026) is supported only in when the handler is written in the following languages:",
        "Java",
        "Python",
        "Scala",
        "Snowflake Scripting",
        "As a practical matter, outside of a Snowflake Scripting block,\nthe returned value cannot be used because the call cannot be part of an expression.",
        "Specifies the language of the stored procedure code. Note that this is optional for stored procedures written with\nSnowflake Scripting.",
        "Currently, the supported values for language include:",
        "JAVA (for Java)",
        "JAVASCRIPT (for JavaScript)",
        "PYTHON (for Python)",
        "SCALA (for Scala)",
        "SQL (for Snowflake Scripting)",
        "Default: SQL.",
        "Defines the code executed by the stored procedure. The definition can consist of any valid code.",
        "Note the following:",
        "For stored procedures for which the code is not in-line, omit the AS clause. This includes stored procedures with staged handlers.",
        "Instead, use the IMPORTS clause to specify the location of the file containing the code for the stored procedure. For\ndetails, see:",
        "Writing stored procedures in Python",
        "Writing stored procedures in Java",
        "Writing stored procedures in Scala",
        "For more information on in-line and staged handlers, see Keeping handler code in-line or on a stage.",
        "You must use string literal delimiters (' or $$) around\nprocedure definition if:",
        "You are using a language other than Snowflake Scripting.",
        "You are creating a Snowflake Scripting procedure in SnowSQL or the Classic Console. See\nUsing Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector.",
        "For stored procedures in JavaScript, if you are writing a string that contains newlines, you can use\nbackquotes (also called \u201cbackticks\u201d) around the string.",
        "The following example of a JavaScript stored procedure uses $$ and backquotes because the body of the stored procedure\ncontains single quotes and double quotes:",
        "Snowflake does not completely validate the code when you execute the CREATE PROCEDURE command.",
        "For example, for Snowpark (Scala) stored procedures, the number and types of input arguments are validated, but the body of\nthe function is not validated. If the number or types do not match (e.g. if the Snowflake data type NUMBER is used when the\nargument is a non-numeric type), executing the CREATE PROCEDURE command causes an error.",
        "If the code is not valid, the CREATE PROCEDURE command will succeed, and errors will be returned when the stored procedure is\ncalled.",
        "For more details about stored procedures, see Working with stored procedures.",
        "The language runtime version to use. Currently, the supported versions are:",
        "11",
        "A comma-separated list of the names of packages deployed in Snowflake that should be included in the handler code\u2019s\nexecution environment. The Snowpark package is required for stored procedures, so it must always be referenced in the PACKAGES clause.\nFor more information about Snowpark, see Snowpark API.",
        "By default, the environment in which Snowflake runs stored procedures includes a selected set of packages for supported languages.\nWhen you reference these packages in the PACKAGES clause, it is not necessary to reference a file containing the package in the IMPORTS\nclause because the package is already available in Snowflake. You can also specify the package version.",
        "For the list of supported packages and versions for Java, query the\nINFORMATION_SCHEMA.PACKAGES view for rows, specifying the language. For example:",
        "To specify the package name and version number use the following form:",
        "To specify the latest version, specify latest for version.",
        "For example, to include a package from the latest Snowpark library in Snowflake, use the following:",
        "When specifying a package from the Snowpark library, you must specify version 1.3.0 or later.",
        "Use the fully qualified name of the method or function for the stored procedure. This is typically in the\nfollowing form:",
        "where:",
        "corresponds to the package containing the object or class:",
        "The language runtime version to use. Currently, the supported versions are:",
        "3.9",
        "3.10",
        "3.11",
        "A comma-separated list of the names of packages deployed in Snowflake that should be included in the handler code\u2019s\nexecution environment. The Snowpark package is required for stored procedures, so it must always be referenced in the PACKAGES clause.\nFor more information about Snowpark, see Snowpark API.",
        "By default, the environment in which Snowflake runs stored procedures includes a selected set of packages for supported languages.\nWhen you reference these packages in the PACKAGES clause, it is not necessary to reference a file containing the package in the IMPORTS\nclause because the package is already available in Snowflake. You can also specify the package version.",
        "For the list of supported packages and versions for Python, query the\nINFORMATION_SCHEMA.PACKAGES view for rows, specifying the language. For example:",
        "Snowflake includes a large number of packages available through Anaconda; for more information, see\nUsing third-party packages.",
        "To specify the package name and version number use the following form:",
        "To specify the latest version, omit the version number.",
        "For example, to include the spacy package version 2.3.5 (along with the latest version of the required Snowpark package), use the\nfollowing:",
        "When specifying a package from the Snowpark library, you must specify version 0.4.0 or later. Omit the version number to use the\nlatest version available in Snowflake.",
        "Preview Feature \u2014 Open",
        "Specifying a range of Python package versions is available as a preview feature to all accounts.",
        "You can specify package versions by using these version\nspecifiers: ==, <=, >=, <,or >.",
        "For example:",
        "Use the name of the stored procedure\u2019s function or method. This can differ depending on whether the code is in-line or\nreferenced at a stage.",
        "When the code is in-line, you can specify just the function name, as in the following example:",
        "When the code is imported from a stage, specify the fully-qualified handler function name as <module_name>.<function_name>.",
        "The language runtime version to use. Currently, the supported versions are:",
        "2.12",
        "A comma-separated list of the names of packages deployed in Snowflake that should be included in the handler code\u2019s\nexecution environment. The Snowpark package is required for stored procedures, so it must always be referenced in the PACKAGES clause.\nFor more information about Snowpark, see Snowpark API.",
        "By default, the environment in which Snowflake runs stored procedures includes a selected set of packages for supported languages.\nWhen you reference these packages in the PACKAGES clause, it is not necessary to reference a file containing the package in the IMPORTS\nclause because the package is already available in Snowflake. You can also specify the package version.",
        "For the list of supported packages and versions for Scala, query the\nINFORMATION_SCHEMA.PACKAGES view for rows, specifying the language. For example:",
        "To specify the package name and version number use the following form:",
        "To specify the latest version, specify latest for version.",
        "For example, to include a package from the latest Snowpark library in Snowflake, use the following:",
        "Snowflake supports using Snowpark version 0.9.0 or later in a Scala stored procedure. Note, however, that these versions have\nlimitations. For example, versions prior to 1.1.0 do not support the use of transactions in a stored procedure.",
        "Use the fully qualified name of the method or function for the stored procedure. This is typically in the following form:",
        "where:",
        "corresponds to the package containing the object or class:",
        "Specifies that the procedure is secure. For more information about secure procedures, see Protecting Sensitive Information with Secure UDFs and Stored Procedures.",
        "Specifies whether the stored procedure can return NULL values or must return only NON-NULL values.",
        "The default is NULL (i.e. the stored procedure can return NULL).",
        "Specifies the behavior of the stored procedure when called with null inputs. In contrast to system-defined functions, which\nalways return null when any input is null, stored procedures can handle null inputs, returning non-null values even when an\ninput is null:",
        "CALLED ON NULL INPUT will always call the stored procedure with null inputs. It is up to the procedure to handle such\nvalues appropriately.",
        "RETURNS NULL ON NULL INPUT (or its synonym STRICT) will not call the stored procedure if any input is null,\nso the statements inside the stored procedure will not be executed. Instead, a null value will always be returned. Note that\nthe procedure might still return null for non-null inputs.",
        "Default: CALLED ON NULL INPUT",
        "Deprecated",
        "Attention",
        "These keywords are deprecated for stored procedures. These keywords are not intended to apply to stored procedures. In a\nfuture release, these keywords will be removed from the documentation.",
        "Specifies a comment for the stored procedure, which is displayed in the DESCRIPTION column in the SHOW PROCEDURES output.",
        "Default: stored procedure",
        "Preview Feature \u2014 Open",
        "Restricted caller\u2019s rights (EXECUTE AS RESTRICTED CALLER) is a preview feature available to all accounts.",
        "Specifies whether the stored procedure executes with the privileges of the owner (an \u201cowner\u2019s rights\u201d stored procedure) or with\nthe privileges of the caller (a \u201ccaller\u2019s rights\u201d stored procedure):",
        "If you execute CREATE PROCEDURE \u2026 EXECUTE AS OWNER, then the procedure will execute as an owner\u2019s rights procedure.",
        "If you execute the statement CREATE PROCEDURE \u2026 EXECUTE AS CALLER, then in the future the procedure will execute as a\ncaller\u2019s rights procedure.",
        "If you execute the statement CREATE PROCEDURE \u2026 EXECUTE AS RESTRICTED CALLER, then in the future the procedure will execute as a\ncaller\u2019s rights procedure, but might not be able to run with all of the caller\u2019s privileges. For more information, see\nRestricted caller\u2019s rights.",
        "If EXECUTE AS ... isn\u2019t specified, the procedure runs as an owner\u2019s rights stored procedure. Owner\u2019s rights stored\nprocedures have less access to the caller\u2019s environment (for example, the caller\u2019s session variables), and Snowflake defaults to this\nhigher level of privacy and security.",
        "For more information, see Understanding caller\u2019s rights and owner\u2019s rights stored procedures.",
        "Default: OWNER",
        "Specifies to retain the access privileges from the original procedure when a new procedure is created using CREATE OR REPLACE PROCEDURE.",
        "The parameter copies all privileges, except OWNERSHIP, from the existing procedure to the new procedure. The new procedure will\ninherit any future grants defined for the object type in the schema. By default, the role that executes the CREATE PROCEDURE\nstatement owns the new procedure.",
        "Note:",
        "The SHOW GRANTS output for the replacement procedure lists the grantee for the copied privileges as the\nrole that executed the CREATE PROCEDURE statement, with the current timestamp when the statement was executed.",
        "The operation to copy grants occurs atomically in the CREATE PROCEDURE command (i.e. within the same transaction).",
        "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on:",
        "If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside\nthe stored procedure or resource files.",
        "If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the\nstored procedure\u2019s handler code.",
        "The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure.",
        "Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.",
        "For stored procedures with inline handler code, specifies the location to which Snowflake should write the compiled code (JAR file)\nafter compiling the source code specified in the procedure_definition. If this clause is omitted, Snowflake re-compiles the\nsource code each time the code is needed.",
        "If you specify this clause:",
        "You cannot set this to an existing file. Snowflake returns an error if the TARGET_PATH points to an existing file.",
        "If you specify both the IMPORTS and TARGET_PATH clauses, the file name in the TARGET_PATH clause must\nbe different from each file name in the IMPORTS clause, even if the files are in different subdirectories or different\nstages.",
        "If you no longer need to use the stored procedure (e.g. if you drop the stored procedure), you must manually remove this JAR\nfile.",
        "The names of external access integrations needed in order for this\nprocedure\u2019s handler code to access external networks.",
        "An external access integration specifies network rules and\nsecrets that specify external locations and credentials (if any) allowed for use by handler code\nwhen making requests of an external network, such as an external REST API.",
        "Assigns the names of secrets to variables so that you can use the variables to reference the secrets when retrieving information from\nsecrets in handler code.",
        "Secrets you specify here must be allowed by the external access integration\nspecified as a value of this CREATE PROCEDURE command\u2019s EXTERNAL_ACCESS_INTEGRATIONS parameter",
        "This parameter\u2019s value is a comma-separated list of assignment expressions with the following parts:",
        "secret_name as the name of the allowed secret.",
        "You will receive an error if you specify a SECRETS value whose secret isn\u2019t also included in an integration specified by the\nEXTERNAL_ACCESS_INTEGRATIONS parameter.",
        "'secret_variable_name' as the variable that will be used in handler code when retrieving information from the secret.",
        "For more information, including an example, refer to Using the external access integration in a function or procedure.",
        "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on:",
        "If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside\nthe stored procedure or resource files.",
        "If your stored procedure\u2019s code will be on a stage, you must also include a path to the module file your code is in.",
        "The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure.",
        "Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.",
        "The names of external access integrations needed in order for this\nprocedure\u2019s handler code to access external networks.",
        "An external access integration specifies network rules and\nsecrets that specify external locations and credentials (if any) allowed for use by handler code\nwhen making requests of an external network, such as an external REST API.",
        "Assigns the names of secrets to variables so that you can use the variables to reference the secrets when retrieving information from\nsecrets in handler code.",
        "Secrets you specify here must be allowed by the external access integration\nspecified as a value of this CREATE PROCEDURE command\u2019s EXTERNAL_ACCESS_INTEGRATIONS parameter",
        "This parameter\u2019s value is a comma-separated list of assignment expressions with the following parts:",
        "secret_name as the name of the allowed secret.",
        "You will receive an error if you specify a SECRETS value whose secret isn\u2019t also included in an integration specified by the\nEXTERNAL_ACCESS_INTEGRATIONS parameter.",
        "'secret_variable_name' as the variable that will be used in handler code when retrieving information from the secret.",
        "For more information, including an example, refer to Using the external access integration in a function or procedure.",
        "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour stored procedure depends on:",
        "If you are writing an in-line stored procedure, you can omit this clause, unless your code depends on classes defined outside\nthe stored procedure or resource files.",
        "If you are writing a stored procedure with a staged handler, you must also include a path to the JAR file containing the\nstored procedure\u2019s handler code.",
        "The IMPORTS definition cannot reference variables from arguments that are passed into the stored procedure.",
        "Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different stages.",
        "For stored procedures with inline handler code, specifies the location to which Snowflake should write the compiled code (JAR file)\nafter compiling the source code specified in the procedure_definition. If this clause is omitted, Snowflake re-compiles the\nsource code each time the code is needed.",
        "If you specify this clause:",
        "You cannot set this to an existing file. Snowflake returns an error if the TARGET_PATH points to an existing file.",
        "If you specify both the IMPORTS and TARGET_PATH clauses, the file name in the TARGET_PATH clause must\nbe different from each file name in the IMPORTS clause, even if the files are in different subdirectories or different\nstages.",
        "If you no longer need to use the stored procedure (e.g. if you drop the stored procedure), you must manually remove this JAR\nfile.",
        "A role used to execute this SQL command must have the following\nprivileges at a minimum:",
        "Privilege",
        "Object",
        "Notes",
        "CREATE PROCEDURE",
        "Schema",
        "USAGE",
        "Procedure",
        "Granting the USAGE privilege on the newly created procedure to a role allows users with that role to call the procedure elsewhere\nin Snowflake.",
        "USAGE",
        "External access integration",
        "Required on integrations, if any, specified by the EXTERNAL_ACCESS_INTEGRATIONS parameter. For more information, see\nCREATE EXTERNAL ACCESS INTEGRATION.",
        "READ",
        "Secret",
        "Required on secrets, if any, specified by the SECRETS parameter. For more information, see\nCreating a secret to represent credentials and Using the external access integration in a function or procedure.",
        "USAGE",
        "Schema",
        "Required on schemas containing secrets, if any, specified by the SECRETS parameter. For more information,\nsee Creating a secret to represent credentials and Using the external access integration in a function or procedure.",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "For instructions on creating a custom role with a specified set of privileges, see Creating custom roles.",
        "For general information about roles and privilege grants for performing SQL actions on\nsecurable objects, see Overview of Access Control.",
        "For all stored procedures:",
        "Stored procedures support overloading. Two procedures can have the same\nname if they have a different number of parameters or different data types for their parameters.",
        "Stored procedures are not atomic; if one statement in a stored procedure fails, the other statements in the stored\nprocedure are not necessarily rolled back. For information about stored procedures and transactions, see\nTransaction management.",
        "CREATE OR REPLACE <object> statements are atomic. That is, when an object is replaced, the old object is deleted and the new object is created in a single transaction.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "Tip",
        "If your organization uses a mix of caller\u2019s rights and owner\u2019s rights stored procedures, you might want to use a\nnaming convention for your stored procedures to indicate whether an individual stored procedure is a caller\u2019s\nrights stored procedure or an owner\u2019s rights stored procedure.",
        "For JavaScript stored procedures:",
        "A JavaScript stored procedure can return only a single value, such as a string (for example, a success/failure indicator)\nor a number (for example, an error code). If you need to return more extensive information, you can return a\nVARCHAR that contains values separated by a delimiter (such as a comma), or a semi-structured data type, such\nas VARIANT.",
        "For Java stored procedures, see the known limitations.",
        "For Python stored procedures, see the known limitations.",
        "For Scala stored procedures, see the known limitations.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "All limitations of the ALTER PROCEDURE command apply.",
        "All limitations described in CREATE OR ALTER FUNCTION usage notes apply.",
        "This creates a trivial stored procedure that returns a hard-coded value. This is unrealistic, but shows the basic\nSQL syntax with minimal JavaScript code:",
        "This shows a more realistic example that includes a call to the JavaScript API. A more extensive version of this\nprocedure could allow a user to insert data into a table that the user didn\u2019t have privileges to insert into directly.\nJavaScript statements could check the input parameters and execute the SQL INSERT only if certain requirements\nwere met.",
        "For examples of Java stored procedures, see Writing stored procedures in Java.",
        "For examples of JavaScript stored procedures, see Writing stored procedures in JavaScript.",
        "For examples of Python stored procedures, see Writing stored procedures in Python.",
        "For examples of Scala stored procedures, see Writing stored procedures in Scala.",
        "For examples of Snowflake Scripting stored procedures, see Writing stored procedures in Snowflake Scripting.",
        "For more examples, see Working with stored procedures.",
        "Create an owner\u2019s rights Python stored procedure with external access integrations and default OWNER privileges.",
        "Alter the stored procedure\u2019s secrets and change the stored procedure to a caller\u2019s rights procedure:",
        "Was this page helpful?",
        "On this page"
    ]
}