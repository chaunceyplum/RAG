{
    "url": "https://docs.snowflake.com/en/user-guide/search-optimization/join-queries",
    "title": "Speeding up join queries with search optimization | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact Snowflake Support.",
        "The search optimization service can improve the performance of join queries that have a small number of distinct values on the\nbuild side of the join.",
        "For example, the search optimization service can improve the performance of these types of joins:",
        "Suppose that products is a table containing a row for each product, and sales is a table containing a row for\neach sale of a product. The products table contains fewer rows and is smaller than the sales table. To find all sales of\na specific product, you join the sales table (the larger table) with the products table (the smaller table). Because\nthe products table is small, there are few distinct values on the build side of the join.",
        "Note",
        "In data warehousing, the large table is often referred to as the fact table. The small table is referred to as the\ndimension table. The rest of this topic uses these terms when referring to the large table and the small table in a join.",
        "Suppose that customers is a table containing a row for each customer, and sales is a table containing a row for\neach sale. Both tables are large. To find all sales for a specific customer, you join the sales table (the probe side)\nwith the customers table (the build side) and use a filter so that there are a small number of distinct values on the\nbuild side of the join.",
        "To enable the search optimization service to improve the performance of joins,\nadd search optimization to the table on the probe\nside of the join. This table is usually a large table that isn\u2019t filtered in join queries, such as a fact table.",
        "To take advantage of search optimization, make sure the build side of the join has a small number of distinct values, either\nbecause it\u2019s a small dimension table or because of a selective filter. The search optimization costs of a query are proportionate\nto the number of distinct values that must be looked up on the build side of the join. If this number is too large, Snowflake might\ndecide against using the search access path and use the regular table access path instead.",
        "The search optimization service can improve the performance of queries with the following types of join predicates:",
        "Equality predicates of the form probe_side_table.column = build_side_table.column.",
        "Transformations on the build-side operand of the predicate (for example, string concatenation, addition, and so on).",
        "Conjunctions (AND) of multiple equality predicates.",
        "This section shows examples of join queries that can benefit from search optimization.",
        "The following is an example of a supported query that uses a simple equality predicate as the join predicate. This query joins a\ntable named sales with a table named customers.  The probe-side table sales is large and has search optimization\nenabled. The build-side table customers is also large, but the input from this table is small, due to the selective filter on the\ncustomer_id column.",
        "The following query joins a fact table named sales with a dimension table named products.  The fact table is large and\nhas search optimization enabled. The dimension table is small.",
        "This query transforms the dimension-side operand of the predicate (for example, by multiplying values in the join condition)\nand can benefit from search optimization:",
        "Queries in which a join predicate spans multiple columns can benefit from search optimization:",
        "In a query that uses both regular point-lookup filters and join predicates, the search optimization service can improve the\nperformance of both. In the following query, the search optimization service can improve the sales.location point-lookup\npredicate as well as the product_id join predicate:",
        "The following limitations apply to the search optimization service and join queries:",
        "Disjuncts (OR) in join predicates currently aren\u2019t supported.",
        "LIKE, ILIKE, and RLIKE join predicates currently aren\u2019t supported.",
        "Join predicates on VARIANT columns currently aren\u2019t supported.",
        "EQUAL_NULL equality predicates currently aren\u2019t supported.",
        "The current limitations of the search optimization service also apply to\njoin queries.",
        "Was this page helpful?",
        "On this page"
    ]
}