{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/base64_decode_binary",
    "title": "BASE64_DECODE_BINARY | Snowflake Documentation",
    "paragraphs": [
        "String & binary functions (Encoding/Decoding)",
        "Decodes a Base64-encoded string to a binary.",
        "TRY_BASE64_DECODE_BINARY",
        "BASE64_DECODE_STRING , BASE64_ENCODE",
        "Required:",
        "A Base64-encoded string expression.",
        "Optional:",
        "A string consisting of up to three ASCII characters:",
        "The first two characters in the string specify the last two characters (indexes 62 and 63) in the alphabet used to encode the input:",
        "A to Z (indexes 0-25)",
        "a to z (indexes 26-51)",
        "0 to 9 (indexes 52-61)",
        "+ and / (indexes 62, 63)",
        "Defaults: + and /",
        "The third character in the string specifies the character used for padding.",
        "Default: =",
        "This returns a BINARY value. The value can be inserted into a column of\ntype BINARY, for example.",
        "The characters in the alphabet string are positionally parsed; to specify different characters in the second or third positions in the string, you must explicitly specify all preceding characters\neven if you wish to use the defaults.",
        "For example:",
        "+$ specifies the default (+) for index 62 and a different character ($) for index 63; no character is explicitly specified for padding so the default character (=) is used.",
        "+/% specifies the defaults (+ and /) for indexes 62 and 63, and specifies a different character (%) for padding.",
        "The alphabet string used to decode input must match the string originally used to encode input.",
        "For more information about base64 format, see base64.",
        "This example converts data from string to binary, then encodes from binary\nto a BASE64 string. After that, it decodes the base64 string back to\nbinary, and then converts the binary back to a string.",
        "Create a table and data. This includes converting a string to\nbinary and that binary into a BASE64 string:",
        "Now display the original string, the binary form of the string\n(which is actually displayed as hexadecimal), and then the\nBASE64 form of the binary:",
        "Now retrieve the data and decode it back to its original form.\nNote again that the pure binary values in the 2nd and 4th\ncolumns are displayed as hexadecimal, not as the internal\nbinary form:",
        "The next example is similar to the preceding example, but specifies\nthe alphabet parameter to indicate that \u2018$\u2019 should be the encoding\ncharacter for index 62 in the BASE64 encoding. In order to have diverse\nenough data to need index 62, the data string uses a larger number of\ndistinct characters.",
        "Create a table and data. This includes converting a string to\nbinary and that binary into a BASE64 string:",
        "Now retrieve the data and decode it back to its original form.\nBecause this output columns are so wide, this example does five\nseparate SELECT statements rather than one.\nNote again that the pure binary values are displayed as\nhexadecimal, not as the internal binary form.\nNote also the dollar sign (\u2018$\u2019) in the BASE64 string (the\nthird output below):",
        "Was this page helpful?",
        "On this page"
    ]
}