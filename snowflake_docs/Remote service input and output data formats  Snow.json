{
    "url": "https://docs.snowflake.com/en/sql-reference/external-functions-data-format",
    "title": "Remote service input and output data formats | Snowflake Documentation",
    "paragraphs": [
        "When Snowflake sends data to a remote service, or receives data from a remote\nservice, the data must be formatted correctly. This topic provides information\nabout the proper data formats. Data received from and returned to Snowflake must\nalso be of an appropriate data type.",
        "When executing an external function, for example, Snowflake sends and expects data in the\nformat described here. It sends the data to a proxy service, not directly to the\nremote service (for more, see Introduction to external functions). Therefore, the proxy service must receive\n(and return) data in a Snowflake-compatible format. Although\ntypically the proxy service passes data through unchanged, the proxy can reformat data (both\nsending and receiving) to meet the needs of both the remote service and Snowflake.",
        "For simplicity, and to help illustrate the formats that Snowflake expects to send and receive, most of the examples\nin this section assume that the remote service reads and writes data in the same format as Snowflake expects, and\nthe proxy service passes data through unchanged in both directions.",
        "Each HTTP request from Snowflake is a POST or a GET.",
        "A POST request contains headers and a request body. The request body\nincludes a batch of rows.",
        "A GET contains only headers, and is used only for polling when the remote\nservice returns results asynchronously.",
        "The body of the POST request contains the data, serialized in JSON format.",
        "The schema for the JSON is:",
        "The top-level is a JSON object (a set of name/value pairs, also called a \u201cdictionary\u201d).",
        "Currently, there is exactly one item in that object; the key for that item is named \u201cdata\u201d.",
        "That \u201cdata\u201d item\u2019s value is a JSON array, in which:",
        "Each element is one row of data.",
        "Each row of data is a JSON array of one or more columns.",
        "The first column is always the row number (i.e. the 0-based index of the row within the batch).",
        "The remaining columns contain the arguments to the function.",
        "Data types are serialized as follows:",
        "Numbers are serialized as JSON numbers.",
        "Booleans are serialized as JSON booleans.",
        "Strings are serialized as JSON strings.",
        "Objects are serialized as JSON objects.",
        "All other supported data types are serialized as JSON strings.",
        "Dates, times, and timestamps are serialized as strings. For details about formatting these data types as\nstrings, see Date and time input and output formats and Date and time formats in conversion functions.",
        "Binary columns are serialized as strings. For details, see\nOverview of supported binary formats.",
        "NULL is serialized as JSON null.",
        "For examples of extracting data in a remote service on each platform, see:",
        "AWS: Create the Remote Service (Lambda Function on AWS) .",
        "Azure: Create the Remote Service (Azure Function) .",
        "Optionally, the JSON can be compressed for transmission over the network. Compression is\ndocumented in CREATE EXTERNAL FUNCTION.",
        "Here\u2019s an example of a serialized request for an external function with the signature\nf(integer, varchar, timestamp). Note that the first column is the row number within the batch, and the\nnext three values are the arguments to the external function.",
        "The header information is generally available to the remote service as a set of\nkey/value pairs. The header information includes:",
        "The following HTTP headers:",
        "Headers that describe how data is serialized in the request body:",
        "\u201csf-external-function-format\u201d: This is currently always set to \u201cjson\u201d.",
        "\u201csf-external-function-format-version\u201d: This is currently always set to \u201c1.0\u201d.",
        "\u201csf-external-function-current-query-id\u201d: This contains the query ID of the query that called this external\nfunction. You can use this to correlate Snowflake queries to calls of the remote service, for example to help\ndebug issues.",
        "\u201csf-external-function-query-batch-id\u201d: The batch ID uniquely identifies the specific batch of\nrows processed with this request. The remote service can use this ID to track the status of a batch that is being\nprocessed. The ID can also be used as an idempotency token if requests are retried due to an error.\nThe ID can also be used for logging/tracing of requests by the remote service.",
        "The batch ID in a GET is the same as the batch ID in the corresponding POST.",
        "The batch ID is an opaque value generated by Snowflake. The format could change in future releases, so remote\nservices should not rely on a specific format or try to interpret the value.",
        "Headers that describe the signature (name and argument types) and return type of the external function that\nwas called in the SQL query. These values can have characters that are not standard characters for Snowflake\nidentifiers, so base64 versions of the information are included,\nand non-standard characters are replaced with a blank in the non-base64 versions.",
        "The specific headers are:",
        "sf-external-function-name",
        "sf-external-function-name-base64",
        "sf-external-function-signature",
        "sf-external-function-signature-base64",
        "sf-external-function-return-type",
        "sf-external-function-return-type-base64",
        "For example, the headers sent for the function ext_func(n integer)\u00a0 returns varchar are:",
        "sf-external-function-name: ext_func",
        "sf-external-function-name-base64: <base64 value>",
        "sf-external-function-signature: (N NUMBER)",
        "sf-external-function-signature-base64: <base64 value>",
        "sf-external-function-return-type: VARCHAR(16777216)",
        "sf-external-function-return-type-base64: <base64 value>",
        "Note that because SQL INTEGER values are treated as SQL NUMBER, the SQL argument declared as type INTEGER is\ndescribed as type NUMBER.",
        "Additional optional metadata described in the \u201cheaders\u201d and \u201ccontext_headers\u201d properties of\nCREATE EXTERNAL FUNCTION.",
        "To extract the \u201csf-external-function-signature\u201d header from inside an AWS Lambda function written in\nPython, which receives the headers as a Python dictionary, execute the following:",
        "The details will be different for other languages and on other cloud platforms.",
        "For remote services developed on AWS, more information about headers and lambda proxy integration is available in\nthe AWS API Gateway documentation .",
        "When a remote service finishes processing a batch, the remote service should\nsend data back to Snowflake in a JSON format similar to the format of the data\nsent by Snowflake.",
        "The JSON response returned to Snowflake should contain one row for each row sent by Snowflake. Each returned row\ncontains two values:",
        "The row number (i.e. the 0-based index of the row within the batch).",
        "The value returned from the function for that row. The value can be a compound value (for example, an OBJECT), but\nit must be exactly one value because all scalar Snowflake functions (external or otherwise) return a single value.",
        "So that Snowflake can correlate the response with the request, the row numbers in the returned data\nmust correspond to the row numbers in the data that Snowflake sent and must be\nreturned in the same order as they were received.",
        "The following JSON example shows two rows containing an OBJECT value, each\npreceded by a row number:",
        "To compose one of these returned rows with Python, you might use the following code:",
        "To access the OBJECT value of a returned row with SQL, use the notation described in\nTraversing Semi-structured Data. For example:",
        "The response can also contain the following optional HTTP headers:",
        "Content-MD5: Snowflake uses the optional Content-MD5 header to check the integrity of the response. If this header\nis included in the response, Snowflake computes an MD5 checksum on the response body to ensure that it matches\nthe corresponding checksum in the returned header. If the values do not match, the SQL query fails. The checksum\nshould be encoded in a base64 representation before being returned in the header. See the example code below.",
        "Optionally, the JSON can be compressed for transmission over the network. Compression is\ndocumented in CREATE EXTERNAL FUNCTION.",
        "For information about timeouts and retries, see Account for timeout errors and\nDo not assume that the remote service is passed each row exactly once.",
        "The response also contains an HTTP status code. Snowflake recognizes the following HTTP status codes:",
        "Code",
        "Description",
        "200",
        "Batch processed successfully.",
        "202",
        "Batch received and still being processed.",
        "Other values are treated as errors.",
        "The example Python code below returns a proper response, including the HTTP response code, the processed data, and an\nMD5 header (which is optional).",
        "This example is based on an AWS Lambda function. Some code might need customization for different platforms.",
        "Was this page helpful?",
        "On this page"
    ]
}