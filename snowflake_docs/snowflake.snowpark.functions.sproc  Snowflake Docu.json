{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/snowpark/api/snowflake.snowpark.functions.sproc",
    "title": "snowflake.snowpark.functions.sproc | Snowflake Documentation",
    "paragraphs": [
        "Registers a Python function as a Snowflake Python stored procedure and returns the stored procedure.",
        "It can be used as either a function call or a decorator. In most cases you work with a single session.\nThis function uses that session to register the stored procedure. If you have multiple sessions, you need to\nexplicitly specify the session parameter of this function. If you have a function and would\nlike to register it to multiple databases, use session.sproc.register instead. See examples\nin StoredProcedureRegistration.",
        "Note that the first parameter of your function should be a snowpark Session. Also, you need to add\nsnowflake-snowpark-python package (version >= 0.4.0) to your session before trying to create a\nstored procedure.",
        "func \u2013 A Python function used for creating the stored procedure.",
        "return_type \u2013 A DataType representing the return data\ntype of the stored procedure. Optional if type hints are provided.",
        "input_types \u2013 A list of DataType\nrepresenting the input data types of the stored procedure. Optional if\ntype hints are provided.",
        "name \u2013 A string or list of strings that specify the name or fully-qualified\nobject identifier (database name, schema name, and function name) for\nthe stored procedure in Snowflake, which allows you to call this stored procedure in a SQL\ncommand or via session.call(). If it is not provided, a name will\nbe automatically generated for the stored procedure. A name must be specified when\nis_permanent is True.",
        "is_permanent \u2013 Whether to create a permanent stored procedure. The default is False.\nIf it is True, a valid stage_location must be provided.",
        "stage_location \u2013 The stage location where the Python file for the stored procedure\nand its dependencies should be uploaded. The stage location must be specified\nwhen is_permanent is True, and it will be ignored when\nis_permanent is False. It can be any stage other than temporary\nstages and external stages.",
        "imports \u2013 A list of imports that only apply to this stored procedure. You can use a string to\nrepresent a file path (similar to the path argument in\nadd_import()) in this list, or a tuple of two\nstrings to represent a file path and an import path (similar to the import_path\nargument in add_import()). These stored-proc-level imports\nwill override the session-level imports added by\nadd_import().",
        "packages \u2013 A list of packages that only apply to this stored procedure. These stored-proc-level packages\nwill override the session-level packages added by\nadd_packages() and\nadd_requirements(). To use Python packages that are not available in\nSnowflake, refer to custom_package_usage_config().",
        "replace \u2013 Whether to replace a stored procedure that already was registered. The default is False.\nIf it is False, attempting to register a stored procedure with a name that already exists\nresults in a SnowparkSQLException exception being thrown. If it is True,\nan existing stored procedure with the same name is overwritten.",
        "if_not_exists \u2013 Whether to skip creation of a stored procedure the same procedure is already registered.\nThe default is False. if_not_exists and replace are mutually exclusive and a ValueError\nis raised when both are set. If it is True and a stored procedure is already registered, the registration is skipped.",
        "session \u2013 Use this session to register the stored procedure. If it\u2019s not specified, the session that you created before calling this function will be used.\nYou need to specify this parameter if you have created multiple sessions before calling this method.",
        "parallel \u2013 The number of threads to use for uploading stored procedure files with the\nPUT\ncommand. The default value is 4 and supported values are from 1 to 99.\nIncreasing the number of threads can improve performance when uploading\nlarge stored procedure files.",
        "execute_as \u2013 What permissions should the procedure have while executing. This\nsupports caller, or owner for now. See owner and caller rights\nfor more information.",
        "statement_params \u2013 Dictionary of statement level parameters to be set while executing this action.",
        "strict \u2013 Whether the created stored procedure is strict. A strict stored procedure will not invoke\nthe stored procedure if any input is null. Instead, a null value will always be returned. Note\nthat the stored procedure might still return null for non-null inputs.",
        "source_code_display \u2013 Display the source code of the stored procedure func as comments in the generated script.\nThe source code is dynamically generated therefore it may not be identical to how the\nfunc is originally defined. The default is True.\nIf it is False, source code will not be generated or displayed.",
        "external_access_integrations \u2013 The names of one or more external access integrations. Each\nintegration you specify allows access to the external network locations and secrets\nthe integration specifies.",
        "secrets \u2013 The key-value pairs of string types of secrets used to authenticate the external network location.\nThe secrets can be accessed from handler code. The secrets specified as values must\nalso be specified in the external access integration and the keys are strings used to\nretrieve the secrets using secret API.",
        "comment \u2013 Adds a comment for the created object. See\nCOMMENT",
        "A stored procedure function that can be called with python value.",
        "Note",
        "1. When type hints are provided and are complete for a function,\nreturn_type and input_types are optional and will be ignored.\nSee details of supported data types for stored procedure in\nStoredProcedureRegistration.",
        "You can use Variant to\nannotate a variant, and use Geography\nor Geometry to annotate geospatial\ntypes when defining a stored procedure.",
        "typing.Union is not a valid type annotation for stored procedures,\nbut typing.Optional can be used to indicate the optional type.",
        "2. A temporary stored procedure (when is_permanent is False) is scoped to this session\nand all stored procedure related files will be uploaded to a temporary session stage\n(session.get_session_stage()).\nFor a permanent stored procedure, these files will be uploaded to the stage that you provide.",
        "3. By default, stored procedure registration fails if a function with the same name is already\nregistered. Invoking sproc() with replace set to True will overwrite the\npreviously registered function.",
        "4. To describe the return type for a stored procedure that returns tabular data,\nuse one of the following ways:",
        "(Recommended) Describe the return type using StructType\nand StructField. Set return_type =\nStructType([StructField(\"a\", DataTypeA()), ...]) to describe the case\nRETURNS TABLE(A DataTypeA, ...).",
        "Set return_type = StructType() to describe the case RETURNS TABLE().",
        "When using type hints, the return type of function can be set as\nDataFrame. This registers a\ntable stored procedure with return type defined using RETURNS TABLE().\nCheck See also below for more examples.",
        "See also",
        "StoredProcedureRegistration",
        "Was this page helpful?"
    ]
}