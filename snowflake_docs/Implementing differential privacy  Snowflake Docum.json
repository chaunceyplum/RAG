{
    "url": "https://docs.snowflake.com/en/user-guide/diff-privacy/differential-privacy-admin",
    "title": "Implementing differential privacy | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact Snowflake Support.",
        "This topic contains information for the data provider who is implementing differential privacy for their account.",
        "As you implement differential privacy for your dataset, your tasks involve three key concepts:",
        "Privacy policies. A table or view is not protected by\ndifferential privacy until you assign a privacy policy to it. A table or view with a privacy policy is considered to be\nprivacy-protected.",
        "Privacy budgets. As analysts query a privacy-protected table, you can\nmanage the privacy budgets associated with those analysts.",
        "Privacy domains. You should define a privacy domain for fact and\ndimension columns in a privacy-protected table or view.",
        "Limitations",
        "You cannot assign a privacy policy and an aggregation policy or masking policy to the same table or view.",
        "Apart from querying the noise interval, analysts don\u2019t know whether they\u2019re querying a\nprivacy-protected table, so the data provider should inform them that query results contain noise.",
        "A data provider cannot monitor the privacy loss incurred by analysts running queries in another account.",
        "Applying multiple privacy policies to one table is currently not supported. Because of this, protecting more than one entity with\nentity-level differential privacy in a single table is not possible.",
        "Queries on replicated or cloned tables that have a privacy policy associated with an entity key\nare currently blocked.",
        "An entity refers to a class of data subject that should be protected, for example people, organizations, or locations. If each individual\nentity appeared in only one row, row-level privacy would be enough to protect their identities. However, if data belonging to an individual\nentity appears in multiple rows (for example, in transactional data), differential privacy must be configured for entity-level privacy to\ncorrectly protect each entity.",
        "To achieve entity-level privacy, Snowflake lets you specify which attribute can be used to identify an entity (an entity key). This\nlets Snowflake identify all of the records that belong to a particular entity within a dataset. For example, if the entity key is defined\nas the column email, then Snowflake can determine that all records where email=joe.smith@example.com belong to the same entity.",
        "In most cases, entity-level privacy is preferred over row-level privacy, but row-level privacy might be a good fit for a table if the\nfollowing is true:",
        "No column in the table uniquely identifies entities. Entity-level privacy requires an identifying column.",
        "Each individual entity only appears once.",
        "The table will not be used in a join. Joins with tables protected by row-level privacy are possible, but have\nlimitations.",
        "You choose whether to implement entity-level or row-level privacy when assigning a privacy policy to a table or view. For more information,\nsee Assign a privacy policy. If you choose to implement entity-level privacy, the data must also meet\nstructural requirements to ensure that the entity identifier is used correctly.",
        "Tip",
        "If you want to protect two separate tables with the same privacy policy, but they do not have the same entity key values, you can create\na new table that maps the two identifying columns, create a view that joins two of the tables, and apply the privacy policy to the view.\nFor example, you could use this strategy if the entity key in one table is email and in another table it is user_id, but\nboth refer to the same entities.",
        "The structure of data protected by entity-level differential privacy must conform to certain requirements. These requirements must be met so\nthat Snowflake can accurately track the privacy loss associated with entities.",
        "You should structure your data to meet these requirements before applying privacy policies to implement differential privacy. Snowflake\ncannot determine whether data conforms to these structural requirements because they concern the meaning of the data, not the differential\nprivacy implementation. For example, if the entity keys for two different tables are both set to the column user_id, but one of the\ncolumns contains values for a numeric identifier while the other column contains email addresses, Snowflake cannot correctly link entity information\nacross the two tables.",
        "To achieve entity-level privacy, your data must conform to the following requirements:",
        "Each row belongs to only one individual within an entity \u2014  As an example, suppose a table contains users and households. If the\nentity that needs to be protected is users, the table cannot be structured such that each row is a household and all the users in that\nhousehold are captured in other columns. You would need to restructure the table so there is only one row per user, with a household_id\ncolumn to indicate which household a user belongs to.",
        "Consistent entity identifier across all tables \u2014 You can create a privacy policy that represents the protection needed for a single\nentity, then apply that policy to multiple tables that contain information about the entity. When you assign the privacy policy to each\ntable, you need to specify the column that uniquely identifies the entity (that is, the entity key). The value that uniquely identifies an\nentity within these entity key columns must be the same. For example, suppose the email column is the entity key for two tables that\ncontain information about an entity. If the email address of an entity is joe@company.com in one table, then the email address in the\nother table must also be joe@company.com.",
        "Entity identifier in all tables \u2014 Though not required to implement entity-level privacy, you can make it possible for analysts to\nminimize noise in query joins by including the entity identifier in all tables related to an entity. In some cases, you might need to\ndenormalize the entity key column to meet this requirement. For example, suppose you had the following tables where the entity is\ncustomers:",
        "Table",
        "Description",
        "customer",
        "Customer directory, where each row is a customer and has a customer_id.",
        "transactions",
        "Customer transactions, where each row is a transaction and has a transaction_id. Each customer can have multiple transactions.",
        "transaction_lines",
        "Unique items that were purchased in a transaction.  There can be multiple rows in a single transaction.",
        "Under best practices for normalization, the transaction_lines table would have the transaction_id but not the customer_id.\nThe transaction_lines table would link to the  transactions table, which could then be linked to the customers table with\ncustomer_id.",
        "However for differential privacy, you probably want to optimize the data for the analyst by adding the customer_id identifier to the\ntransaction_lines table. This allows the analyst to minimize noise by including customer_id in the join key when joining the\ntransaction_lines table with another table.",
        "This section discusses how the following differential privacy objects interact with other Snowflake features. It discusses the effect on\nprivacy policies, privacy budgets, and privacy domains.",
        "Secure views and tables with a privacy policy are protected by differential privacy when added to a share. Unsecured views are not\nprotected by privacy policies if they are queried via a share.",
        "For considerations when replicating privacy policies and privacy-protected tables and views, see\nPrivacy policies.",
        "Note",
        "There is a current limitation when querying replicated tables that have a privacy policy associated with an entity key. Queries on those tables are blocked until the limitation is removed.",
        "Keep the following in mind when using cross-cloud auto-fulfillment to replicate a data product:",
        "Administrators in the account to which the data product was replicated cannot adjust the privacy budget.",
        "Administrators cannot use a single account to view the privacy loss incurred in all regions.",
        "For the effects of cloning privacy-protected tables and views, see Cloning and differential privacy.",
        "Note",
        "There is a current limitation when querying cloned tables that have a privacy policy associated with an entity key. Queries on those tables are blocked until the limitation is removed.",
        "You can build a view on a privacy-protected table or view. However, the privacy domains of the base table or view are not inherited. As a\nresult, note the following:",
        "Privacy domains must be set on the columns of the new view.",
        "Adjusting the privacy domain of the base table does not affect the privacy domains of the view that is built on it.",
        "You can assign a privacy policy to a materialized view to make it privacy-protected.",
        "Other interactions between privacy policies and materialized views include the following:",
        "You cannot create a materialized view based on a privacy-protected table or view.",
        "You cannot assign a privacy policy to a table if it is referenced as the base table of a materialized view.",
        "Analysts cannot use a user-defined function to query a privacy-protected table.",
        "You cannot query a stream that is based on a privacy-protected table.",
        "You cannot assign a privacy policy to a stream.",
        "Privacy policies interact with other Snowflake policies in the following ways:",
        "You cannot assign a privacy policy and a masking policy to the same table or view.",
        "Row access policies take precedence over a privacy policy. If a row is blocked by the row access policy, it is not included in the results\nof the differentially private query.",
        "Protecting a table with a privacy policy and any of its columns with a projection policy at the same time is currently not supported.\nWhile you\u2019re able to assign the policies in this way, queries against the table will fail.",
        "You cannot assign a privacy policy and an aggregation policy to the same table or view.",
        "You cannot create a dynamic table when the referenced source table is privacy-protected.",
        "You can assign a privacy policy to a table that is referenced by an existing dynamic table; however, once the policy is assigned, the\ndynamic table will no longer refresh.",
        "You can assign a privacy policy to an external table. If an analyst tries to aggregate on a VARIANT column, the query fails. However, if an\nanalyst tries to aggregate on a virtual column, it succeeds.",
        "For time travel, when a previous version of a table is copied as a new table, the current version of a privacy domain is used for the table\nbecause Snowflake does not store previous versions of the privacy domain in table metadata.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}