{
    "url": "https://docs.snowflake.com/en/developer-guide/builders/devops",
    "title": "Snowflake DevOps | Snowflake Documentation",
    "paragraphs": [
        "Snowflake DevOps empowers developers to streamline and automate the software development lifecycle for their Snowflake environments. With\nan emphasis on best practices in CI/CD, deployment automation, and infrastructure management, Snowflake DevOps tools and practices ensure\nsmooth integration between development and operational tasks.",
        "This guide offers insights into leveraging Snowflake\u2019s capabilities to enhance collaboration, maintain quality, and achieve efficient\nsoftware delivery across your Snowflake projects.",
        "Snowflake provides an integrated approach to accelerate development lifecycles and improve overall productivity for data teams. This\napproach integrates Git version control, Python APIs, declarative object management, and seamless CI/CD automation.",
        "Git repository for all of your sources",
        "By keeping your data assets, code, and configurations centrally managed and version-controlled, you can ensure consistency,\nsimplify collaboration, and streamline rollbacks if needed.",
        "Using your Git repository from Snowflake lets you do all of this within Snowflake\u2019s secure perimeter, which is crucial for\nproduction-ready environments.",
        "Declarative syntax",
        "By embracing a declarative approach to database change management \u2014 defining and managing Snowflake objects using Python or\nSQL \u2014 you eliminate the need for complex scripts while promoting readability.",
        "CI/CD automation",
        "You can integrate with your existing CI/CD tools or Snowflake CLI to automatically execute commands and orchestrate your entire\npipeline for efficient and reliable deployments.",
        "Snowflake offers several features that integrate to make DevOps tasks simpler and more secure.",
        "CREATE OR ALTER <object>",
        "You can use the CREATE OR ALTER command to apply updates to your Snowflake objects and keep your account in sync with the\ninfrastructure as code in Git.",
        "For more information, see Manage changes with declarative code and versioning.",
        "EXECUTE IMMEDIATE FROM",
        "With the EXECUTE IMMEDIATE FROM Snowflake command, you can execute SQL from a Git repository in Snowflake. The SQL script can be a\nJinja2 template.",
        "For more information, see Parameterize scripts with Jinja templates.",
        "Snowflake CLI",
        "In scripts to drive your CI/CD pipeline, you can run Snowflake CLI commands to automate deployments, collaborate with version\ncontrol, and integrate with other CI/CD tools.",
        "For more information, see Automate CI/CD jobs with GitHub Actions.",
        "Python APIs",
        "Using Snowflake\u2019s Python APIs, you can manage Snowflake resources, including databases, schemas, tables, and tasks.",
        "For more information, see Snowflake Python APIs: Managing Snowflake objects with Python.",
        "Git in Snowflake",
        "You can fetch project config and data pipelines (schema, tables, scripts) from a Git repo to trigger the deployment workflow.",
        "For more information, see Streamline workflows by keeping assets in a Git repository connected with Snowflake.",
        "Using Snowflake with your existing tools, you can achieve the following DevOps goals:",
        "Streamline workflows by keeping assets in a Git repository connected with Snowflake.",
        "You can take advantage of your existing Git investment by connecting the repository to your Snowflake account. Once this connection\nis in place, with the repository cloned locally in Snowflake itself, you can browse and execute its code directly in Snowflake.",
        "Minimize risk by maintaining separate environments for development, testing, and production.",
        "By using separate Snowflake databases for each environment, you can minimize the risk of unwanted changes affecting live systems.\nTo more easily manage deployments, you use scripts that parameterize the deployment process.",
        "Manage database changes in a controlled and repeatable way for development, testing, and\nproduction by using scripts and declarative code.",
        "Automate CI/CD jobs, including deployment of code and data, by using GitHub Actions.",
        "Note",
        "With the Snowflake Extension for Visual Studio Code, you can write and execute Snowflake SQL statements directly in VS Code. By connecting VS Code\nwith the same repository you\u2019ve connected to Snowflake, you can develop code locally in\nVS Code, keep your work in your Git repository, and then access your code from within Snowflake.",
        "You can ensure consistency, simplify collaboration, and streamline rollbacks if needed by keeping your data assets, code, and\nconfigurations centrally managed and version-controlled in a Git repository and using the repository from Snowflake.",
        "You can connect your Snowflake acccount with your Git repository so that Snowflake can execute code in files cloned from\nthe repository. The result is a Git repository stage that represents a full clone of your repository. From within Snowflake, you can\naccess version-controlled files at a certain commit, branch, or tag.",
        "With the repository stage, you can create a Snowpark function or procedure from a version controlled file and directly execute versioned\nSQL scripts with EXECUTE IMMEDIATE FROM or use the Snowflake CLI to execute Python scripts. This way, you can declaratively define database\nobjects with SQL or Python and then deploy those objects with a robust and easy to set up CI/CD pipeline.",
        "By maintaining separate environments for development, testing, and production, your teams can isolate development activities from the\nproduction environment, reducing the likelihood of unintended consequences and data corruption.",
        "When you separate workflows into multiple environments, each gets its own Snowflake database \u2014 typically an identical copy.",
        "To support deploying and executing code in essentially identical ways between development and production environments, you can\nparameterize references to environment specifics \u2014 such as which database to use during deployment. That way, you can enable a\nCI/CD pipeline to choose the deployment target appropriate to the environment.",
        "To parameterize scripts, you can use Jinja2, a popular templating language with features ranging from simple script parameterization to\nextensive and modular scripting in a language similar to Python. Snowflake supports the execution of templated SQL scripts with\nEXECUTE IMMEDIATE FROM. Alternatively, the Snowflake CLI allows you to pass environment variables to Python\nscripts.",
        "For changing a deployment target, for example, you\u2019d replace the name of the target database with a Jinja variable such as\n{{ environment }} in SQL scripts, or an environment variable in Python scripts. This technique is shown in the following SQL\nand Python code examples:",
        "You can execute the parametrized scripts with the snow git execute command of the Snowflake CLI. The CLI can execute scripts\nin SQL, Python, or a mix of both directly from the repository stage within the guardrails and performance features of your Snowflake account.",
        "With Snowflake CLI, you can create, manage, update, and view apps running on\nSnowflake across workloads.",
        "You can more easily manage changes to your database resources with reusable configuration files in your Git repository.",
        "You can define database objects using the CREATE OR ALTER <object> command, which creates the object or alters\nit to match the definition specified by the command. By using this command from a versioned file in a repository, you can more\neasily roll back changes to a previous version: you merely execute a previous version of the file.",
        "Note",
        "You can also use the Snowflake Python APIs and\nSnowflake CLI to manage Snowflake resources. If you prefer to do your data engineering work\nin Python, Snowflake\u2019s first-class Python API enables you do the same resource management in the language you are most productive in.",
        "You can use GitHub Actions to  automate the jobs that constitute a CI/CD pipeline. With GitHub\nActions or similar CI/CD runners, you can define workflows that automate build, test, and deployment tasks.",
        "In these workflows, you can use other features of Snowflake and GitHub to put the pieces together. You can do the following tasks:",
        "Store your Snowflake credentials in a GitHub secret\nso that GitHub Actions can connect to Snowflake.",
        "Easily install the Snowflake CLI and connect to Snowflake with the help of the native\nSnowflake CLI GitHub action.",
        "Execute commands in Snowflake, by using the Snowflake CLI. First, fetch the most recent changes from your Git repository to Snowflake.\nNext, execute your declarative and parametrized scripts to deploy your changes to an environment of your choice.",
        "The GitHub Actions workflow excerpt in the following example deploys a pipeline. The workflow authenticates with Snowflake by retrieving the\nneeded values from previously configured secrets.",
        "To deploy the pipeline, the workflow executes the following snow git commands:",
        "snow git fetch pulls the latest from the GitHub repository to the cloned my_git_repo Git repository stage in Snowflake.",
        "snow git execute runs Python and SQL scripts in the /scripts directory from the main branch of the repository.",
        "For an interactive walk-through of using Snowflake DevOps, see the Getting Started with Snowflake DevOps Quickstart.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}