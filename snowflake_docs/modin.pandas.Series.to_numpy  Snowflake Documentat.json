{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.Series.to_numpy",
    "title": "modin.pandas.Series.to_numpy | Snowflake Documentation",
    "paragraphs": [
        "A NumPy ndarray representing the values in this Series or Index.",
        "dtype (str or numpy.dtype, optional) \u2013 The dtype to pass to numpy.asarray().",
        "copy (bool, default False) \u2013 This argument is ignored in Snowflake backend. The data from Snowflake\nwill be retrieved into the client, and a numpy array containing this\ndata will be returned.",
        "na_value (Any, optional) \u2013 The value to use for missing values. The default value depends\non dtype and the type of the array.",
        "**kwargs \u2013 Additional keywords passed through to the to_numpy method\nof the underlying array (for extension arrays).",
        "numpy.ndarray",
        "See also",
        "Get the actual data stored within.",
        "Get the actual data stored within.",
        "Similar method for DataFrame.",
        "Notes",
        "The returned array will be the same up to equality (values equal in self will be equal in the returned array; likewise for values that are not equal). When self contains an ExtensionArray, the dtype may be different. For example, for a category-dtype Series, to_numpy() will return a NumPy array and the categorical dtype will be lost.",
        "This table lays out the different dtypes and default return types of to_numpy() for various dtypes within pandas.",
        "dtype",
        "array type",
        "category[T]",
        "ndarray[T] (same dtype as input)",
        "period",
        "ndarray[object] (Periods)",
        "interval",
        "ndarray[object] (Intervals)",
        "IntegerNA",
        "ndarray[object]",
        "datetime64[ns]",
        "datetime64[ns]",
        "datetime64[ns, tz]",
        "ndarray[object] (Timestamps)",
        "Examples",
        "Specify the dtype to control how datetime-aware data is represented. Use dtype=object to return an ndarray of pandas Timestamp objects, each with the correct tz.",
        "Or dtype=\u2019datetime64[ns]\u2019 to return an ndarray of native datetime64 values. The values are converted to UTC and the timezone info is dropped.",
        "Was this page helpful?"
    ]
}