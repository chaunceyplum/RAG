{
    "url": "https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-calling-references",
    "title": "Passing references for tables, views, functions, and queries to stored procedures | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "In cases in which you call a stored procedure and pass an identifier for a table, view, or function to a stored procedure, you\nmight need to:",
        "Allow the stored procedure to perform SQL actions on the object, even if the stored procedure uses owner\u2019s rights.",
        "Allow the stored procedure to resolve the fully qualified name of the object, if the identifier is not qualified or is\npartially qualified.",
        "In these cases, you can create and pass in a reference to the table, view, or function. A reference is a unique\nidentifier for a table, view, or function. Within the stored procedure, when you execute SQL actions on a reference to an object,\nthe actions are performed using the active role or secondary roles of the user who created the reference. In addition, if the\ntable, view, or function is not fully qualified, the name of the object is resolved by using the current database and schema\nwhen the reference was created (i.e. the database and schema of the user who created the reference).",
        "Similarly, if you need to pass in a query to a stored procedure and\nuse that query in the FROM clause of a SELECT statement, you can create and pass\nin a query reference. Within the stored procedure, the query is performed using the active role or secondary roles of the\nuser who created the query reference. As is the case with references to tables, views, and functions, if the object name in the\nquery is not fully qualified, the name of the object is resolved by using the database and schema that were in use when the query\nreference was created.",
        "This topic explains how to create and use references.",
        "Suppose that an owner\u2019s rights stored procedure is designed to insert rows into a table specified by an input argument. The\nfollowing are examples written in Snowflake Scripting and JavaScript:",
        "Suppose that you need to call this procedure for a table that is owned by a different role:",
        "If you call the stored procedure and pass in the name of the table, the stored procedure will fail because the owner of the\nstored procedure does not have sufficient privileges to access the table:",
        "To enable the stored procedure to perform SQL actions on the table as the caller,\ncreate a reference to the table and pass in that reference, rather than the table name.",
        "To create the reference, call the SYSTEM$REFERENCE function. For example:",
        "The example above passes in the following arguments to the SYSTEM$REFERENCE function:",
        "'TABLE' for the type of the object.",
        "'table_with_different_owner' for the name of the table.",
        "'SESSION' to indicate that the reference should be scoped to the session.",
        "'INSERT' as the\nprivilege needed to perform the action on the object.",
        "Note",
        "If you need to create a reference to an object that you don\u2019t plan to modify (for example, if you are passing in a table that\nthe stored procedure will query) and you want that reference to be valid for the scope of the call (rather than for the entire\nsession), you can use the TABLE keyword instead of calling SYSTEM$REFERENCE. For details, see\nUsing the TABLE keyword to create a reference to a table, view, or query.",
        "The reference is valid for either the duration of the call in which the reference is passed or the duration of the session. The\ncontext in which the reference is created determines the scope:",
        "If you create and pass a reference to a stored procedure in a single statement, the reference has the same visibility as a\nvariable declared in the outermost block of the stored procedure:",
        "If you create a reference and assign the reference to a session variable, the\nreference is valid for the duration of the session, even if you unset the session variable:",
        "To specify that the scope of the reference should be the duration of the session, regardless of the context in which the\nreference is created, pass 'SESSION' for the third argument (session_scope) of the SYSTEM$REFERENCE function:",
        "By default, a reference confers a subset of privileges, based on the type of the object being referenced. For example, a\nreference to a table confers the SELECT privilege on that table for the active role or secondary role of the user who created the\nreference. The default privileges depend on the object type. For the list of supported objects, privileges, and default privileges,\nsee Supported object types and privileges for references.",
        "To confer additional privileges, specify those privileges as additional arguments to the\nSYSTEM$REFERENCE function. For example, to confer the INSERT, UPDATE, and TRUNCATE privileges on\na table:",
        "Note that you cannot specify OWNERSHIP or ALL as privileges.",
        "After a reference is created, changes to the privileges of the creator of the reference are reflected in the privileges\nassociated with the reference. For example, if the INSERT privilege is revoked for the creator of a reference, the INSERT\nprivilege is no longer associated with the reference.",
        "When you use a reference to a table or view that has a masking policy, the reference role is the invoker role (the role returned\nby INVOKER_ROLE), regardless of whether the reference is used in a query, stored procedure, or\nuser-defined function.",
        "Using a reference does not change the current role (the role returned by CURRENT_ROLE).",
        "If you are writing an owner\u2019s rights stored procedure, do not create a\nreference within the body of the stored procedure.",
        "A reference created in an owner\u2019s rights stored procedure uses the role of the owner of the stored procedure. References should\nuse the role of the user calling the stored procedure. For an owner\u2019s rights stored procedure, the user calling the stored\nprocedure should create the reference and pass it in to the stored procedure.",
        "If you are writing a caller\u2019s rights stored procedure, you can create a reference within the body of the stored procedure.",
        "If you need to pass in a query that is used in the FROM clause of a SELECT statement in a stored procedure, create and pass in a\nquery reference.",
        "For example, suppose that a stored procedure passes in a SELECT statement that is intended to be used in the FROM clause of\nanother SELECT statement. In the example below, the query argument is intended to be a SELECT statement. This examples are in\nSnowflake Scripting and JavaScript:",
        "The stored procedure uses owner\u2019s rights. If the stored procedure owner does not have the privileges to query the table in the\nSELECT statement, the call to the stored procedure fails.",
        "To enable the stored procedure to execute the query as the caller, create a query reference for the SELECT statement, and pass in\nthat reference, rather than the SELECT statement.",
        "To create the query reference, you can call the SYSTEM$QUERY_REFERENCE function.",
        "Note",
        "If you need to create a query reference that is valid for the scope of the call (rather than for the entire session), you can\nuse the TABLE keyword instead of calling SYSTEM$QUERY_REFERENCE. For details, see Using the TABLE keyword to create a reference to a table, view, or query.",
        "If you call the SYSTEM$QUERY_REFERENCE function, pass in:",
        "'SELECT x FROM table_with_different_owner' as the query.",
        "Note that if the SELECT statement contains any single quotes or other special characters (e.g. newlines), you must\nescape those characters with backslashes.",
        "true to indicate that the query reference should be scoped to the session.",
        "For example:",
        "Within the stored procedure, you can add a query reference to the FROM clause of a query. For example:",
        "For details on this function, refer to SYSTEM$QUERY_REFERENCE.",
        "For the limitations with creating and using query references, refer to Current limitations.",
        "If you need to create reference to a table, view, or secure view that you are not modifying that the stored procedure should\nquery, and you want the reference to be valid for the scope of the call (rather than for the entire session), use the TABLE\nkeyword with the following syntax:",
        "The TABLE keyword provides a simpler syntax for calling the SYSTEM$REFERENCE function for a table or view without having to\nspecify the argument for the object type. When you use the TABLE keyword, the reference just confers the SELECT privilege, and\nthe scope of the reference is the call (not the session).",
        "The following examples call the stored procedure my_procedure and pass in references to tables and views:",
        "If you want to create a reference to a query, you can use the TABLE keyword as an alternative to calling the\nSYSTEM$QUERY_REFERENCE function, if the reference just needs to be valid for the scope of the call (rather than for the entire\nsession). To use the TABLE keyword, use the following syntax:",
        "For example:",
        "Note the following:",
        "You cannot use bind variables in the object name or query.",
        "The reference created by the TABLE keyword is valid for the duration of the call. You cannot specify a different scope for the\nreference.",
        "The reference has the\ndefault privileges conferred for the type of object.",
        "Currently, references have the following limitations:",
        "GET_DDL and SYSTEM$GET_TAG do not support references as input\narguments.",
        "You can only create references to tables, views, and functions.",
        "In queries that contain references, plan cache and result caching are not used.",
        "For query references:",
        "You can only create query references for SELECT statements that serve as inline views.",
        "When you create a query reference, you cannot specify a bind variable or session variable.",
        "In your stored procedure, you can only use a query reference in the FROM clause of a SELECT statement.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}