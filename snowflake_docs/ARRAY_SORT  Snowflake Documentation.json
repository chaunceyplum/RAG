{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/array_sort",
    "title": "ARRAY_SORT | Snowflake Documentation",
    "paragraphs": [
        "Semi-structured and structured data functions (Array/Object)",
        "Returns an ARRAY that contains the elements of the input ARRAY sorted in ascending or descending order.\nYou can specify whether or not NULL elements are sorted before or after non-NULL elements.",
        "Required",
        "The ARRAY of elements to sort.",
        "Optional",
        "Specifies whether to sort the elements in ascending or descending order:",
        "Specify TRUE to sort the elements in ascending order.",
        "Specify FALSE to sort the elements in descending order.",
        "Default: TRUE",
        "Specifies whether to place SQL NULL elements at the beginning or end of the sorted ARRAY:",
        "Specify TRUE to place the SQL NULL elements first in the ARRAY.",
        "Specify FALSE to place the SQL NULL elements last in the ARRAY.",
        "Default: FALSE if the ARRAY is sorted in ascending order; TRUE if the ARRAY is sorted in descending order.",
        "This argument only affects the order of SQL NULL elements. This does not affect the order of\nJSON null elements.",
        "This function returns an ARRAY that contains the elements of array in sorted order.",
        "The sort order is equivalent to the order resulting from flattening the ARRAY and specifying an\nORDER BY clause with the corresponding ASC | DESC and NULLS FIRST | LAST parameters.",
        "If any of the input arguments is NULL, the function returns NULL.",
        "This function is not guaranteed to provide a stable sort when the ARRAY contains either of the following:",
        "Elements of two different numeric or timestamp\ntypes.",
        "Objects containing two different numeric or timestamp types.",
        "The following example returns an ARRAY of numbers with the elements from an input ARRAY constant\nsorted in ascending order. The elements include a JSON NULL (PARSE_JSON(\u2018null\u2019)) and a SQL NULL.",
        "Note that in the sorted ARRAY, JSON NULLs (null) and SQL NULLs (undefined) are the last elements.",
        "The following example returns an ARRAY of numbers with the elements sorted in descending order. Note that in the sorted ARRAY,\nJSON NULLs (null) and SQL NULLs (undefined) are the first elements.",
        "The following example sorts the elements in ascending order. The example sets the nulls_first argument to TRUE to place\nthe SQL NULLs (undefined) first in the sorted ARRAY. (By default, SQL NULLs are placed at the end of an ARRAY sorted in\nascending order.)",
        "Note that nulls_first has no effect on the placement of JSON NULLs (null).",
        "The following example sorts the elements in descending order. The example sets the nulls_first argument to FALSE to\nplace the SQL NULLs (undefined) last in the sorted ARRAY. (By default, SQL NULLs are placed at the beginning of an ARRAY\nsorted in descending order.)",
        "Note that nulls_first has no effect on the placement of JSON NULLs (null).",
        "The following example uses the ARRAY_INSERT function to construct a sparsely populated ARRAY. (The example inserts the\nvalues 1 and 2 at specific positions in the ARRAY.) The example then uses the ARRAY_SORT function to sort this ARRAY.",
        "The following example demonstrates that sorting an ARRAY with different numeric types results in an unstable sort. The example\nuses an ARRAY that contains NUMBER values and a REAL value.",
        "Was this page helpful?",
        "On this page"
    ]
}