{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/reference/latest/_autosummary/snowflake.core.table.TableCollection",
    "title": "snowflake.core.table.TableCollection | Snowflake Documentation",
    "paragraphs": [
        "Bases: SchemaObjectCollectionParent[TableResource]",
        "Represents the collection operations on the Snowflake Table resource.",
        "With this collection, you can create, iterate through, and search for tables that you have access to in the\ncurrent context.",
        "Examples",
        "Creating a table instance:",
        "Attributes",
        "Methods",
        "Create a table in Snowflake.",
        "table (Table) \u2013 The Table object, together with the Table\u2019s properties, object parameters, columns, and constraints.\nIt can either be a table name or a Table object when it\u2019s used together with as_select,\ntemplate, like_table, clone_table. It must be a Table when it\u2019s not used with these clauses.\nTable has the following properties: name; kind, cluster_by, enable_schema_evolution, change_tracking,\ndata_retention_time_in_days, max_data_extension_time_in_days, default_ddl_collation, columns, constraints,\ncomment, database_name, schema_name are optional.",
        "as_select (str, optional) \u2013 Creates a table from a select statement.",
        "template (str, optional) \u2013 Create a table using the templates specified in staged files.",
        "like_table (str, optional) \u2013 Create a new table like the specified one, but empty.",
        "clone_table (str or Clone, optional) \u2013 Create a new table by cloning the specified table.",
        "copy_grants (bool, optional) \u2013 Copy grants when clone_table is provided.",
        "mode (CreateMode, optional) \u2013",
        "One of the following strings.",
        "CreateMode.error_if_exists: Throw an snowflake.core.exceptions.ConflictError\nif the table already exists in Snowflake.  Equivalent to SQL create table <name> ....",
        "CreateMode.or_replace: Replace if the task already exists in Snowflake. Equivalent to SQL\ncreate or replace table <name> ....",
        "CreateMode.if_not_exists: Do nothing if the task already exists in Snowflake.\nEquivalent to SQL create table <name> if not exists...",
        "Default value is CreateMode.error_if_exists.",
        "",
        "Examples",
        "Creating a table instance:",
        "Cloning a Table instance:",
        "Cloning a Table instance in a different database and schema:",
        "Notes",
        "Row access policy",
        "Column masking policy",
        "Search optimization",
        "Tags",
        "Stage file format and copy options",
        "Iterate through Table objects from Snowflake, filtering on any optional \u2018like\u2019 pattern.",
        "like (str, optional) \u2013 A case-insensitive string functioning as a filter, with support for SQL wildcard characters\n(% and _).",
        "starts_with (str, optional) \u2013 String used to filter the command output based on the string of characters that appear at the beginning of\nthe object name. Uses case-sensitive pattern matching.",
        "limit (int, optional) \u2013 Limit of the maximum number of rows returned by iter(). The default is None, which behaves equivalently\nto show_limit=10000. This value must be between 1 and 10000.",
        "from_name (str, optional) \u2013 Fetch rows only following the first row whose object name matches the specified string. This is\ncase-sensitive and does not have to be the full name.",
        "history (bool, optional) \u2013 Include dropped tables that have not yet been purged yet.",
        "deep (bool, optional) \u2013 Fetch the sub-resources columns and constraints of every table if it\u2019s True. Default False.",
        "Examples",
        "Showing all tables that you have access to see in a schema:",
        "Showing information of the exact table you want to see:",
        "Showing tables starting with \u2018my-table-name-\u2018:",
        "Using a for loop to retrieve information from iterator:",
        "Was this page helpful?"
    ]
}