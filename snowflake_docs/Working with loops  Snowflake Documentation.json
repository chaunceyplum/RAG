{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-scripting/loops",
    "title": "Working with loops | Snowflake Documentation",
    "paragraphs": [
        "Snowflake Scripting supports the following types of loops:",
        "FOR",
        "WHILE",
        "REPEAT",
        "LOOP",
        "This topic explains how to use each of these types of loops.",
        "A FOR loop repeats a sequence of steps for a specified number of times or for each\nrow in a result set. Snowflake Scripting supports the following types of FOR loops:",
        "Counter-based FOR loops",
        "Cursor-based FOR loops",
        "RESULTSET-based FOR loops",
        "The next sections explain how to use these types of FOR loops.",
        "A counter-based FOR loop executes a specified number of times.",
        "The syntax for a counter-based FOR loop is",
        "For example, the following FOR loop executes 5 times:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "For the full syntax and details about FOR loops, see FOR (Snowflake Scripting).",
        "A cursor-based FOR loop iterates over a result set. The number of iterations is determined by the number of\nrows in the cursor.",
        "The syntax for a cursor-based FOR loop is:",
        "The example in this section uses the data in the following invoices table:",
        "The following example uses a FOR loop iterate over the rows in a cursor for the invoices table:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "For the full syntax and details about FOR loops, see FOR (Snowflake Scripting).",
        "A RESULTSET-based FOR loop iterates over a result set. The number of iterations is determined by the number of\nrows returned by the RESULTSET query.",
        "The syntax for a RESULTSET-based FOR loop is:",
        "The example in this section uses the data in the following invoices table:",
        "The following block uses a FOR loop to iterate over the rows in a RESULTSET for the invoices table:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "For the full syntax and details about FOR loops, see FOR (Snowflake Scripting).",
        "A WHILE loop iterates while a condition is true. In a WHILE\nloop, the condition is tested immediately before executing the body of the loop. If the condition is false before the first\niteration, then the body of the loop does not execute even once.",
        "The syntax for a WHILE loop is:",
        "For example:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "For the full syntax and details about WHILE loops, see WHILE (Snowflake Scripting).",
        "A REPEAT loop iterates until a condition is true. In a REPEAT\nloop, the condition is tested immediately after executing the body of the loop. As a result, the body of the loop always executes\nat least once.",
        "The syntax for a REPEAT loop is:",
        "For example:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "For the full syntax and details about REPEAT loops, see REPEAT (Snowflake Scripting).",
        "A LOOP loop executes until a BREAK\ncommand is executed. A BREAK command is normally embedded inside branching logic\n(e.g. IF statements or CASE statements).",
        "The syntax for a LOOP statement is:",
        "For example:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "For the full syntax and details about LOOP loops, see LOOP (Snowflake Scripting).",
        "In a loop construct, you can specify when the loop or an iteration of the loop must terminate early. The next sections explain\nthis in more detail:",
        "Terminating a loop",
        "Terminating an iteration without terminating the loop",
        "Specifying where execution should continue after termination",
        "You can explicitly terminate a loop early by executing the BREAK command.\nBREAK (and its synonym EXIT) immediately stops the current iteration, and skips any remaining iterations.\nYou can think of BREAK as jumping to the first executable statement after the end of the loop.",
        "BREAK is required in a LOOP loop but is not necessary in WHILE, FOR, and REPEAT loops. In most cases,\nif you have statements that you want to skip, you can use the standard branching constructs (IF statements and\nCASE statements) to control which statements inside a loop are executed.",
        "A BREAK command itself is usually inside an IF or CASE statement.",
        "You can use the CONTINUE (or ITERATE) command to jump to the end of an iteration of a loop, skipping the\nremaining statements in the loop. The loop continues at the start of the next iteration.",
        "Such jumps are rarely necessary. In most cases, if you have statements that you want to skip, you can use the\nstandard branching constructs (IF statements and CASE statements) to control which\nstatements inside a loop are executed.",
        "A CONTINUE or ITERATE command itself is usually inside an IF or CASE statement.",
        "In a BREAK or CONTINUE command, if you need to continue execution at a specific point in the code (e.g. the outer\nloop in a nested loop), specify a label that identifies the point at which execution should continue.",
        "The following example demonstrates this in a nested loop:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "In this example:",
        "There is a loop labeled INNER that is nested in a loop labeled OUTER.",
        "CONTINUE OUTER starts another iteration of the loop with the label OUTER.",
        "BREAK OUTER terminates the inner loop and transfers control to the end of the outer loop (labeled OUTER).",
        "The output of this command is:",
        "As shown in the output:",
        "inner_counter is incremented up to 5. CONTINUE OUTER starts a new iteration of the outer loop, which starts a new\niteration of the inner loop, which increments this counter up to 5. These iterations continue until the value of\ninner_counter equals 5 and BREAK OUTER terminates the inner loop.",
        "outer_counter is never incremented. The statement that increments this counter is never reached because BREAK OUTER\ntransfers control to the end of the outer loop.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}