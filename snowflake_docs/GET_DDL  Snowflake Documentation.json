{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/get_ddl",
    "title": "GET_DDL | Snowflake Documentation",
    "paragraphs": [
        "Metadata functions",
        "Returns a DDL statement that can be used to recreate the specified object. For databases and schemas, GET_DDL is recursive\n(that is, it returns the DDL statements for recreating all supported objects within the specified database/schema).",
        "GET_DDL currently supports the following object types:",
        "Alerts (see CREATE ALERT)",
        "Databases (see CREATE DATABASE)",
        "Data metric functions (see CREATE DATA METRIC FUNCTION)",
        "Dynamic tables (see CREATE DYNAMIC TABLE)",
        "Event tables (see CREATE EVENT TABLE)",
        "External tables (see CREATE EXTERNAL TABLE)",
        "File formats (see CREATE FILE FORMAT)",
        "Hybrid tables (see CREATE HYBRID TABLE)",
        "Apache Iceberg\u2122 tables (see CREATE ICEBERG TABLE)",
        "Pipes (see CREATE PIPE)",
        "Policies (see CREATE AGGREGATION POLICY ,  CREATE AUTHENTICATION POLICY , CREATE MASKING POLICY , CREATE PASSWORD POLICY , CREATE PRIVACY POLICY , CREATE PROJECTION POLICY ,  CREATE ROW ACCESS POLICY , CREATE SESSION POLICY)",
        "Schemas (see CREATE SCHEMA)",
        "Sequences (see CREATE SEQUENCE)",
        "Storage integrations (see CREATE STORAGE INTEGRATION)",
        "Stored procedures (see CREATE PROCEDURE)",
        "Streams (see CREATE STREAM)",
        "Tables (see CREATE TABLE)",
        "Tags (see CREATE TAG)",
        "Tasks (see CREATE TASK)",
        "UDFs, including external functions (see CREATE FUNCTION)",
        "Views (see CREATE VIEW)",
        "Warehouses (see CREATE WAREHOUSE)",
        "Required:",
        "Specifies the type of object for which the DDL is returned. Valid values (corresponding to the supported object types) are:",
        "DATABASE",
        "DYNAMIC_TABLE",
        "EVENT_TABLE",
        "FILE_FORMAT",
        "FUNCTION (for UDFs, including data metric functions and external functions)",
        "ICEBERG_TABLE",
        "INTEGRATION (storage)",
        "PIPE",
        "POLICY (aggregation, authentication, masking, password, projection, row access, and session policies)",
        "PROCEDURE (for stored procedures)",
        "SCHEMA",
        "SEQUENCE",
        "STREAM",
        "TABLE (for tables, external tables, and hybrid tables)",
        "TAG (object tagging)",
        "TASK",
        "VIEW (for views and materialized views)",
        "WAREHOUSE",
        "Specifies the fully-qualified name of the object for which the DDL is returned.",
        "Namespace is the database and/or schema in which the object resides:",
        "Not used for databases.",
        "For schemas, takes the form of database.",
        "For schema objects (tables, views, streams, tasks, sequences, file formats, pipes, policies, and UDFs), takes the form of\ndatabase.schema or schema.",
        "Namespace is optional if a database and schema are currently in use within the user session; otherwise, it is required.",
        "Optional:",
        "If TRUE, the generated DDL statements use fully-qualified names for the objects to be recreated.",
        "Default: FALSE.",
        "Note",
        "This does not affect the names of other objects referenced in the DDL statement (e.g. the name of a table referenced in\na view definition).",
        "Returns a string (a VARCHAR value) containing the text of the DDL statement that created the object.",
        "For UDFs and stored procedures, the output might be slightly different from the original DDL. For example, if the UDF or stored\nprocedure contains JavaScript code, the delimiter characters around the JavaScript code might be different.",
        "In addition, note that the DDL statement returned by the function might include default values for properties. For example, even\nif the original CREATE PROCEDURE statement did not specify EXECUTE AS OWNER, the DDL statement returned by the function includes\nEXECUTE AS OWNER, which is the default.",
        "The following notes apply to all supported objects:",
        "object_type and object_name (including namespace if specified) must be enclosed in single quotes.",
        "For object_type, TABLE and VIEW are interchangeable. If a TABLE object type is specified, and the object specified by name is a view, the function returns the DDL for\nthe view and vice-versa.",
        "If object_type is FUNCTION (i.e. UDF) and the UDF has arguments, you must include the argument data types as part of the function name, in the form of\n'function_name( [ arg_data_type [ , ... ] ] )', where function_name is the name of the function and arg_data_type is the data type of the argument.",
        "If object_type is PROCEDURE and the stored procedure has arguments, then you must include the\nargument data types as part of the function name, in the form of\n'procedure_name( [ arg_data_type [ , ... ] ] )'.",
        "If you specify a TABLE object that is an Iceberg table, the function returns the DDL for the Iceberg table.",
        "Querying this function for most Snowflake object types requires the same minimum permissions needed to view the object (using DESCRIBE <object> or SHOW <objects>). Snowflake restricts viewing special objects such as secure views to the owner (i.e. the role with the OWNERSHIP privilege on the object).",
        "The following notes are specific to view objects. The query result always:",
        "Returns lowercase SQL text for create or replace view, even if the casing in the original SQL statement used to create the\nview was uppercase or mixed case.",
        "Includes the OR REPLACE clause.",
        "Includes the SECURE property, if the view is secure.",
        "Excludes the COPY GRANTS view parameter, even if the original CREATE VIEW statement specifies the COPY GRANTS parameter.",
        "Generates the column list.",
        "If a masking policy is set on a column, the result specifies the masking policy for the column.",
        "Removes in-line SQL comments before the view body (that is, before AS). For example, in the following code, the comment\nimmediately prior to the AS clause is removed:",
        "The following notes apply specifically to table and view objects with a tag or policy:",
        "The role executing the GET_DDL query must have the global APPLY MASKING POLICY, APPLY ROW ACCESS POLICY, APPLY AGGREGATION POLICY, or\nAPPLY PROJECTION POLICY, or APPLY TAG privilege and the USAGE privilege on the database and schema containing the policy or tag.\nOtherwise, Snowflake replaces the policy with #UNKNOWN_POLICY and the tag with #UNKNOWN_TAG='#UNKNOWN_VALUE. This text\nindicates that the column or the object is protected by a policy and a tag is set on the object or column. If this text is not removed\nprior to recreating the object, the CREATE OR REPLACE <object> statement fails.",
        "If this text is present in the GET_DDL query result, prior to recreating the object, consult with your internal governance administrator\nto determine which policies and tags are necessary for the columns or object. Finally, edit the GET_DDL query result and then recreate\nthe object.",
        "Without the mentioned privileges, this table function does not return the corresponding row for the policy and tag assignments in the\noutput of calling the function.",
        "When multiple tags are set on the object or column, the GET_DDL output sorts the tags alphabetically by tag name.",
        "Dropping a tag removes the tag from the GET_DDL output.",
        "If a tag is set on the table or view, the GET_DDL output for the table or view includes the tag assignments in the CREATE OR REPLACE\nstatement.",
        "If a masking policy is set on the column or a row access policy is set on the table, the GET_DDL output includes the policy assignments\nusing the WITH keyword.",
        "When a tag is set on the database or the schema, the GET_DDL output includes:",
        "An ALTER DATABASE statement when the tag is set on the database.",
        "An ALTER DATABASE statement and an ALTER SCHEMA statement when the tag is set on both the database and schema.",
        "An ALTER SCHEMA statement when the tag is set on the schema.",
        "A CREATE OR REPLACE statement to generate the tag, if the tag exists in the database or schema.",
        "The following apply to storage integrations:",
        "The command always returns the CREATE OR REPLACE STORAGE INTEGRATION syntax.",
        "If a STORAGE_AWS_EXTERNAL_ID was not specified during storage integration creation, this command returns the ID that was automatically\ngenerated during storage integration creation.",
        "Collation information is included in the input.",
        "Return the DDL used to create a view named books_view:",
        "Return the DDL used to create a schema named books_schema and the objects in the schema (the table books_table\nand the view books_view):",
        "Return the DDL that uses fully-qualified names for the objects to be recreated:",
        "Note",
        "As demonstrated in the example above, the DDL statement doesn\u2019t use a fully-qualified name for the table used to create the\nview. To resolve the name of this table, Snowflake uses the name of the database and the name of the schema for the view.",
        "Return the DDL used to create a UDF named multiply that has two arguments with the data type NUMBER:",
        "Return the DDL to create a stored procedure named stproc_1 that has one argument with the data type FLOAT:",
        "Return the DDL to create a masking policy named employee_ssn_mask to mask social security numbers. Masked values are seen unless the user\u2019s current role is payroll.",
        "Return the DDL to create a storage integration named s3_int that creates an external AWS stage.",
        "Suppose that you execute the following statement to create a warehouse named my_wh:",
        "The following call to the GET_DDL function returns the DDL statement to recreate this warehouse:",
        "Note that the statement returned by the GET_DDL function includes default values for the properties not specified in the CREATE\nWAREHOUSE statement. For example, the CREATE WAREHOUSE statement did not specify the AUTO_RESUME property, so the returned\nstatement includes AUTO_RESUME=TRUE, which is the default value for this property.",
        "The following example shows the DDL that is returned for a hybrid table named ht_weather, which has a PRIMARY KEY\nconstraint on the id column.",
        "Note that the first argument to the function uses the TABLE type for hybrid tables.",
        "The PRIMARY KEY constraint takes an out-of-line position in the output, after the column definitions.\nSee also Constraints in GET_DDL.",
        "Was this page helpful?",
        "On this page"
    ]
}