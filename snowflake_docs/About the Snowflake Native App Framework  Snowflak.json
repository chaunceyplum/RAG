{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/native-apps-about",
    "title": "About the Snowflake Native App Framework | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic provides general information about the Snowflake Native App Framework.",
        "The Snowflake Native App Framework allows you to create data applications that leverage core Snowflake functionality.\nThe Snowflake Native App Framework allows you to:",
        "Expand the capabilities of other Snowflake features by sharing data and related\nbusiness logic with other Snowflake accounts. The business logic of an application can include a Streamlit app,\nstored procedures, and functions written using Snowpark API,\nJavaScript, and SQL.",
        "Share an application with consumers through listings. A listing can be either free or paid.\nYou can distribute and monetize your apps in the Snowflake Marketplace or distribute them to\nspecific consumers using private listings.",
        "Include rich visualizations in your application using Streamlit.",
        "The Snowflake Native App Framework also supports an enhanced development experience that provides:",
        "A streamlined testing environment where you can test your applications from a single account.",
        "A robust developer workflow. While your data and related database objects remain within Snowflake,\nyou can manage supporting code files and resources within source control using your preferred\ndeveloper tools.",
        "The ability to release versions and patches for your application that allows you, as a provider,\nto change and evolve the logic of your applications and release them incrementally to consumers.",
        "Support for logging of structured and unstructured events so that you can troubleshoot and monitor\nyour applications.",
        "The following diagram shows a high-level view of the Snowflake Native App Framework.",
        "The Snowflake Native App Framework is built around the concept of provider and consumer used by other\nSnowflake features, including\nSnowflake Collaboration\nand Secure Data Sharing",
        "A Snowflake user who wants to share data content and application logic with other Snowflake users.",
        "A Snowflake user who wants to access the data content and application logic shared by providers.",
        "To share data content and application logic with a consumer, providers create an application package.",
        "An application package encapsulates the data content, application logic,\nmetadata, and setup script required by an application. An application package also contains\ninformation about versions and patch levels defined for the application. See\nCreate an application package for details.",
        "An application package can include references to data content and external code files that a provider\nwants to include in the application. An application package requires a manifest file and a setup script.",
        "Defines the configuration and setup properties required by the application, including the location of\nthe setup script, versions, etc. See Create the manifest file for an application package\nfor details.",
        "Contains SQL statements that are run when the consumer installs or upgrades an application or when\na provider installs or upgrades an application for testing. The location of the setup script is\nspecified in the manifest.yml file. See Create a setup script\nfor details.",
        "After developing and testing an application package, a provider can share an application with consumers by\npublishing a listing containing the application package as the data product of a listing. The listing can be a Snowflake Marketplace\nlisting or a private listing.",
        "Allows providers to market applications across the Snowflake Data Cloud. Offering a listing on the Snowflake Marketplace\nlets providers share applications with many consumers simultaneously, rather than maintain\nsharing relationships with each individual consumer.",
        "Allows providers to take advantage of the capabilities of listings to share applications directly with another\nSnowflake account in any Snowflake region supported\nby the Snowflake Native App Framework.",
        "See About Listings for details.",
        "After a provider publishes a listing containing an application package, consumers can discover the listing and\ninstall the application.",
        "A Snowflake Native App is the database object installed in the consumer account. When a consumer installs the Snowflake Native App,\nSnowflake creates the application and runs the setup script to create the required objects within the application.\nSee Install and test an app locally for details.",
        "After installing the application, consumers can perform additional tasks, including:",
        "Enable logging and event sharing\nto help providers troubleshoot the application.",
        "Grant privileges required by the application.",
        "See Working with Applications as a Consumer\nfor details on how consumers install and manage an application.",
        "A Snowflake Native App with Snowpark Container Services (app with containers) is a Snowflake Native App that runs container workloads in Snowflake.\nContainer apps can run any containerized service supported by Snowpark Container Services.",
        "Apps with containers leverage all of the features of the Snowflake Native App Framework, including provider IP protection, security\nand governance, data sharing, monetization, and integration with compute resources.",
        "Like any Snowflake Native App, an app with containers is comprised of an application package and application\nobject. However, there are some differences as shown in the following image:",
        "To manage containers, the application package must have access to a services specification file on a\nstage. Within this file, there are references to the container images required by the app. These images\nmust be stored in an image repository in the provider account.",
        "When a consumer installs an app with containers, the application object that is created contains a\ncompute pool that stores the containers required by the app.",
        "A compute pool is a collection of one or more virtual machine (VM) nodes on which Snowflake runs your\nSnowpark Container Services jobs and services. When a consumer installs an app with containers, they can\ngrant the CREATE COMPUTE POOL privilege to the app or they can create the compute pools manually.",
        "When an app with containers is installed in the consumer account, the query history of the services\nis available in the consumer account. To protect a provider\u2019s confidential information, the Snowflake Native App Framework redacts\nthe following information:",
        "The query text is hidden from the QUERY_HISTORY view.",
        "All information in the ACCESS_HISTORY view is hidden.",
        "The Query Profile graph for the service\u2019s query is collapsed\ninto a single empty node instead of displaying the full query profile tree.",
        "Depending on the type of user, Snowflake requires different types of authentication for\nusers in the provider account.",
        "Snowflake recommends that users in a provider account enroll in\nmulti-factor authentication (MFA) if they do not have the\nTYPE property set to SERVICE. In a future update, multi-factor\nauthentication will be mandatory for these types of users. Non-service users who use\nfederated authentication and single sign-on (SSO)\nmust have MFA enabled as part of their authentication process.",
        "Users who have the TYPE parameter set to SERVICE must use\nkey-pair authentication or\nOAuth.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}