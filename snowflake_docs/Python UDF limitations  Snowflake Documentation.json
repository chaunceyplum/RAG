{
    "url": "https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-limitations",
    "title": "Python UDF limitations | Snowflake Documentation",
    "paragraphs": [
        "This topic describes the limitations in place for handlers written in Python.",
        "Although your Python function can use modules and functions in the standard Python packages, Snowflake security\nconstraints disable some capabilities. For details, see the section\ntitled Following good security practices.",
        "Avoid code that assumes a specific operating system.",
        "Python UDFs are not sharable. Database objects that use Python UDFs are also not sharable. For example, you cannot:",
        "Directly share a Python UDF.",
        "Share a view that calls a Python UDF.",
        "Share a function that calls a Python UDF.",
        "Share a table with a masking or row access policy that calls a Python UDF.",
        "Granting USAGE privilege on a Python UDF might allow the recipient to see the contents of files imported by that UDF. If you grant the\nUSAGE privilege on a Python UDF to a role, and if that role executes a statement that calls that Python UDF, then any Python UDF in the same\nstatement could read the contents of any files imported by the Python UDF on which you granted USAGE privilege.",
        "Database replication is supported for in-line Python UDFs. However, replication is blocked if a Python UDF has a dependency on a file in a stage (i.e.\na function created using the IMPORTS clause). This limitation might be removed in future versions.",
        "Snowflake uses the Python zipimport module to import Python code from stages. As a result, any zipimport limitations\nwill also be present with UDFs. For more about zipimport, see the\nzipimport reference.",
        "A Python UDF can be cloned when the database or schema containing the Python UDF is cloned.\nTo be cloned, the Python UDF must meet the following condition(s):",
        "If the Python UDF references a stage, that stage must be\noutside the schema (or database) being cloned.",
        "You can keep a Python UDF and its referenced stage(s) in separate schemas (and/or separate databases) the following ways:",
        "Wherever the Python UDF references a stage, use a qualified stage name (e.g. \u201cmy_db.my_schema.my_stage()\u201d)\ndifferent from the schema or database of the Python UDF. If the cloning operation clones a database, the stage\nreference should include the database and schema. If the cloning operation clones a schema, the stage reference\nshould include the schema (and optionally the database).",
        "Create the referenced stage by using a non-qualified stage name (which implicitly uses the current session\u2019s active\ndatabase and schema), and create the Python UDF by using a qualified name that does not match the session\u2019s\ncurrent database and schema.",
        "Use the user\u2019s stage as the referenced stage (the user\u2019s stage is separate from any database\u2019s stage or schema\u2019s stage).",
        "If one or more Python UDFs in the schema or database do not meet the required conditions, the schema or database can\nstill be cloned, but the non-compliant Python UDFs are omitted from the clone without any error or warning message.",
        "Each cloned Python UDF has the same definition as the original. That definition includes any references to stages.\nThe stage references in the Python UDF must be fully-qualified, and therefore are absolute, not relative to the\nschema or database being cloned. Because both the original and the clone point to the same stage(s) and file(s):",
        "Dropping the stage or removing required files from the stage disables both the original and cloned UDF.",
        "Altering the stage or the files on the stage affects both the\noriginal and cloned UDF.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}