{
    "url": "https://docs.snowflake.com/en/user-guide/data-load-transform.html",
    "title": "Transforming data during a load | Snowflake Documentation",
    "paragraphs": [
        "Snowflake supports transforming data while loading it into a table using the COPY INTO <table> command, dramatically simplifying your ETL pipeline for basic transformations. This feature helps you avoid the use of temporary tables to store pre-transformed data when reordering columns during a data load. This feature applies to both bulk loading and Snowpipe.",
        "The COPY command supports:",
        "Column reordering, column omission, and casts using a SELECT statement. There is no requirement for your data files to have the same number and ordering of columns as your target table.",
        "The ENFORCE_LENGTH | TRUNCATECOLUMNS option, which can truncate text strings that exceed the target column length.",
        "For general information about querying staged data files, see Querying Data in Staged Files.",
        "This section provides usage information for transforming staged data files during a load.",
        "The following file format types are supported for COPY transformations:",
        "CSV",
        "JSON",
        "Avro",
        "ORC",
        "Parquet",
        "XML",
        "To parse a staged data file, it is necessary to describe its file format:",
        "The default format is character-delimited UTF-8 text. The default field delimiter is a comma character (,). The default record delimiter is the new line character. If the source data is in another format, specify the file format type and options.",
        "When querying staged data files, the ERROR_ON_COLUMN_COUNT_MISMATCH option is ignored. There is no requirement for your data files to have the same number and ordering of columns as your target table.",
        "Specify the format type and options that match your data files.",
        "To explicitly specify file format options, set them in one of the following ways:",
        "Querying staged data files using a SELECT statement:",
        "As file format options specified for a named file format or stage object. The named file format/stage object can then be referenced in the SELECT statement.",
        "Loading columns from staged data files using a COPY INTO <table> statement:",
        "As file format options specified directly in the COPY INTO <table> statement.",
        "As file format options specified for a named file format or stage object. The named file format/stage object can then be referenced in the COPY INTO <table> statement.",
        "Snowflake currently supports the following subset of functions for COPY transformations:",
        "ARRAY_CONSTRUCT",
        "ARRAY_SIZE",
        "ASCII",
        "CASE",
        "CAST , ::",
        "CEIL",
        "CHECK_JSON",
        "CHECK_XML",
        "CHR , CHAR",
        "CONCAT , ||",
        "CONVERT_TIMEZONE",
        "ENDSWITH",
        "EQUAL_NULL",
        "FLOOR",
        "GET",
        "GET_PATH , :",
        "HEX_DECODE_STRING",
        "HEX_ENCODE",
        "IFF",
        "IFNULL",
        "[ NOT ] ILIKE",
        "[ NOT ] IN",
        "IS_ARRAY",
        "IS_BOOLEAN",
        "IS_DECIMAL",
        "IS_INTEGER",
        "IS_NULL_VALUE",
        "IS_OBJECT",
        "IS_TIME",
        "IS_TIMESTAMP_*",
        "LENGTH, LEN",
        "[ NOT ] LIKE",
        "LPAD",
        "LTRIM",
        "MD5 , MD5_HEX",
        "NULLIF",
        "NVL",
        "NVL2",
        "OBJECT_CONSTRUCT",
        "PARSE_IP",
        "PARSE_JSON",
        "PARSE_URL",
        "PARSE_XML",
        "RANDOM",
        "REGEXP_REPLACE",
        "REGEXP_SUBSTR",
        "REPLACE",
        "REVERSE",
        "RPAD",
        "RTRIM",
        "SPLIT",
        "SPLIT_PART",
        "STARTSWITH",
        "SUBSTR , SUBSTRING",
        "TO_ARRAY",
        "TO_BINARY",
        "TO_BOOLEAN",
        "TO_CHAR , TO_VARCHAR",
        "TO_DATE , DATE",
        "Note that when this function is used to explicitly cast a value, neither the DATE_FORMAT file format option nor the DATE_INPUT_FORMAT parameter is applied.",
        "TO_DECIMAL , TO_NUMBER , TO_NUMERIC",
        "TO_DOUBLE",
        "TO_OBJECT",
        "TO_TIME , TIME",
        "Note that when this function is used to explicitly cast a value, neither the TIME_FORMAT file format option nor the TIME_INPUT_FORMAT parameter is applied.",
        "TO_TIMESTAMP / TO_TIMESTAMP_*",
        "Note that when this function is used to explicitly cast a value, neither the TIMESTAMP_FORMAT file format option nor the TIMESTAMP_INPUT_FORMAT parameter is applied.",
        "TO_VARIANT",
        "TRIM",
        "TRY_CAST",
        "TRY_HEX_DECODE_STRING",
        "TRY_TO_BINARY",
        "TRY_TO_BOOLEAN",
        "TRY_TO_DATE",
        "Note that the COPY INTO <table> command does not support the optional format argument for this function.",
        "TRY_TO_DECIMAL, TRY_TO_NUMBER, TRY_TO_NUMERIC",
        "TRY_TO_DOUBLE",
        "TRY_TO_TIME",
        "Note that the COPY INTO <table> command does not support the optional format argument for this function.",
        "TRY_TO_TIMESTAMP / TRY_TO_TIMESTAMP_*",
        "Note that the COPY INTO <table> command does not support the optional format argument for this function.",
        "UNICODE",
        "UUID_STRING",
        "XMLGET",
        "Note in particular that the VALIDATE function ignores the\nSELECT list in a COPY INTO <table> statement. The function parses the files referenced in the statement\nand returns any parsing errors. This behavior can be surprising if you expect the function to\nevaluate the files in the context of the COPY INTO <table> expressions.",
        "Note that COPY transformations do not support the FLATTEN function, or JOIN or GROUP BY (aggregate) syntax.",
        "The list of supported functions might expand over time.",
        "The following categories of functions are also supported:",
        "Scalar SQL UDFs.",
        "Note",
        "For Scalar SQL UDFs, Snowflake has limited support for transformation error handling, and you may encounter inconsistent or unexpected ON_ERROR copy option behavior.",
        "Filtering the results of a FROM clause using a WHERE clause is not supported. The ORDER BY, LIMIT,FETCH,TOP keywords in SELECT statements are also not supported.",
        "The DISTINCT keyword in SELECT statements is not fully supported. Specifying the keyword can lead to inconsistent or unexpected ON_ERROR copy option behavior.",
        "The VALIDATION_MODE parameter does not support COPY statements that transform data during a load.",
        "Instead of using CURRENT_TIME, CURRENT_TIMESTAMP default column values to capture load time, we recommend that you query METADATA$START_SCAN_TIME to get an accurate time value of record loading. For more information, refer to Querying Metadata for Staged Files.",
        "You are not allowed to use the MATCH_BY_COLUMN_NAME copy option with a SELECT statement for transforming data during a load in all cases. These two options can still be used separately, but cannot be used together. Any attempt to do so will result in the following error: SQL compilation error: match_by_column_name is not supported with copy transform.",
        "Load a subset of data into a table. For any missing columns, Snowflake inserts the default values.\nThe following example loads data from columns 1, 2, 6, and 7 of a staged CSV file:",
        "The following example reorders the column data from a staged CSV file before loading it into a table.\nAdditionally, the COPY statement uses the SUBSTR , SUBSTRING function to remove the first few characters of a string before\ninserting it:",
        "Convert staged data into other data types during a data load. All conversion functions are supported.",
        "For example, convert strings as binary values, decimals, or timestamps using the TO_BINARY, TO_DECIMAL , TO_NUMBER , TO_NUMERIC, and TO_TIMESTAMP / TO_TIMESTAMP_* functions, respectively.",
        "Sample CSV file:",
        "SQL statements:",
        "Create a sequence object using CREATE SEQUENCE. When loading data into a table using the COPY command, access the object using a NEXTVAL expression to sequence the data in a target number column. For more information about using sequences in queries, see Using Sequences.",
        "Set the AUTOINCREMENT or IDENTITY default value for a number column. When loading data into a table using the COPY command, omit the column in the SELECT statement. The statement automatically populates the column.",
        "The examples in this section apply to any semi-structured data type except where noted.",
        "The following example loads repeating elements from a staged semi-structured file into separate table columns with different data types.",
        "This example loads the following semi-structured data into separate columns in a relational table, with the location object values loaded\ninto a VARIANT column and the remaining values loaded into relational columns:",
        "The following SQL statements load the file sales.json from the internal stage mystage:",
        "Note",
        "This example loads JSON data, but the SQL statements are similar when loading semi-structured data of other types (e.g. Avro, ORC, etc.).",
        "For an additional example using Parquet data, see Load Parquet Data into Separate Columns (in this topic).",
        "Similar to the previous example, but loads semi-structured data from a file in the Parquet format. This example is provided for users who\nare familiar with Apache Parquet:",
        "FLATTEN is a table function that produces a lateral view of a VARIANT, OBJECT, or ARRAY column. Using the sample data from Load semi-structured Data into Separate Columns, create a table with a separate row for each element in the objects.",
        "Following the instructions in Load semi-structured Data into Separate Columns, you can load individual elements from semi-structured data into different columns in your target table. Additionally, using the SPLIT function, you can split element values that contain a separator and load them as an array.",
        "For example, split IP addresses on the dot separator in repeating elements. Load the IP addresses as arrays in separate columns:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}