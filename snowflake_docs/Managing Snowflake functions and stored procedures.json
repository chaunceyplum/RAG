{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-functions-procedures",
    "title": "Managing Snowflake functions and stored procedures with Python | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "You can use Python to manage user-defined functions (UDFs) and stored procedures in Snowflake. When you create a UDF or procedure, you\nwrite its logic in one of the supported handler languages, then create it using the Snowflake Python APIs. For more information about UDFs and\nprocedures, see Extending Snowflake with Functions and Procedures.",
        "The examples in this topic assume that you\u2019ve added code to connect with Snowflake and to create a Root object from which to use the\nSnowflake Python APIs.",
        "For example, the following code uses connection parameters defined in a configuration file to create a connection to Snowflake:",
        "Using the resulting Session object, the code creates a Root object to use the API\u2019s types and methods. For more information,\nsee Connect to Snowflake with the Snowflake Python APIs.",
        "Minimum API version required",
        "0.13.0",
        "You can manage user-defined functions (UDFs), which you can write to extend the system to perform operations that are not available through\nthe built-in system-defined functions provided by Snowflake. After you create a UDF, you can reuse it multiple times. For more information,\nsee User-defined functions overview.",
        "Note",
        "Calling UDFs by using the API is currently not supported.",
        "The Snowflake Python APIs represents UDFs with two separate types:",
        "UserDefinedFunction: Exposes a UDF\u2019s properties such as its name, list of arguments, return type, and function definition.",
        "UserDefinedFunctionResource: Exposes methods you can use to fetch a corresponding UserDefinedFunction object, rename the\nUDF, and drop the UDF.",
        "To create a UDF, first create a UserDefinedFunction object, and then create a UserDefinedFunctionCollection object from the\nAPI Root object. Using UserDefinedFunctionCollection.create, add the new UDF to Snowflake.",
        "When you create a UDF, you specify a handler whose code is written in one of the following supported languages.",
        "Code in the following example creates a UserDefinedFunction object that represents a UDF named my_python_function in the\nmy_db database and the my_schema schema, with the specified arguments, return type, language, and UDF Python definition:",
        "Code in the following example creates a UserDefinedFunction object that represents a UDF named my_java_function in the\nmy_db database and the my_schema schema, with the specified arguments, return type, language, and UDF Java definition:",
        "Code in the following example creates a UserDefinedFunction object that represents a UDF named my_javascript_function in the\nmy_db database and the my_schema schema, with the specified arguments, return type, language, and UDF JavaScript definition:",
        "Code in the following example creates a UserDefinedFunction object that represents a UDF named my_scala_function in the\nmy_db database and the my_schema schema, with the specified arguments, return type, language, and UDF Scala definition:",
        "Code in the following example creates a UserDefinedFunction object that represents a UDF named my_sql_function in the\nmy_db database and the my_schema schema, with the specified arguments, return type, language, and UDF SQL definition:",
        "You can get information about a UDF by calling the UserDefinedFunctionResource.fetch method, which returns a\nUserDefinedFunction object.",
        "Code in the following example fetches information about the my_javascript_function(DOUBLE) UDF in the my_db database and the\nmy_schema schema:",
        "Note",
        "When getting a UDF resource object, you must specify the full signature (the UDF name and its parameter data types) because UDFs can be\noverloaded.",
        "You can list UDFs using the UserDefinedFunctionCollection.iter method, which returns a PagedIter iterator of\nUserDefinedFunction objects.",
        "Code in the following example lists UDFs whose name starts with my_java in the my_db database and the my_schema schema, and\nthen prints the name of each:",
        "You can rename a UDF with a UserDefinedFunctionResource object.",
        "Code in the following example gets the my_javascript_function(DOUBLE) UDF resource object in the my_db database and the\nmy_schema schema, and then renames the UDF to my_other_js_function while also moving it to the my_other_db database and the\nmy_other_schema schema:",
        "You can drop a UDF with a UserDefinedFunctionResource object.",
        "Code in the following example gets the my_javascript_function(DOUBLE) UDF resource object and then drops the UDF:",
        "Minimum API version required",
        "0.13.0",
        "You can manage stored procedures, which you can write to extend the system with procedural code that executes SQL. In a stored procedure,\nyou can use programmatic constructs to perform branching and looping. After you create a stored procedure, you can reuse it multiple times.\nFor more information, see Stored procedures overview.",
        "The Snowflake Python APIs represents procedures with two separate types:",
        "Procedure: Exposes a procedure\u2019s properties such as its name, list of arguments, return type, and procedure definition.",
        "ProcedureResource: Exposes methods you can use to fetch a corresponding Procedure object, call the procedure, and drop\nthe procedure.",
        "To create a procedure, first create a Procedure object, and then create a ProcedureCollection object from the API\nRoot object. Using ProcedureCollection.create, add the new procedure to Snowflake.",
        "Code in the following example creates a Procedure object that represents a procedure named my_procedure in the my_db\ndatabase and the my_schema schema, with the specified arguments, return type, and SQL procedure definition:",
        "You can call a procedure with a ProcedureResource object.",
        "Code in the following example gets the my_procedure(NUMBER, NUMBER) procedure resource object, creates a CallArgumentList\nobject, and then calls the procedure using that list of arguments.",
        "Note",
        "When getting a procedure resource object, you must specify the full signature (the procedure name and its parameter data types) because\nprocedures can be overloaded.",
        "You can get information about a procedure by calling the ProcedureResource.fetch method, which returns a Procedure object.",
        "Code in the following example fetches information about the my_procedure(NUMBER, NUMBER) procedure in the my_db database and the\nmy_schema schema:",
        "You can list procedures using the ProcedureCollection.iter method, which returns a PagedIter iterator of Procedure\nobjects.",
        "Code in the following example lists procedures whose name starts with my in the my_db database and the my_schema schema, and\nthen prints the name of each:",
        "You can drop a procedure with a ProcedureResource object.",
        "Code in the following example gets the my_procedure(NUMBER, NUMBER) procedure resource object in the my_db database and the\nmy_schema schema, and then drops the procedure.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}