{
    "url": "https://docs.snowflake.com/en/user-guide/security-access-control-overview",
    "title": "Overview of Access Control | Snowflake Documentation",
    "paragraphs": [
        "This topic provides information on the main access control topics in Snowflake.",
        "Snowflake\u2019s approach to access control combines aspects from both of the following models:",
        "Discretionary Access Control (DAC): Each object has an owner, who can in turn grant access to that object.",
        "Role-based Access Control (RBAC): Access privileges are assigned to roles, which are in turn assigned to users.",
        "The key concepts to understanding access control in Snowflake are:",
        "Securable object: An entity to which access can be granted. Unless allowed by a grant, access is denied.",
        "Role: An entity to which privileges can be granted. Roles are in turn assigned to users. Note that roles can also be assigned to other roles, creating a role hierarchy.",
        "Privilege: A defined level of access to an object. Multiple distinct privileges may be used to control the granularity of access granted.",
        "User: A user identity recognized by Snowflake, whether associated with a person or program.",
        "In the Snowflake model, access to securable objects is allowed via privileges assigned to roles, which are in turn assigned to users or\nother roles. Granting a role to another role creates a role hierarchy, which is explained in the\nRole hierarchy and privilege inheritance section (in this topic).",
        "In addition, each securable object has an owner that can grant access to other roles. This model is different from a user-based access\ncontrol model in which rights and privileges are assigned to each user or groups of users. The Snowflake model is designed to provide a\nsignificant amount of both control and flexibility.",
        "Every securable object resides within a logical container in a hierarchy of containers. The top-most container is the customer\norganization. Securable objects such as tables, views, functions, and stages are contained in a schema object, which are in turn\ncontained in a database. All databases for your Snowflake account are contained in the account object. This hierarchy of objects and\ncontainers is illustrated below:",
        "To own an object means that a role has the OWNERSHIP\nprivilege on the object. Each securable object is owned by a single role, which by\ndefault is the role used to create the object. When this role is assigned to users, they effectively have shared control over the object.\nThe GRANT OWNERSHIP command lets you transfer the ownership of an object from one role to another role, including\nto database roles. This command also specifies the securable objects in each container.",
        "Note",
        "Private notebooks are owned by a user, and not by their primary role.",
        "In a regular schema, the owner role has all privileges on the object by default, including the ability to grant or revoke privileges on the\nobject to other roles. In addition, ownership can be transferred from one role to another. However, in a\nmanaged access schema, object owners lose the ability to make grant decisions. Only the schema owner\n(i.e. the role with the OWNERSHIP privilege on the schema) or a role with the MANAGE GRANTS privilege can grant privileges on objects in\nthe schema.",
        "The ability to perform SQL actions on objects is defined by the privileges granted to the active role in a user session. The following are\nexamples of SQL actions available on various objects in Snowflake:",
        "Ability to create a warehouse.",
        "Ability to list tables contained in a schema.",
        "Ability to add data to a table.",
        "Roles are the entities to which privileges on securable objects can be granted and\nrevoked. Roles are assigned to users to allow them to perform actions required for business functions in their organization. A user can be\nassigned multiple roles. This allows users to switch roles (i.e. choose which role is active in the current Snowflake session) to perform\ndifferent actions using separate sets of privileges.",
        "There are a small number of system-defined roles\nin a Snowflake account. System-defined roles cannot be dropped. In addition, the privileges granted\nto these roles by Snowflake cannot be revoked.",
        "Users who have been granted a role with the necessary privileges can create custom roles to meet specific business and security needs.",
        "Roles can be also granted to other roles, creating a hierarchy of roles. The privileges associated with a role are inherited by any roles\nabove that role in the hierarchy. For more information about role hierarchies and privilege inheritance, see\nRole Hierarchy and Privilege Inheritance (in this topic).",
        "Note",
        "A role owner (i.e. the role that has the OWNERSHIP privilege on the role) does\nnot inherit the privileges of the owned role. Privilege inheritance is only\npossible within a role hierarchy.",
        "Although additional privileges can be granted to the system-defined roles, it is not recommended. System-defined roles are created with\nprivileges related to account-management. As a best practice, it is not recommended to mix account-management privileges and\nentity-specific privileges in the same role. If additional privileges are needed, Snowflake recommends granting the additional privileges\nto a custom role and assigning the custom role to the system-defined role.",
        "The following role types vary in their scope, which enable administrators to authorize and restrict access to objects in your account.",
        "Note",
        "Except where noted in the product documentation, the term role refers to either type.",
        "To permit SQL actions on any object in your account, grant privileges on the object to an account role.",
        "To limit SQL actions to a single database, as well as any object in the database, grant privileges on the object to a database role\nin the same database.",
        "Note that database roles cannot be activated directly in a session. Grant database\nroles to account roles, which can be activated in a session.",
        "For more information about database roles, see:",
        "Role hierarchy and privilege inheritance (in this topic)",
        "Database roles and role hierarchies (in this topic)",
        "Managing database object access using database roles",
        "Database roles in the shared SNOWFLAKE database.",
        "CREATE <object> \u2026 CLONE",
        "To permit access to an instance of a class, grant an instance role to\nan account role.",
        "A class may have one or more class roles with different privileges granted to each role. When an instance of a class is created,\nthe instance role(s) can be granted to account roles to grant access to instance methods.",
        "Note that instance roles cannot be activated directly in a session. Grant instance\nroles to account roles, which can be activated in a session.",
        "For more information, see Instance roles.",
        "To enable consumer access to objects in a Snowflake Native App, the provider creates the application role and grants privileges to the\napplication role in the set up script.",
        "However, to support specific functionality for a particular feature, such as granting access to objects in which Snowflake is the owner,\nSnowflake can provide one or more system application roles. You can grant the system application roles to account roles at your\ndiscretion.",
        "System application roles are discussed in the context of a specific feature because that specific feature is the only place where you\ncan use the system application role(s). For example:",
        "Budgets: Application roles to manage the account budget.",
        "Data Quality and data metric functions (DMFs): View the DMF results.",
        "To allow a role access to service endpoints, grant the service role to that role. You can grant a service role to an account role, an application role, or a database role. For more information, see Managing access to service endpoints.",
        "Active roles serve as the source of authorization for any action taken by a user in a session. Both the\nprimary role and any secondary roles can be activated in a user session.",
        "A role becomes an active role in either of the following ways:",
        "When a session is first established, the user\u2019s default role and default secondary roles are activated as the session primary and\nsecondary roles, respectively.",
        "Note that client connection properties used to establish the session could explicitly override the primary role or secondary roles to use.",
        "Executing a USE ROLE or USE SECONDARY ROLES statement activates a different primary\nrole or secondary roles, respectively. These roles can change over the course of a session if either command is executed again.",
        "(aka Organization Administrator in an organization account)",
        "Role that manages operations of a multi-account organization at the organization level, including managing the lifecycle of accounts and\nviewing organization-level usage information.",
        "(aka Organization Administrator in a regular account)",
        "Role that manages operations at the organization level. More specifically, this role:",
        "Can create accounts in the organization.",
        "Can view all accounts in the organization (using SHOW ACCOUNTS) as well as all regions enabled\nfor the organization (using SHOW REGIONS).",
        "Can view usage information across the organization.",
        "(aka Account Administrator)",
        "Role that encapsulates the SYSADMIN and SECURITYADMIN system-defined roles. It is the top-level role in the system and should be granted\nonly to a limited/controlled number of users in your account.",
        "(aka Security Administrator)",
        "Role that can manage any object grant globally, as well as create, monitor, and manage users and roles. More specifically, this role:",
        "Is granted the MANAGE GRANTS security privilege to be able to modify any grant, including revoking it.",
        "Note",
        "The MANAGE GRANTS privilege provides the ability to grant and revoke privileges. It does not give the SECURITYADMIN the ability to perform other actions such as creating objects. To create an object, the SECURITYADMIN role must also be granted the privileges needed to create the object. For example, to create a database role, the SECURITYADMIN must also be granted the CREATE DATABASE ROLE privilege, as described in CREATE DATABASE ROLE Access control requirements.",
        "Inherits the privileges of the USERADMIN role via the system role hierarchy (i.e. USERADMIN role is granted to SECURITYADMIN).",
        "(aka User and Role Administrator)",
        "Role that is dedicated to user and role management only. More specifically, this role:",
        "Is granted the CREATE USER and CREATE ROLE security privileges.",
        "Can create users and roles in the account.",
        "This role can also manage users and roles that it owns. Only the role with the OWNERSHIP privilege on an object (i.e. user or role), or\na higher role, can modify the object properties.",
        "(aka System Administrator)",
        "Role that has privileges to create warehouses and databases (and other objects) in an account.",
        "If, as recommended, you create a role hierarchy that ultimately assigns all\ncustom roles to the SYSADMIN role, this role also has the ability\nto grant privileges on warehouses, databases, and other objects to other roles.",
        "Pseudo-role that is automatically granted to every user and every role in your account. The PUBLIC role can own securable objects,\njust like any other role; however, the objects owned by the role are, by definition, available to every other user and role in your\naccount.",
        "This role is typically used in cases where explicit access control is not needed and all users are viewed as equal with regard to their\naccess rights.",
        "Custom account roles can be created using the USERADMIN role (or a higher role) as well as by any role to which the CREATE ROLE privilege has been granted.",
        "Custom database roles can be created by the database owner (i.e. the role that has the OWNERSHIP privilege on the database).",
        "By default, a newly-created role is not assigned to any user, nor granted to any other role.",
        "When creating roles that will serve as the owners of securable objects in the system, Snowflake recommends creating a hierarchy of custom\nroles, with the top-most custom role assigned to the system role SYSADMIN. This role structure allows system administrators to manage all\nobjects in the account, such as warehouses and database objects, while restricting management of users and roles to the USERADMIN role.",
        "Conversely, if a custom role is not assigned to SYSADMIN through a role hierarchy, the system administrators cannot manage the\nobjects owned by the role. Only those roles granted the MANAGE GRANTS privilege (only the SECURITYADMIN role by default) can view the\nobjects and modify their access grants.",
        "For instructions to create custom roles, see Creating custom roles.",
        "Access control privileges determine who can access and perform operations on specific objects in Snowflake. For each securable object,\nthere is a set of privileges that can be granted on it. For existing objects, privileges must be granted on individual objects\n(e.g. the SELECT privilege on the mytable table). To simplify grant management,\nfuture grants allow defining an initial set of privileges on objects created in a schema\n(i.e. grant the SELECT privilege on all new tables created in the myschema schema to a specified role).",
        "Privileges are managed using the GRANT <privileges> and REVOKE <privileges> commands.",
        "In regular (i.e. non-managed) schemas, use of these commands is restricted to the role that owns an object (i.e. has the OWNERSHIP\nprivilege on the object) or any roles that have the MANAGE GRANTS global privilege for the object (only the SECURITYADMIN role by default).",
        "In managed access schemas, object owners lose the ability to make grant decisions. Only the schema\nowner or a role with the MANAGE GRANTS privilege can grant privileges on objects in the schema, including future grants, centralizing\nprivilege management.",
        "Note that a role that holds the global MANAGE GRANTS privilege can grant additional privileges to the current (grantor) role.",
        "For more details, see Access control privileges.",
        "The following diagram illustrates the hierarchy for the system-defined roles, as well as the recommended structure for additional,\nuser-defined account roles and database roles. The highest-level database role in the example hierarchy is granted to a custom (i.e.\nuser-defined) account role. In turn, this role is granted to another custom role in a recommended structure that allows the system-defined\nSYSADMIN role to inherit the privileges of custom account roles and database roles:",
        "Note",
        "ORGADMIN is a separate system role that manages operations at the organization level. This role is not included in the hierarchy of\nsystem roles.",
        "For a more specific example of role hierarchy and privilege inheritance, consider the following scenario:",
        "Role 3 has been granted to Role 2.",
        "Role 2 has been granted to Role 1.",
        "Role 1 has been granted to User 1.",
        "In this scenario:",
        "Role 2 inherits Privilege C.",
        "Role 1 inherits Privileges B and C.",
        "User 1 has all three privileges.",
        "The following limitations currently apply to database roles:",
        "If a database role is granted to a share, then no other database roles can be granted to\nthat database role. For example, if database role d1.r1 is granted to a share, then attempting to grant database role d1.r2 to\nd1.r1 is blocked.",
        "In addition, if a database role is granted to another database role, the grantee database role cannot be granted to a share.",
        "Database roles that are granted to a share can be granted to other database roles, as well as account roles.",
        "Account roles cannot be granted to database roles in a role hierarchy.",
        "Note",
        "Currently, Snowsight does not recognize inherited privileges from database roles or application roles. For more information on\nthis limitation, see Snowsight Limitations.",
        "Every active user session has a \u201ccurrent role,\u201d also referred to as a primary role. When a session is initiated (e.g. a user connects via\nJDBC/ODBC or logs in to the Snowflake web interface), the current role is determined based on the following criteria:",
        "If a role was specified as part of the connection and that role is a role that has already been granted to the connecting user, the\nspecified role becomes the current role.",
        "If no role was specified and a default role has been set for the connecting user, that role becomes the current role.",
        "If no role was specified and a default role has not been set for the connecting user, the system role PUBLIC is used.",
        "In addition, a set of secondary roles can be activated in a user session. A user can perform SQL actions on objects in a session using\nthe aggregate privileges granted to the primary and secondary roles. The roles must be granted to the user before they can be activated in\na session. Note that while a session must have exactly one active primary role at a time, one can activate any number of secondary roles at the same time.",
        "Note",
        "A database role can neither be a primary nor a secondary role. To assume the privileges granted to a database role, grant the database\nrole to an account role. Only account roles can be activated in a session.",
        "Authorization to execute CREATE <object> statements comes from the primary role only. When an object is created, its\nownership is set to the currently active primary role. However, for any other SQL action, any permission granted to any active primary or\nsecondary role can be used to authorize the action. For example, if any role in a secondary role hierarchy owns an object (i.e. has the\nOWNERSHIP privilege on the object), the secondary roles would authorize performing any DDL actions on the object. Both the primary role as\nwell as all secondary roles inherit privileges from any roles lower in their role hierarchies.",
        "For organizations whose security model includes a large number of roles, each with a fine granularity of authorization via permissions, the\nuse of secondary roles simplifies role management. All roles that were granted to a user can be activated in a session. Secondary roles are\nparticularly useful for SQL operations such as cross-database joins that would otherwise require creating a parent role of the roles that\nhave permissions to access the objects in each database.",
        "During the course of a session, the user can use the USE ROLE or USE SECONDARY ROLES\ncommand to change the current primary or secondary roles, respectively. The user can use the CURRENT_SECONDARY_ROLES\nfunction to show all active secondary roles for the current session.",
        "When you create an object that requires one or more privileges to use, only the primary role and those roles that it directly or\nindirectly inherits are considered when searching for the grants of those privileges.",
        "For any other statement that requires one or more privileges\n(e.g. querying a table requires the SELECT privilege on a table with the USAGE privilege on the database and schema), the primary role, the\nsecondary roles, and any other roles that are inherited are considered when searching for the grants of those privileges.",
        "Note",
        "There is no concept of a \u201csuper-user\u201d or \u201csuper-role\u201d in Snowflake that can bypass authorization checks. All access requires appropriate\naccess privileges.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}