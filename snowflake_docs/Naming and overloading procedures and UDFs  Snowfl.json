{
    "url": "https://docs.snowflake.com/en/developer-guide/udf-stored-procedure-naming-conventions",
    "title": "Naming and overloading procedures and UDFs | Snowflake Documentation",
    "paragraphs": [
        "When you create or call stored procedures or user-defined functions (UDF), you\u2019ll need to be aware of the naming conventions that\nSnowflake allows and enforces for them.",
        "You can also overload stored procedures and UDFs, providing different signatures for a given procedure or function.",
        "Note",
        "The length of a user-defined function\u2019s name \u2013 the combined length of its name, return type, and the names of all of its\nparameters \u2013 must not exceed 10,000 bytes. Attempting to create a function whose name exceeds this limit will result in the following\nerror message:",
        "Names for procedures and UDFs must conform to the rules for Object identifiers.",
        "Note",
        "Snowflake does not allow creating functions with the same name as any of the system-defined functions.",
        "When you create a stored procedures or UDF, you create it in a specified database and schema. Procedures and UDFs have a\nfully-qualified name defined by their namespace in the form of db.schema.procedure_or_function_name.",
        "The following statement uses the fully-qualified name to call a stored procedure:",
        "When called without their fully-qualified name, procedures and UDFs are\nresolved according to the database and schema in use for the session. If\nyou specified a search path, that search path is used to\ndetermine the function or procedure to call.",
        "In contrast, many of the built-in, system-defined functions provided by Snowflake have no namespace. As a result, you can call\nthem from anywhere.",
        "Snowflake supports overloading procedures and functions. In a given\nschema, you can define multiple procedures or functions that have the same name but different signatures. The signatures must\ndiffer by the number of arguments, the types of the arguments, or both.",
        "For example, for UDFs:",
        "For stored procedures:",
        "If multiple signatures use the same number of arguments but have different types of arguments, you can use different names for\nthe arguments to indicate which signature to use when you call the function or procedure.",
        "Note",
        "For commands other than those that call the function or procedure (e.g. executing DESCRIBE FUNCTION,\nDROP PROCEDURE, GRANT <privileges>, etc.), you must use the data types of the\narguments to identify the signature to use.",
        "As is the case with calling any other procedure  or\nfunction, you can specify the arguments by name or by position.",
        "If you omit the argument names or if you use the same argument name for arguments of different types, Snowflake uses the number of\narguments and the types of the arguments to determine the signature to use. In these cases,\nautomatic type conversion (coercion) can affect the signature that is selected. For details,\nrefer to Caveat about relying on the argument data type to identify the signature to call.",
        "If you are relying on the data type of the argument (rather than the argument name) to identify the signature of the function or\nprocedure to call, note that the combination of automatic type conversion and overloading makes it easy for minor user errors to\ncause unexpected results.",
        "Consider the following examples, which create two SQL UDFs named add5:",
        "If you call add5 and specify a numeric argument without the argument name, then the first implementation is called. If you\nspecify a string-typed argument instead, the second implementation called.",
        "If the argument is neither a number nor a string, then the implementation depends on\nSnowflake\u2019s implicit type conversion rules.\nFor example, a date-typed argument is converted to a string because conversion from DATE to NUMBER is not supported. As a result,\nthe string implementation is called.",
        "For example:",
        "To avoid potential confusion, assign different argument names for different signatures, and use the argument names when calling\nthe function.",
        "In the example above, the two signatures use different argument names (n for the NUMBER argument and s for the VARCHAR\nargument). You can specify which signature to use by specifying the argument name:",
        "If you specified a search path, then each schema appearing in the search path\nis searched for a matching function, in the order that the schema appears in the search path. For each searched schema, Snowflake\nattempts to find a matching function, using implicit type conversions if necessary. If no match is found in a schema, then the\nnext schema is considered. Consider again the add5 functions, if they were defined in different schemas:",
        "The choice of which function to use for a numeric or string argument would depend on the search path:",
        "With the search path set to search schema s2 first, the function in s2 is used, even though it requires that an\nimplicit type conversion is applied to the argument.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}