{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.Series.replace",
    "title": "modin.pandas.Series.replace | Snowflake Documentation",
    "paragraphs": [
        "Replace values given in to_replace with value.",
        "Values of the DataFrame are replaced with other values dynamically.\nThis differs from updating with .loc or .iloc, which require\nyou to specify a location to update with some value.",
        "to_replace (str, regex, list, dict, Series, int, float, or None) \u2013",
        "How to find the values that will be replaced.",
        "numeric, str or regex:",
        "numeric: numeric values equal to to_replace will be\nreplaced with value",
        "str: string exactly matching to_replace will be replaced\nwith value",
        "regex: regexs matching to_replace will be replaced with\nvalue",
        "list of str, regex, or numeric:",
        "First, if to_replace and value are both lists, they\nmust be the same length.",
        "Second, if regex=True then all the strings in both\nlists will be interpreted as regexs otherwise they will match\ndirectly. This doesn\u2019t matter much for value since there\nare only a few possible substitution regexes you can use.",
        "str, regex and numeric rules apply as above.",
        "dict:",
        "Dicts can be used to specify different replacement values\nfor different existing values. For example,\n{{'a': 'b', 'y': 'z'}} replaces the value \u2018a\u2019 with \u2018b\u2019 and\n\u2018y\u2019 with \u2018z\u2019. To use a dict in this way, the optional value\nparameter should not be given.",
        "For a DataFrame a dict can specify that different values\nshould be replaced in different columns. For example,\n{{'a': 1, 'b': 'z'}} looks for the value 1 in column \u2018a\u2019\nand the value \u2018z\u2019 in column \u2018b\u2019 and replaces these values\nwith whatever is specified in value. The value parameter\nshould not be None in this case. You can treat this as a\nspecial case of passing two lists except that you are\nspecifying the column to search in.",
        "For a DataFrame nested dictionaries, e.g.,\n{{'a': {{'b': np.nan}}}}, are read as follows: look in column\n\u2018a\u2019 for the value \u2018b\u2019 and replace it with NaN. The optional value\nparameter should not be specified to use a nested dict in this\nway. You can nest regular expressions as well. Note that\ncolumn names (the top-level dictionary keys in a nested\ndictionary) cannot be regular expressions.",
        "None:",
        "This means that the regex argument must be a string,\ncompiled regular expression, or list, dict, ndarray or\nSeries of such elements. If value is also None then\nthis must be a nested dictionary or Series.",
        "See the examples section for examples of each of these.",
        "",
        "value (scalar, dict, list, str, regex, default None) \u2013 Value to replace any values matching to_replace with.\nFor a DataFrame a dict of values can be used to specify which\nvalue to use for each column (columns not in the dict will not be\nfilled). Regular expressions, strings and lists or dicts of such\nobjects are also allowed.",
        "inplace (bool, default False) \u2013 Whether to modify the DataFrame rather than creating a new one.",
        "limit (int, default None) \u2013 Maximum size gap to forward or backward fill.\nThis parameter is not supported.",
        "regex (bool or same types as to_replace, default False) \u2013 Whether to interpret to_replace and/or value as regular\nexpressions. Alternatively, this could be a regular expression or a\nlist, dict, or array of regular expressions in which case\nto_replace must be None.",
        "method ({{'pad', 'ffill', 'bfill'}}) \u2013 The method to use when for replacement, when to_replace is a\nscalar, list or tuple and value is None.\nThis parameter is not supported.",
        "DataFrame Object after replacement if inplace=False, None otherwise.",
        "DataFrame",
        "AssertionError \u2013",
        "If regex is not a bool and to_replace is not None.",
        "",
        "TypeError \u2013",
        "If to_replace is not a scalar, array-like, dict, or None\n    * If to_replace is a dict and value is not a list,\n      dict, ndarray, or Series\n    * If to_replace is None and regex is not compilable\n      into a regular expression or is a list, dict, ndarray, or\n      Series.\n    * When replacing multiple bool or datetime64 objects and\n      the arguments to to_replace does not match the type of the\n      value being replaced",
        "",
        "ValueError \u2013",
        "If a list or an ndarray is passed to to_replace and\n      value but they are not the same length.",
        "",
        "NotImplementedError \u2013",
        "If method or limit is provided.",
        "",
        "Notes",
        "Regex substitution is performed under the hood using snowflake backend.\nwhich supports POSIX ERE syntax for regular expressions. Please check usage\nnotes for details.\nhttps://docs.snowflake.com/en/sql-reference/functions-regexp#general-usage-notes",
        "Regular expressions only replace string values. If a regular expression is\ncreated to match floating point numbers, it will only match string data not\nnumeric data.",
        "This method has a lot of options. You are encouraged to experiment\nand play with this method to gain intuition about how it works.",
        "Examples",
        "Scalar `to_replace` and `value`",
        "dict-like `to_replace`",
        "Regular expression `to_replace`",
        "Compare the behavior of s.replace({{'a': None}}) and\ns.replace('a', None) to understand the peculiarities\nof the to_replace parameter:",
        "When one uses a dict as the to_replace value, it is like the\nvalue(s) in the dict are equal to the value parameter.\ns.replace({{'a': None}}) is equivalent to\ns.replace(to_replace={{'a': None}}, value=None, method=None):",
        "On the other hand, if None is explicitly passed for value, it will\nalso be respected:",
        "Was this page helpful?"
    ]
}