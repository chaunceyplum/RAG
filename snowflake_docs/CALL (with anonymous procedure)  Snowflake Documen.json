{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/call-with",
    "title": "CALL (with anonymous procedure) | Snowflake Documentation",
    "paragraphs": [
        "Creates and calls an anonymous procedure that is like a stored procedure but is not\nstored for later use.",
        "With this command, you both create an anonymous procedure defined by parameters in the WITH clause and call that procedure.",
        "You need not have a role with CREATE PROCEDURE schema privileges for this command.",
        "The procedure runs with caller\u2019s rights, which means that the procedure runs with\nthe privileges of the caller, uses the current session context, and has access to the caller\u2019s session variables and parameters.",
        "CREATE PROCEDURE , CALL.",
        "Preview Feature \u2014 Open",
        "Using tabular stored procedures with a Java handler or\nScala handler via RETURNS TABLE(...) is a preview feature\nthat is available to all accounts.",
        "For Java and Scala procedures with staged handlers, use the following syntax:",
        "For in-line procedures, use the following syntax:",
        "For a procedure in which the code is in a file on a stage, use the following syntax:",
        "Specifies the identifier (name) and any input arguments for the procedure.",
        "For the identifier:",
        "The identifier must start with an alphabetic character and cannot contain spaces or special characters unless the entire\nidentifier string is enclosed in double quotes (e.g. \u201cMy object\u201d). Identifiers enclosed in double quotes are also\ncase-sensitive. See Identifier requirements.",
        "For the input arguments:",
        "For arg_name, specify the name of the input argument.",
        "For arg_data_type, use the Snowflake data type that corresponds to the handler language that you are using.",
        "For Java procedures, see SQL-Java Data Type Mappings.",
        "For JavaScript procedures, see\nSQL and JavaScript data type mapping.",
        "For Python procedures, see\nSQL-Python Data Type Mappings.",
        "For Scala procedures, see SQL-Scala Data Type Mappings.",
        "For Snowflake Scripting, a SQL data type.",
        "Note",
        "For procedures you write in Java, Python, or Scala (which use Snowpark APIs), omit the argument for the Snowpark\nSession object.",
        "The Session argument is not a formal parameter that you specify. When you execute this command, Snowflake automatically\ncreates a Session object and passes it to the handler function for your procedure.",
        "Specifies the type of the result returned by the procedure.",
        "Use NOT NULL to specify that the procedure must return only non-null values; the default is NULL, meaning that the procedure\ncan return NULL.",
        "For result_data_type, use the Snowflake data type that corresponds to the type of the language that you are using.",
        "For Java procedures, see SQL-Java Data Type Mappings.",
        "For JavaScript procedures, see\nSQL and JavaScript data type mapping.",
        "For Python procedures, see\nSQL-Python Data Type Mappings.",
        "For Scala procedures, see SQL-Scala Data Type Mappings.",
        "For Snowflake Scripting, a SQL data type.",
        "Note",
        "Procedures you write in Java or Scala must have a return value. In Python, when a procedure returns no value, it is considered to be\nreturning None.",
        "Note that regardless of handler language, the WITH clause for this command must include a RETURNS clause that defines a return type,\neven if the procedure does not explicitly return anything.",
        "For RETURNS TABLE ( [ col_name col_data_type [ , ... ] ] ), if you know the\nSnowflake data types of the columns in the returned table, specify the column names and\ntypes:",
        "Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types:",
        "Note",
        "Currently, in the RETURNS TABLE(...) clause, you can\u2019t specify GEOGRAPHY as a column type. This\napplies whether you are creating a stored or anonymous procedure.",
        "If you attempt to specify GEOGRAPHY as a column type, calling the stored procedure results in the error:",
        "To work around this issue, you can omit the column arguments and types in RETURNS TABLE().",
        "RETURNS TABLE(...) is supported only in when the handler is written in the following languages:",
        "Java",
        "Python",
        "Scala",
        "Snowflake Scripting",
        "As a practical matter, outside of a Snowflake Scripting block,\nthe returned value cannot be used because the call cannot be part of an expression.",
        "Specifies the language of the procedure\u2019s handler code.",
        "Currently, the supported values for language include:",
        "JAVA (for Java)",
        "JAVASCRIPT (for JavaScript)",
        "PYTHON (for Python)",
        "SCALA (for Scala)",
        "SQL (for Snowflake Scripting)",
        "Defines the code executed by the procedure. The definition can consist of any valid code.",
        "Note the following:",
        "For procedures for which the code is not in-line, omit the AS clause. This includes procedures whose\nhandlers are on a stage.",
        "Instead, use the IMPORTS clause to specify the location of the file containing the code for the procedure. For\ndetails, see:",
        "Writing stored procedures in Python",
        "Writing stored procedures in Java",
        "Writing stored procedures in Scala",
        "You must use string literal delimiters (' or $$) around\nprocedure definition, even in Snowflake Scripting.",
        "For procedures in JavaScript, if you are writing a string that contains newlines, you can use\nbackquotes (also called \u201cbackticks\u201d) around the string.",
        "The following example of a JavaScript procedure uses $$ and backquotes because the body of the procedure\ncontains single quotes and double quotes:",
        "Snowflake does not validate the handler code. However, invalid handler code will result in errors when you execute the command.",
        "For more details about stored procedures, see Working with stored procedures.",
        "Specifies the identifier (name) for the procedure to call and any input arguments.",
        "You can either specify the input arguments by name (arg_name => arg) or by position (arg).",
        "Note the following:",
        "You must either specify all arguments by name or by position. You cannot specify some of the arguments by name and other\narguments by position.",
        "When specifying an argument by name, you cannot use double quotes around the argument name.",
        "If two functions or two procedures have the same name but different argument types, you can use the argument names to specify\nwhich function or procedure to execute, if the argument names are different. Refer to\nOverloading procedures and functions.",
        "The language runtime version to use. Currently, the supported versions are:",
        "Java: 11",
        "Python:",
        "3.9",
        "3.10",
        "3.11",
        "Scala: 2.12",
        "A comma-separated list of the names of packages deployed in Snowflake that should be included in the handler code\u2019s\nexecution environment. The Snowpark package is required for procedures, so it must always be referenced in the PACKAGES clause.\nFor more information about Snowpark, see Snowpark API.",
        "By default, the environment in which Snowflake runs procedures includes a selected set of packages for supported languages.\nWhen you reference these packages in the PACKAGES clause, it is not necessary to reference a file containing the package in the IMPORTS\nclause because the package is already available in Snowflake.",
        "For the list of supported packages and versions for a given language, query the\nINFORMATION_SCHEMA.PACKAGES view, specifying the language. For example:",
        "where language is java, python, or scala.",
        "The syntax for referring to a package in the PACKAGES clause varies by the package\u2019s language, as described below.",
        "Java",
        "Specify the package name and version number using the following form:",
        "To specify the latest version, specify latest for version.",
        "For example, to include a package from the latest Snowpark library in Snowflake, use the following:",
        "When specifying a package from the Snowpark library, you must specify version 1.3.0 or later.",
        "Python",
        "Snowflake includes a large number of packages available through Anaconda; for more information, see\nUsing third-party packages.",
        "Specify the package name and version number using the following form:",
        "To specify the latest version, omit the version number.",
        "For example, to include the spacy package version 2.3.5 (along with the latest version of the required Snowpark package), use the\nfollowing:",
        "When specifying a package from the Snowpark library, you must specify version 0.4.0 or later. Omit the version number to use the\nlatest version available in Snowflake.",
        "Scala",
        "Specify the package name and version number using the following form:",
        "To specify the latest version, specify latest for version.",
        "For example, to include a package from the latest Snowpark library in Snowflake, use the following:",
        "Snowflake supports using Snowpark version 0.9.0 or later in a Scala procedure. Note, however, that these versions have limitations.\nFor example, versions prior to 1.1.0 do not support the use of transactions in a procedure.",
        "Python",
        "Use the name of the procedure\u2019s function or method. This can differ depending on whether the code is in-line or\nreferenced at a stage.",
        "When the code is in-line, you can specify just the function name, as in the following example:",
        "When the code is imported from a stage, specify the fully-qualified handler function name as <module_name>.<function_name>.",
        "Java and Scala",
        "Use the fully-qualified name of the method or function for the procedure. This is typically in the\nfollowing form:",
        "where:",
        "corresponds to the package containing the object or class:",
        "Specifies the behavior of the procedure when called with null inputs. In contrast to system-defined functions, which\nalways return null when any input is null, procedures can handle null inputs, returning non-null values even when an\ninput is null:",
        "CALLED ON NULL INPUT will always call the procedure with null inputs. It is up to the procedure to handle such\nvalues appropriately.",
        "RETURNS NULL ON NULL INPUT (or its synonym STRICT) will not call the procedure if any input is null,\nso the statements inside the procedure will not be executed. Instead, a null value will always be returned. Note that\nthe procedure might still return null for non-null inputs.",
        "Default: CALLED ON NULL INPUT",
        "Sets the specified Snowflake Scripting variable to the return value of\nthe stored procedure.",
        "The location (stage), path, and name of the file(s) to import. You must set the IMPORTS clause to include any files that\nyour procedure depends on:",
        "If you are writing an in-line procedure, you can omit this clause, unless your code depends on classes defined outside\nthe procedure or resource files.",
        "Java or Scala: If you are writing a procedure whose handler will be compiled code, you must also include a path to the JAR file\ncontaining the procedure\u2019s handler.",
        "Python: If your procedure\u2019s code will be on a stage, you must also include a path to the module file your code is in.",
        "Each file in the IMPORTS clause must have a unique name, even if the files are in different subdirectories or different\nstages.",
        "Procedures are not atomic; if one statement in a procedure fails, the other statements in the\nprocedure are not necessarily rolled back. For information about procedures and transactions, see\nTransaction management.",
        "A procedure can return only a single value, such as a string (for example, a success/failure indicator)\nor a number (for example, an error code). If you need to return more extensive information, you can return a\nVARCHAR that contains values separated by a delimiter (such as a comma), or a semi-structured data type, such\nas VARIANT.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "Similar to when a WITH clause is used with a SELECT statement, a WITH clause used with CALL supports\nspecifying multiple CTEs separated by commas, in addition to the procedure definition. However, it is not possible to pass tabular\nvalues produced by a WITH clause to the CALL clause.",
        "It is, however, possible to specify a simple variable whose value is assigned in the WITH clause.",
        "The CALL clause must occur last in the syntax.",
        "Creating and calling a procedure with this command does not require a role with CREATE PROCEDURE schema privileges.",
        "The procedure\u2019s handler code will be able to perform only actions permitted for the role assigned to the person who ran this command.",
        "For Java procedures, see the known limitations.",
        "For Python procedures, see the known limitations.",
        "For Scala procedures, see the known limitations.",
        "The following example creates and calls a procedure, specifying the arguments by position:",
        "The following example creates and calls a procedure, specifying the arguments by name:",
        "For additional examples, refer to the following topics:",
        "For examples of Java procedures, see Writing stored procedures in Java.",
        "For examples of Python procedures, see Writing stored procedures in Python.",
        "For examples of Scala procedures, see Writing stored procedures in Scala.",
        "For examples of Snowflake Scripting stored procedures, see Writing stored procedures in Snowflake Scripting.",
        "For procedure examples, see Working with stored procedures.",
        "Was this page helpful?",
        "On this page"
    ]
}