{
    "url": "https://docs.snowflake.com/en/user-guide/querying-metadata",
    "title": "Querying Metadata for Staged Files | Snowflake Documentation",
    "paragraphs": [
        "Snowflake automatically generates metadata for files in internal (i.e. Snowflake) stages or external (Amazon S3, Google Cloud Storage, or Microsoft Azure) stages. This metadata is \u201cstored\u201d in virtual columns that can be:",
        "Queried using a standard SELECT statement.",
        "Loaded into a table, along with the regular data columns, using COPY INTO <table>. For general information about querying staged data files, see Querying Data in Staged Files.",
        "Currently, the following metadata columns can be queried or copied into tables:",
        "Name of the staged data file the current row belongs to. Includes the full path to the data file.",
        "Row number for each record in the staged data file.",
        "Checksum of the staged data file the current row belongs to.",
        "Last modified timestamp of the staged data file the current row belongs to. Returned as TIMESTAMP_NTZ.",
        "Start timestamp of operation for each record in the staged data file. Returned as TIMESTAMP_LTZ.",
        "Metadata cannot be inserted into existing table rows.",
        "Metadata columns can only be queried by name; as such, they are not included in the output of any of the following statements:",
        "SELECT *",
        "SHOW <objects>",
        "DESCRIBE <object>",
        "Queries on INFORMATION_SCHEMA views",
        "The following example illustrates staging multiple CSV data files (with the same file format) and then querying the metadata columns, as well as the regular data columns, in the files.",
        "This example assumes the files have the following names and are located in the root directory in a macOS or Linux environment:",
        "/tmp/data1.csv contains two records:",
        "/tmp/data2.csv contains two records:",
        "To stage and query the files:",
        "Note",
        "The file format is required in this example to correctly parse the fields in the staged files. In the second query, the file format is omitted, causing the | field delimiter to\nbe ignored and resulting in the values returned for $1 and $2.",
        "However, if the file format is included in the stage definition, you can omit it from the SELECT statement. See the next example for details.",
        "This example illustrates staging a JSON data file containing the following objects and then querying the metadata columns, as well as the objects, in the file:",
        "This example assumes the file is named /tmp/data1.json and is located in the root directory in a macOS or Linux environment.",
        "To stage and query the file:",
        "The COPY INTO <table> command supports copying metadata from staged data files into a target table. Use the data transformation syntax (i.e. a SELECT list) in your COPY statement.\nFor more information about transforming data using a COPY statement, see Transforming data during a load.",
        "The following example loads the metadata columns and regular data columns from Example 1: Querying the Metadata Columns for a CSV File into a table:",
        "Was this page helpful?",
        "On this page"
    ]
}