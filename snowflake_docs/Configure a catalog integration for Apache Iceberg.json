{
    "url": "https://docs.snowflake.com/en/user-guide/tables-iceberg-configure-catalog-integration-rest",
    "title": "Configure a catalog integration for Apache Iceberg\u2122 REST catalogs | Snowflake Documentation",
    "paragraphs": [
        "An Apache Iceberg\u2122 REST catalog integration lets Snowflake access\nApache Iceberg\u2122 tables managed in a remote catalog that complies with the\nopen source Apache Iceberg REST OpenAPI specification.",
        "You can connect to an Iceberg REST API that uses a public endpoint or a private network.",
        "To connect to an Iceberg REST API using a public endpoint, you can create a catalog integration that uses the following authentication methods:",
        "OAuth",
        "Bearer token or Personal Access Token (PAT)",
        "SigV4",
        "To connect to an Iceberg REST API that\u2019s hosted in a private network, you can create a catalog integration that uses\nSignature Version 4 (SigV4) authentication.",
        "Create a catalog integration for your chosen authentication method using the\nCREATE CATALOG INTEGRATION (Apache Iceberg\u2122 REST) command.\nThe values you specify for the REST_CONFIG and REST_AUTHENTICATION arguments\ndiffer according to the authentication method you choose.",
        "OAuth",
        "Bearer token or PAT",
        "SigV4",
        "The following example creates a REST catalog integration that uses OAuth to connect\nto Tabular.",
        "The following example creates a REST catalog integration that uses OAuth to connect\nto Databricks Unity Catalog.",
        "The following example creates a REST catalog integration that uses a PAT token to connect\nto Databricks Unity Catalog.",
        "The following diagram shows how Snowflake interacts with your REST catalog server using API Gateway and SigV4 authentication.",
        "Follow the steps in this section to use a REST API in\nAmazon API Gateway\nand Signature Version 4 (SigV4) authentication\nto securely connect Snowflake to an Iceberg REST catalog that isn\u2019t publicly accessible.",
        "Create a REST API in Amazon API Gateway",
        "Create an IAM policy and attach it to a role",
        "Attach an API Gateway resource policy (private APIs only)",
        "Select IAM-based authorization for your API",
        "Retrieve the endpoint URL",
        "Create a catalog integration for SigV4",
        "Configure the trust relationship in IAM",
        "To connect Snowflake to your Iceberg REST catalog, you need a\nREST API resource\nin Amazon API Gateway.",
        "If you don\u2019t already have a REST API resource in Amazon API Gateway for your Iceberg catalog,\nyou can create a simple REST API by modifying and importing an Iceberg catalog OpenAPI definition file or manually adding endpoints.",
        "Note",
        "To import the Iceberg catalog OpenAPI definition, you must modify the YAML file. Amazon API Gateway does not support all components\nof the OpenAPI 2.0 or 3.0 specifications. For more information, see\nAmazon API Gateway important notes for REST APIs.",
        "In the AWS Management Console, search for and select API Gateway.",
        "Select Create API.",
        "Select Build under REST API. To create a private REST API, select Build under REST API Private.",
        "Select one of the following options:",
        "To create an API by manually adding endpoints, select New API.",
        "To create an API using an OpenAPI definition file, select Import API, then upload the file or paste\nthe definition in the code editor.",
        "Enter an API name and optional Description.",
        "Note",
        "You don\u2019t need to enter a VPC endpoint ID when you create a private REST API.",
        "Select Create API.",
        "For more information about creating and developing a REST API in API Gateway, see\nthe Amazon API Gateway Developer Guide.",
        "In this step, you create an AWS IAM role that Snowflake can use to connect to API Gateway.\nYou attach a policy to the role that grants permission to call your API.",
        "In the AWS Management Console, search for and select IAM.",
        "From the left-hand navigation pane, select Policies.",
        "Select Create policy and then select JSON for the Policy editor.",
        "Replace the empty policy with a policy that has permission to invoke your API methods.\nFor example, the following general policy allows the invoke action for all API Gateway resources in an AWS account.",
        "Important",
        "As a best practice, use a policy that grants the minimum required privileges for your use case. For additional guidance and example policies,\nsee Control access to an API with IAM permissions.",
        "Select Next.",
        "Enter a Policy name (for example, snowflake_access) and an optional Description.",
        "Select Create policy.",
        "From the left-hand navigation pane in the IAM dashboard, select Roles.",
        "Select a role to attach the policy to. When you create a catalog integration, you specify this role. If you don\u2019t have a role, create a\nnew role.",
        "On the role Summary page in the Permissions tab, select Add permissions \u00bb Attach policies.",
        "Search for and check the box next to the policy that you created for API Gateway, then select Add permissions.",
        "On the role Summary page, copy the role ARN. You specify this ARN when you create a catalog integration.",
        "If your REST API is private, you must attach an Amazon API Gateway resource policy to your API. The resource\npolicy allows Snowflake to call your API from the Amazon Virtual Private Cloud (VPC) in which your Snowflake account is located.",
        "In Snowflake, call the SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO\nfunction to retrieve the ID for the VPC in which your Snowflake account is located. Copy the VPC ID from the function output.",
        "Output:",
        "Follow the instructions in Attaching API Gateway resource policies\nto attach a resource policy to your REST API.",
        "Paste and modify the following example policy.",
        "The first statement in the policy denies all requests that don\u2019t originate from the Snowflake VPC. The second statement allows the invoke\naction (for all methods) from requests originating from the Snowflake VPC that use the\nassumed-role session principal.",
        "To learn more about API Gateway resource policies, see:",
        "Controlling access to an API with API Gateway resource policies",
        "API Gateway resource policy examples",
        "Select IAM-based authorization for each method that you want to provide access to in your REST API.\nWith IAM-based authorization, Snowflake can use the IAM role that you configured to make\ncalls to the API.",
        "In the Amazon API Gateway console, select your REST API.",
        "For each method:",
        "Under Resources, select a method from the list.",
        "Under Method request settings, select Edit.",
        "For Authorization, select AWS IAM.",
        "Select Save.",
        "To apply the authorization changes, select Deploy API. For more information, see\nDeploying a REST API from the API Gateway console.",
        "Retrieve your REST API endpoint URL (or invoke URL). Your API must be deployed to a stage before you can\nretrieve the endpoint URL.",
        "In the Amazon API Gateway console, select your REST API.",
        "In the left-hand navigation pane, select Stages.",
        "Under Stage details, copy the Invoke URL.",
        "You specify the endpoint URL when you create a catalog integration.",
        "After you have a REST API in Amazon API Gateway and have completed the initial steps to\ncontrol access to your API using IAM permissions, you can create a catalog integration\nin Snowflake.",
        "To view the command syntax and parameter descriptions,\nsee CREATE CATALOG INTEGRATION (Apache Iceberg\u2122 REST).",
        "Public REST API",
        "To create a catalog integration for a public REST API, specify ICEBERG_REST\nas the CATALOG_SOURCE and use SIGV4 authentication.",
        "Include details such as your API endpoint URL and IAM role ARN.",
        "Private REST API",
        "To create a catalog integration for a private REST API, you must set the CATALOG_API_TYPE\nparameter to AWS_PRIVATE_API_GATEWAY.",
        "Note",
        "Both examples specify an\nexternal ID\n(SIGV4_EXTERNAL_ID = 'my_iceberg_external_id') that you can use in the trust relationship for your IAM role (in the next step).",
        "Specifying an external ID lets you use the same IAM role across multiple catalog integrations without updating the\nIAM role trust policy. Doing so is particularly useful in testing scenarios if you need to create or replace a catalog integration many times.",
        "Retrieve information about the AWS IAM user that was created for your\nSnowflake account when you created the catalog integration, and configure the trust\nrelationship for your IAM role.",
        "In Snowflake, call the DESCRIBE CATALOG INTEGRATION command:",
        "Record the following values:",
        "Value",
        "Description",
        "API_AWS_IAM_USER_ARN",
        "The AWS IAM user created for your Snowflake account, for example,\narn:aws:iam::123456789001:user/abc1-b-self1234.\nSnowflake provisions a single IAM user for your entire Snowflake account.",
        "API_AWS_EXTERNAL_ID",
        "The external ID that\u2019s needed to establish a trust relationship.\nIf you didn\u2019t specify an external ID (SIGV4_EXTERNAL_ID) when you created the catalog integration,\nSnowflake generates an ID for you to use. Record the value so that you can update your IAM role trust policy with the generated external ID.",
        "In the AWS Management Console, search for and select IAM.",
        "From the left-hand navigation pane, select Roles.",
        "Select the IAM role that you created for your catalog integration.",
        "Select the Trust relationships tab.",
        "Select Edit trust policy.",
        "Modify the policy document with the values that you recorded.",
        "Select Update policy to save your changes.",
        "You can use the following scenarios to check whether you\u2019ve correctly configured authorization and access control with your Iceberg\nREST catalog so that Snowflake can interact with your catalog server.",
        "Check a configuration for OAuth",
        "Check a configuration for a bearer token",
        "Check a configuration for SigV4",
        "Follow these steps to check your configuration for OAuth with your remote REST catalog.",
        "Use a curl command to retrieve an access token from your catalog. The following example\nrequests an access token from Snowflake Open Catalog:",
        "Where:",
        "https://xx123xx.us-west-2.aws.snowflakecomputing.com/polaris/api/catalog/v1/oauth/tokens is the endpoint for retrieving an OAuth token\n(getToken).",
        "scope is the same as the value that you specify for OAUTH_ALLOWED_SCOPES parameter when you create a catalog integration.\nFor multiple scopes, use a space as a separator.",
        "my_client_id is the same client ID that you specify for the OAUTH_CLIENT_ID parameter when you create a catalog integration.",
        "my_client_secret is the same client secret that you specify for the OAUTH_CLIENT_SECRET parameter when you create a catalog integration.",
        "Example return value:",
        "Using the access token that you retrieved in the previous step,\nverify that you have permission to access your catalog server.",
        "You can use a curl command to list the configuration settings for your catalog:",
        "Where:",
        "?warehouse=warehouse optionally specifies the warehouse name to request from your catalog (if supported). For Snowflake Open Catalog, the\nwarehouse name is your catalog name.",
        "ACCESS_TOKEN is a variable that contains the access_token that you retrieved in the previous step.",
        "Example return value:",
        "You can also make a GET request to load a table. Snowflake uses the\nloadTable\noperation to load table data from your REST catalog.",
        "Where:",
        "prefix optionally specifies the prefix obtained from the previous getConfig response.",
        "namespace is the namespace of the table you want to retrieve. If the namespace is nested, use the %1F separator;\nfor example, parentNamespace%1FchildNamespace.",
        "table is the table name.",
        "Follow these steps to check your configuration with your remote REST catalog for using a bearer token.",
        "Use a curl command to verify that you have permission to access your catalog server:",
        "Where:",
        "https://xx123xx.us-west-2.aws.snowflakecomputing.com/polaris/api/catalog/v1/oauth/tokens is the endpoint for retrieving an OAuth token\n(getToken).",
        "?warehouse=warehouse optionally specifies the warehouse name to request from your catalog (if supported).",
        "BEARER_TOKEN is a variable that contains the access_token that you retrieved in the previous step.",
        "Example return value:",
        "You can also make a GET request to load a table. Snowflake uses the\nloadTable\noperation to load table data from your REST catalog.",
        "Where:",
        "prefix optionally specifies the prefix obtained from the previous getConfig response.",
        "namespace is the namespace of the table you want to retrieve. If the namespace is nested, use the %1F separator;\nfor example, parentNamespace%1FchildNamespace.",
        "table is the table name.",
        "Follow these steps to check your configuration for SigV4 with AWS.",
        "When you create a REST catalog integration for SigV4, Snowflake provisions an AWS IAM user for your Snowflake account.\nYou add that Snowflake IAM user to the trust relationship for\nan IAM role with permission to access your API Gateway resources.",
        "To test your configuration, you can assume the role as a user in your AWS account after you add your AWS\nuser to the role\u2019s trust policy document. To retrieve your current IAM user ARN, use the\nsts get-caller-identity command\nfor the AWS Command Line Interface (CLI) :",
        "Example output:",
        "The updated trust policy document should include both the Snowflake user ARN and your user ARN as follows:",
        "For full instructions, see Update a role trust policy\nin the AWS IAM documentation.",
        "To get temporary security credentials for AWS, use the\nsts assume-role command for the AWS CLI.",
        "Where:",
        "my_role_arn is the Amazon Resource Name (ARN) of the IAM role that you\u2019ve configured for Snowflake.",
        "session_name is a string identifier of your choice for the assumed role session; for example, my_rest_session.",
        "Example output:",
        "Note",
        "If the assume-role command fails, it means that your current AWS user isn\u2019t included in the role\u2019s trust policy as\nan allowed principal.",
        "Similarly, if the Snowflake IAM user ARN isn\u2019t included in your trust policy, Snowflake won\u2019t\nbe able to connect to your API Gateway resources.\nFor more information, see Configure the trust relationship in IAM.",
        "Using the temporary credentials that you retrieved in the previous step,\nverify that your IAM role has permission to invoke your API Gateway APIs.",
        "You can use a curl command to list the configuration settings for your catalog:",
        "Where:",
        "123xxxxxxx.execute-api.us-west-2.amazonaws.com is your API Gateway hostname.",
        "test_v2 is the name of the stage that your API is deployed to.",
        "v1/config specifies the getConfig operation from the Iceberg catalog OpenAPI definition.",
        "?warehouse=warehouse optionally specifies the warehouse name to request from your catalog (if supported).",
        "$AWS_ACCESS_KEY_ID is a variable that contains the AccessKeyId that you retrieved using the sts assume-role command.",
        "$AWS_SECRET_ACCESS_KEY is a variable that contains the SecretAccessKey that you retrieved using the sts assume-role command.",
        "$AWS_SESSION_TOKEN is a variable that contains the SessionToken that you retrieved using the sts assume-role command.",
        "Example return value:",
        "You can also make a GET request to load a table. Snowflake uses the\nloadTable\noperation to load table data from your REST catalog.",
        "Where:",
        "prefix optionally specifies the prefix obtained from the previous getConfig response.",
        "namespace is the namespace of the table you want to retrieve. If the namespace is nested, use the %1F separator;\nfor example, parentNamespace%1FchildNamespace.",
        "table is the table name.",
        "Private API",
        "For a private API, you can specify your VPC endpoint and private Amazon API Gateway hostname in the same curl commands.",
        "For example:",
        "Where:",
        "https://vpce-xxxxxxxxxxxxxxxxxxxxxxxxxx.execute-api.us-west-2.vpce.amazonaws.com/... is the hostname of your VPC endpoint.",
        "abc1defgh2.execute-api.us-west-2.amazonaws.com is the hostname of your private API in Amazon API Gateway.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}