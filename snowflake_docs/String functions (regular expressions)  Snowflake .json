{
    "url": "https://docs.snowflake.com/en/sql-reference/functions-regexp#general-usage-notes",
    "title": "String functions (regular expressions) | Snowflake Documentation",
    "paragraphs": [
        "These string functions perform operations that match a regular expression (often referred to as a \u201cregex\u201d).",
        "Function",
        "Notes",
        "[ NOT ] REGEXP",
        "Alias for RLIKE.",
        "REGEXP_COUNT",
        "REGEXP_EXTRACT_ALL",
        "Alias for REGEXP_SUBSTR_ALL.",
        "REGEXP_INSTR",
        "REGEXP_LIKE",
        "Alias for RLIKE.",
        "REGEXP_REPLACE",
        "REGEXP_SUBSTR",
        "REGEXP_SUBSTR_ALL",
        "[ NOT ] RLIKE",
        "In these notes, \u201csubject\u201d refers to the string to operate on and \u201cpattern\u201d refers to the regular expression:",
        "The subject is typically a variable column, while the pattern is typically a constant, but this is not required; every argument to a regular expression function can be either a constant\nor variable.",
        "Patterns support the full POSIX ERE (Extended Regular Expression) syntax. For details, see the\nPOSIX basic and extended section (in Wikipedia).",
        "Patterns also support the following Perl backslash-sequences:",
        "\\d: decimal digit (0-9).",
        "\\D: not a decimal digit.",
        "\\s: whitespace character.",
        "\\S: not a whitespace character.",
        "\\w: \u201cword\u201d character (a-z, A-Z, underscore (\u201c_\u201d), or decimal digit).",
        "\\W: not a word character.",
        "\\b: word boundary.",
        "\\B: not a word boundary.",
        "For details, see the Character classes section (in Wikipedia) or the\nBackslash sequences section (in the Perl documentation).",
        "Note",
        "In single-quoted string constants, you must escape the backslash character in\nthe backslash-sequence. For example, to specify \\d, use \\\\d. For details, see\nSpecifying regular expressions in single-quoted string constants (in this topic).",
        "You do not need to escape backslashes if you are delimiting the string with\npairs of dollar signs ($$) (rather than single quotes).",
        "By default, the POSIX wildcard character . (in the pattern) does not include newline characters \\n (in the subject) as matches.",
        "To also match newline characters, either replace . with (.|\\n) in the pattern argument, or use the s parameter in the parameters argument (described\nbelow).",
        "All the regular expression functions support Unicode. A single Unicode character always counts as one character (that is, the POSIX meta-character . matches exactly one Unicode character),\nregardless of the byte-length of the corresponding binary representation of that character. Also, for functions that take or return subject offsets, a single Unicode character counts as 1.",
        "Most regular expression functions support an optional parameters argument. The parameters argument is a VARCHAR string that specifies the matching\nbehavior of the regular expression function. The following parameters are supported:",
        "Parameter",
        "Description",
        "c",
        "Enables case-sensitive matching.",
        "i",
        "Enables case-insensitive matching.",
        "m",
        "Enables multi-line mode (that is, meta-characters ^ and $ mark the beginning and end of any line of the subject). By default, multi-line mode is disabled (that is, ^ and $ mark the beginning and end of the entire subject).",
        "e",
        "Extracts submatches; applies only to REGEXP_INSTR, REGEXP_SUBSTR, REGEXP_SUBSTR_ALL, and the aliases for these functions.",
        "s",
        "Enables the POSIX wildcard character . to match \\n. By default, wildcard character matching is disabled.",
        "The default string is c, which specifies:",
        "Case-sensitive matching.",
        "Single-line mode.",
        "No submatch extraction, except for REGEXP_REPLACE, which always uses submatch extraction.",
        "POSIX wildcard character . does not match \\n newline characters.",
        "When specifying multiple parameters, enter the string with no spaces or delimiters.\nFor example, ims specifies case-insensitive matching in multi-line mode with POSIX wildcard matching.",
        "If both c and i are included in the parameters string, the one that occurs last in the string dictates whether the function performs case-sensitive or case-insensitive\nmatching. For example, ci specifies case-insensitive matching because the i occurs last in the string.",
        "The following example shows how the results can be different for case-sensitive and case-insensitive matching.\nThe REGEXP_COUNT function returns no matches for snow and SNOW for case-sensitive matching (c parameter,\nthe default) and one match for case-insensitive matching (i parameter):",
        "Use the REGEXP_SUBSTR function with the e parameter to look for the word\nRelease, followed by one or more non-word characters, followed by one or more digits, and then return\nthe substring that matches the digits:",
        "For more examples that use parameters, see REGEXP_INSTR, REGEXP_LIKE,\nREGEXP_SUBSTR, REGEXP_SUBSTR_ALL, and [ NOT ] RLIKE.",
        "In regular expressions, some characters are treated as metacharacters that have a specific meaning. For example:",
        ". is a\nmetacharacter that matches any single character.",
        "* is a quantifier that matches zero or more instances\nof the preceding element. For example, BA* matches B, BA, BAA, etc.",
        "? is a quantifier that matches zero or one instance of the preceding element.",
        "To match the actual character (for example, an actual period, asterisk, or question mark), you must escape the metacharacter with a\nbackslash (for example, \\., \\*, \\?, etc.).",
        "Note",
        "If you are using the regular expression in a single-quoted string constant,\nyou must escape the backslash with a second backslash (for example, \\\\., \\\\*, \\\\?, etc.). For details, see\nSpecifying regular expressions in single-quoted string constants",
        "For example, suppose that you need to find an open parenthesis (() in a string. One way to specify this is to use a backslash\nto escape the character in the pattern (for example, \\().",
        "If you are specifying the pattern as a single-quoted string constant, you must also\nescape that backslash with a second backslash.",
        "The following pattern matches a sequence of alphanumeric characters that appear inside parentheses (for example, (NY)):",
        "For additional examples, see Example of using metacharacters in a single-quoted string constant.",
        "Note that you do not need to escape the backslash character if you are using a\ndollar-quoted string constant:",
        "Snowflake does not support backreferences in regular expression patterns (known as \u201csquares\u201d in formal language theory); however, backreferences are supported in the replacement string of the\nREGEXP_REPLACE function.",
        "In most regexp functions, an empty pattern (that is, '') matches nothing, not even an empty subject.",
        "The exceptions are REGEXP_LIKE and its aliases [ NOT ] REGEXP and [ NOT ] RLIKE,\nin which the empty pattern matches the empty subject because the pattern is implicitly anchored at both ends\n(that is, '' automatically becomes '^$').",
        "An empty group (that is, subexpression ()), matches the space in between characters, including the beginning and end of the subject.",
        "If you are using a string constant to specify the regular expression for a function, you can use a\ndollar-quoted string constant to avoid\nescaping the backslash characters in the regular expression. (If you are using\nsingle-quoted string constants, you need to escape the backslashes.)",
        "The content of a dollar-quoted string constant is always interpreted literally.",
        "For example, when escaping a metacharacter, you only need to use a single backslash:",
        "When using a backreference, you only need to use a single backslash:",
        "If you are using a regular expression in a single-quoted string constant, you must\nescape any backslashes in backslash-sequences with a second backslash.",
        "Note",
        "To avoid escaping backslashes in a regular expression, you can use a\ndollar-quoted string constant, rather than a single-quoted string constant.",
        "For example:",
        "If you are escaping a metacharacter with a backslash, you must escape the backslash with\na second backslash. See Example of using metacharacters in a single-quoted string constant.",
        "If you are using a backslash-sequence, you must escape the backslash in the sequence.",
        "If you are using a backreference, you must escape the backslash in the backreference.\nSee Example of using backreferences in a single-quoted string constant.",
        "This example uses the backslash as part of an escape sequence in a regular expression that searches for a question mark (?).",
        "Create a table and insert a row that contains a single backslash in one column and a question mark in another column:",
        "The following query searches for the question mark literal. The search uses a regular expression, and the question mark is a\nmeta-character in regular expressions, so the search must escape the question mark to treat it as a literal. Because the\nbackslash appears in a string literal, the backslash itself must also be escaped:",
        "The following query makes it easier to see that the regular expression is composed of two characters (the backslash escape\ncharacter and the question mark):",
        "In the previous example, the extra backslash was needed only because the escape character was part of a string literal.\nIt was not needed for the regular expression itself. The following SELECT statement does not need to parse a string literal as\npart of the SQL command string, and therefore does not need the extra escape character that the string literal needed:",
        "If you use a backreference (for example, \\1) in a string literal, you must escape the backslash\nthat is a part of that backreference. For example, to specify the backreference \\1 in a replacement string literal of\nREGEXP_REPLACE, use \\\\1.",
        "The following example uses the table created earlier. The SELECT uses a backreference to replace each occurrence of the regular\nexpression .old with a copy of the matched string preceded by the word \u201cvery\u201d:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}