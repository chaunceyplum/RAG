{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/requesting-example-oauth",
    "title": "Example - External access using OAuth | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic provides an example that describes how to use references to allow providers to grant access to\nan endpoint that is external to Snowflake. This example uses a OAuth2 secret and an external access\nintegration to allow access.",
        "To enable access to an external endpoint using OAuth, a provider can add the following entries in the manifest.yml\nfile:",
        "EXTERNAL ACCESS INTEGRATION reference with the USAGE privilege",
        "SECRET reference with the READ privilege",
        "The following example manifest.yml file shows how to define these references:",
        "Note",
        "These references cannot have the multi_valued property set to true.",
        "References to secrets and external access objects also require a configuration_callback function\nin the setup script. See Add the configuration_callback function to the setup script for more information.",
        "After adding references for the secret and external access integration, you must add the\nconfiguration_callback function to the setup script. To create an external access integration or\nsecret, the application must be able to determine values for host port, secret type, the authorization\nand token endpoint for OAuth, etc. The configuration_callback provides this information from\nthe consumer account to the application.",
        "Snowsight runs this callback procedure to populate the configuration dialog that prompts the\nuser to configure the objects. The procedure needs to be granted to an app role for execution.",
        "Note",
        "The configuration_callback is only supported for external access integration and secret\nobjects.",
        "The callback function has the following requirements:",
        "The callback function must accept an argument containing a reference name. This allows the same\ncallback function to handle multiple references.",
        "The callback function must return a well-formed JSON object. The JSON object contains the following\nproperties:",
        "type",
        "Indicates the type of message. Valid values are:",
        "CONFIGURATION: Returns a payload with the configuration values for the object based on object type.",
        "ERROR: Returns an error with the associated message that is displayed in Snowsight.",
        "payload",
        "Contains the content of the response based on the value of the type property and the object type being configured.",
        "The signature for the configuration callback is:",
        "Within the setup script, you must grant the USAGE privilege to the application roles that are used\nfor configuring the app so that they have permission to call the stored procedure. The following\nexample shows how to grant the USAGE privilege on a stored procedure:",
        "The callback function returns a JSON object. See JSON format for the configuration callback response for\nmore information.",
        "The following example shows a typical callback function for handling external access and secret references.",
        "This function does the following:",
        "For a reference to an external access integration, the procedure returns a JSON object containing the\nrequired configuration information. See JSON format for external access integration for more\ninformation.",
        "For a reference to a secret, the procedure returns a JSON object containing a secret configuration of\ntype OAuth2. See JSON format for secret references for more information.",
        "Python Permission SDK supports secret and external access integration objects.\nHowever, the behavior is slightly different for these objects.",
        "When a provider calls permission.request_reference()\nand passes the name of a reference with an object_type value of SECRET or\nEXTERNAL ACCESS INTEGRATION, Snowsight automatically performs\nthe following:",
        "Calls the configuration_callback function in the setup script.",
        "Validates the values returned by the configuration_callback function.",
        "Displays the configuration dialog to the consumer.",
        "Note",
        "If a provider configures an external access integration with the\npayload.allow_secrets property set to LIST, it is not necessary to\nmake a separate call to request a reference for the secret. The secret configuration\nis implicitly included as part of the external access integration configuration.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}