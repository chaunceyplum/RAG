{
    "url": "https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-python",
    "title": "Emitting trace events in Python | Snowflake Documentation",
    "paragraphs": [
        "You can use the Snowflake telemetry package to emit trace events from a function or procedure handler written in Python.\nThe package is available from the Anaconda Snowflake channel.",
        "You can access stored trace event data by executing a SELECT command on the event table. For more information, see\nViewing trace data.",
        "Note",
        "For guidelines to keep in mind when adding trace events, see General guidelines for adding trace events.",
        "For general information about setting up logging and retrieving messages in Snowflake, see\nLogging messages from functions and procedures.",
        "Before logging from code, you must:",
        "Set up an event table to collect messages logged from handler code.",
        "For more information, see Event table overview.",
        "Be sure you have the trace level set so that the data you want are stored in the event table.",
        "For more information, see Setting levels for logging, metrics, and tracing.",
        "Note",
        "For guidelines to keep in mind when adding trace events, see General guidelines for adding trace events.",
        "To use telemetry package, you must make the open source\nSnowflake telemetry package, which is included with Snowflake, available\nto your handler code. The package is available from the Anaconda Snowflake channel.",
        "For a procedure or function. In the PACKAGES clause in your CREATE PROCEDURE or CREATE FUNCTION statement, include the snowflake-telemetry-python package. The\nPACKAGES clause makes the included Snowflake telemetry package available to your code.",
        "For a Streamlit app. You can add the snowflake-telemetry-python package to your app by using Snowsight or an\nenvironment.yml. file.",
        "Code in the following example uses the PACKAGES clause to reference the telemetry package as well as the Snowpark library (which is\nrequired for stored procedures written in Python \u2013 for more information, see Writing stored procedures in Python).",
        "Import the telemetry package in your code.",
        "You can add trace events by calling the telemetry.add_event method, passing a name for the event. You can also optionally associate\nattributes \u2013 key-value pairs \u2013 with an event.",
        "The add_event method is available in the following form:",
        "where",
        "name is a Python string that specifies the name of the trace event.",
        "attributes is an OpenTelemetry Attributes object that specifies the attributes for this trace event. This argument is\noptional. Omit the argument if you do not have any attributes to specify for this trace event.",
        "Handler code in the following example adds two events, FunctionEmptyEvent and FunctionEventWithAttributes. With\nFunctionEventWithAttributes, the code also adds two attributes: key1 and key2.",
        "Adding these events results in two rows in the event table, each with a different value in the RECORD column:",
        "The FunctionEventWithAttributes event row includes the following attributes in the row\u2019s RECORD_ATTRIBUTES column:",
        "You can set attributes \u2013 key-value pairs \u2013 associated with spans by calling the telemetry.set_span_attribute method.",
        "For details on spans, see How Snowflake represents trace events.",
        "The set_span_attribute method is available in the following form:",
        "where:",
        "key is a Python string that specifies the key for an attribute.",
        "value is an OpenTelemetry AttributeValue object that specifies the value of the attribute.",
        "Code in the following example creates four attributes and sets their values:",
        "Setting these attributes results in the following in the event table\u2019s RECORD_ATTRIBUTES column:",
        "Note",
        "Support for custom spans is a preview feature available to all accounts.",
        "You can add custom spans that are separate from the default span created by Snowflake. For details on custom spans, see\nAdding custom spans to a trace.",
        "Code in the following example uses the OpenTelemetry Python API to create the my.span span as the current span with\nstart_as_current_span. It then adds an event with attributes to the new span using the OpenTelemetry Python API.",
        "Event data won\u2019t be captured by the event table unless the span ends before your handler completes execution. In this example, closing the\nspan happens automatically when the with statement concludes.",
        "The following sections provide examples of adding support for trace events from Python code.",
        "When you call the trace event API from a Python function that processes an input row, the API will be called for every row processed\nby the UDF.",
        "For example, the following statement calls the Python function defined in the previous example for 50 rows, resulting in 100 trace events\n(two for each row):",
        "When you call the trace event API in the process() method of a UDTF handler class, the API will be called for every row processed.",
        "For example, the following statement calls the process() method defined in the previous example for 50 rows, resulting in 100 trace\nevents (two for each row) added by the process() method:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}