{
    "url": "https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-execute",
    "title": "Executing statements | Snowflake Documentation",
    "paragraphs": [
        "Statements can be executed by calling the connection.execute() method. The execute() method accepts an options\nobject that can be used to specify the SQL text and a complete callback.\nThe complete callback is invoked when a statement has finished executing and the result is ready to be consumed:",
        "Note",
        "The maximum payload size of a single request is 16 MB.",
        "The Snowflake Node.js Driver supports asynchronous queries (i.e. queries that return control to the user before the query completes). You can start a query, then use polling to determine when the query has completed. After the query completes, you can read the result set.",
        "You enable asynchronous queries by including asyncExec: true in the connection.execute method.",
        "The following example shows how to execute queries asynchronously using a Promise.",
        "You can also use callbacks to monitor asynchronous queries, as shown in the following example.",
        "Enable asynchronous queries by including asyncExec: true in the connection.execute method.",
        "Check on the status of the query, which was submitted to be executed asynchronously.",
        "With version 1.6.18 and later of the Node.js connector, you can send\na batch of SQL statements separated by semicolons to be executed in a single request.",
        "Note",
        "Executing multiple statements in a single query requires that a valid warehouse is available in a session.",
        "By default, Snowflake returns an error for queries issued with multiple statements to protect against SQL injection attacks.\nExecuting multiple statements in a single query increases the risk of SQL injection. Snowflake recommends using it sparingly.\nYou can reduce the risk by using the MULTI_STATEMENT_COUNT parameter to specify the number of statements to be executed, which makes it more difficult to inject a statement by appending to it.",
        "For more information about these types of attacks, see SQL injection.",
        "You can execute multiple statements as a batch in the same way you execute queries with single statements, except that the query string\ncontains multiple statements separated by semicolons. Note that multiple statements execute sequentially, not in parallel.\nThe MULTI_STATEMENT_COUNT parameter specifies the exact number of statements the batch contains.",
        "For example, if you set MULTI_STATEMENT_COUNT=3, a batch statement must include precisely three\nstatements. If you submit a batch statement with any other number of statements, the Node.js driver rejects the request. You can set\nMULTI_STATEMENT_COUNT=0 to allow batch queries to contain any number of statements. However, be aware that using this value\nreduces the protection against SQL injection attacks.",
        "You can set this parameter at the session level using the following command, or you can set the value\nseparately each time you submit a query.",
        "By setting the value the session level, you do not need to set it when you execute each time you execute a batch statement.\nThe following example sets the number of statements at the session level to three and then executes three SQL statements:",
        "You can also set the number of statements in a batch each time you execute a multi-statement query by setting\nMULTI_STATEMENT_COUNT as a parameter for the connection.execute function. The following example sets the number of\nstatements to three for the batch and includes three SQL statements in the batch query:",
        "Occasionally, you might want to bind data in a statement with a placeholder.\nExecuting statements in this manner is useful because it helps prevent SQL injection attacks. Consider the\nfollowing statement:",
        "You can achieve the same result using the following bindings:",
        "The ? syntax for bindings is also supported:",
        "Note",
        "There is an upper limit to the size of data that you can bind, or that you can combine in a batch.\nFor details, see Limits on Query Text Size.",
        "Binding an array of data is supported for bulk INSERT operation. Pass an array of arrays as follows:",
        "Note",
        "Binding a large array will impact performance and might be rejected if the size of data is too large to be handled by the server.",
        "You can also bind arrays of VARIANT data. To illustrate, assume you create a table with a column of VARIANT data, as follows:",
        "You could then execute the following script:",
        "A statement can be canceled by calling the statement.cancel() method:",
        "If you are unsure whether Snowflake successfully executed an SQL statement, perhaps due to a network error or timeout,\nyou can resubmit the same statement using its request ID. For example, suppose you submit an INSERT command to add data but\ndid not receive an acknowledgement in a timely\nmanner, so you don\u2019t know what happened with the command. In this scenario, you don\u2019t just want to execute the same\ncommand as a new command\nbecause it could result in executing the command twice, producing data duplication.",
        "By including the request ID in the SQL statement,\nyou can avoid the potential for data duplication. Resubmitting the request with the request ID from the\ninitial request ensures that the resubmitted command executes only if the initial request failed. For more information, refer to\nResubmitting a request to execute SQL statements.",
        "Note",
        "To resubmit a query using a request ID, you must use the same connection that generated the request ID. If you want to\nretrieve the result of query from a different connection, refer to RESULT_SCAN.",
        "The following code samples demonstrate how you can save and use a request ID to resubmit a statement. When you execute a statement,\nyou can use the getRequestId() function to retrieve the ID of the submitted request. You can then use that ID to execute the same\nstatement at a later time. The following example executes an INSERT statement and saves its request ID in the requestId variable.",
        "If you do not receive an acknowledgement that the command executed successfully, you can resubmit the request using the saved\nrequest ID as shown below.",
        "If you choose to resubmit a request with a requestId and sqlText, be aware of the following interactions:",
        "If the requestId already exists, meaning it matches a previous request, the command ignores the sqlText query and resubmits\nthe query from the original command.",
        "If the requestId does not exist, meaning it does not match a previous request, the command executes the sqlText query.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}