{
    "url": "https://docs.snowflake.com/en/user-guide/oauth-azure",
    "title": "Configure Microsoft Entra ID for External OAuth | Snowflake Documentation",
    "paragraphs": [
        "This topic describes how to configure Snowflake as an OAuth Resource and Microsoft Entra ID as an External OAuth Authorization Server to\nfacilitate secure, programmatic access to Snowflake data.",
        "The following four steps assume that your environment does not have anything configured relating to Microsoft Entra ID OAuth authorization\nservers, OAuth clients, scopes, and necessary metadata.",
        "The information from Steps 1-3 will be used to create a security integration in Snowflake.",
        "If you already have an Microsoft Entra ID OAuth authorization server and client configured, it is not necessary to complete all of the steps\nbelow. Rather, skim the following three steps and verify that you can obtain the desired information, create scopes, assign scopes to one or\nmore policies, and access the metadata.",
        "If you do not have an Microsoft Entra ID OAuth authorization server and client configured, complete all of the following four steps.",
        "Important",
        "The steps in this topic are a representative example on how to configure Microsoft Entra ID for External OAuth.",
        "You can configure Microsoft Entra ID to any desired state and use any desired OAuth flow provided that you can obtain the necessary\ninformation for the security integration (in this topic).",
        "Note that the following steps serve as a guide to obtain the necessary information to create the security integration in Snowflake.",
        "Steps 1-3 are derived from the Microsoft Entra ID documentation on OAuth 2.0 and authentication. For more information on how Microsoft\ndefines its terms, its user interface, and options relating to OAuth 2.0 and authentication consult the following Microsoft Entra ID guides:",
        "Microsoft identity platform (v2.0) overview",
        "Authentication protocol (and related topics)",
        "Application configuration (and related topics)",
        "How-to guides for authentication & application configuration (and related topics)",
        "Microsoft Entra ID supports two different OAuth flows in which an OAuth Client can get an access token.",
        "The authorization server can grant the OAuth client an access token on behalf of the user.",
        "The authorization server can grant the OAuth client an access token for the OAuth client itself.",
        "In the first flow, the identity in the access token references the user. In the second flow, the identity in the access token references\nthe OAuth client.",
        "Microsoft Entra ID does not allow the same role format for each of these two OAuth flows. The role format to use depends on the OAuth\nflow in use. After determining which OAuth flow to use:",
        "Complete sub-step 10 or 11 in Configure the OAuth resource in Microsoft Entra ID",
        "Complete sub-step 13 or 14 in Create an OAuth client in Microsoft Entra ID",
        "Navigate to the Microsoft Azure Portal and authenticate.",
        "Navigate to Microsoft Entra ID.",
        "Click on App Registrations.",
        "Click on New Registration.",
        "Enter Snowflake OAuth Resource, or similar value as the Name.",
        "Verify the Supported account types is set to Single Tenant.",
        "Click Register.",
        "Click on Expose an API.",
        "Click on the Set link next to Application ID URI to set the Application ID URI.",
        "Important",
        "The Application ID URI must be unique within your organization\u2019s directory, such as\nhttps://your.company.com/4d2a8c2b-a5f4-4b86-93ca-294185f45f2e. This value will be referred to as the\n<SNOWFLAKE_APPLICATION_ID_URI> in the subsequent configuration steps.",
        "For help obtaining your Application ID URI, please contact your internal Microsoft Entra ID administrator.",
        "If the Application ID URI is not used, then it is necessary to create a security integration with audiences using the Snowflake\nAccount URL (i.e. <account_identifier>.snowflakecomputing.com). For more information, see:",
        "The audience integration in Create a security integration in Snowflake.",
        "Account identifiers.",
        "To add a Snowflake Role as an OAuth scope for OAuth flows where the programmatic client acts on behalf of a user, click on\nAdd a scope to add a scope representing the Snowflake role.",
        "Enter the scope by having the name of the Snowflake role with the session:scope: prefix. For example, for the Snowflake\nAnalyst role, enter session:scope:analyst.",
        "Select who can consent.",
        "Enter a display name for the scope (e.g.: Account Admin).",
        "Enter a description for the scope (e.g.: Can administer the Snowflake account).",
        "Click Add Scope.",
        "To add a Snowflake Role as a Role for OAuth flows where the programmatic client requests an access token for itself:",
        "Click on Manifest.",
        "Locate the appRoles element.",
        "Enter an App Role with the following settings.",
        "Setting",
        "Description",
        "allowedMemberTypes",
        "Application.",
        "description",
        "A description of the role.",
        "displayName",
        "A friendly name for users to view.",
        "id",
        "A unique ID. You can use the [System.Guid]::NewGuid() function from PowerShell to generate a unique ID if needed.",
        "isEnabled",
        "Set to true.",
        "lang",
        "The language. Set to null.",
        "origin",
        "Set to Application.",
        "value",
        "Set to the name of the Snowflake role with the session:role: prefix. . For the Analyst role, enter session:role:analyst.",
        "The App Role manifests as follows.",
        "Click Save.",
        "Navigate to the Microsoft Azure Portal and authenticate.",
        "Navigate to Azure Active Directory.",
        "Click on App Registrations.",
        "Click on New Registration.",
        "Enter a name for the client such as Snowflake OAuth Client.",
        "Verify the Supported account types is set to Single Tenant.",
        "Click Register.",
        "In the Overview section, copy the ClientID from the Application (client) ID field. This will be known as the\n<OAUTH_CLIENT_ID> in the following steps.",
        "Click on Certificates & secrets and then New client secret.",
        "Add a description of the secret.",
        "Select never expire. For testing purposes, select secrets that never expire.",
        "Click Add. Copy the secret. This will be known as the <OAUTH_CLIENT_SECRET> in the following steps.",
        "For programmatic clients that will request an Access Token on behalf of a user, configure Delegated permissions for Applications as\nfollows.",
        "Click on API Permissions.",
        "Click on Add Permission.",
        "Click on My APIs.",
        "Click on the Snowflake OAuth Resource that you created in Configure the OAuth resource in Microsoft Entra ID.",
        "Click on the Delegated Permissions box.",
        "Check on the Permission related to the Scopes defined in the Application that you wish to grant to this client.",
        "Click Add Permissions.",
        "Click on the Grant Admin Consent button to grant the permissions to the client. Note that for testing purposes, permissions\nare configured this way. However, in a production environment, granting permissions in this manner is not advisable.",
        "Click Yes.",
        "For programmatic clients that will request an Access Token for themselves, configure API permissions for Applications as\nfollows.",
        "Click on API Permissions.",
        "Click on Add Permission.",
        "Click on My APIs.",
        "Click on the Snowflake OAuth Resource that you created in Configure the OAuth resource in Microsoft Entra ID.",
        "Click on the Application Permissions.",
        "Check on the Permission related to the Roles manually defined in the Manifest of the Application that you wish to\ngrant to this client.",
        "Click Add Permissions.",
        "Click on the Grant Admin Consent button to grant the permissions to the client.Note that for testing purposes, permissions\nare configured this way. However, in a production environment, granting permissions in this manner is not advisable.",
        "Click Yes.",
        "Navigate to the Microsoft Azure Portal and authenticate.",
        "Navigate to Azure Active Directory.",
        "Click on App Registrations.",
        "Click on the Snowflake OAuth Resource that you created in Configure the OAuth resource in Microsoft Entra ID.",
        "Click on Endpoints in the Overview interface.",
        "On the right-hand side, copy the OAuth 2.0 token endpoint (v2) and note the URLs for OpenID Connect metadata and\nFederation Connect metadata.",
        "The OAuth 2.0 token endpoint (v2) will be known as the <AZURE_AD_OAUTH_TOKEN_ENDPOINT> in the following configuration\nsteps. The endpoint should be similar to\nhttps://login.microsoftonline.com/90288a9b-97df-4c6d-b025-95713f21cef9/oauth2/v2.0/token.",
        "For the OpenID Connect metadata, open in a new browser window.",
        "Locate the \"jwks_uri\" parameter and copy its value.",
        "This parameter value will be known as the <AZURE_AD_JWS_KEY_ENDPOINT> in the following configuration steps. The endpoint\nshould be similar to https://login.microsoftonline.com/90288a9b-97df-4c6d-b025-95713f21cef9/discovery/v2.0/keys.",
        "For the Federation metadata document, open the URL in a new browser window.",
        "Locate the \"entityID\" parameter in the XML Root Element and copy its value.",
        "This parameter value will be known as the <AZURE_AD_ISSUER> in the following configuration steps. The entityID value should\nbe similar to https://sts.windows.net/90288a9b-97df-4c6d-b025-95713f21cef9/.",
        "This step involves creating a security integration in Snowflake to ensure that Snowflake can communicate with Microsoft Entra ID securely,\nvalidate the tokens from Microsoft Entra ID, and provide the appropriate Snowflake data access to users based on the user role associated with\nthe OAuth token.",
        "Choose the security integration that best addresses your use case and configuration needs. If your integration is only based on the\npreceding configuration, use the first security integration. For more information, see\nCREATE SECURITY INTEGRATION.",
        "Important",
        "If you are trying to create a security integration for Microsoft Power BI, follow the setup instructions in Power BI SSO to Snowflake.",
        "Only account administrators (i.e. users with the ACCOUNTADMIN role) or a role with the global CREATE INTEGRATION privilege can execute\nthis SQL command.",
        "The security integration parameter values are case-sensitive, and the values you put into the security integration must match those\nvalues in your environment. If the case does not match, it is possible that the access token will not be validated, resulting in a failed\nauthentication attempt.",
        "Verify all values are an exact match. For example, if the Issuer value does not end with a backslash and the security integration is\ncreated with a backslash character at the end of the URL, an error message will occur. It would then be necessary to drop the security\nintegration object using DROP INTEGRATION and then create the object again with the correct Issuer value\nusing CREATE SECURITY INTEGRATION.",
        "Create a security integration for |microsoft-idp|",
        "Create a security integration with audiences",
        "The external_oauth_audience_list parameter of the security integration must match the Application ID URI that you specified\nwhile configuring Microsoft Entra ID.",
        "You can update your External OAuth security integration by executing an ALTER statement on the security integration.",
        "For more information, see ALTER SECURITY INTEGRATION (External OAuth).",
        "In the configuration step to create a security integration in Snowflake, the OAuth access token includes the scope definition. Therefore, at runtime, using the External OAuth security integration allows neither the OAuth client nor the user to use an undefined role in the OAuth access token.",
        "After validating the access token and creating a session, the ANY role can allow the OAuth client and user to decide its role. If necessary, the client or the user can switch to a role that is different that the role defined in the OAuth access token.",
        "To configure ANY role, define the scope as SESSION:ROLE-ANY and configure the security integration with the external_oauth_any_role_mode parameter. This parameter can have three possible string values:",
        "DISABLE does not allow the OAuth client or user to switch roles (i.e. use role <role>;). Default.",
        "ENABLE allows the OAuth client or user to switch roles.",
        "ENABLE_FOR_PRIVILEGE allows the OAuth client or user to switch roles only for a client or user with the USE_ANY_ROLE privilege. This privilege can be granted and revoked to one or more roles available to the user. For example:",
        "Define the security integration as follows:",
        "The desired scope for the primary role is passed in the external token: either the default role for the user (session:role-any) or\na specific role that was granted to the user (session:role:<role_name>).",
        "By default, Snowflake does not activate the default secondary roles for a user (i.e.\nthe DEFAULT_SECONDARY_ROLES) user in the session.",
        "To activate the default secondary roles for a user in a session and allow executing the USE SECONDARY ROLES\ncommand while using External OAuth, complete the following steps:",
        "Configure the security integration for the connection. Set the EXTERNAL_OAUTH_ANY_ROLE_MODE parameter value to either ENABLE or\nENABLE_FOR_PRIVILEGE when you create the security integration (using CREATE SECURITY INTEGRATION) or later (using ALTER SECURITY\nINTEGRATION).",
        "Configure the authorization server to pass the static value of session:role-any in the scope attribute of the token. For more\ninformation about the scope parameter, see External OAuth overview.",
        "Snowflake supports using Client Redirect with External OAuth, including using Client Redirect and OAuth with supported Snowflake Clients.",
        "For more information, see Redirecting client connections.",
        "Currently, network policies cannot be added to your External OAuth security integration. However, you can still implement network policies that apply broadly to the entire Snowflake account.",
        "If your use case requires a network policy that is specific to the OAuth security integration, use Snowflake OAuth. This approach allows the Snowflake OAuth network policy to be distinct from other network policies that may apply to the Snowflake account.",
        "For more information, see Network policies.",
        "Snowflake supports replication and failover/failback of the External OAuth security integration from a source account to a target account.",
        "For details, see Replication of security integrations & network policies across multiple accounts.",
        "In the context of testing OAuth while using Microsoft Entra ID as an authorization server, you must:",
        "Verify that the test user exists in Microsoft Entra ID and has a password.",
        "Verify that the test user exists in Snowflake with their login_name attribute value set to the <AZURE_AD_USER_USERNAME>",
        "Grant the SYSADMIN role to this user.",
        "Register an OAuth Client.",
        "Allow the OAuth Client to make a POST request to the Microsoft Entra ID Token endpoint as follows:",
        "Grant type set to Resource Owner",
        "HTTP Basic Authorization header containing the clientID and secret",
        "FORM data containing the user\u2019s username & password",
        "Include scopes",
        "Here is an example for getting an access token using cURL. Note that the scope must be fully qualified, including the Microsoft Entra ID App\nURI (e.g. scope=https://example.com/wergheroifvj25/session:role-any).",
        "After configuring your security integration and obtaining your access token, you can connect to Snowflake using one of the following:",
        "SnowSQL",
        "Python Connector",
        "Go Driver",
        "JDBC Driver",
        "ODBC Driver",
        "Spark Connector",
        ".NET Driver",
        "Node.js Driver",
        "Note the following:",
        "It is necessary to set the authenticator parameter to oauth and the token parameter to the external_oauth_access_token.",
        "When passing the token value as a URL query parameter, it is necessary to URL-encode the token value.",
        "When passing the token value to a Properties object (e.g. JDBC Driver), no modifications are necessary.",
        "For example, if using the Python Connector, set the connection string as shown below.",
        "You can now use External OAuth to connect to Snowflake securely.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}