{
    "url": "https://docs.snowflake.com/en/developer-guide/udf/python/packages-policy",
    "title": "Packages policies | Snowflake Documentation",
    "paragraphs": [
        "Using a packages policy enables you to set allowlists and blocklists for third-party Python packages from Anaconda at the account level.\nThis lets you meet stricter auditing and security requirements and gives you more fine-grained control over which packages are\navailable or blocked in your environment.",
        "For more information about how Snowpark Python allows you to bring in third-party packages from\nAnaconda, see Using third-party packages.",
        "When you create a Python UDF, UDTF or stored procedure, the allowlist and blocklist will be taken into\naccount when creating the Python environment. The allowlist and blocklist will apply to all packages that are required to create the Python environment.\nIf it\u2019s not possible to create an environment with the specified packages, the query will fail.",
        "When you execute a Python UDF, UDTF or stored procedure, Snowflake will check the allowlist and blocklist and\nmake sure that all of the packages are allowed by the packages policy. Otherwise, the query will fail.",
        "Packages policies will only apply if the Anaconda legal terms have been accepted.",
        "Packages policies will not be applied for built-in functions and will also not be applied for native apps.",
        "In order to create a packages policy object, you must have the following privileges:",
        "USAGE on the database and schema in which you plan to create the packages policy.",
        "CREATE PACKAGES POLICY on the schema in which you plan to create the packages policy.",
        "After the packages policy object is created, you must have the following privileges to apply it to the account:",
        "OWNERSHIP on the packages policy object.",
        "APPLY PACKAGES POLICY on the account.",
        "Follow these steps to implement a packages policy.",
        "Create a custom role that allows users to create and manage packages policies. Throughout this topic, the example custom role is named\npolicy_admin, although the role could have any appropriate name.",
        "If the custom role already exists, continue to the next step.",
        "Otherwise, create the policy_admin custom role.",
        "If the policy_admin custom role does not already have the following privileges, grant these privileges as shown below:",
        "USAGE on the database and schema that will contain the packages policy.",
        "CREATE PACKAGES POLICY on the schema that will contain the packages policy.",
        "APPLY PACKAGES POLICY on the account.",
        "Using the policy_admin custom role, create a new packages policy, with a language, allowlist, and blocklist\nspecified. ALLOWLIST, BLOCKLIST, ADDITIONAL_CREATION_BLOCKLIST, and COMMENT are optional parameters. By default, the allowlist value is ('*'),\nand the blocklist value is ().",
        "If a package is specified in both the allowlist and the blocklist, then the blocklist takes precedence.\nYou must explicitly add the Python runtime version in the allowlist and\nyou must also explicitly add all packages and underlying dependencies of a parent package to the allowlist.",
        "You can specify a particular package version or a range of versions by using these version\nspecifiers in the allowlist or blocklist: : ==, <=, >=, <,or >.\nFor example, numpy>=1.2.3.\nYou can use wildcards, such as, numpy==1.2.*, which means any micro version of numpy 1.2.",
        "Note",
        "Currently, in an allowlist or blocklist, only one range operator can be specified per package.\nSpecifying multiple range operators is not supported, for example pkg>1.0, <1.5.\nBecause of this, to configure a policy to allow an interval of a package version, set one side of\nthe range in the allowlist and the other side of the range in the blocklist.\nFor example, to allow package versions greater than 1.0 and less than 1.5,\nset the allowlist to pkg>1.0 and the blocklist to pkg>1.5.",
        "Where:",
        "The fully qualified name of the packages policy.",
        "The language that this packages policy will apply to.",
        "The allowlist for this packages policy. This is a comma-separated string with package specs.",
        "The blocklist for this packages policy. This is a comma-separated string with package specs.",
        "Specifies a list of package specs that are blocked at creation time. To unset this parameter, specify an empty list.\nIf the ADDITIONAL_CREATION_BLOCKLIST is set, it is appended to the basic BLOCKLIST at the creation time.\nFor temporary UDFs and anonymous stored procedures, the ADDITIONAL_CREATION_BLOCKLIST is appended to the BLOCKLIST at both creation and execution time.",
        "A comment specifying the purpose of the packages policy.",
        "In the example above, the blocklist applied for the creation time will be the ADDITIONAL_CREATION_BLOCKLIST plus the BLOCKLIST so the blocked packages will be\nnumpy==1.2.3, bad_package, bad_package2 and bad_package3.\nThe blocklist applied for the execution will be: numpy==1.2.3 and bad_package.\nFor temporary UDFs and anonymous stored procedures, the blocklist containing numpy==1.2.3, bad_package, bad_package2 and bad_package3\nwill be applied at both creation and execution time.",
        "To get a list of the dependencies of a Python package, use the SHOW_PYTHON_PACKAGES_DEPENDENCIES function.\nThe first parameter is the Python runtime version you are using and the second is a list of the packages to show dependencies for.\nFor example, to show the dependencies of the numpy package, use this command.",
        "The result is a list of the dependencies and their versions.",
        "To show the dependencies of Python 3.9 within Snowpark environment, call the function without specifying any packages.",
        "If you want to know which packages a function is using, you can use DESCRIBE FUNCTION to print them out.\nThis is an alternative way to identify all of the dependencies of a package.\nTo do this, create a function and in the package specification, provide the top level packages.\nNext, use DESCRIBE FUNCTION to get a list of all of the packages and their dependencies.\nYou can copy and paste this list into the package allowlist.\nNote that the packages policy must be temporarily unset or some packages might be blocked.\nThe following example shows how to find the dependencies for the \u2018snowflake-snowpark-python\u2019 package.",
        "If you want to show all of the packages and versions that are available,\nquery the INFORMATION_SCHEMA.PACKAGES view.",
        "If you want to see the current set of packages you are using, you can use this SQL statement.",
        "To get a list of third-party packages that are available from Anaconda, use the GET_ANACONDA_PACKAGES_REPODATA function.\nThe parameter is the architecture, which can be:\nlinux-64, linux-aarch64, osx-64, osx-arm64, win-64, or noarch.",
        "For example, to show the list of third-party packages from Anaconda for the linux-64 archtecture, use this command.",
        "Using the policy_admin custom role, set the policy on an account with the ALTER ACCOUNT command.",
        "Note",
        "To replace a packages policy that is already set for an account, unset the packages policy first and then set the new packages\npolicy for the account. Alternatively, you can use FORCE to set the packages policy without having to unset the packages policy. For example:",
        "If you want to see which policy is active on the account, you can use this SQL statement.",
        "The result of this query will display a column with the name POLICY_STATUS.",
        "Later, if you want to unset the package policy on your account, use this SQL statement.",
        "The following table summarizes the relationship between the packages policy DDL operations and their necessary privileges.",
        "Operation",
        "Privilege required",
        "Create packages policy",
        "A role with the CREATE PACKAGES POLICY privilege on the schema.",
        "Alter packages policy",
        "A role with the OWNERSHIP privilege on the packages policy.",
        "Drop packages policy",
        "A role with the OWNERSHIP privilege on the packages policy.",
        "Describe packages policy",
        "A role with the OWNERSHIP or USAGE privilege on the packages policy.",
        "Show packages policies",
        "A role with the OWNERSHIP or USAGE privilege on the packages policy.",
        "Set & unset packages policy",
        "A role with the APPLY PACKAGES POLICY privilege on the account and the OWNERSHIP privilege on the packages policy.",
        "Snowflake provides the following DDL commands to manage packages policy objects:",
        "CREATE PACKAGES POLICY",
        "ALTER PACKAGES POLICY",
        "DROP PACKAGES POLICY",
        "SHOW PACKAGES POLICIES",
        "DESCRIBE PACKAGES POLICY",
        "Users who do not have access to the packages policy that is set on the account are able to see the contents of it.",
        "Users can control who sees the contents of the packages policy by adding the USAGE privilege to the packages policies.\nThe account administrator or packages policy owner can grant this privilege to roles that need to use packages policies.",
        "The CURRENT_PACKAGES_POLICY Information Schema view displays a row for each\nSnowpark packages policy on the current account.",
        "To see the Anaconda packages that are used at the database level for function, use this SQL statement.",
        "To see the Anaconda packages that are used at the account level for function, use this SQL statement.",
        "To see all of the installed Anaconda packages on your account, use this SQL statement.",
        "Packages policies are replicated from a source account to target accounts if the database containing the packages policy is\nreplicated. For more information, see Dangling references and packages policies.",
        "Was this page helpful?",
        "On this page"
    ]
}