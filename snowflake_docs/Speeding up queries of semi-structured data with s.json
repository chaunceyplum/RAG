{
    "url": "https://docs.snowflake.com/en/user-guide/search-optimization/semi-structured-queries",
    "title": "Speeding up queries of semi-structured data with search optimization | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact Snowflake Support.",
        "The search optimization service can improve the performance of point lookup and substring queries on semi-structured\ndata in Snowflake tables (that is, data in VARIANT, OBJECT, and ARRAY columns).\nYou can configure search optimization on columns of these types even when the structure is deeply nested and\nchanges frequently. You can also enable search optimization for specific elements within a semi-structured column.",
        "Note",
        "You must explicitly enable this feature for specific columns or elements in columns using the\nON clause in the ALTER TABLE \u2026 ADD SEARCH OPTIMIZATION\ncommand. Enabling search optimization at the table level doesn\u2019t enable it for columns with semi-structured data types.\nFor example:",
        "Queries against VARIANT, OBJECT, and ARRAY columns aren\u2019t optimized if you omit the ON clause.",
        "The following sections provide more information about this support:",
        "Supported data types for constants and casts in predicates for semi-structured types",
        "Support for semi-structured data type values cast to TEXT",
        "Supported predicates for point lookups on VARIANT types",
        "Substring search in VARIANT types",
        "Current limitations in support for semi-structured types",
        "The search optimization service can improve the performance of\npoint lookups of semi-structured data where the\nfollowing types are used for the constant and the implicit or explicit cast for the\nelement:",
        "FIXED (including casts that specify a valid precision and scale)",
        "INTEGER",
        "TEXT",
        "DATE (including casts that specify a scale)",
        "TIME (including casts that specify a scale)",
        "TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, TIMESTAMP_TZ (including casts that specify a scale)",
        "The search optimization service supports the casting of types using:",
        "CAST and the :: operator",
        "TRY_CAST",
        "The search optimization service can also improve the performance of point lookups in which columns with semi-structured data types are cast\nto TEXT and are compared to constants that are cast to TEXT.",
        "For example, suppose that src is a VARIANT column containing BOOLEAN, DATE, and TIMESTAMP values that have been converted to VARIANT:",
        "For this table, the search optimization service can improve the following queries, which cast the VARIANT column to TEXT and\ncompare the column to string constants:",
        "The search optimization service can improve point lookup queries with the types of predicates listed below. In the examples\nbelow, src is the column with a semi-structured data type, and path_to_element is a\npath to an element in the column with a semi-structured data type.",
        "Equality predicates of the following form:",
        "WHERE path_to_element[::target_data_type] = constant",
        "In this syntax, target_data_type (if specified) and the data type of constant must be one\nof the supported types.",
        "For example, the search optimization service supports:",
        "Matching a VARIANT element against a NUMBER constant without explicitly casting the element.",
        "Explicitly casting a VARIANT element to NUMBER with a specified precision and scale.",
        "Matching a VARIANT element against a TEXT constant without explicitly casting the element.",
        "Explicitly casting a VARIANT element to TEXT.",
        "Explicitly casting a VARIANT element to DATE.",
        "Explicitly casting a VARIANT element to TIMESTAMP with a specified scale.",
        "Matching an ARRAY element against a value of a supported type,\nwith or without explicitly casting to the type. For example:",
        "Matching an OBJECT element against a value of a supported type,\nwith or without explicitly casting to the type. For example:",
        "Predicates that use the ARRAY functions, such as:",
        "WHERE ARRAY_CONTAINS(value_expr, array)",
        "In this syntax, value_expr must not be NULL and must evaluate to VARIANT. The data type of the value must be one of\nthe supported types.",
        "For example:",
        "In this example, the value is a constant that is implicitly cast to a VARIANT:",
        "WHERE ARRAYS_OVERLAP(ARRAY_CONSTRUCT(constant_1, constant_2, .., constant_N), array)",
        "The data type of each constant (constant_1, constant_2, and so on) must be one of the\nsupported types. The constructed ARRAY can\ninclude NULL constants.",
        "In this example, the array is in a VARIANT value:",
        "In this example, the array is an ARRAY column:",
        "The following predicates that check for NULL values:",
        "WHERE IS_NULL_VALUE(path_to_element)",
        "Note that IS_NULL_VALUE applies to JSON null values and not to SQL NULL values.",
        "WHERE path_to_element IS NOT NULL",
        "WHERE semistructured_column IS NULL",
        "where semistructured_column refers to the column and not a path to an element in the semi-structured data.",
        "For example, the search optimization service supports using the VARIANT column src but not the path to the element\nsrc:person.age in that VARIANT column.",
        "The search optimization service can optimize wildcard or regular expression searches\nin semi-structured columns (that is, VARIANT, OBJECT, and ARRAY columns)\nor elements in such columns. This includes predicates that use:",
        "LIKE",
        "LIKE ANY",
        "LIKE ALL",
        "ILIKE",
        "ILIKE ANY",
        "CONTAINS",
        "ENDSWITH",
        "STARTSWITH",
        "SPLIT_PART",
        "RLIKE",
        "REGEXP",
        "REGEXP_LIKE",
        "You can enable substring search optimization for a column or for multiple individual elements within a column. For\nexample, the following statement enables substring search optimization for a nested element in a column.",
        "Once the search access path has been built, the following query can be optimized:",
        "However, the following queries are not optimized because the WHERE clause filters don\u2019t apply to the element\nthat was specified when search optimization was enabled (col2:data.search).",
        "You can specify multiple elements to be optimized. Here, search optimization is enabled for two specific elements in the column col2.",
        "If you enable search optimization for a given element, it is enabled for any nested elements. The second ALTER TABLE statement\nbelow is redundant because the first statement enables search optimization for the entire data element, including\nthe nested search element.",
        "Similarly, enabling search optimization for an entire column allows all substring searches on that column to be optimized,\nincluding elements nested to any depth within it.",
        "For an example that enables FULL_TEXT search optimization on a VARIANT column in the car_sales table and its data\n(described in Querying Semi-structured Data), see Enable FULL_TEXT search optimization on a VARIANT column.",
        "When evaluating the constant string in a query (for example, LIKE 'constant_string'), the search optimization service splits the\nstring into tokens using the following characters as delimiters:",
        "Square brackets ([ and ]).",
        "Curly braces ({ and }).",
        "Colons (:).",
        "Commas (,).",
        "Double quotes (\").",
        "After splitting the string into tokens, the search optimization service considers only tokens that are at least five characters long.",
        "Example of a predicate",
        "How the search optimization service handles the query",
        "LIKE '%TEST%'",
        "The search optimization service doesn\u2019t use search access paths for the following predicate because the\nsubstring is shorter than five characters.",
        "LIKE '%SEARCH%IS%OPTIMIZED%'",
        "The search optimization service can optimize this query, using search access paths to search for SEARCH and\nOPTIMIZED but not IS. IS is shorter than five characters.",
        "LIKE '%HELLO_WORLD%'",
        "The search optimization service can optimize this query, using search access paths to search for HELLO_WORLD.",
        "LIKE '%COL:ON:S:EVE:RYWH:ERE%'",
        "The search optimization service splits this string into COL, ON, S, EVE, RYWH, ERE. Because all of\nthese tokens are shorter than five characters, the search optimization service can\u2019t optimize this query.",
        "LIKE '%{\\\"KEY01\\\":{\\\"KEY02\\\":\\\"value\\\"}%'",
        "The search optimization service  splits this into the tokens KEY01, KEY02, VALUE and uses the tokens when\noptimizing the query.",
        "LIKE '%quo\\\"tes_and_com,mas,\\\"are_n\\\"ot\\\"_all,owed%'",
        "The search optimization service splits this string into the tokens quo, tes_and_com, mas, are_n, ot,\n_all, owed. The search optimization service can only use the tokens that are five characters or longer\n(tes_and_com, are_n) when optimizing the query.",
        "Support for semi-structured types in the search optimization service is limited in the following ways:",
        "Predicates that use XMLGET aren\u2019t supported.",
        "Predicates of the form path_to_element IS NULL aren\u2019t supported.",
        "Predicates where the constants are results of scalar subqueries aren\u2019t supported.",
        "Predicates that specify paths to elements that contain sub-elements aren\u2019t supported.",
        "The current limitations of the search optimization service also apply to this\nfeature.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}