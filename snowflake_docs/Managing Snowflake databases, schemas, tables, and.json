{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-databases",
    "title": "Managing Snowflake databases, schemas, tables, and views with Python | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "You can use Python to manage Snowflake databases, schemas, tables, and views. For more information about managing and working with data in\nSnowflake, see Databases, Tables and Views - Overview.",
        "The examples in this topic assume that you\u2019ve added code to connect with Snowflake and to create a Root object from which to use the\nSnowflake Python APIs.",
        "For example, the following code uses connection parameters defined in a configuration file to create a connection to Snowflake:",
        "Using the resulting Session object, the code creates a Root object to use the API\u2019s types and methods. For more information,\nsee Connect to Snowflake with the Snowflake Python APIs.",
        "You can manage databases in Snowflake. The Snowflake Python APIs represents databases with two separate types:",
        "Database: Exposes a database\u2019s properties, such as its name.",
        "DatabaseResource: Exposes methods you can use to fetch a corresponding Database object and to drop the database.",
        "Topics",
        "Creating a database",
        "Getting database details",
        "Listing databases",
        "Dropping a database",
        "You can create a database by calling the DatabaseCollection.create method and passing a Database object that represents the\ndatabase you want to create. To create a database, first create a Database object that specifies the database name.",
        "Code in the following example creates a Database object representing a database named my_db and then creates the\ndatabase by passing the Database object to the DatabaseCollection.create method:",
        "You can get information about a database by calling the DatabaseResource.fetch method, which returns a Database\nobject.",
        "Code in the following example gets information about a database named my_db:",
        "You can list databases using the iter method, which returns a PagedIter iterator.",
        "Code in the following example lists databases whose name begins with my:",
        "You can drop a database using the DatabaseResource.drop method.",
        "Code in the following example drops the my_db database:",
        "You can manage schemas in Snowflake. A schema is a database-level object. When you create or reference a schema, you do so in the context\nof its database.",
        "The Snowflake Python APIs represents schemas with two separate types:",
        "Schema: Exposes a schema\u2019s properties, such as its name.",
        "SchemaResource: Exposes methods you can use to fetch a corresponding Schema object and to drop the schema.",
        "Topics",
        "Creating a schema",
        "Getting schema details",
        "Listing schemas",
        "Dropping a schema",
        "To create a schema, first create a Schema object that specifies the schema name.",
        "Code in the following example creates a Schema object representing a schema named my_schema:",
        "The code then creates the schema in the my_db database by passing the Schema object to the SchemaCollection.create\nmethod.",
        "You can get information about a schema by calling the SchemaResource.fetch method, which returns a Schema object.",
        "Code in the following example gets a Schema object that represents the my_schema schema:",
        "You can list the schemas in a specified database using the iter method. The method returns a PagedIter iterator of\nSchema objects.",
        "Code in the following example lists schema names in the my_db database:",
        "You can drop a schema using the SchemaResource.drop method.",
        "Code in the following example drops the my_schema schema:",
        "You can manage standard tables in Snowflake. A table is a schema-level object. When you create or reference a table, you do so in the\ncontext of its schema.",
        "The Snowflake Python APIs represents tables with two separate types:",
        "Table: Exposes a table\u2019s properties, such as its name and columns.",
        "TableResource: Exposes methods you can use to fetch a corresponding Table object, update the properties of the table, and\ndrop the table.",
        "Topics",
        "Creating a table",
        "Getting table details",
        "Creating or altering a table",
        "Listing tables",
        "Dropping a table",
        "To create a table, first create a Table object that specifies the table name, column names, and column data types.",
        "Code in the following example creates a Table object representing a table named my_table with the specified columns:",
        "The code then creates the table in the my_db database and my_schema schema by passing the Table object to the\nTableCollection.create method.",
        "You can get information about a table by calling the TableResource.fetch method, which returns a Table object.",
        "Code in the following example gets information about a table named my_table:",
        "You can set properties of a Table object and pass it to the TableResource.create_or_alter method to create a table if it\ndoesn\u2019t exist, or alter it according to the table definition if it does exist. The behavior of create_or_alter is intended to be\nidempotent, which means that the resulting table object will be the same regardless of whether the table exists before you call the method.",
        "Note",
        "The create_or_alter method uses default values for any Table\nproperties that you don\u2019t explicitly define. For example, if you don\u2019t set data_retention_time_in_days, its value defaults to\nNone even if the table previously existed with a different value.",
        "Code in the following example appends a new column named c3 of datatype int to the my_table table, and then alters the\ntable in Snowflake:",
        "You can list the tables in a specified schema using the iter method, which returns a PagedIter iterator of\nTable objects.",
        "Code in the following example lists tables whose name begins with my:",
        "You can drop a table using the TableResource.drop method.",
        "Code in the following example drops the my_table table:",
        "Minimum API version required",
        "0.13.0",
        "You can manage Snowflake event tables, which are a special kind of database table with a predefined set of columns where Snowflake can\ncollect telemetry data. For more information, see Event table overview.",
        "The Snowflake Python APIs represents event tables with two separate types:",
        "EventTable: Exposes an event table\u2019s properties such as its name, data retention time, max data extension time, and change\ntracking option.",
        "EventTableResource: Exposes methods you can use to fetch a corresponding EventTable object, rename the event table, and\ndrop the event table.",
        "Topics",
        "Creating an event table",
        "Getting event table details",
        "Listing event tables",
        "Performing event table operations",
        "To create an event table, first create a EventTable object, and then create a EventTableCollection object from the API\nRoot object. Using EventTableCollection.create, add the new event table to Snowflake.",
        "Code in the following example creates a EventTable object that represents an event table named my_event_table with the\nspecified parameters:",
        "The code creates a EventTableCollection variable event_tables and uses EventTableCollection.create to create a new\nevent table in Snowflake.",
        "You can get information about an event table by calling the EventTableResource.fetch method, which returns a EventTable\nobject.",
        "Code in the following example gets information about an event table named my_event_table:",
        "You can list event tables using the EventTableCollection.iter method, which returns a PagedIter iterator of\nEventTable objects.",
        "Code in the following example lists event tables whose name starts with my in the my_db database and my_schema schema, and\nprints the name of each:",
        "Code in the following example also lists event tables whose name begins with my, but it uses the starts_with parameter instead\nof like. This example also sets the optional parameter show_limit=10 to limit the number of results to 10:",
        "You can perform common event table operations\u2014such as renaming an event table and dropping an event table\u2014with a\nEventTableResource object.",
        "Note",
        "Only the RENAME functionality of ALTER TABLE (event tables) is currently supported.",
        "RENAME is not supported on the default event table, SNOWFLAKE.TELEMETRY.EVENTS.",
        "To demonstrate operations you can do with an event table resource, code in the following example does the following:",
        "Gets the my_event_table event table resource object.",
        "Renames the event table.",
        "Drops the event table.",
        "You can manage views in Snowflake. A view is a schema-level object and allows the result of a query to be accessed as if it were a table.\nWhen you create or reference a view, you do so in the context of its schema.",
        "Note",
        "ALTER VIEW is currently not supported.",
        "The Snowflake Python APIs represents views with two separate types:",
        "View: Exposes a view\u2019s properties, such as its name, columns, and SQL query statement.",
        "ViewResource: Exposes methods you can use to fetch a corresponding View object and to drop the view.",
        "Topics",
        "Creating a view",
        "Getting view details",
        "Listing views",
        "Dropping a view",
        "To create a view, first create a View object that specifies the view name, columns, and SQL query statement.",
        "Code in the following example creates a View object representing a view named my_view with the specified columns and SQL\nquery:",
        "The code then creates the view in the my_db database and my_schema schema by passing the View object to the\nViewCollection.create method.",
        "You can get information about a view by calling the ViewResource.fetch method, which returns a View object.",
        "Code in the following example gets a View object that represents the my_view view:",
        "You can list the views in a specified database using the iter method. The method returns a PagedIter iterator of\nView objects.",
        "Code in the following example lists views whose name begins with my in the my_db database and my_schema schema:",
        "Code in the following example also lists views whose name begins with my, but it uses the starts_with parameter instead of\nlike. This example also sets the optional parameter show_limit=10 to limit the number of results to 10:",
        "You can drop a view using the ViewResource.drop method.",
        "Code in the following example drops the my_view view:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}