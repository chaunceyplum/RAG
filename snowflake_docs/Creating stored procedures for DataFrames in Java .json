{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/java/creating-sprocs",
    "title": "Creating stored procedures for DataFrames in Java | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Preview support for this feature is available to all accounts.",
        "Using the Snowpark API, you can create stored procedures for your custom lambda expression in Java. You can call these stored procedures\nto process the data in your DataFrame.",
        "You can create:",
        "Temporary stored procedures that exist only within the current session.",
        "Permanent stored procedures that you can use in other sessions, including\nfrom a Snowflake worksheet.",
        "You can create a temporary procedure that will last for the current session only. The temporary procedure can be:",
        "An anonymous procedure that you can call by reference, such as by passing a variable of type com.snowflake.snowpark_java.StoredProcedure\nrepresenting it to code that calls the procedure.",
        "A named procedure with a name you assign. You can call the procedure by name from other code within the session.",
        "To create a temporary procedure, you register it with one of the registerTemporary methods of\ncom.snowflake.snowpark_java.SProcRegistration. The method is overloaded multiple times to support different numbers of procedure\narguments. To get an SProcRegistration instance, call the sproc method of the com.snowflake.snowpark_java.Session class.",
        "When calling registerTemporary, you can pass as arguments the following:",
        "The procedure\u2019s name (when it is a named procedure).",
        "The procedure itself as a lambda expression.",
        "Parameter data types as a single or array of com.snowflake.snowpark_java.types.DataType class. Omit this argument when the\nprocedure you\u2019re creating has no parameters.",
        "These should correspond to the parameter types defined in the procedure.",
        "Return data type as a com.snowflake.snowpark_java.types.DataType class.",
        "You can call the procedure with a storedProcedure method of the com.snowflake.snowpark_java.Session class.",
        "To create an anonymous temporary procedure, you register it as a temporary procedure without specifying a name. Snowflake will create a\nhidden name for its own use.",
        "Code in the following example calls the SProcRegistration.registerTemporary method to create an anonymous procedure from a lambda\nexpression. The procedure takes a Session object and an integer as arguments. The method registers a DataTypes.IntegerType\nas the single parameter type and a DataTypes.IntegerType as the return type.",
        "The procedure itself will take a Session object and an integer as arguments. The Session argument represents an implicit\nparameter that callers needn\u2019t pass as an argument.",
        "Code in the following example calls the anonymous procedure, passing the sp variable and 1 as its arguments.\nNote that the Session object is an implicit argument that you needn\u2019t pass when you call the procedure.",
        "To create a named temporary procedure, you register it as a temporary procedure, passing its name as one of the arguments.",
        "Code in the following example calls the registerTemporary method to create a named temporary procedure called\nincrement from a lambda expression, passing the procedure\u2019s name as an argument. The method registers a DataTypes.IntegerType as\nthe single parameter type and a DataTypes.IntegerType as the return type.",
        "The procedure itself will take a Session object and an integer as arguments. The Session argument represents an implicit\nparameter that callers needn\u2019t pass as an argument.",
        "Code in the following example calls the increment procedure, passing the procedure name and 1 as its\narguments. Note that the Session object is an implicit argument that you needn\u2019t pass when you call the procedure.",
        "You can create a permanent stored procedure that you can call from any session, including\nfrom within a Snowflake worksheet.",
        "To create a permanent procedure, you register it with a registerPermanent method of the com.snowflake.snowpark_java.SProcRegistration\nclass. The method is overloaded multiple times to support different numbers of procedure arguments.",
        "When calling registerPermanent, you pass as arguments the following:",
        "The procedure\u2019s name.",
        "The procedure itself as a lambda expression.",
        "Parameter data types as a single or array of com.snowflake.snowpark_java.types.DataType class. Omit this argument when the\nprocedure you\u2019re creating has no parameters.",
        "These should correspond to the parameter types defined in the procedure.",
        "The return data type as a com.snowflake.snowpark_java.types.DataType class.",
        "An existing stage to which Snowflake should copy files resulting from compiling the procedure.",
        "Snowflake will copy all related data, including dependencies and lambda functions. This must be a permanent stage (not session temporary)\nbecause this stored procedure can be invoked outside of the current session. If the procedure is later dropped, you must manually\nremove related files from the stage.",
        "A boolean value indicating whether this procedure should execute with caller\u2019s rights.",
        "For more about caller\u2019s rights and owner\u2019s rights, refer to Understanding caller\u2019s rights and owner\u2019s rights stored procedures.",
        "Code in the following example calls the registerPermanent method to create a permanent procedure called\nadd_hundred from a lambda expression.",
        "The method registers a DataTypes.IntegerType as the single parameter type and a DataTypes.IntegerType as the return type.\nIt specifies a stage called sproc_libs for the procedure and its dependencies. It also specifies that the procedure should be\nexecuted with caller\u2019s rights.",
        "The procedure itself will take a Session object and an integer as arguments. The Session argument represents an implicit\nparameter that callers needn\u2019t pass as an argument.",
        "Code in the following example calls the add_hundred procedure using a storedProcedure method of the\ncom.snowflake.snowpark_java.Session class. The call passes the procedure name and 1 as its arguments. Note that the Session\nobject used in the handler as an argument is an implicit argument that you needn\u2019t pass when you call the procedure.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}