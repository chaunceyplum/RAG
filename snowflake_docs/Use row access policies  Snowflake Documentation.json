{
    "url": "https://docs.snowflake.com/en/user-guide/security-row-using",
    "title": "Use row access policies | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading,\nplease contact Snowflake Support.",
        "This topic provides an introduction to implementing row access policies.",
        "The following subsections provide examples on how to implement row access policies:",
        "Use a typical row access policy with a mapping table lookup.",
        "Replace existing row access policy subqueries with memoizable functions to increase query performance.",
        "Reference a mapping table protected by a row access policy in a different row access policy.",
        "The following steps are a representative guide to configure row access policy privileges and add row access policies to tables and views.",
        "These steps make the following assumptions:",
        "The management approach is centralized.",
        "If the row access policy use case includes a hybrid, or decentralized management approach, see Manage row access policies\nfor a representative distribution of roles and privileges.",
        "A mapping table is necessary, similar to the Representative use case: Use a mapping table to filter the query result.",
        "The following steps use the CURRENT_ROLE context function to determine whether users see rows in a\nquery result, while the representative use case focuses on the user\u2019s first name (i.e. CURRENT_USER).",
        "If role activation and role hierarchy are important, Snowflake recommends that the policy conditions use the\nIS_ROLE_IN_SESSION function for account roles and the\nIS_DATABASE_ROLE_IN_SESSION function for database roles. For details, see\nActive role hierarchy & mapping tables.",
        "The overall process to implement a row access policy with mapping tables remains the same even though the context functions are different.",
        "The SECURITYADMIN system role grants privileges to custom roles to manage and implement row access policies.",
        "If you do not want to use higher privileged roles (i.e. SECURITYADMIN or ACCOUNTADMIN) in a production environment in favor of less\nprivileged custom roles (e.g. database_admin, finance_admin), verify that the lower-privileged roles have the necessary\nprivileges to manage and implement row access policies.",
        "For more information, see Row access policy privileges and Summary of DDL commands, operations, and privileges.",
        "There are separate steps to create a table to be protected by a row access policy (step 1) and adding the row access policy to the\ntable (step 5). It is possible to add row access policy to the table when the table is created, assuming that a row access policy already exists. For more information on the syntax, see CREATE TABLE.",
        "For example:",
        "Create a table for the sales data:",
        "In the security schema, create a mapping table as shown in the\nrepresentative example. This table defines which rows sales managers can see in the\nsales table:",
        "Next, a security administrator creates the mapping_role custom role and grants the SELECT privilege to the custom role. This grant\nallows users with the custom role to query the mapping table:",
        "Using the schema owner role, create a row access policy with the following two conditions:",
        "Users with the sales_executive_role custom role can view all rows.",
        "Users with the sales_manager custom role can view rows based on the salesmanagerregions mapping table.",
        "Note that the schema owner role is automatically granted the CREATE ROW ACCESS POLICY privilege. If other roles should be able to create\nrow access policies, the schema owner role can grant the CREATE ROW ACCESS policy privilege to other roles.",
        "Where:",
        "The name of the row access policy in the security schema.",
        "The signature for the row access policy.",
        "A signature specifies the mapping table attribute and data type. The returned value determines whether the user has access to a given\nrow on the table or view to which the row access policy is added.",
        "The beginning of the body in the row access policy.",
        "The first condition of the row access policy expression that allows users with the sales_executive_role custom role to view data.",
        "The second condition of the row access policy expression which uses a subquery.",
        "The subquery requires the CURRENT_ROLE to be the sales_manager custom role with the executed query on the data to specify a region\nlisted in the {salesmanagerregions} mapping table.",
        "Tip",
        "To increase query performance on the policy-protected table, replace the mapping table lookup subquery in the EXISTS clause with a memoizable function.",
        "For details, see the memoizable function example (in this topic).",
        "Using the SECURITYADMIN system role, execute the following two statements:",
        "These two GRANT <privileges> statements have the following effects:",
        "Ownership of the policy does not rest with the SECURITYADMIN system role. At query runtime, Snowflake uses the privileges granted to\nthe custom role because policies are executed with owner\u2019s rights, not the more privileged SECURITYADMIN system role. This approach supports the Principle of Least Privilege.",
        "The sales_analyst_role custom role can add or drop the row access policy from a table as needed.",
        "Add (bind) the row access policy to the region column in the sales data table:",
        "Grant the SELECT privilege on the protected sales data to the sales_manager_role custom role:",
        "After the sales data populates the sales data, test the row access policy:",
        "The steps in this example create a memoizable function for each mapping table lookup in the row\naccess policy conditions. The subquery in each EXISTS clause specifies the mapping table lookup, where the tables are named\nregions, customers, and products, respectively:",
        "For the following steps, assume that the rap_admin custom role can create row access policies\n(i.e. has the CREATE ROW ACCESS POLICY on SCHEMA privilege).",
        "Complete the following steps to replace each of the row access policy mapping table lookups with a memoizable function:",
        "Create a custom role named functions_admin to manage the memoizable function:",
        "Grant the following privileges to the functions_admin role to allow creating the memoizable function in an existing schema named\ngovernance.functions:",
        "Create a memoizable function for each of the EXISTS subquery clauses in the row access policy. Each memoizable function definition\ntakes the same form. For brevity, only one function example is shown:",
        "Use a CREATE ROW ACCESS POLICY statement to define a new row access policy that replaces the subqueries with\nmemoizable functions:",
        "The new row access policy allows for testing queries on a protected table, when the policy uses or does not use the memoizable\nfunctions, to quantify the performance impact of using memoizable functions in the policy conditions:",
        "This example shows how to reference a mapping table that is protected by a row access policy in a different row access policy. The row\naccess policy that protects the mapping table calls the IS_ROLE_IN_SESSION context function to account for\nrole hierarchy. A different row access policy protects the table that the user queries. This row access policy uses a subquery to perform a\nmapping table lookup. For example:",
        "Create a mapping table to define allowed roles based on geographic sales regions, and insert data into the table:",
        "Create a row access policy to specify the ALLOWED_ROLES column in the mapping table:",
        "Add the row access policy on the mapping table using an ALTER TABLE statement:",
        "Create a new row access policy that specifies the mapping table lookup on the protected mapping table:",
        "Add the row access policy named governance.policies.rap_map_lookup on the table named sales.tables.data using an ALTER\nTABLE statement:",
        "Grant privileges to the roles in the mapping table to allow users with these roles to query the protected data. For example, these\ngrants are for the na_manager custom role:",
        "As necessary, repeat the commands in this step for each role in the mapping table.",
        "Was this page helpful?",
        "On this page"
    ]
}