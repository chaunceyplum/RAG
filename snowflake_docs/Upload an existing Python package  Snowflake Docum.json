{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-cli/snowpark/upload",
    "title": "Upload an existing Python package | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "Snowflake CLI allows you to add existing Python packages to Snowpark imports using the snow snowpark package commands. You can use already implemented packages, such as those from PyPi, in your functions and procedures.",
        "To add a Python package to Snowpark imports, do the following:",
        "Check whether a package is already available.",
        "Download a package and create a Snowflake artifact.",
        "Upload the package to a Snowflake stage.",
        "Use the package in Snowpark procedures and functions.",
        "To check whether a package is not already available use the snow snowpark package lookup command.",
        "The following example illustrates looking up a package that is already available on the Snowflake Anaconda channel:",
        "If a package is not available on the Snowflake Anaconda channel, you can get a message similar to the following:",
        "For more information, see the snowpark package lookup command.",
        "To download a package and create a Snowflake artifact to upload use the snow snowpark package create command.",
        "where:",
        "<name> can be any requirement specifier supported by pip, such as a package name, an URL for a package, or a local file path.",
        "Additional options:",
        "--allow-shared-libraries: Allows shared (.so/.dll) libraries, when using packages installed through pip.",
        "--ignore-anaconda: Does not lookup packages on Snowflake Anaconda channel.",
        "--index-url: Specifies the base URL of the Python Package Index to use for package lookup. This URL should point to a repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the same format.",
        "--skip-version-check: Skips comparing versions of dependencies between requirements and Anaconda.",
        "The following examples illustrate some different situations for creating Snowflake artifacts:",
        "Example: create a package with Anaconda dependencies",
        "Example: create a package using the --ignore-anaconda option",
        "Example: create a package already available in the Snowflake Anaconda channel",
        "This example creates a Python package as a zip file that can be uploaded to a stage and later imported by a Snowpark Python app. Dependencies for \u201cjuly\u201d package are found on the Anaconda channel, so they were excluded from the .zip file. The command displays the packages you would need to include in requirements.txt of your Snowpark project.",
        "This example creates the july.zip package that you can use in your Snowpark project without needing to add any dependencies to the requirements.txt file. The error messages indicate that some packages contain shared libraries, which might not work, such as when creating a package using Windows.",
        "This example fails to create the package because it already exists. You can still forcibly create the package by using the --ignore-anaconda option.",
        "For more information about creating a package, see the snowpark package create command.",
        "To upload your package, use the snow snowpark package upload command.",
        "This command uploads a Python package zip file to a Snowflake stage so it can be referenced in the imports of a procedure or function.",
        "To use the package in procedures or functions, add it to the imports parameter of Snowpark definition section in snowflake.yml.",
        "Then import your package in the function handler.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}