{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark-container-services/tutorials/advanced/tutorial-3",
    "title": "Tutorial: Service-to-Service Communications with Snowpark Container Services | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Available to accounts in AWS and Microsoft Azure commercial regions, with some exceptions. For more information, see Available regions.",
        "In this tutorial, you create a Snowpark Container Services job service that communicates with the Echo service you created in\nTutorial 1. When the job service runs, it sends a POST request to the Echo service URL (that you\nprovide in the service specification) with a \u201cHello\u201d string in the request body. The Echo service returns a response with the\n\u201cBob said Hello\u201d string in the response body. You access the job service container logs to verify that the communications succeeded.",
        "There are two parts to this tutorial:",
        "Part 1: Create and test a job service. You download code provided for this tutorial and follow step-by-step instructions:",
        "Download the job service code for this tutorial.",
        "Build a Docker image for Snowpark Container Services, and upload the image to a repository in your account.",
        "Stage the specification file, which gives Snowflake the container configuration information.  In addition to the name of\nthe image to use to start a container, the specification sets the environment variable (SERVICE_URL) to the Echo service\nURL. The application code reads this environment variable to send requests to the Echo service.",
        "Execute the job service. Using the EXECUTE JOB SERVICE command, you can execute the job service by providing the specification file and the\ncompute pool where Snowflake can run the container. And finally, access logs from the job service container to verify that the\ncommunication between the job service and service succeeded.",
        "Part 2: Understand the job service code. This section provides an overview of the service code and highlights how different\ncomponents collaborate.",
        "Complete Tutorial 1. To verify the service is running, execute the DESCRIBE SERVICE command.",
        "Verify the status column shows the service status as RUNNING; if the status is PENDING, it indicates the service is still starting. To investigate why the service is not RUNNING, execute the SHOW SERVICE CONTAINERS IN SERVICE command and review the status of individual containers:",
        "You need the service running before you can proceed.",
        "Code (a Python application) is provided to create a job service.",
        "Download SnowparkContainerServices-Tutorials.zip.",
        "Unzip the content, which includes one directory for each tutorial. The Tutorial-3 directory has the following files:",
        "service_to_service.py",
        "Dockerfile",
        "service_to_service_spec.yaml",
        "Build an image for the linux/amd64 platform that Snowpark Container Services supports, and then upload the image to the image\nrepository in your account (see Common Setup).",
        "You will need information about the repository (the repository URL and the registry hostname) before you can build and upload the image. For more information, see\nRegistry and Repositories.",
        "Get information about the repository",
        "To get the repository URL, execute the SHOW IMAGE REPOSITORIES SQL command.",
        "The repository_url column in the output provides the URL. An example is shown:",
        "The host name in the repository URL is registry host name. An example is shown:",
        "Build image and upload it to the repository",
        "Open a terminal window, and change to the directory containing the files you unzipped.",
        "To build a Docker image, execute the following docker build command using the Docker CLI.\nNote the command specifies the current working directory (.)\nas the PATH for files to use for building the image.",
        "For image_name, use service_to_service:latest.",
        "Example",
        "Upload the image to the repository in your Snowflake account. In order for Docker to upload an image on your behalf to your repository,\nyou must first authenticate Docker with the registry.",
        "To authenticate Docker with the Snowflake registry, execute the following command.",
        "For username, specify your Snowflake username. Docker will prompt you for your password.",
        "To upload the image execute the following command:",
        "Example",
        "To upload your service specification file (service_to_service_spec.yaml) to the stage, use one of the following options:",
        "The Snowsight web interface. For instructions, see Choosing an internal stage for local files.",
        "The SnowSQL CLI. Execute the following PUT command:",
        "The command sets OVERWRITE=TRUE so that you can upload the file again, if needed (for example, if you fixed an error in your\nspecification file). If the PUT command is executed successfully, information about the uploaded file is printed out.",
        "Now you are ready to test the Snowflake job service you created. When the job service is executed, Snowflake collects anything that your code in\nthe container outputs to standard output or standard error as logs. You can use the SYSTEM$GET_SERVICE_LOGS system function\nto access the logs. For more information, see Snowpark Container Services: Additional considerations for services.",
        "To start a job service, run the EXECUTE JOB SERVICE command:",
        "Note the following:",
        "FROM and SPEC provide the stage name and the name of the service specification file.",
        "COMPUTE_POOL provides the compute resources where Snowflake executes the job service.",
        "Snowflake runs the container identified in the specification file. The container reads the SERVICE_URL environment\nvariable value (http://echo-service:8000/echo) and sends a request to the Echo service at port 8000 at /echo\nHTTP path.",
        "Snowflake starts the job service and returns the following output:",
        "Note that the response includes the job service name.",
        "(optional) After the job service completes, you can get more information about the job service that executed. This is useful for debugging job service failure.\nTo get the job service status, execute SHOW SERVICE CONTAINERS IN SERVICE.",
        "Sample output:",
        "To read the job service logs call SYSTEM$GET_SERVICE_LOGS:",
        "main is the name of the container you retrieve the log from. You set this container name for the container in the\nservice specification file.",
        "Sample log:",
        "Snowflake charges for the Compute Pool nodes that are active for your account. (See\nWorking With Compute Pools). To prevent unwanted charges, first stop all services that are\ncurrently running on a compute pool. Then, either suspend the compute pool (if you intend to use it again later) or drop it.",
        "Stop all services and job services on the compute pool.",
        "Delete the compute pool.",
        "You can also clean up the image registry (remove all images) and the internal stage (remove specifications).",
        "This section covers the following topics:",
        "Examining the files provided: Review various code files that implement the job service.",
        "Building and testing an image locally. Learn how to locally test the Docker image before uploading it to a\nrepository in your Snowflake account.",
        "The zip file you downloaded includes the following files:",
        "service_to_service.py",
        "Dockerfile",
        "service_to_service_spec.yaml",
        "This section provides an overview of how the code implements job service.",
        "When the job service runs:",
        "Snowflake uses the value provided in the specification file to set the SERVICE_URL environment variable in the container.",
        "The code reads the environment variable.",
        "The call_service() function uses the SERVICE_URL to communicate with the Echo service.",
        "This file contains all the commands to build an image using Docker.",
        "Snowflake uses information you provide in this specification to configure and run your service.",
        "This specification provides information to Snowflake for configuring and running your job. To communicate with the Echo service,\nthe job needs the following:",
        "DNS name of the Echo service to send requests to.",
        "HTTP port on which the Echo service is listening.",
        "HTTP path where the Echo service expects the request to be sent.",
        "To get this information:",
        "To get the DNS name of the Echo service (Tutorial 1), execute the DESCRIBE SERVICE SQL\ncommand:",
        "Resulting DNS name for the Echo service:",
        "Note that, in this tutorial, you create the job service in the same database schema (data-schema) where the Echo service\n(Tutorial 1) is created. Therefore, you only need the \u201cecho-service\u201d portion of the\npreceding DNS name for constructing the SERVICE_URL.",
        "Get the port number (8000) where Echo service is listening from the Echo service specification file\n(Tutorial 1). You can also use the SHOW ENDPOINTS SQL command.",
        "You then create the preceding specification file (service_to_service_spec.yaml). In addition to the required\ncontainers.name and containers.image fields, you also include the optional containers.env field to specify environment variables used by the service.",
        "You can test the Docker image locally before uploading it to a repository in your Snowflake account. In local testing, your\ncontainer runs standalone (it is not a job service that Snowflake executes).",
        "Note",
        "The Python code provided for this tutorial uses the requests library to send requests to another Snowpark Containers\nservice. If you don\u2019t have this library installed, run pip (for example, pip3 install requests).",
        "Use the following steps to test the Tutorial 3 Docker image:",
        "You need the Echo service running (Tutorial 1). To start the Tutorial 1 Echo service, in a\nterminal window, execute the following Python command:",
        "Open another terminal window and, run the Python code provided for this tutorial:",
        "Note that the SERVICE_URL is an environment variable. For local testing, you need to explicitly set this variable.\nThis URL matches the port and HTTP path explicitly specified when you started the Echo service.",
        "When the job is executed, it sends a POST request to the Echo service listening on port 8000 with the \u201cHello\u201d string in the\nrequest body. The Echo service echoes the input back and returns a response - \u201cI said Hello\u201d.",
        "Sample response:",
        "Review the log to verify that the service-to-service communication succeeded.",
        "Create a service with a block storage volume mounted",
        "Was this page helpful?"
    ]
}