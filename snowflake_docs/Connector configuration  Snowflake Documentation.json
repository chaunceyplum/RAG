{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/connector-sdk/flow/connector_configuration",
    "title": "Connector configuration | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Available to accounts in all regions in all cloud providers (including government regions). For details, contact your Snowflake representative.",
        "Connector configuration is the first required step of the wizard phase. It ensures that the connector\nhas the configuration of the objects common between all connector types, regardless of the actual\nsource system and domain. The procedure called PUBLIC.CONFIGURE_CONNECTOR(config VARIANT)\nis the entry point from the UI or worksheet to do so. When overwriting with custom logic, keep in mind that,\nthis procedure needs to be replaced, because it points to the ConfigureConnectorHandler.configureConnector static method in Java as a handler.",
        "Calling this procedure requires the user to have the ADMIN application role assigned.",
        "The connector configuration step internally consists of several phases. Some of them are fully customizable and by default,\ndon\u2019t do anything. The phases are as follows:",
        "Status validation",
        "Fields validation",
        "Input validation",
        "Configuration update",
        "Internal callback",
        "Status update",
        "The connector configuration requires at least the following SQL files to be executed during native app installation:",
        "core.sql",
        "configuration/app_config.sql",
        "configuration/connector_configuration.sql",
        "To perform the connector configuration, the internal status of the connector needs to be CONFIGURING.\nThis validation cannot be overwritten by using ConfigureConnectorHandlerBuilder nor by overwriting a stored procedure. However,\nit is possible to implement a custom handler, which will not have this kind of validation.",
        "The connector configuration needs to contain a set of specific fields. All of them are optional, but any other field causes an exception to be thrown.\nThe allowed keys are:",
        "warehouse",
        "destination_database",
        "destination_schema",
        "operational_warehouse",
        "global_schedule",
        "data_owner_role",
        "agent_username",
        "agent_role",
        "Warehouse is used by the Connector to run the scheduler, execute tasks and run queries.",
        "The destination database is used to store the data ingested by the connector. This database should be outside\nof the connector. It can be an existing database, however the connector needs to have write privileges on it.\nIt can be also a newly created database, however, this won\u2019t happen automatically and has to be implemented as a part of the\ninternal callback during connector configuration or configuration finalization.",
        "The destination schema will be the schema used in the destination_database above.",
        "Occasionally, the connector has a need to split the actual ingestion processes requiring a warehouse from the processes related to the connector internal operations.\nSpecifying this second warehouse to split the load between them.",
        "This property defines the running schedule for the scheduler task. Currently, the scheduler will only process resources with their own scheduleType=GLOBAL.\nThe value for this property should be similar to the one below:",
        "Role that can be used to give ownership of the sync database for retaining the data upon connector un-installation.",
        "Username used by the push based connector\u2019s agent when connecting with Snowflake.",
        "Role used by the push based connector\u2019s agent when connecting with Snowflake.",
        "Input needs to be a valid Variant, In addition, the SDK provides\nan internal stored procedure called: PUBLIC.CONFIGURE_CONNECTOR_VALIDATE(config VARIANT). By default,\nthis procedure just returns 'response_code': 'OK', however it can be changed by overwriting this stored procedure.\nAlternatively it can be customized using ConfigureConnectorHandlerBuilder and providing a custom implementation of the\nConfigureConnectorValidator interface.",
        "Once the validations are passed successfully configuration is saved to the internal APP_CONFIG table.\nThe service responsible for this saves the provided Variant under the connector_configuration key.",
        "Internal callback is another customizable step. By default, it invokes PUBLIC.CONFIGURE_CONNECTOR_INTERNAL(config VARIANT),\nwhich returns 'response_code': 'OK'. It can be overwritten through the SQL script or by using\na ConfigureConnectorHandlerBuilder to provide custom implementation of the ConfigureConnectorCallback interface.",
        "When all the above phases are completed successfully the internal status of the Connector will be updated to:",
        "For a diagram of state transitions, see Connector flow.",
        "If the procedure finishes successfully it will return a response in the following format:",
        "In case of an error the response will follow the below format:",
        "Possible error codes include:",
        "INVALID_CONNECTOR_STATUS - The procedure was called on already configured connector",
        "CONNECTOR_CONFIGURATION_PARSING_ERROR - Given configuration is not a valid JSON",
        "CONNECTOR_STATUS_NOT_FOUND - Connector status record does not exist in database",
        "CONNECTOR_STATUS_PARSING_ERROR - Value stored in table APP_STATE under connector_status key has incorrect format and cannot be parsed by the application",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}