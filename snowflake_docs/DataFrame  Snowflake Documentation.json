{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/dataframe",
    "title": "DataFrame | Snowflake Documentation",
    "paragraphs": [
        "All supported DataFrame APIs",
        "Constructor",
        "DataFrame([data,\u00a0index,\u00a0columns,\u00a0dtype,\u00a0...])",
        "Snowpark pandas representation of pandas.DataFrame with a lazily-evaluated relational dataset.",
        "Attributes",
        "DataFrame.index",
        "Get the index for this Series/DataFrame.",
        "DataFrame.columns",
        "Get the columns for this Snowpark pandas DataFrame.",
        "DataFrame.dtypes",
        "Return the dtypes in the DataFrame.",
        "DataFrame.info([verbose,\u00a0buf,\u00a0max_cols,\u00a0...])",
        "Print a concise summary of the DataFrame.",
        "DataFrame.select_dtypes([include,\u00a0exclude])",
        "Return a subset of the DataFrame's columns based on the column dtypes.",
        "DataFrame.values",
        "Return a NumPy representation of the dataset.",
        "DataFrame.axes",
        "Return a list representing the axes of the DataFrame.",
        "DataFrame.ndim",
        "Return the number of dimensions of the underlying data, by definition 2.",
        "DataFrame.size",
        "Return an int representing the number of elements in this object.",
        "DataFrame.shape",
        "Return a tuple representing the dimensionality of the DataFrame.",
        "DataFrame.empty",
        "Indicator whether the DataFrame is empty.",
        "Snowflake Specific",
        "DataFrame.to_pandas(*[,\u00a0statement_params])",
        "Convert Snowpark pandas DataFrame to pandas.DataFrame",
        "DataFrame.to_snowflake(name[,\u00a0if_exists,\u00a0...])",
        "Save the Snowpark pandas DataFrame as a Snowflake table.",
        "DataFrame.to_snowpark([index,\u00a0index_label])",
        "Convert the Snowpark pandas DataFrame to a Snowpark DataFrame.",
        "DataFrame.cache_result([inplace])",
        "Persists the current Snowpark pandas DataFrame to a temporary table to improve the latency of subsequent operations.",
        "Conversion",
        "DataFrame.astype(dtype[,\u00a0copy,\u00a0errors])",
        "Cast a pandas object to a specified dtype dtype.",
        "DataFrame.convert_dtypes([infer_objects,\u00a0...])",
        "Convert columns to best possible dtypes using dtypes supporting pd.NA.",
        "DataFrame.copy([deep])",
        "Make a copy of this object's indices and data.",
        "Indexing, iteration",
        "DataFrame.assign(**kwargs)",
        "Assign new columns to a DataFrame.",
        "DataFrame.head([n])",
        "Return the first n rows.",
        "DataFrame.loc",
        "Access a group of rows and columns by label(s) or a boolean array.",
        "DataFrame.iloc",
        "Purely integer-location based indexing for selection by position.",
        "DataFrame.insert(loc,\u00a0column,\u00a0value[,\u00a0...])",
        "Insert column into DataFrame at specified location.",
        "DataFrame.__iter__()",
        "Iterate over info axis.",
        "DataFrame.keys()",
        "Get columns of the DataFrame.",
        "DataFrame.iterrows()",
        "Iterate over DataFrame rows as (index, Series) pairs.",
        "DataFrame.items()",
        "Iterate over (column name, Series) pairs.",
        "DataFrame.itertuples([index,\u00a0name])",
        "Iterate over DataFrame rows as namedtuples.",
        "DataFrame.tail([n])",
        "Return the last n rows.",
        "DataFrame.isin(values)",
        "Whether each element in the DataFrame is contained in values.",
        "DataFrame.where(cond[,\u00a0other,\u00a0inplace,\u00a0...])",
        "Replace values where the condition is False.",
        "DataFrame.mask(cond[,\u00a0other,\u00a0inplace,\u00a0axis,\u00a0...])",
        "Replace values where the condition is True.",
        "Binary operator functions",
        "DataFrame.add(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get addition of DataFrame and other, element-wise (binary operator add).",
        "DataFrame.sub(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get subtraction of DataFrame and other, element-wise (binary operator sub).",
        "DataFrame.mul(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get multiplication of DataFrame and other, element-wise (binary operator mul).",
        "DataFrame.div(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get floating division of DataFrame and other, element-wise (binary operator truediv).",
        "DataFrame.truediv(other[,\u00a0axis,\u00a0level,\u00a0...])",
        "Get floating division of DataFrame and other, element-wise (binary operator truediv).",
        "DataFrame.floordiv(other[,\u00a0axis,\u00a0level,\u00a0...])",
        "Get integer division of DataFrame and other, element-wise (binary operator floordiv).",
        "DataFrame.mod(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get modulo of DataFrame and other, element-wise (binary operator mod).",
        "DataFrame.pow(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get exponential power of DataFrame and other, element-wise (binary operator pow).",
        "DataFrame.radd(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get addition of DataFrame and other, element-wise (binary operator radd).",
        "DataFrame.rsub(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get subtraction of DataFrame and other, element-wise (binary operator rsub).",
        "DataFrame.rmul(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get multiplication of DataFrame and other, element-wise (binary operator mul).",
        "DataFrame.rdiv(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get floating division of DataFrame and other, element-wise (binary operator rtruediv).",
        "DataFrame.rtruediv(other[,\u00a0axis,\u00a0level,\u00a0...])",
        "Get floating division of DataFrame and other, element-wise (binary operator rtruediv).",
        "DataFrame.rfloordiv(other[,\u00a0axis,\u00a0level,\u00a0...])",
        "Get integer division of DataFrame and other, element-wise (binary operator rfloordiv).",
        "DataFrame.rmod(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get modulo of DataFrame and other, element-wise (binary operator rmod).",
        "DataFrame.rpow(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get exponential power of DataFrame and other, element-wise (binary operator rpow).",
        "DataFrame.lt(other[,\u00a0axis,\u00a0level])",
        "Get less than comparison of DataFrame and other, element-wise (binary operator le).",
        "DataFrame.gt(other[,\u00a0axis,\u00a0level])",
        "Get greater than comparison of DataFrame and other, element-wise (binary operator ge).",
        "DataFrame.le(other[,\u00a0axis,\u00a0level])",
        "Get less than or equal comparison of DataFrame and other, element-wise (binary operator le).",
        "DataFrame.ge(other[,\u00a0axis,\u00a0level])",
        "Get greater than or equal comparison of DataFrame and other, element-wise (binary operator ge).",
        "DataFrame.ne(other[,\u00a0axis,\u00a0level])",
        "Get not equal comparison of DataFrame and other, element-wise (binary operator ne).",
        "DataFrame.eq(other[,\u00a0axis,\u00a0level])",
        "Perform equality comparison of DataFrame and other (binary operator eq).",
        "Function application, GroupBy & window",
        "DataFrame.apply(func[,\u00a0axis,\u00a0raw,\u00a0...])",
        "Apply a function along an axis of the DataFrame.",
        "DataFrame.applymap(func[,\u00a0na_action])",
        "Apply a function to a Dataframe elementwise.",
        "DataFrame.agg([func,\u00a0axis])",
        "Aggregate using one or more operations over the specified axis.",
        "DataFrame.aggregate([func,\u00a0axis])",
        "Aggregate using one or more operations over the specified axis.",
        "DataFrame.transform(func[,\u00a0axis])",
        "Call func on self producing a Snowpark pandas DataFrame with the same axis shape as self.",
        "DataFrame.groupby([by,\u00a0axis,\u00a0level,\u00a0...])",
        "Group DataFrame using a mapper or by a Series of columns.",
        "DataFrame.rolling(window[,\u00a0min_periods,\u00a0...])",
        "Provide rolling window calculations.",
        "Computations / descriptive stats",
        "DataFrame.abs()",
        "Return a BasePandasDataset with absolute numeric value of each element.",
        "DataFrame.all([axis,\u00a0bool_only,\u00a0skipna])",
        "Return whether all elements are True, potentially over an axis.",
        "DataFrame.any(*[,\u00a0axis,\u00a0bool_only,\u00a0skipna])",
        "Return whether any element are True, potentially over an axis.",
        "DataFrame.count([axis,\u00a0numeric_only])",
        "Count non-NA cells for each column or row.",
        "DataFrame.cummax([axis,\u00a0skipna])",
        "Return cumulative maximum over a BasePandasDataset axis.",
        "DataFrame.cummin([axis,\u00a0skipna])",
        "Return cumulative minimum over a BasePandasDataset axis.",
        "DataFrame.cumsum([axis,\u00a0skipna])",
        "Return cumulative sum over a BasePandasDataset axis.",
        "DataFrame.describe([percentiles,\u00a0include,\u00a0...])",
        "Generate descriptive statistics for columns in the dataset.",
        "DataFrame.diff([periods,\u00a0axis])",
        "First discrete difference of element.",
        "DataFrame.max([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the maximum of the values over the requested axis.",
        "DataFrame.mean([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the mean of the values over the requested axis.",
        "DataFrame.median([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the median of the values over the requested axis.",
        "DataFrame.min([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the minimum of the values over the requested axis.",
        "DataFrame.pct_change([periods,\u00a0fill_method,\u00a0...])",
        "Fractional change between the current and a prior element.",
        "DataFrame.quantile([q,\u00a0axis,\u00a0numeric_only,\u00a0...])",
        "Return values at the given quantile over requested axis.",
        "DataFrame.rank([axis,\u00a0method,\u00a0numeric_only,\u00a0...])",
        "Compute numerical data ranks (1 through n) along axis.",
        "DataFrame.round([decimals])",
        "Round a BasePandasDataset to a variable number of decimal places.",
        "DataFrame.skew([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return unbiased skew, normalized over n-1",
        "DataFrame.sum([axis,\u00a0skipna,\u00a0numeric_only,\u00a0...])",
        "Return the sum of the values over the requested axis.",
        "DataFrame.std([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return sample standard deviation over requested axis.",
        "DataFrame.var([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return unbiased variance over requested axis.",
        "DataFrame.nunique([axis,\u00a0dropna])",
        "Count number of distinct elements in specified axis.",
        "DataFrame.value_counts([subset,\u00a0normalize,\u00a0...])",
        "Return a Series containing the frequency of each distinct row in the Dataframe.",
        "Reindexing / selection / label manipulation",
        "DataFrame.add_prefix(prefix[,\u00a0axis])",
        "Prefix labels with string prefix.",
        "DataFrame.add_suffix(suffix[,\u00a0axis])",
        "Suffix labels with string suffix.",
        "DataFrame.drop([labels,\u00a0axis,\u00a0index,\u00a0...])",
        "Return Series with specified index labels removed.",
        "DataFrame.drop_duplicates([subset,\u00a0keep,\u00a0...])",
        "Return DataFrame with duplicate rows removed.",
        "DataFrame.duplicated([subset,\u00a0keep])",
        "Return boolean Series denoting duplicate rows.",
        "DataFrame.equals(other)",
        "Test whether two dataframes contain the same elements.",
        "DataFrame.first(offset)",
        "Select initial periods of time series data based on a date offset.",
        "DataFrame.get(key[,\u00a0default])",
        "Get item from object for given key (ex: DataFrame column).",
        "DataFrame.head([n])",
        "Return the first n rows.",
        "DataFrame.idxmax([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return index of first occurrence of maximum over requested axis.",
        "DataFrame.idxmin([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return index of first occurrence of minimum over requested axis.",
        "DataFrame.last(offset)",
        "Select final periods of time series data based on a date offset.",
        "DataFrame.rename([mapper,\u00a0index,\u00a0columns,\u00a0...])",
        "Rename columns or index labels.",
        "DataFrame.rename_axis([mapper,\u00a0index,\u00a0...])",
        "Set the name of the axis for the index or columns.",
        "DataFrame.reset_index([level,\u00a0drop,\u00a0...])",
        "Reset the index, or a level of it.",
        "DataFrame.sample([n,\u00a0frac,\u00a0replace,\u00a0...])",
        "Return a random sample of items from an axis of object.",
        "DataFrame.set_axis(labels,\u00a0*[,\u00a0axis,\u00a0copy])",
        "Assign desired index to given axis.",
        "DataFrame.set_index(keys[,\u00a0drop,\u00a0append,\u00a0...])",
        "Set the DataFrame index using existing columns.",
        "DataFrame.tail([n])",
        "Return the last n rows.",
        "DataFrame.take(indices[,\u00a0axis])",
        "Return the elements in the given positional indices along an axis.",
        "Missing data handling",
        "DataFrame.backfill(*[,\u00a0axis,\u00a0inplace,\u00a0...])",
        "Synonym for DataFrame.fillna with method='bfill'.",
        "DataFrame.bfill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0...])",
        "Synonym for DataFrame.fillna with method='bfill'.",
        "DataFrame.dropna(*[,\u00a0axis,\u00a0how,\u00a0thresh,\u00a0...])",
        "Remove missing values.",
        "DataFrame.ffill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0...])",
        "Synonym for DataFrame.fillna() with method='ffill'.",
        "DataFrame.fillna([value,\u00a0method,\u00a0axis,\u00a0...])",
        "Fill NA/NaN values using the specified method.",
        "DataFrame.isna()",
        "Detect missing values.",
        "DataFrame.isnull()",
        "DataFrame.isnull is an alias for DataFrame.isna.",
        "DataFrame.notna()",
        "Detect non-missing values for an array-like object.",
        "DataFrame.notnull()",
        "Detect non-missing values for an array-like object.",
        "DataFrame.pad(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0...])",
        "Synonym for DataFrame.fillna() with method='ffill'.",
        "DataFrame.replace([to_replace,\u00a0value,\u00a0...])",
        "Replace values given in to_replace with value.",
        "Reshaping, sorting, transposing",
        "DataFrame.melt([id_vars,\u00a0value_vars,\u00a0...])",
        "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.",
        "DataFrame.nlargest(n,\u00a0columns[,\u00a0keep])",
        "Return the first n rows ordered by columns in descending order.",
        "DataFrame.nsmallest(n,\u00a0columns[,\u00a0keep])",
        "Return the first n rows ordered by columns in ascending order.",
        "DataFrame.pivot(*,\u00a0columns[,\u00a0index,\u00a0values])",
        "Return reshaped DataFrame organized by given index / column values.",
        "DataFrame.pivot_table([values,\u00a0index,\u00a0...])",
        "Create a spreadsheet-style pivot table as a DataFrame.",
        "DataFrame.sort_index(*[,\u00a0axis,\u00a0level,\u00a0...])",
        "Sort object by labels (along an axis).",
        "DataFrame.nlargest(n,\u00a0columns[,\u00a0keep])",
        "Return the first n rows ordered by columns in descending order.",
        "DataFrame.nsmallest(n,\u00a0columns[,\u00a0keep])",
        "Return the first n rows ordered by columns in ascending order.",
        "DataFrame.melt([id_vars,\u00a0value_vars,\u00a0...])",
        "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.",
        "DataFrame.sort_values(by[,\u00a0axis,\u00a0ascending,\u00a0...])",
        "Sort by the values along either axis.",
        "DataFrame.squeeze([axis])",
        "Squeeze 1 dimensional axis objects into scalars.",
        "DataFrame.stack([level,\u00a0dropna,\u00a0sort,\u00a0...])",
        "Stack the prescribed level(s) from columns to index.",
        "DataFrame.T",
        "Transpose index and columns.",
        "DataFrame.transpose([copy])",
        "Transpose index and columns.",
        "DataFrame.unstack([level,\u00a0fill_value,\u00a0sort])",
        "Pivot a level of the (necessarily hierarchical) index labels.",
        "Combining / comparing / joining / merging",
        "DataFrame.compare(other[,\u00a0align_axis,\u00a0...])",
        "Compare to another DataFrame and show the differences.",
        "DataFrame.join(other[,\u00a0on,\u00a0how,\u00a0lsuffix,\u00a0...])",
        "Join columns of another DataFrame.",
        "DataFrame.merge(right[,\u00a0how,\u00a0on,\u00a0left_on,\u00a0...])",
        "Merge DataFrame or named Series objects with a database-style join.",
        "DataFrame.update(other)",
        "Modify Series in place using values from passed Series.",
        "Time Series-related",
        "DataFrame.shift([periods,\u00a0freq,\u00a0axis,\u00a0...])",
        "Shift data by desired number of periods along axis and replace columns with fill_value (default: None).",
        "DataFrame.first_valid_index()",
        "Return index for first non-NA value or None, if no non-NA value is found.",
        "DataFrame.last_valid_index()",
        "Return index for last non-NA value or None, if no non-NA value is found.",
        "DataFrame.resample(rule[,\u00a0axis,\u00a0closed,\u00a0...])",
        "Resample time-series data.",
        "Serialization / IO / conversion",
        "DataFrame.to_csv([path_or_buf,\u00a0sep,\u00a0na_rep,\u00a0...])",
        "Write object to a comma-separated values (csv) file.",
        "Was this page helpful?"
    ]
}