{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/requesting-ui",
    "title": "Create a user interface to request privileges and references | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic describes how to create a user interface using Streamlit and Snowsight to\nallow consumers to grant privileges and create references for an installed Snowflake Native App.\nThe Snowflake Native App Framework provides the Python Permission SDK that allows providers to embed requests\nfor the consumer using a Streamlit app.",
        "For general information on requesting privileges and references from the consumer using the\nSnowflake Native App Framework, refer to Request access to objects in a consumer account.",
        "The Snowflake Native App Framework provides the Python Permission SDK which allows a provider to do the\nfollowing within a Snowflake Native App:",
        "Check for account level privileges.",
        "Request global privileges that are listed in the manifest file.",
        "Request references to objects and their corresponding object level privileges as defined\nin the manifest file.",
        "Request privileged actions, for example creating an API integration or creating a share.",
        "Using the Python Permission SDK, Snowsight displays the access requests in the\nSecurity tab of the installed Snowflake Native App.",
        "The following general workflow outlines the steps required to implement a Streamlit app to\nrequest grants for privileges and references from the consumer.",
        "Create an application package.",
        "In the manifest file, specify the privileges and define the references required for the Snowflake Native App.",
        "Add a Streamlit app to your application package.",
        "Add an environment.yml file to your application package.",
        "Note",
        "The environment.yml file must be in the same directory as main Streamlit file\nused to implement the Snowsight interface.",
        "Add the snowflake-native-apps-permission library as a dependency.",
        "Import the snowflake.permissions library in your Streamlit app.",
        "Add functions to your Streamlit app that call the functions provided by the SDK.",
        "To use the Python Permission SDK in a Streamlit app, add the snowflake-native-apps-permission\npackage as a dependency in your environment.yml file as shown in the following example:",
        "To import the Python Permission SDK into your Streamlit app, include the following import statement in\nyour app:",
        "The following examples show how to perform different tasks using the Python Permission SDK.",
        "This example shows how to use the get_held_account_privileges() method of the Permissions\nAPI to check if permissions declared in the manifest file are granted to the installed Snowflake Native App.",
        "For example, if a Snowflake Native App needs to create a database outside of the APPLICATION object, a provider\ncan define the reference in the manifest file as follows:",
        "Using the Python Permission SDK, you can use the get_held_account_privileges() method to\nobtain a list of privileges that have been granted to the Snowflake Native App.",
        "This example calls the get_held_account_privileges() function, passing the\nCREATE DATABASE permission as a parameter. A provider can use get_held_account_privileges()\nfunction to respond appropriately until the consumer grants the required privileges to\nthe Snowflake Native App.",
        "Note",
        "Only privileges defined in the manifest file are valid arguments to\nget_held_account_privileges(). Passing other arguments results in an error.",
        "Providers can use the Python Permission SDK to request privileged actions required by the Snowflake Native App.",
        "For example, to request an API integration that allows the Snowflake Native App to connect to a\nServiceNow instance, a provider would define the API integration in the manifest file:",
        "Next, in the Streamlit app, the provider calls the request_reference(<ref_name>) method\nto request the USAGE privilege on the API integration as shown in the following example:",
        "The following table lists the functions provided in the snowflake.permissions module by the\nPython Permission SDK:",
        "Method",
        "Description",
        "request_account_privileges(privileges: [str])",
        "Requests privileges from the consumer specified by a string array passed to the function that\ncontains the privileges. The specified privileges must be listed in the manifest file.",
        "request_reference(reference: str)",
        "Requests a reference from the consumer specified by the string passed to the function. The\nreference passed to the function must be defined in the manifest file.\nRefer to Object types and privileges that a reference can contain for the objects that can be\nincluded in a reference and their supported privileges.",
        "request_aws_api_integration(id: str, allowed_prefixes: [str], gateway: AwsGateway,\naws_role_arn: str, api_key: str = None, name: str = None, comment: str = None)",
        "Requests an API integration from the consumer for the Amazon API Gateway. The id\nparameter must be the name of the API integration defined in the manifest file.",
        "AwsGateway can have the following values:",
        "permissions.AwsGateway.API_GATEWAY",
        "permissions.AwsGateway.PRIVATE_API_GATEWAY",
        "permissions.AwsGateway.GOV_API_GATEWAY",
        "permissions.AwsGateway.GOV_PRIVATE_API_GATEWAY",
        "Refer to CREATE API INTEGRATION for information on other parameters.",
        "request_azure_api_integration(id: str, allowed_prefixes: [str], tenant_id: str, application_id: str,\napi_key: str = None, name: str = None, comment: str = None)",
        "Requests an API integration from the consumer for Azure API Management. The id\nparameter must be the name of the API integration defined in the manifest file. Refer to\nCREATE API INTEGRATION for information on other parameters.",
        "request_google_api_integration(id: str, allowed_prefixes: [str], audience: str, name: str = None, comment: str = None, api_key: str = None)",
        "Requests an API integration from the consumer for Google Cloud API Gateway. The id\nparameter must be the name of the API integration defined in the manifest file. Refer to\nCREATE API INTEGRATION for information on other parameters.",
        "get_held_account_privileges(privilege_names: [str]) -> [str]",
        "Returns an array containing the privileges that have been granted to the Snowflake Native App\nbased on the array of privileges passed to the function.",
        "get_missing_account_privileges(privilege_names: [str]) -> [str]",
        "Returns an array containing the privileges that have not been granted to the Snowflake Native App\nbased on the array of privileges passed to the function.",
        "get_reference_associations(reference_name: str) -> [str]",
        "Returns an array containing a list of references to an object, specified by a parameter\nto the function that have been associated with the Snowflake Native App.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}