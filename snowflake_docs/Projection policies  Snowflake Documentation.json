{
    "url": "https://docs.snowflake.com/en/user-guide/projection-policies",
    "title": "Projection policies | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact Snowflake Support.",
        "This topic shows how to use projection policies to allow or prevent column projection in the final output of a SQL query result.",
        "A projection policy is a first-class, schema-level object that defines whether a column can be projected in the output of a SQL query\nresult. A column with a projection policy assigned to it is said to be projection constrained. Projection policies can be used to\nconstrain sensitive or private information (for example, name or phone number) when sharing when sharing data securely between partners.",
        "However, note that columns that are hidden by projection policies can still be used in inner queries or in WHERE clauses, which can\ndisclose information about a given field. For details, see the Considerations section (in this topic).",
        "After creating the projection policy, a policy administrator can assign the projection policy to a column. A column can only have one\nprojection policy assigned to it at any given time. A user can project the column only if their active role matches a projection policy\ncondition that allows the column to be projected.",
        "Note that a projection constrained column can also be protected by a masking policy and the table containing the projection constrained\ncolumn can be protected by a row access policy. For more details, see Masking & row access policies (in this topic).",
        "Snowflake tracks column usage. Indirect references to a column, such as a view definition,\nUDF (in this topic), and common table expression, impact column projection when a projection\npolicy is set on a column.",
        "When a projection policy is set on the column and the column cannot be projected, the column:",
        "Is not included in the output of a query result.",
        "Cannot be inserted into another table.",
        "Cannot be an argument for an external function or stored procedure.",
        "For limitations regarding user-defined functions (UDFs), see User-defined functions (UDFs) (in this topic).",
        "A projection policy cannot be applied to:",
        "A tag assigned to a table or column (that is, a tag-based projection policy).",
        "A virtual column or to the VALUE column in an external table. As a workaround, create a view and assign a projection policy to each\ncolumn that should not be projected.",
        "The value_column in a PIVOT construct. For related details, see\nUNPIVOT (in this topic).",
        "A projection policy body cannot reference a column protected by a masking policy or a table protected by a row access\npolicy. For additional details, see Masking & row access policies (in this topic).",
        "Use projection policies when the use case calls for querying a sensitive column without directly exposing the column value to an analyst or\nsimilar role. The column value within a projection constrained column can be analyzed with greater flexibility than a masked or tokenized\nvalue. However, consider the following prior to setting a projection policy on a column:",
        "A projection policy does not prevent the targeting of an individual.",
        "For example, a user can filter rows where the name column corresponds to a particular individual, even if the column is\nprojection constrained. However, the user cannot run a SELECT statement to view names of the individuals in the table.",
        "When a projection constrained column is the join key for a query that combines data from the protected table with data from an unprotected\ntable, nothing prevents the user from projecting values from the column in the unprotected table. As a result, if a value in the\nunprotected table matches a value in the protected column, the user can obtain that value by projecting it from the unprotected table.",
        "For example, suppose a projection policy was assigned to the email column of the t_protected table. A user can still ascertain\nvalues in the t_protected.email column by executing:",
        "A projection constraint does not guarantee that a malicious actor could not use deliberate queries to obtain potentially sensitive data\nfrom a projection-constrained column. Projection policies are best suited for use with partners and customers with whom you have an\nexisting level of trust. In addition, providers should be vigilant about potential misuses of their data (e.g. reviewing the access\nhistory for their listings).",
        "For all of these reasons, if you need to prevent leakage about a specific column or entity, you should omit the column entirely from\nyour data, or employ differential privacy.",
        "A projection policy contains a body that calls the internal PROJECTION_CONSTRAINT function to determine whether to project\na column.",
        "Where:",
        "name specifies the name of the policy.",
        "AS () RETURNS PROJECTION_CONSTRAINT is the signature and return type of the policy. The signature does not accept any\narguments and the return type is PROJECTION_CONSTRAINT, which is an internal data type. All projection policies have the same\nsignature and return type.",
        "body is a SQL expression that determines whether to project the column. This can include CASE and other valid SQL\nstatements, and can also include SELECT clauses that evaluate to TRUE or FALSE. Do not return NULL to disallow projection. You\nmust return the internal PROJECTION_CONSTRAINT function with a parameter value that allows or prevents the projection of a column:",
        "PROJECTION_CONSTRAINT(ALLOW => true) allows projecting a column.",
        "PROJECTION_CONSTRAINT(ALLOW => false) does not allow projecting a column.",
        "The simplest projection policies call the PROJECTION_CONSTRAINT function directly:",
        "More complicated SQL expressions can be written to call the PROJECTION_CONSTRAINT function. The expression can use\nConditional expression functions and Context functions to introduce logic to allow certain users with a\nparticular role to project a column and prevent all other users from projecting a column.",
        "Tip",
        "You can use the following strategies when using context functions in a conditional policy:",
        "Context functions return strings, so comparisons using them are case-sensitive. You can use\nLOWER to convert strings to all lowercase if you\u2019d like to do a case-insensitive comparison.",
        "The POLICY_CONTEXT function helps you evaluate whether a policy body is returning the correct value\nwhen a context function returns a certain value. The POLICY_CONTEXT function simulates query results based upon a specified value of\none or more context functions.",
        "The following example includes a CASE expression and CURRENT_ROLE context\nfunction to create a conditional policy that only allows users with the analyst custom role to project a column:",
        "The following example uses the SYSTEM$GET_TAG_ON_CURRENT_COLUMN function so that a tag that is assigned to\na column determines whether the column can be projected. In this case, when the policy is assigned to a column, the value of the\ntags.accounting_col tag on that column must be public in order to project the column.",
        "For data sharing use cases, the provider can write a projection policy to constrain column projection for all consumer accounts using the\nCURRENT_ACCOUNT context function, or selectively restrict column projection in specific shares using the\nINVOKER_SHARE context function. For example:",
        "In this example, provider.account is the account identifier in the account name format:",
        "Consider a data sharing provider account that has a projection policy set on a column of a secure view. There are two different shares\n(SHARE1 and SHARE2) that can access the secure view to support two different data sharing consumers.",
        "If a user in the data sharing consumer account attempts to project the column through either share they can project the column,\notherwise the column cannot be projected:",
        "You can use a SELECT query in your policy logic to help determine whether to allow or block projection. If you query a table (a\nmapping table) in this way, we recommend puting the mapping table in the same database as the protected table. This is particularly\nimportant if the body section calls IS_DATABASE_ROLE_IN_SESSION.",
        "Here is an extended example of creating and populating a simple mapping table of role names and projection permission, and then querying\nthat table to determine whether a column can be projected to the current user according to their role.",
        "A projection policy is applied to a table column using an ALTER TABLE \u2026 ALTER COLUMN command and a view column using an\nALTER VIEW command. Each column supports only one projection policy.",
        "Where:",
        "name specifies the name of the table or view.",
        "col1_name specifies the name of the column in the table or view.",
        "col2_name specifies the name of an additional column in the table or view.",
        "policy_name specifies the name of the projection policy set on the column.",
        "FORCE is an optional parameter that allows the command to assign the projection policy to a column that already has a projection\npolicy assigned to it. The new projection policy atomically replaces the existing one.",
        "For example, to set a projection policy proj_policy_acctnumber on the account_number column of a table:",
        "You can also use the WITH clause of the CREATE TABLE and CREATE VIEW commands to assign\na projection policy to a column when the table or view is created. For example, to assign the policy my_proj_policy to the\naccount_number column of a new table, execute:",
        "You can also use the WITH clause when adding a new column to an existing table. For example, to assign the policy my_proj_policy to the\nzipcode column, which is being added to the existing table customers, execute:",
        "The recommended method of replacing a projection policy is to use the FORCE parameter to detach the existing projection policy and\nassign the new one in a single command. This allows you to atomically replace the old policy, leaving no gap in protection.",
        "For example, to assign a new projection policy to a column that is already projection-constrained:",
        "You can also detach the projection policy from a column in one statement (\u2026 UNSET PROJECTION POLICY) and then set a new policy on the\ncolumn in a different statement (\u2026 SET PROJECTION POLICY <name>). If you choose this method, the column is not protected by a projection policy\nin between detaching one policy and assigning another. A query could potentially access sensitive data during this time.",
        "Use the UNSET PROJECTION POLICY clause of an ALTER TABLE or ALTER VIEW command to detach a projection policy from the column of a table or\nview. The name of the projection policy is not required because a column cannot have more than one projection policy attached.",
        "Where:",
        "name specifies the name of the table or view.",
        "col1_name specifies the name of the column in the table or view.",
        "col2_name specifies the name of an additional column in the table or view.",
        "For example, to remove the projection policy from the account_number column:",
        "It can be helpful to think of two general approaches to determine how to monitor projection policy usage.",
        "Discover projection policies",
        "Identify projection policy references",
        "You can use the PROJECTION_POLICIES view in the Account Usage schema of the shared\nSNOWFLAKE database. This view is a catalog for all projection policies in your Snowflake account. For example:",
        "The POLICY_REFERENCES Information Schema table function can identify projection policy references. There\nare two different syntax options:",
        "Return a row for each object (i.e. table or view) that has the specified projection policy set on a column:",
        "Return a row for each policy assigned to the table named my_table:",
        "Creating a projection policy and assigning the projection policy to a column follows the same general procedure as creating and assigning\nother policies, such as masking and row access policies:",
        "For a centralized management approach, create a custom role (e.g. proj_policy_admin) to manage the policy.",
        "Grant this role the privileges to create and assign a projection policy.",
        "Create the projection policy.",
        "Assign the projection policy to a column.",
        "Based on this general procedure, complete the following steps to assign a projection policy to a column:",
        "Create a custom role to manage the projection policy:",
        "Grant the proj_policy_admin custom role the privileges to create a projection policy in a schema and assign the projection policy\nto any table or view column in the Snowflake account.",
        "This step assumes the projection policy will be stored in a database and schema named privacy.projpolicies and this database and\nschema already exist:",
        "For details, see Privileges and commands (in this topic).",
        "Create a projection policy to prevent column projection:",
        "Assign the projection policy to a table column:",
        "The following subsections briefly summarize how projection policies interact with various Snowflake features and services.",
        "This section describes how a projection policy interacts with a masking policy and a\nrow access policy.",
        "A column can have a masking policy and a projection policy at the same time, and the table containing this column can be protected by a\nrow access policy. If all three policies are present, Snowflake processes the table and policies as follows:",
        "Apply row filters according to the row access policy.",
        "Determine if the query is attempting to project any columns that are restricted by the projection policy, and if so, reject the query.",
        "Apply column masks according to the masking policy.",
        "A column protected by a masking policy can also be projection constrained. For example, a masking policy set on a column containing\naccount numbers can have a condition that allows users with the finance_admin custom role to see the account numbers and another\ncondition to replace the account numbers with a hash for all other roles.",
        "A projection policy can further restrict the column such that users with the analyst custom role cannot project the column. Note that\nusers with the analyst custom role can still analyze the column by grouping hashes or joining on these hashes.",
        "Snowflake recommends that policy administrators work with internal compliance and regulatory officers to determine the columns that\nshould be projection constrained.",
        "A projection constrained column cannot be referenced by a masking policy or a row access policy when:",
        "Assigning a row access policy to a table.",
        "Enumerating one or more columns in a conditional masking policy.",
        "Performing a mapping table lookup.",
        "As mentioned in the Limitations (in this topic), a projection policy body cannot reference a\ncolumn protected by a masking policy or a table protected by a row access policy.",
        "Consider the following series of objects:",
        "base_table \u00bb v1 \u00bb v2",
        "Where:",
        "v1 is a view built from the table named base_table.",
        "v2 is a view built from v1.",
        "If there is a query on a column in a view that is projection-constrained and that column depends on a projection constrained column in\nbase_table, the view column will be projected only if both projection policies allow the column to be projected.",
        "Snowflake checks the column lineage chain all the way to the base table to ensure that any references to the column are not projection\nconstrained. If any column in the lineage chain is projection constrained and the column is not allowed to be projected, Snowflake blocks\nthe query.",
        "A projection policy on a view column constrains the view column and not the underlying base table column.",
        "Regarding references, a projection policy that constrains a table column carries over to a view that references the constrained table\ncolumn.",
        "Projection policies on columns in a table carry over to a stream on the same table. Note that a projection policy cannot be set on a stream.",
        "Similarly, a projection constrained column remains constrained when a task references the constrained column.",
        "The result of an UNPIVOT construct depends on whether a column was initially constrained by a\nprojection policy. Note:",
        "Constrained columns prior to and after executing UNPIVOT remain projection constrained.",
        "The name_column always appears in the query result.",
        "If any columns in the column_list are projection constrained, the value_column is also projection constrained.",
        "The following approach helps to safeguard data from users with the SELECT privilege on a cloned table or view that is stored in the cloned\ndatabase or schema:",
        "Cloning an individual projection policy object is not supported.",
        "Cloning a schema results in the cloning of all projection policies within the schema.",
        "A cloned table maps to the same projection policies as the source table.",
        "When a table is cloned in the context of its parent schema cloning, if the source table has a reference to a projection policy in the\nsame parent schema (i.e. a local reference), the cloned table will have a reference to the cloned projection policy.",
        "If the source table refers to a projection policy in a different schema (i.e. a foreign reference), then the cloned table retains the\nforeign reference.",
        "For more information, see CREATE <object> \u2026 CLONE.",
        "Projection policies and their assignments can be replicated using database replication and replication groups.",
        "For database replication, the replication operation fails if either of the\nfollowing conditions is true:",
        "The primary database is in an Enterprise (or higher) account and contains a policy but one or more of the accounts approved for\nreplication are on lower editions.",
        "A table or view contained in the primary database has a dangling reference to a\nprojection policy in another database.",
        "The dangling reference behavior for database replication can be avoided when replicating multiple databases in a\nreplication group.",
        "Note the following regarding projection constraints and UDFs:",
        "Snowflake evaluates the UDF and then applies the projection policy to the projection constrained column.",
        "If a column in a SELECT statement is transitively derived from a UDF, which is also derived from a projection constrained column,\nSnowflake blocks the query. In other words:",
        "pc_column \u00bb UDF \u00bb column (in SELECT statement)",
        "Where:",
        "pc_column refers to a projection constrained column.",
        "Because the column in the SELECT statement can be traced to a projection constrained column, Snowflake blocks the query.",
        "SQL user-defined table functions (UDTF) follow the same behavior as SQL UDFs, except that because rows are returned in the function\noutput, Snowflake evaluates each table column independently to determine whether to project the column in the function output.",
        "The following applies to Introduction to Java UDFs, Introduction to JavaScript UDFs,\nIntroduction to Python UDFs:",
        "A projection constrained column is constrained in the UDTF output.",
        "When a UDF, UDTF, or JavaScript UDF has a projection-constrained argument, Snowflake does not capture log and event details in the\ncorresponding event table. However, Snowflake allows the UDF/UDTF to execute and does not fail the statement calling the UDF/UDTF due to\nlogging reasons.",
        "The following subsections provide information to help manage projection policies.",
        "Snowflake supports the following privileges on the projection policy object.",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "Privilege",
        "Usage",
        "APPLY",
        "Enables the set and unset operations for a projection policy on a column.",
        "OWNERSHIP",
        "Transfers ownership of the projection policy, which grants full control over the projection policy. Required to alter most properties\nof a projection policy.",
        "For details, see Summary of DDL commands, operations, and privileges (in this topic).",
        "Snowflake supports the following DDL to create and manage projection policies.",
        "CREATE PROJECTION POLICY",
        "ALTER PROJECTION POLICY",
        "DESCRIBE PROJECTION POLICY",
        "DROP PROJECTION POLICY",
        "SHOW PROJECTION POLICIES",
        "The following table summarizes the relationship between projection policy privileges and DDL operations.",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "Operation",
        "Privilege required",
        "Create projection policy.",
        "A role with the CREATE PROJECTION POLICY privilege in the same schema.",
        "Alter projection policy.",
        "The role with the OWNERSHIP privilege on the projection policy.",
        "Describe projection policy",
        "One of the following:",
        "A role with the global APPLY PROJECTION POLICY privilege, or",
        "A role with the OWNERSHIP privilege on the projection policy, or",
        "A role with the APPLY privilege on the projection policy.",
        "Drop projection policy.",
        "A role with the OWNERSHIP privilege on the projection policy.",
        "Show projection policies.",
        "One of the following:",
        "A role with the USAGE privilege on the schema in which the projection policy exists, or",
        "A role with the APPLY PROJECTION POLICY on the account.",
        "Set or unset a projection policy on a column.",
        "One of the following:",
        "A role with the APPLY PROJECTION POLICY privilege on the account, or",
        "A role with the APPLY privilege on the projection policy and the OWNERSHIP privilege on the table or view.",
        "Snowflake supports different permissions to create and set a projection policy on an object.",
        "For a centralized projection policy management approach in which the projection_policy_admin custom role creates and sets projection\npolicies on all columns, the following permissions are necessary:",
        "In a hybrid management approach, a single role has the CREATE PROJECTION POLICY privilege to ensure projection policies are named\nconsistently and individual teams or roles have the APPLY privilege for a specific projection policy.",
        "For example, the custom role finance_role role can be granted the permission to set the projection policy cost_center on tables\nand views the role owns (i.e. the role has the OWNERSHIP privilege on the table or view):",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}