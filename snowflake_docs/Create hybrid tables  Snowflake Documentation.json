{
    "url": "https://docs.snowflake.com/en/user-guide/tables-hybrid-create",
    "title": "Create hybrid tables | Snowflake Documentation",
    "paragraphs": [
        "This topic provides an overview on creating hybrid tables in Snowflake.",
        "Note",
        "To create a hybrid table, you must have a running warehouse that is specified as the current warehouse for your session.\nErrors may occur if no running warehouse is specified when you create a hybrid table.\nFor more information, see Working with Warehouses.",
        "You can create a hybrid table by using one of the following SQL commands:",
        "CREATE HYBRID TABLE. This example creates a hybrid table, inserts\nsome rows into it, deletes a row, and queries the table:",
        "CREATE HYBRID TABLE \u2026 AS SELECT (CTAS) or CREATE HYBRID TABLE \u2026 LIKE. For example:",
        "Note",
        "Because the primary storage for hybrid tables is a row store, hybrid tables typically\nhave a larger storage footprint than standard tables.\nThe main reason for the difference is that columnar data for standard tables often\nachieves higher rates of compression. For details about storage costs, see\nEvaluate cost for hybrid tables.",
        "You can bulk load data into hybrid tables by copying from a data stage or\nother tables (that is, using CTAS, COPY, or\nINSERT INTO \u2026 SELECT), but bulk loading data into a hybrid table using a\nCTAS statement is strongly recommended.\nBulk loading with CTAS is optimized for performance and enables large loads\n(multiple millions of records) to run approximately 10 times faster than other options, in most cases.",
        "Bulk loading via INSERT or COPY is also supported, but data loading is slower\nfor large amounts of data. You might experience long wait times or even timeouts\nwhen loading large data sets. Queries against recently loaded data are also slower.\nBulk load optimization for DML statements such as COPY is planned for the near future.",
        "Attention",
        "CTAS commands do not support foreign key constraints. If you\nmust use foreign key constraints in your hybrid table, use another\nload option such as COPY or INSERT INTO \u2026 SELECT.",
        "If your source data exists in an external stage instead of a Snowflake table, use the\nfollowing syntax:",
        "Avoid using this syntax:",
        "The CTAS option is the more efficient loading method.",
        "When you are not using CTAS, you should be able to load up to\napproximately 1 million records per minute. However, note that this approximation\ndepends on the structure of the table (for example, the size of records,\nwhere larger records are slower to load). If your loading operations are taking\ntoo long and failing, test with a smaller data set or break your loads into\nsmaller chunks.",
        "When indexes are built on the columns in a hybrid table, especially indexes on a large number of columns, any command that\nloads the table (including CTAS, COPY, or INSERT INTO \u2026 SELECT) might return the following error:",
        "where IDX_HT100_COLS is the name of an index on the table being created.",
        "This error occurs because row-based storage imposes a limit on the size of the data (and metadata) that can be stored per record.\nTo reduce the record size, try creating the table without specifying larger columns (such as wide VARCHAR columns) as indexed columns.",
        "You can also try creating the table by using INCLUDE columns on secondary indexes instead of directly indexing the columns. For a simple example,\nsee Create a secondary index with an INCLUDE column.",
        "Note",
        "Other methods of loading data into Snowflake tables (for example, Snowpipe)\nare not currently supported.",
        "You can define keys, indexes, and constraints when you create a hybrid\ntable. For example:",
        "Optionally, you can create an index for an existing hybrid table using\nCREATE INDEX. Use this command to add an index\nto a hybrid table that is actively being used for a workload and\nis serving queries, or has foreign keys. CREATE INDEX will build an index\nconcurrently without locking the table during the operation.",
        "However, if your hybrid table application is in development or test mode, and\nsome downtime for the table is not an issue, it is more efficient to recreate the hybrid table and\ncreate the indexes within the CTAS command. The bulk-loading fast path that the CTAS command provides\nis more efficient than online index building with the CREATE INDEX command.",
        "A hybrid table requires a unique primary key. The data in the table is\nordered by this primary key. You can add additional secondary indexes to\nnon-primary key attributes to accelerate lookups along those attributes.\nTo reduce the number of records to be scanned, indexes can be leveraged for\n=, >, >=, <, <=, and IN predicates.",
        "Attention",
        "To add a secondary index, you must use a role that is granted the SELECT\nprivilege on the hybrid table. If you have access to a view of the\ndata in the hybrid table, but not the table itself, you will not be able\nto add a secondary index.",
        "If you have common, repeated queries with predicates on a specific attribute or\na composite group of attributes, consider adding an index to that\nattribute or group of attributes to improve performance. But be aware of the\nfollowing considerations when using indexes:",
        "Increase in storage consumption when storing additional copies of the subset of data in the index.",
        "Addition of overhead to DMLs because indexes are maintained synchronously.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}