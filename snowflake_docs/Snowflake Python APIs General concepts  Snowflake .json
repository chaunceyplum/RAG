{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-general-concepts",
    "title": "Snowflake Python APIs: General concepts | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "The programming model of the Snowflake Python APIs is resource-based, which means that the APIs consist of a set of objects that represent their\nrespective object counterparts in Snowflake. Some basic examples of Snowflake resource object types include the following:",
        "Databases",
        "Schemas",
        "Tables",
        "Views",
        "Alerts",
        "Pipes",
        "Stages",
        "Users",
        "Warehouses",
        "For each supported resource, the Python API provides three distinct classes that you can use to create and manage objects:",
        "Collection class",
        "Model class",
        "Resource class",
        "The Root object is the entry point for the Python API. To create an instance of Root that is configured with the Snowflake\ncontext in which it will run, you use a Python Connector Connection object or a Snowpark Session object.",
        "For example, the following code instantiates a Root object with a Connection object named my_connection:",
        "You can also instantiate a Root object with a Session object. In a notebook environment or stored procedure, you retrieve\nthe session by using get_active_session(), as follows:",
        "With a Root object, you can access the collections of account-scoped objects, such as warehouses (root.warehouses),\ndatabases (root.databases), and external volumes (root.external_volumes).",
        "You can access database-scoped objects under a DatabaseResource, which in turn you can retrieve through the\nDatabaseCollection object under Root. Currently, SchemaCollection is the only object type available under the\ndatabase scope.",
        "You can access schema-scoped objects, such as tables, views, streams, and stages, through the SchemaResource object.",
        "For example, the following code accesses a StageCollection first, and then a StageResource:",
        "The following diagram shows some basic classes in the snowflake.core package and how they relate to each other, starting with the\nRoot object:",
        "The Collection classes correspond to classes that are named <SnowflakeObjectType>Collection.",
        "A Collection class represents the set of a particular object type visible within the given context. For schema-scoped objects\n(like tables, views, functions, and streams), the collection consists of all objects of that type within the given schema that are visible\nto the current role or user.",
        "SchemaCollection objects are scoped to a database. Account-scoped objects like DatabaseCollection and WarehouseCollection are accessible\ndirectly from the Root instance.",
        "In general, collections enable you to do the following operations:",
        "Create an object in the schema, database, or account (depending the scope and context, as described previously).",
        "Iterate through the set of objects visible in that scope.",
        "For example, the following code creates a new warehouse using a WarehouseCollection object:",
        "Additionally, collections provide an entry point to retrieve specific Resource objects in the underlying Snowflake database to\nwhich the API is connected. You use the square bracket index operator ([ ]) on a collection to \u201cpoint\u201d to, or get a reference to, a\nSnowflake object within that collection.",
        "For example, the following code retrieves a reference to an existing warehouse named my_wh in your Snowflake account:",
        "The model classes simply have the same names as their equivalent resources in Snowflake, such as Warehouse for warehouses and\nTable for tables.",
        "A model class represents a Snowflake object along with its associated properties, such as its name, the database and schema to which it\nbelongs (if applicable), and attributes specific to that object type. For example, a Warehouse model indicates the warehouse_size,\ntype, and auto_resume properties for that particular warehouse object.",
        "Model objects contain a property bag (a collection of properties and their values) that describes the object. You can use\nthese properties to either describe an existing object in Snowflake, or to provide the specification of that resource to alter an existing\nobject with.",
        "To return the property bag of an object as it currently exists in your Snowflake database, you run a fetch() operation on the\nResource object.",
        "For example, the following code demonstrates some operations you can perform using a model object:",
        "Note",
        "This fetch operation fails if the my_wh object does not exist in Snowflake.",
        "The Resource classes correspond to classes that are named <SnowflakeObjectType>Resource.",
        "You can consider a Resource object as a pointer or reference to an underlying Snowflake object. Whereas the model class is a simple\nproperty bag representing the properties or specification of an object, the Resource class is a reference to the actual object in\nyour Snowflake database.",
        "To get a Resource object, you typically refer to it by name from its corresponding Collection and use the square bracket\nindex operator ([ ]). The following code example retrieves an existing warehouse named my_wh from the warehouse collection:",
        "To convert a Resource object to its corresponding model, perform a fetch() on the resource, which retrieves the properties\nof the corresponding object in Snowflake. Note that this fetch operation fails if the object does not actually exist in Snowflake.",
        "The Resource class also implements the object type\u2019s specialized API operations. For example, you use a WarehouseResource\nobject to resume a warehouse, or a StageResource object to list the files on a stage.",
        "The following code examples show how to perform these type-specific operations using their respective Resource objects:",
        "Resource objects also expose the create_or_alter API method if it\u2019s supported by the resource. This method enables you to,\nas the name suggests, create or alter Snowflake objects.",
        "Note",
        "The Python API uses this create-or-alter (COA) mechanism for modifying objects in Snowflake. The purpose of this mechanism is to ensure\nthat the result of a COA operation is the same regardless of whether that particular object already exists in your Snowflake database.",
        "In other words, if the object does not exist, the COA operation creates one with the provided specification; if it does\nalready exist, the operation alters the existing object to match the requested specification. This logic enables you to create or\nalter resources by using a single piece of code in an idempotent and atomic manner.",
        "The Snowflake Python APIs have a consistent design pattern that you use to manage resources in Snowflake. Consider an example scenario where you need\nto alter an existing warehouse object in your account. The following steps outline how you typically work with the API\u2019s design pattern by\nusing all three class types, as described previously.",
        "Warehouses are account-scoped objects that you can directly access from Root:",
        "To retrieve a Resource object, you typically start with its collection. Collection objects provide an entry point for you to\nretrieve specific resources in the underlying Snowflake database by using the square bracket index operator ([ ]):",
        "Using the WarehouseResource object, you fetch the corresponding Warehouse model and its properties from Snowflake:",
        "Modify a property, such as the warehouse_size, in your warehouse model:",
        "Finally, using your modified warehouse model specification, you alter the existing warehouse object in Snowflake (or create the warehouse\nobject if it doesn\u2019t exist):",
        "Using this my_wh_ref reference, you can also perform other operations on the object in Snowflake, such as dropping it, if necessary.",
        "The following code example shows the create-or-alter warehouse operation in full from start to end:",
        "Was this page helpful?",
        "On this page"
    ]
}