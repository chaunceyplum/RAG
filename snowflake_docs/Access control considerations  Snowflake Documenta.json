{
    "url": "https://docs.snowflake.com/en/user-guide/security-access-control-considerations",
    "title": "Access control considerations | Snowflake Documentation",
    "paragraphs": [
        "This topic provides best practices and important considerations for managing secure access to your Snowflake account and data stored within the account. In particular, it provides general guidance\nfor configuring role-based access control, which limits access to objects based on a user\u2019s role.",
        "The account administrator (i.e users with the ACCOUNTADMIN system role) role is the most\npowerful role in the system. This role alone is responsible for configuring parameters at\nthe account level. Users with the ACCOUNTADMIN role can view and manage Snowflake billing\nand credit data, and can stop any running SQL statements.",
        "Note that ACCOUNTADMIN is not a superuser role. This role only allows viewing and\nmanaging objects in the account if this role, or a role lower in a\nrole hierarchy, has sufficient\nprivileges on the objects.",
        "In the system role hierarchy, the other administrator roles are children of this role:",
        "The user administrator (USERADMIN) role includes the privileges to create and manage\nusers and roles (assuming ownership of those roles or users has not been transferred to\nanother role).",
        "The security administrator (SECURITYADMIN system-defined) role includes\nthe global MANAGE GRANTS privilege to grant or revoke privileges on objects in the account.\nThe USERADMIN role is a child of this role in the default access control hierarchy. For more information about the children system-defined roles, see System-defined roles.",
        "The system administrator (SYSADMIN) role includes the privileges to create warehouses,\ndatabases, and all database objects (schemas, tables, and so on).",
        "Attention",
        "By default, when your account is provisioned, the first user is assigned the ACCOUNTADMIN\nrole. This user should then create one or more additional users who are assigned the USERADMIN role.\nAll remaining users should be created by the user(s) with the USERADMIN role or another role that\nis granted the global CREATE USER privilege.",
        "We strongly recommend the following precautions when assigning the ACCOUNTADMIN role to users:",
        "Assign this role only to a select/limited number of people in your organization.",
        "All users assigned the ACCOUNTADMIN role should also be required to use multi-factor authentication (MFA) for login (for details, see Configuring access control).",
        "Assign this role to at least two users. We follow strict security procedures for resetting a forgotten or lost password for users with the ACCOUNTADMIN role. These procedures can take up to two business\ndays. Assigning the ACCOUNTADMIN role to more than one user avoids having to go through these procedures because the users can reset each other\u2019s passwords.",
        "Tip",
        "It also helps if you associate an actual person\u2019s email address to ACCOUNTADMIN users, so that Snowflake Support knows who to contact in an urgent situation.",
        "The ACCOUNTADMIN role is intended for performing initial setup tasks in the system and managing account-level objects and tasks on a day-to-day basis. As such, it should not be used to create objects in your account, unless you absolutely need these objects to have the highest level of secure access. If you create objects with the ACCOUNTADMIN role and you want users to have access to these objects, you must explicitly grant privileges on the objects to the roles for these users.",
        "Instead, we recommend creating a hierarchy of roles aligned with business functions in your organization and ultimately assigning these roles to the SYSADMIN role. For more information, see Aligning Object Access with Business Functions in this topic.",
        "Tip",
        "To help prevent account administrators from inadvertently using the ACCOUNTADMIN role to create objects, assign these users additional roles and designate one of these roles as their default (i.e. do not make ACCOUNTADMIN the default role for any users in the system).",
        "This doesn\u2019t prevent them from using the ACCOUNTADMIN role to create objects, but it forces them to explicitly change their role to ACCOUNTADMIN each time they log in. This can help make them aware of the purpose/function of roles in the system and encourage them to change to the appropriate role for performing a given task, particularly when they need to perform account administrator tasks.",
        "We recommend using a role other than ACCOUNTADMIN for automated scripts. If, as recommended, you create a role hierarchy under the SYSADMIN role, all warehouse and database object operations can be performed using the SYSADMIN role or lower roles in the hierarchy. The only limitations you would encounter is creating or modifying users or roles. These operations must be performed by a user with the SECURITYADMIN role or another role with sufficient object privileges.",
        "All securable database objects (such as TABLE, FUNCTION, FILE FORMAT, STAGE, SEQUENCE, etc.) are contained within a SCHEMA object within a DATABASE. As a result, to access database objects, in addition to the privileges on the specific database objects, users must be granted the USAGE privilege on the container database and schema.",
        "For example, suppose mytable is created in mydb.myschema. In order to query mytable, a user must have the following privileges at a minimum:",
        "USAGE on mydb",
        "USAGE on myschema",
        "SELECT on mytable",
        "When a custom role is first created, it exists in isolation. The role must be assigned to any users who will use the object privileges associated with the role. The custom role must also be granted to\nany roles that will manage the objects created by the custom role.",
        "Important",
        "By default, not even the ACCOUNTADMIN role can modify or drop objects created by a custom role. The custom role must be granted to the ACCOUNTADMIN role directly or, preferably, to another role in a\nhierarchy with the SYSADMIN role as the parent. The SYSADMIN role is managed by the ACCOUNTADMIN role.",
        "For instructions to create a role hierarchy, see Creating a role hierarchy.",
        "Consider taking advantage of role hierarchies to align access to database objects with business functions in your organization. In a role hierarchy, roles are granted to other\nroles to form an inheritance relationship. Permissions granted to roles at a lower level are inherited by roles at a higher level.",
        "For optimal flexibility in controlling access to database objects, create a combination of object access roles with different permissions on objects and assign them as appropriate to functional roles:",
        "Grant permissions on database objects or account objects (such as warehouses) to access roles.",
        "Grant access roles to functional roles to create a role hierarchy. These roles correspond to the business functions of your organization and serve as a catch-all for any access roles required for these functions.",
        "When appropriate, grant lower-level functional roles to higher-level functional roles in a parent-child relationship where the parent roles map to business functions that should subsume the permissions of the child roles.",
        "Following best practices for role hierarchies, grant the highest-level functional roles in a role hierarchy to the system administrator (SYSADMIN) role. System administrators can then grant privileges on database objects to any roles in this hierarchy:",
        "Note",
        "There is no technical difference between an object access role and a functional role in Snowflake. The difference is in how they are used logically to assemble and assign sets of permissions to groups of users.",
        "As a simple example, suppose two databases in an account, fin and hr, contain payroll and employee data, respectively. Accountants and analysts in your organization require different permissions on the objects in these databases to perform their business functions. Accountants should have read-write access to fin but might only require read-only access to hr because human resources personnel maintain the data in this database. Analysts could require read-only access to both databases.",
        "Permissions on existing database objects are granted via the following hierarchy of access roles and functional roles:",
        "Note",
        "When new objects are added in each database, consider automatically granting privileges on the objects to roles based on object type (e.g. schemas, tables, or views). For information, see Simplifying Grant Management Using Future Grants (in this topic).",
        "Custom Role",
        "Description",
        "Privileges",
        "db_hr_r",
        "Access role that permits read-only access to tables in the hr database.",
        "USAGE on database hr.",
        "USAGE on all schemas in database hr.",
        "SELECT on all tables in database hr.",
        "db_fin_r",
        "Access role that permits read-only access to tables in the fin database.",
        "USAGE on database fin.",
        "USAGE on all schemas in database fin.",
        "SELECT on all tables in database fin.",
        "db_fin_rw",
        "Access role that permits read-write access to tables in the fin database.",
        "USAGE on database fin.",
        "USAGE on all schemas in database fin.",
        "SELECT, INSERT, UPDATE, DELETE on all tables in database fin.",
        "accountant",
        "Functional role for accountants in your organization.",
        "N/A",
        "analyst",
        "Functional role for analysts in your organization.",
        "N/A",
        "The following diagram shows the role hierarchy for this example:",
        "To configure access control for this example:",
        "As a user administrator (user with the USERADMIN role) or another role with the CREATE ROLE privilege on the account, create the access roles and functional roles in this example:",
        "As a security administrator (user with the SECURITYADMIN role) or another role with the MANAGE GRANTS privilege on the account, grant the required minimum permissions to each of the access roles:",
        "As a security administrator (user with the SECURITYADMIN role) or another role with the MANAGE GRANTS privilege on the account, grant the db_fin_rw access role to the accountant functional role, and grant the db_hr_r db_fin_r access roles to the analyst functional role:",
        "As a security administrator (user with the SECURITYADMIN role) or another role with the MANAGE GRANTS privilege on the account, grant both the analyst and accountant roles to the system administrator (SYSADMIN) role:",
        "As a security administrator (user with the SECURITYADMIN role) or another role with the MANAGE GRANTS privilege on the account, grant the business functional roles to the users who perform those business functions in your organization. In this example, the analyst functional role is granted to user user1, and the accountant functional role is granted to user user2.",
        "Database roles are essentially the same as traditional roles created at the account\nlevel (i.e. custom account roles) except for their scope: To permit SQL actions on objects within a database, privileges can be granted\nto a database role in the same database.",
        "Database roles are intended to satisfy the following use cases:",
        "Database owners can independently manage access to securable objects within their own databases. Database owners can perform the\nfollowing actions:",
        "Create and manage database roles.",
        "Grant privileges to database roles.",
        "Privileges on objects granted to the database roles must be scoped to objects contained in the database where the role exists.\nPrivileges on objects in one database (e.g. tables or views) cannot be granted to database roles in another database.",
        "Any privilege, including OWNERSHIP, can be granted to database roles on objects in a database. Note that only an account role\ncan hold the OWNERSHIP privilege on the database itself.",
        "Create or extend role hierarchies. Grant database roles to other database\nroles within the same database, and then grant the highest-level database roles in a database to account roles. For more information,\nsee Role hierarchy and privilege inheritance.",
        "Note that granting a database role to an account role implicitly grants the USAGE privilege on the database that contains the database\nrole to that account role. Granting the USAGE privilege on the database explicitly is not required.",
        "Data providers in Snowflake\u2019s Secure Data Sharing can segment the securable objects in a share\nby creating multiple database roles in a database to share and granting privileges on a subset of the objects in the database to each\ndatabase role. After creating a database from a share that includes database roles, data consumers grant each shared database role to\none or more account-level roles in their own account.",
        "Without database roles, account administrators in data consumer accounts grant a single privilege, IMPORTED PRIVILEGES, to roles to\nallow their users to access all databases and database objects (tables, secure views, etc.) in a share. There is no option to\nallow different groups of users in a data consumer account to access a subset of the shared objects. This all or nothing approach\nrequires data providers to create multiple shares to grant access to different objects in the same databases.",
        "Note that database roles cannot be activated directly in a session. Grant database\nroles to account roles, which can be activated in a session.",
        "With regular (i.e. non-managed) schemas in a database, object owners (i.e. roles with the OWNERSHIP privilege on one or more objects) can grant access on those objects to other roles, with the option to further grant those roles the ability to manage object grants.",
        "To further lock down object security, consider using managed access schemas. In a managed access schema, object owners lose the ability to make grant decisions. Only the schema owner (i.e. the role with the OWNERSHIP privilege on the schema) or a role with the MANAGE GRANTS privilege can grant privileges on objects in the schema, including future grants, centralizing privilege management.",
        "Note that a role that holds the global MANAGE GRANTS privilege can grant additional privileges to the current (grantor) role.",
        "For more information on managed access schemas, see Creating managed access schemas.",
        "Future grants allow defining an initial set of privileges on objects of a certain type (e.g. tables or views) in a specified schema. As new objects are created, the defined privileges are automatically granted to a role, simplifying grant management.",
        "Consider the following scenario, in which a particular role is granted the SELECT privilege on all new tables created in schema. At a later date, the decision is made to revoke the privilege from this role and instead grant it to a different role. Using the ON FUTURE keywords for new tables and the ALL keyword for existing tables, few SQL statements are required to grant and revoke privileges on new and existing tables. For example:",
        "For more information on future grants, see Assigning future grants on objects.",
        "A user cannot view the result set from a query that another user executed. This behavior is intentional. For security reasons, only the user who executed a query can access the query results.",
        "Note",
        "This behavior is not connected to the Snowflake access control model for objects. Even a user with the ACCOUNTADMIN role cannot view the results for a query run by another user.",
        "Cloning a database, schema or table creates a copy of the source object. The cloned object includes a snapshot of data present in the source object when the clone was created.",
        "A cloned object is considered a new object in Snowflake. Any privileges granted on the source object do not transfer to the cloned object. However, a cloned container object (a database or schema)\nretains any privileges granted on the objects contained in the source object. For example, a cloned schema retains any privileges granted on the tables, views, UDFs, and other objects in the source\nschema.",
        "For more details about cloning, see Cloning considerations and CREATE <object> \u2026 CLONE.",
        "Was this page helpful?",
        "On this page"
    ]
}