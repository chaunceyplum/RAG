{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/scala/calling-functions",
    "title": "Calling functions and stored procedures in Snowpark Scala | Snowflake Documentation",
    "paragraphs": [
        "To process data in a DataFrame, you can call system-defined SQL functions, user-defined functions, and stored procedures. This\ntopic explains how to call these in Snowpark.",
        "If you need to call system-defined SQL functions, use the equivalent functions in the\ncom.snowflake.snowpark.functions object.",
        "The following example calls the upper function in the functions object (the equivalent of the system-defined\nUPPER function) to return the values in the name column with the letters in uppercase:",
        "If a system-defined SQL function is not available in the functions object, you can use one of the following approaches:",
        "Use the callBuiltin function to call the system-defined function.",
        "Use the builtin function to create a function object that you can use to call the system-defined function.",
        "callBuiltin and builtin are defined in the com.snowflake.snowpark.functions object.",
        "For callBuiltin, pass the name of the system-defined function as the first argument. If you need\nto pass the values of columns to the system-defined function, define and pass\nColumn objects as additional arguments to the callBuiltin function.",
        "The following example calls the system-defined function RADIANS, passing in the value from the\ncolumn col1:",
        "The callBuiltin function returns a Column, which you can pass to the\nDataFrame transformation methods (e.g. filter, select, etc.).",
        "For builtin, pass the name of the system-defined function, and use the returned function object to call the\nsystem-defined function. For example:",
        "The method for calling a UDF depends on how the UDF was created:",
        "To call an anonymous UDF, call the apply method of the\nUserDefinedFunction object that was returned when you created the UDF.",
        "The arguments that you pass to a UDF must be Column objects. If you need\nto pass in a literal, use lit(), as explained in Using Literals as Column Objects.",
        "To call UDFs that you registered by name and UDFs that you created by executing\nCREATE FUNCTION, use the callUDF function in the com.snowflake.snowpark.functions\nobject.",
        "Pass the name of the UDF as the first argument and any UDF parameters as additional arguments.",
        "Calling a UDF returns a Column object containing the return value of the UDF.",
        "The following example calls the UDF function myFunction, passing in the values from the columns col1 and col2. The\nexample passes the return value from myFunction to the select method of the DataFrame.",
        "To call a table function or a\nuser-defined table function (UDTF):",
        "Construct a TableFunction object, passing in the name of the table function.",
        "If you are creating a UDTF in Snowpark, you can just use the TableFunction object returned by the\nUDTFRegistration.registerTemporary or UDTFRegistration.registerPermanent method. See\nCreating User-Defined Table Functions (UDTFs).",
        "Call session.tableFunction, passing in the TableFunction object and a Map of input argument names and\nvalues.",
        "table?Function returns a DataFrame that contains the output of the table function.",
        "For example, suppose that you executed the following command to create a SQL UDTF:",
        "The following code calls this UDTF and creates a DataFrame for the output of the UDTF. The example prints the first 10 rows of\noutput to the console.",
        "If you need to join the output of a table function with a DataFrame, call the\nDataFrame.join method that passes in a TableFunction.",
        "Preview Feature \u2014 Open",
        "Preview support for this feature is available to all accounts.",
        "You can execute a procedure either on the server side (in the Snowflake environment) or locally. Keep in mind that as the two environments\nare different, the conditions and results of procedure execution may differ between them.",
        "You can call a procedure with the Snowpark API in either of the following ways:",
        "Execute a function locally for testing and debugging using the SProcRegistration.runLocally method.",
        "Execute a procedure in the server-side Snowflake environment using the Session.storedProcedure method. This includes a procedure\nscoped to the current session or a permanent procedure stored on Snowflake.",
        "You can also call a permanent stored procedure you create with the Snowpark API from a Snowflake worksheet. For more information, refer\nto Calling a stored procedure.",
        "For more on creating procedures with the Snowpark API, refer to Creating stored procedures for DataFrames in Scala.",
        "You can execute the lambda function for your procedure in your local environment using the SProcRegistration.runLocally method.\nThe method executes the function and returns its result as the type returned by the function.",
        "For example, you can locally call (on the client side) a lambda function that you intend to use in a procedure before registering a\nprocedure from it on Snowflake. You begin by assigning the lambda code as a value to a variable. You pass that variable to the\nSProcRegistration.runLocally method to run it on the client side. You can also use the variable to represent the function when\nregistering the procedure.",
        "Code in the following example assigns the function to the func variable. It then tests the function locally by passing the\nvariable to the SProcRegistration.runLocally method with the function\u2019s argument value. The variable is also used to register the\nprocedure.",
        "To execute a procedure in the Snowflake environment on the server, use the Session.storedProcedure method. The method returns a\nDataFrame object.",
        "For example, you can execute:",
        "A temporary or permanent procedure you create using the Snowpark API.",
        "A procedure created using a CREATE PROCEDURE statement.",
        "Code in the following example creates a temporary procedure designed to execute on the server, but only last for as long as the current\nSnowpark session. It then executes the procedure using both the procedure\u2019s name and the StoredProcedure variable representing it.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}