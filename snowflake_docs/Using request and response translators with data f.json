{
    "url": "https://docs.snowflake.com/en/sql-reference/external-functions-translators",
    "title": "Using request and response translators with data for a remote service | Snowflake Documentation",
    "paragraphs": [
        "With request and response translators, you can change the format of data sent to, and received from, remote services used by\nexternal functions.",
        "When Snowflake sends data to a remote service, Snowflake formats the data according to\nthese rules. Similarly, when Snowflake receives data from a remote service,\nSnowflake expects the data to be formatted according to the same rules.",
        "Many remote services expect to handle data in a different format. With request and response translators, you can conveniently:",
        "Convert data from Snowflake\u2019s format to the remote service\u2019s native input format (request translator).",
        "Convert data from the remote service\u2019s native output format to Snowflake\u2019s format (response translator).",
        "To translate data between Snowflake\u2019s format and the remote service\u2019s native input format, you use JavaScript UDFs\n(user-defined functions). You almost always write a pair of UDFs: one to translate the request and one to translate the response.",
        "Snowflake calls these functions as part of each external function call. For example, for a request to a remote service, Snowflake calls the request translator function,\npasses it the Snowflake-formatted data, then takes the returned data and sends it to the remote service. When the\nremote service returns data, Snowflake calls the response translator function to convert the data back to the format that Snowflake\nunderstands.",
        "From the user perspective, calling an external function when a translator is converting is the same as calling an\nexternal function without a translator. After you specify translators as part of the\nCREATE EXTERNAL FUNCTION statement, they are called automatically.",
        "An external function can have a maximum of one request translator and one response translator at a time.",
        "The request and response translator UDFs can be secure UDFs.",
        "To specify which user-defined function to use as a translator, include REQUEST_TRANSLATOR and RESPONSE_TRANSLATOR\nclauses in the CREATE EXTERNAL FUNCTION statement. Each takes the name of the\ntranslator function to use at run time.",
        "For example:",
        "The syntax for specifying translators as part of a CREATE EXTERNAL FUNCTION statement is shown below:",
        "where:",
        "The name of the request translator function.",
        "The name of the response translator function.",
        "The REQUEST_TRANSLATOR and RESPONSE_TRANSLATOR parameters each take one parameter of type OBJECT.",
        "You can also specify a request or response translator in an ALTER FUNCTION command. You can:",
        "Add a translator if the external function does not already have one.",
        "Replace an existing translator.",
        "Remove a translator.",
        "Use the SET keyword to add a new translator or to replace an existing translator.",
        "To add or replace a translator:",
        "where",
        "The name of a previously-created JavaScript UDF.",
        "To remove a translator:",
        "The name of the translator function in the CREATE EXTERNAL FUNCTION or ALTER FUNCTION statement should\nbe either:",
        "A qualified name (e.g. MyDatabase.MySchema.MyJavaScriptUDF).",
        "Defined in the same database and schema as the external function that uses them.",
        "When the translator is specified in a CREATE EXTERNAL FUNCTION or ALTER FUNCTION statement, the\ntranslator UDF must already exist. You can\u2019t specify the name first and create the UDF later \u2013 even if you\ndon\u2019t call the external function before you create the UDF.",
        "A UDF used as a translator should not be dropped without first removing it from all external\nfunctions that use it. (At the time the external function is called, Snowflake fails with an error if the translator does not exist.)",
        "If the translator UDF is modified (via ALTER FUNCTION), it must retain the same interface requirements.\nIf it does not retain the interface requirements, an exception is raised before running the external function.",
        "At run time, SQL passes an OBJECT to the translator UDF. The JavaScript code receives this as a\nJavaScript object.",
        "A translator UDF receives a JavaScript object named event. The object contains the following properties:",
        "body: The format of the data field is the same as the existing Snowflake rowset batch (i.e. an array of rows).",
        "For example,",
        "The existing data is nested under the outer body.",
        "serviceUrl: The external function\u2019s defined URL to call.",
        "contextHeaders: An object that contains all the context-related headers, where the names\nare the field names. For example, the object could contain the field name \u201cSF_CONTEXT_CURRENT_DATABASE\u201d, and the corresponding\nvalue would be a string containing the current database name.",
        "The request translator returns an object with fields used to communicate with the external service API gateway. That object has three\noptional fields:",
        "body: Defines the actual body to be passed to the service. If this is not defined, there is no body.\nThe body value should be a string or a JSON object in the format that the remote service expects. If the value is a\nstring, that string can contain internal structure (e.g. be JSON-compatible). If the value is a JSON object, that object is\nconverted to a string so that it can be included as part of the HTTP POST command string.",
        "urlSuffix: Sets the suffix of the service URL, which is added to the end of the serviceUrl value. This suffix\nis also allowed to contain query parameters. Parameter names and values must be URL encoded. For example, if you want to set a parameter named a\nto value my param you need to do URL encoding of the space character, so the parameter would be ?a=my%20param.",
        "translatorData: Passed from the request translator to the response translator. This field can pass context information, such as\nthe input body, the service URL or suffix, or context headers.",
        "All three fields are optional. However, as a practical matter, most request translators return at least the body data.",
        "The input parameter for the response translator function is an object. The example below uses EVENT, which contains two properties:",
        "body: The response to be decoded from the external service response.",
        "translatorData: If this field is returned by the request translator, then Snowflake passes it to the response translator.",
        "The response translator response is returned as an object under the body element; the format is the existing\nexternal function format (array of rows). For example:",
        "Each translator UDF must meet the following requirements:",
        "It must be a JavaScript UDF.",
        "It must take exactly one parameter of type OBJECT, which represents a batch of rows.",
        "It must return one value of type OBJECT, which also represents a batch of rows.",
        "It must be a scalar UDF (returning one row for each row (OBJECT) passed in).",
        "Note",
        "Although the translator is scalar, the OBJECT passed to the translator can (and\nusually does) have multiple rows embedded inside the JSON in the OBJECT.",
        "The number and order of the rows (inside the OBJECT) returned by the response translator UDF must be the same as the number and\norder of the rows passed to the request translator UDF (inside the OBJECT).",
        "The following example shows a request translator and response translator being used to\nconvert data into the format required by an external service that does\nsentiment analysis, Amazon Comprehend\nBatchDetectSentiment.\nThe request translator shapes the HTTP request to match the format that\nthe backend service expects.",
        "To use translators, you\u2019ll need an API gateway. This example uses\nan API gateway that is already configured to talk to the sentiment\nanalysis service. For more information about how to integrate with an Amazon Web Services (AWS) service as the backend, see Set up an API integration request using\nthe API Gateway\nconsole\nin the AWS documentation.",
        "It is helpful to get your API integration working successfully before\nadding translators.",
        "Set up a database to hold demo data.",
        "Choose a role that has permission to create external functions:",
        "Specify which warehouse, database and schema to use:",
        "Create a table to hold your test sentences:",
        "This external function doesn\u2019t have a request translator or response translator:",
        "You can call the external function with your test data from the demo table:",
        "The generated request body uses the Snowflake external function\ndata format:",
        "However, the external sentiment analysis service expects a different\nformat that specifies the language and an array of strings:",
        "The next section describes how you can add a request translator to change the request body to the required format.",
        "By using a request translator, you can convert the default input described above\n(in the Snowflake data format) to the format that the external service requires.",
        "The following SQL creates an awscomprehendrequest_translator translator function.",
        "In the request translator function, the code:",
        "Loops through each of the input rows. For each row, it adds the string,\nwhich is in row[1], to the textlist array. The\nvalue at row[0] is the row number and it can be ignored.",
        "Returns a JSON body that has the language code and text\nlist that matches the requirements of the external service.",
        "Returns data via the translatorData field. This is\nused by the response translator. In this example, you are sending the\noriginal input data. You will use the length of the input data in the\nresponse translator to know how many input requests there were.",
        "You can test the request translator by calling it directly.",
        "The request translator puts the body into the shape expected by the external\nservice.",
        "A response body from the external service looks something like this.",
        "The response translator processes the results that you get back from the\nexternal service. The results contain a combination of errors in the\nErrorList and results in the ResultList.",
        "The response translator code combines these results together to make a complete\nset that matches the order of the rows that were passed to the external service. The\nresponse translator returns the results in the Snowflake format.",
        "The following SQL creates an awscomprehendresponse_translator translator function.",
        "In the response translator function, the code:",
        "Initializes an array called responses with the size of the input from the\ntranslatorData array length. You sent translatorData from the request\ntranslator to the response translator to pass the original list of test strings.",
        "Loops through each of the non-error results and puts them into the result list.",
        "Loops through the error results and puts them into the result list. The result\nlist has an index position which tells you what entry it is. The order of the\nproduced results must match the input order. The result list also contains\nthe sentiment information.",
        "After all of the responses have been gathered, they are returned in a\nJSON body in the format that Snowflake expects.",
        "The following direct test will return a JSON body with the correct format.",
        "To the external function, add the request and response translator functions by\nassigning the function names as values to the request_translator and response_translator\nparameters. This way, they\u2019ll be called automatically when the external function runs.",
        "You can describe the function to get information about it.",
        "Test the external function by calling it with a single sentence.",
        "You see the sentiment analysis results.",
        "Test the external function by calling it with multiple sentences. Use the same demo table that you created earlier.",
        "The sentiment analysis results are displayed.",
        "When the external function was called, the request translator automatically\nconverted data into the format required by the external service. Then,\nthe response translator automatically converted the response from the external\nservice back into the format required by Snowflake.",
        "Test case values are typically OBJECT values (collections of key-value pairs). These should be formatted to meet the\nrequirements in these rules.",
        "You can start testing your request translator or response translator by passing in an example input converted to a string. For example:",
        "(The input to PARSE_JSON() must be a JSON-formatted string.)",
        "Test with NULL values if appropriate.",
        "Include at least one SQL NULL value in your test cases.",
        "Include at least one JSON NULL value in your test cases.",
        "Translating a request and translating a response are often converse processes. Conceptually:",
        "You can use this characteristic to help test your request translator and response translator if the data formats match. Create a table with\ngood test values, then execute a command similar to:",
        "The query should not return any rows.",
        "Note that translating a request and translating a response are not always exactly converse. For an example of where they might not be\nconverse, see the discussion of converse functions in the \u201cUsage Notes\u201d section of the documentation for the\nTO_JSON() function.",
        "Was this page helpful?",
        "On this page"
    ]
}