{
    "url": "https://docs.snowflake.com/en/sql-reference/external-functions-creating-azure-ui-security-policy",
    "title": "Step 6: Create the Azure security policy for the proxy service in the Portal | Snowflake Documentation",
    "paragraphs": [
        "The previous steps allow your imported APIs (and Azure Function) to be called by Snowflake, as well as other authenticated clients, such\nas applications that are in your Azure AD tenant or have a service principal in your Azure AD tenant.",
        "If you want to allow only Snowflake to call the Azure Function, you must implement token validation. With token validation, when Snowflake\ntries to access the API Management service, Snowflake presents a JWT (JSON Web Token) access token obtained from Azure AD. The API Management service can\neither validate the JWT or pass it through without validation.",
        "This topic provides instructions for creating a security policy for the API Management service by adding a validate-JWT policy that\ndefines the rules for validating the token.",
        "Important",
        "Snowflake strongly recommends creating a security policy for the API Management service. After completing this step, only Snowflake\nis allowed to call your Azure Function through the API Management service.",
        "If you prefer to use role-based validation in your validate-JWT policy, see the Microsoft Serivce Principal documentation for assigning\na role to a service principal:\nNew-AzureADServiceAppRoleAssignment.",
        "Step 5: Create the external function for Azure in Snowflake",
        "This section shows how to specify a policy for validating a JSON Web Token (JWT) that authorizes Snowflake to call your Azure Function.\nThe validation policy (\u201cvalidate-JWT policy\u201d) validates the following two claims in the JWT:",
        "The Snowflake service principal application ID.",
        "The target application App ID (the \u201caudience ID\u201d or just \u201caud\u201d) of the Azure Function.",
        "For more information about claims in JSON Web Tokens (JWTs) issued by Azure Active Directory, see the Microsoft documentation:\naccess tokens.",
        "The following steps configure the imported API to use a JSON Web Token:",
        "If you haven\u2019t already, log into the Azure Portal.",
        "Go to the API Management service screen.",
        "Select your API Management service.",
        "Find the APIs section in the left-hand column, then click on the APIs option under that.",
        "In the column that contains All APIs, click on the name of the API for which you want to add a security\npolicy.",
        "Look for In-bound Processing:",
        "Click on + Add policy.",
        "Click on validate-jwt.",
        "Fill in the Header name with the value Authorization.",
        "Add validation for the JWT (JSON Web Token) provided by Snowflake for accessing the Azure Function:",
        "Look for Required claims and click on + Add claim.",
        "Fill in the Name field with aud (short for \u201caudience\u201d).",
        "Within the required claim, Look for Values and click on +Add value.",
        "Add the UUID that you copied to the azure_ad_application_id field in the CREATE API INTEGRATION command. This is recorded in\nthe Azure Function App AD Application ID field of your tracking worksheet.",
        "Add a separate \u201cclaim\u201d for Snowflake:",
        "Click on + Add claim again:",
        "Fill in the Name field with the literal string appid.",
        "Within the claim, click on + Add value and add the Snowflake Application ID in the Values field.",
        "If you do not already have the Snowflake Application ID, you can get it by performing the following steps\n(the Snowflake Application ID is in the Application ID field):",
        "In the worksheet, find the AZURE_MULTI_TENANT_APP_NAME that you filled in earlier.",
        "In the Azure Portal search box, look for Enterprise Applications.",
        "This takes you to the Enterprise applications | All applications screen.",
        "In that screen, search for the AZURE_MULTI_TENANT_APP_NAME.",
        "The enterprise applications search box does not have a label. Look for a wide field immediately\nabove the list of enterprise applications. The box might say something similar to\nFirst 50 shown, to search all of your applications, enter a display name or the application ID.",
        "If you do not find an exact match for the AZURE_MULTI_TENANT_APP_NAME, then search again using only\nthe first several characters of this name (if the name contains an underscore, then do not include the\nunderscore or any characters after the underscore).",
        "Find the Application ID value for the AZURE_MULTI_TENANT_APP_NAME.",
        "Paste the following into Open ID URLs:",
        "https://login.microsoftonline.com/<tenant_id>/.well-known/openid-configuration",
        "Replace the <tenant_id> with your Azure AD Tenant ID (as described in the\nPrerequisites section for planning an external function).",
        "Click on Save.",
        "To make sure that your external function works correctly with the new security policy, call your external function again.",
        "For details, see Calling an external function for Azure.",
        "In addition to specifying a validate-JWT policy (or using role-based validation), you can implement additional security by restricting IP\naddresses. This ensures that only the API Management service\u2019s IP address is allowed to access the Azure Functions app containing your Azure\nFunction.",
        "For more information about restricting IP addresses, see the Microsoft documentation:\nIn-bound IP address restrictions.",
        "None. You\u2019ve successfully created an external function for Azure.",
        "Was this page helpful?",
        "On this page"
    ]
}