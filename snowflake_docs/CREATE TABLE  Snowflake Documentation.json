{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/create-table",
    "title": "CREATE TABLE | Snowflake Documentation",
    "paragraphs": [
        "Creates a new table in the current/specified schema, replaces an existing table, or alters an existing table. A table can have multiple\ncolumns, with each column definition consisting of a name, data type, and optionally whether the column:",
        "Requires a value (NOT NULL).",
        "Has a default value.",
        "Has any referential integrity constraints (primary key, foreign key, etc.).",
        "In addition, this command supports the following variants:",
        "CREATE OR ALTER TABLE (creates a table if it doesn\u2019t exist, or alters it according to the table definition)",
        "CREATE TABLE \u2026 AS SELECT (creates a populated table; also referred to as CTAS)",
        "CREATE TABLE \u2026 USING TEMPLATE (creates a table with the column definitions derived from a set of staged files)",
        "CREATE TABLE \u2026 LIKE (creates an empty copy of an existing table)",
        "CREATE TABLE \u2026 CLONE (creates a clone of an existing table)",
        "ALTER TABLE , DROP TABLE , SHOW TABLES , DESCRIBE TABLE",
        "Where:",
        "For additional inline constraint details, see CREATE | ALTER TABLE \u2026 CONSTRAINT.",
        "For additional out-of-line constraint details, see CREATE | ALTER TABLE \u2026 CONSTRAINT.",
        "Note",
        "Do not specify copy options using the CREATE STAGE, ALTER STAGE, CREATE TABLE, or ALTER TABLE commands. We recommend that you use the COPY INTO <table> command to specify copy options.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Creates a table if it doesn\u2019t exist, or alters it according to the table definition. The CREATE OR ALTER TABLE syntax follows the\nrules of a CREATE TABLE statement and has the same limitations as an ALTER TABLE statement. If the table is transformed, existing\ndata in the table is preserved when possible. If a column must be dropped, data loss might occur.",
        "The following changes are supported when altering a table:",
        "Change table properties and parameters. For example, ENABLE_SCHEMA_EVOLUTION, DATA_RETENTION_TIME_IN_DAYS, or CLUSTER BY.",
        "Change column data type, default value, nullability, comment, or autoincrement.",
        "Add new columns to the end of the column list.",
        "Drop columns.",
        "Add, drop, or modify inline or out-of-line constraints.",
        "Add, drop, or modify clustering keys.",
        "For more information, see CREATE OR ALTER TABLE usage notes.",
        "Creates a new table populated with the data returned by a query:",
        "A masking policy can be applied to a column in a CTAS statement. Specify the masking policy after the column data type. Similarly, a\nrow access policy can be applied to the table. For example:",
        "Note",
        "In a CTAS, the COPY GRANTS clause is valid only when combined with the OR REPLACE clause. COPY GRANTS copies\npermissions from the table being replaced with CREATE OR REPLACE (if it already exists), not from the source\ntable(s) being queried in the SELECT statement. CTAS with COPY GRANTS allows you to overwrite a table with a new\nset of data while keeping existing grants on that table.",
        "For more details about COPY GRANTS, see COPY GRANTS in this document.",
        "Creates a new table with the column definitions derived from a set of staged files using the INFER_SCHEMA function.\nThis feature supports Apache Parquet, Apache Avro, ORC, JSON, and CSV files.",
        "Note",
        "If the statement is replacing an existing table of the same name, then the grants are copied from the table\nbeing replaced. If there is no existing table of that name, then the grants are copied from the source table\nbeing cloned.",
        "For more details about COPY GRANTS, see COPY GRANTS in this document.",
        "Creates a new table with the same column definitions as an existing table, but without copying data from the existing table. Column\nnames, types, defaults, and constraints are copied to the new table:",
        "For more details about COPY GRANTS, see COPY GRANTS in this document.",
        "Note",
        "CREATE TABLE \u2026 LIKE for a table with an auto-increment sequence accessed through a data share is currently not\nsupported.",
        "Creates a new table with the same column definitions and containing all the existing data from the source table, without actually\ncopying the data. This variant can also be used to clone a table at a specific time/point in the past (using\nTime Travel):",
        "Note",
        "If the statement is replacing an existing table of the same name, then the grants are copied from the table\nbeing replaced. If there is no existing table of that name, then the grants are copied from the source table\nbeing cloned.",
        "For more details about COPY GRANTS, see COPY GRANTS in this document.",
        "For more details about cloning, see CREATE <object> \u2026 CLONE.",
        "Specifies the identifier (i.e. name) for the table; must be unique for the schema in which the table is created.",
        "In addition, the identifier must start with an alphabetic character and cannot contain spaces or special characters unless the\nentire identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also\ncase-sensitive.",
        "For more details, see Identifier requirements.",
        "Specifies the column identifier (i.e. name). All the requirements for table identifiers also apply to column identifiers.",
        "For more details, see Identifier requirements and Reserved & limited keywords.",
        "Note",
        "In addition to the standard reserved keywords, the following keywords cannot be used as column identifiers because they are\nreserved for ANSI-standard context functions:",
        "CURRENT_DATE",
        "CURRENT_ROLE",
        "CURRENT_TIME",
        "CURRENT_TIMESTAMP",
        "CURRENT_USER",
        "For the list of reserved keywords, see Reserved & limited keywords.",
        "Specifies the data type for the column.",
        "For details about the data types that can be specified for table columns, see SQL data types reference.",
        "Required for CTAS and USING TEMPLATE.",
        "For CTAS, specifies the SELECT statement that populates the table.",
        "For CREATE TABLE \u2026 USING TEMPLATE, specifies the subquery that calls the INFER_SCHEMA function and\nformats the output as an array. Alternatively, USING TEMPLATE accepts the INFER_SCHEMA output as a string\nliteral or variable.",
        "Required for LIKE and CLONE.",
        "For CREATE TABLE \u2026 LIKE, specifies the table from which properties and column definitions are copied.",
        "For CREATE TABLE \u2026 CLONE, specifies the table to use as the source for the clone.",
        "Specifies that the table persists only for the duration of the session that you created it in. A\ntemporary table and all its contents are dropped at the end of the session.",
        "The synonyms and abbreviations for TEMPORARY (e.g. GLOBAL TEMPORARY) are provided for compatibility with other databases\n(e.g. to prevent errors when migrating CREATE TABLE statements). Tables created with any of these keywords appear and behave identically\nto a table created with the TEMPORARY keyword.",
        "Default: No value. If a table is not declared as TEMPORARY or TRANSIENT, the table is permanent.",
        "If you want to avoid unexpected conflicts, avoid naming temporary tables after tables that already exist in the schema.",
        "If you created a temporary table with the same name as another table in the schema, all queries and operations used on the table only\naffect the temporary table in the session, until you drop the temporary table. If you drop the table, you drop the temporary table, and\nnot the table that already exists in the schema.",
        "For information about temporary or transient tables, and how they can affect storage and cost, refer to the following resources:",
        "Working with Temporary and Transient Tables",
        "Storage Costs for Time Travel and Fail-safe",
        "Specifies that the table is read-only. READ ONLY is valid only for a temporary table that is being created with the\nCREATE TABLE \u2026 CLONE variant of the CREATE TABLE command.",
        "A read-only table does not allow DML operations and only allows the following subset of DDL operations:",
        "ALTER TABLE \u2026 { ALTER | MODIFY } COLUMN \u2026 { SET | UNSET } COMMENT",
        "ALTER TABLE \u2026 { ALTER | MODIFY } COLUMN \u2026 { SET | UNSET } MASKING POLICY",
        "ALTER TABLE \u2026 { ALTER | MODIFY } COLUMN \u2026 { SET | UNSET } TAG",
        "ALTER TABLE \u2026 RENAME COLUMN \u2026 TO",
        "ALTER TABLE \u2026 RENAME TO",
        "ALTER TABLE \u2026 { SET | UNSET } COMMENT",
        "ALTER TABLE \u2026 { SET | UNSET } TAG",
        "COMMENT",
        "DESCRIBE",
        "DROP",
        "SHOW",
        "UNDROP",
        "Read-only tables have a METADATA$ROW_POSITION column. This metadata column assigns a row number to each row in\nthe table that is continuous and starts from 0. The row number assigned to each row remains unchanged until the\nread-only table is dropped.",
        "Specifies that the table is transient.",
        "Like a permanent table, a transient table exists until explicitly dropped and is visible to any\nuser with the appropriate privileges. However, transient tables have a lower level of data protection than permanent tables, meaning\nthat data in a transient table might be lost in the event of a system failure. As such, transient tables should only be used for data\nthat can be recreated externally to Snowflake.",
        "Default: No value. If a table is not declared as TRANSIENT or TEMPORARY, the table is permanent.",
        "Note",
        "Transient tables have some storage considerations.",
        "For more information about these and other considerations when deciding whether to create temporary or transient tables, see\nWorking with Temporary and Transient Tables and Storage Costs for Time Travel and Fail-safe.",
        "Defines an inline or out-of-line constraint for the specified column(s) in the table.",
        "For syntax details, see CREATE | ALTER TABLE \u2026 CONSTRAINT. For more information about constraints, see Constraints.",
        "Specifies the collation to use for column operations such as string comparison. This option applies only to text columns\n(VARCHAR, STRING, TEXT, etc.). For more details, see Collation specifications.",
        "Specifies whether a default value is automatically inserted in the column if a value is not explicitly specified via an INSERT\nor CREATE TABLE AS SELECT statement:",
        "Column default value is defined by the specified expression which can be any of the following:",
        "Constant value.",
        "Sequence reference (seq_name.NEXTVAL).",
        "Simple expression that returns a scalar value.",
        "The simple expression can include a SQL UDF (user-defined function) if the UDF is not a\nsecure UDF.",
        "Note",
        "If a default expression refers to a SQL UDF, then the function is replaced by its\ndefinition at table creation time. If the user-defined function is redefined in the future, this does not\nupdate the column\u2019s default expression.",
        "The simple expression cannot contain references to:",
        "Subqueries.",
        "Aggregates.",
        "Window functions.",
        "Secure UDFs.",
        "UDFs written in languages other than SQL (e.g. Java, JavaScript).",
        "External functions.",
        "When you specify AUTOINCREMENT or IDENTITY, the default value for the column starts with a specified number and each\nsuccessive value automatically increments by the specified amount.",
        "AUTOINCREMENT and IDENTITY are synonymous and can be used only for columns with numeric data types, such as NUMBER, INT,\nFLOAT.",
        "Caution",
        "Snowflake uses a sequence to generate the values for an auto-incremented column. Sequences have limitations;\nsee Sequence Semantics.",
        "The default value for both the start value and the step/increment value is 1.",
        "Note",
        "Manually inserting values into an AUTOINCREMENT or IDENTITY column can result in duplicate values. If you manually insert the\nvalue 5 into an AUTOINCREMENT or IDENTITY column, a subsequently inserted row might use the same value 5 as the\ndefault value for the column.",
        "Use ORDER or NOORDER to specify whether or not the values are generated for the auto-incremented column in\nincreasing or decreasing order.",
        "ORDER specifies that the values generated for a sequence or auto-incremented column are in increasing order (or, if the interval\nis a negative value, in decreasing order).",
        "For example, if a sequence or auto-incremented column has START 1 INCREMENT 2, the generated values might be\n1, 3, 5, 7, 9, etc.",
        "NOORDER specifies that the values are not guaranteed to be in increasing order.",
        "For example, if a sequence has START 1 INCREMENT 2, the generated values might be 1, 3, 101, 5, 103, etc.",
        "NOORDER can improve performance when multiple INSERT operations are performed concurrently (for example, when multiple\nclients are executing multiple INSERT statements).",
        "If you do not specify ORDER or NOORDER, the NOORDER_SEQUENCE_AS_DEFAULT parameter determines which property is\nset.",
        "Note",
        "DEFAULT and AUTOINCREMENT are mutually exclusive; only one can be specified for a column.",
        "Specifies the masking policy to set on a column.",
        "This parameter is not supported by the CREATE OR ALTER variant syntax.",
        "Specifies the projection policy to set on a column.",
        "This parameter is not supported by the CREATE OR ALTER variant syntax.",
        "Specifies a comment for the column.",
        "(Note that comments can be specified at the column level or the table level. The syntax for each is slightly different.)",
        "Specifies the arguments to pass into the conditional masking policy SQL expression.",
        "The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the\ncolumn to which the masking policy is set.",
        "The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result\nwhen a query is made on the first column.",
        "If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal\nmasking policy.",
        "Specifies one or more columns or column expressions in the table as the clustering key. For more details, see\nClustering Keys & Clustered Tables.",
        "Default: No value (no clustering key is defined for the table)",
        "Important",
        "Clustering keys are not intended or recommended for all tables; they typically benefit very large (i.e. multi-terabyte)\ntables.",
        "Before you specify a clustering key for a table, you should understand micro-partitions. For more information, see Understanding Snowflake Table Structures.",
        "Enables or disables automatic changes to the table schema from data loaded into the table from source files, including:",
        "Added columns.",
        "By default, schema evolution is limited to a maximum of 10 added columns per load operation. To request more than 10 added columns per load operation, contact Snowflake Support.",
        "The NOT NULL constraint can be dropped from any number of columns missing in new data files.",
        "Setting it to TRUE enables automatic table schema evolution. The default FALSE disables automatic table schema evolution.",
        "Note",
        "Loading data from files evolves the table columns when all of the following are true:",
        "The COPY INTO <table> statement includes the MATCH_BY_COLUMN_NAME option.",
        "The role used to load the data has the EVOLVE SCHEMA or OWNERSHIP privilege on the table.",
        "Additionally, for schema evolution with CSV, when used with MATCH_BY_COLUMN_NAME and PARSE_HEADER, ERROR_ON_COLUMN_COUNT_MISMATCH must be set to false.",
        "Specifies the retention period for the table so that Time Travel actions (SELECT, CLONE, UNDROP) can be performed on historical\ndata in the table. For more details, see Understanding & using Time Travel and Working with Temporary and Transient Tables.",
        "For a detailed description of this object-level parameter, as well as more information about object parameters, see\nParameters.",
        "Values:",
        "Standard Edition: 0 or 1",
        "Enterprise Edition:",
        "0 to 90 for permanent tables",
        "0 or 1 for temporary and transient tables",
        "Default:",
        "Standard Edition: 1",
        "Enterprise Edition (or higher): 1 (unless a different default value was specified at the schema, database, or account level)",
        "Note",
        "A value of 0 effectively disables Time Travel for the table.",
        "Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period for the table to\nprevent streams on the table from becoming stale.",
        "For a detailed description of this parameter, see MAX_DATA_EXTENSION_TIME_IN_DAYS.",
        "Specifies whether to enable change tracking on the table.",
        "TRUE enables change tracking on the table. This setting adds a pair of hidden columns to the source table and begins\nstoring change-tracking metadata in the columns. These columns consume a small amount of storage.",
        "The change-tracking metadata can be queried using the CHANGES clause for\nSELECT statements, or by creating and querying one or more streams on the table.",
        "FALSE does not enable change tracking on the table.",
        "Default: FALSE",
        "Specifies a default collation specification for the columns in the table, including columns\nadded to the table in the future.",
        "For more details about the parameter, see DEFAULT_DDL_COLLATION.",
        "Specifies to retain the access privileges from the original table when a new table is created using any of the following\nCREATE TABLE variants:",
        "CREATE OR REPLACE TABLE",
        "CREATE TABLE \u2026 LIKE",
        "CREATE TABLE \u2026 CLONE",
        "The parameter copies all privileges, except OWNERSHIP, from the existing table to the new table. The new table does not\ninherit any future grants defined for the object type in the schema. By default, the role that executes the CREATE TABLE statement\nowns the new table.",
        "If the parameter is not included in the CREATE TABLE statement, then the new table does not inherit any explicit access\nprivileges granted on the original table, but does inherit any future grants defined for the object type in the schema.",
        "Note:",
        "With data sharing:",
        "If the existing table was shared to another account, the replacement table is also shared.",
        "If the existing table was shared with your account as a data consumer, and access was further granted to other roles in\nthe account (using GRANT IMPORTED PRIVILEGES on the parent database), access is also granted to the replacement\ntable.",
        "The SHOW GRANTS output for the replacement table lists the grantee for the copied privileges as the\nrole that executed the CREATE TABLE statement, with the current timestamp when the statement was executed.",
        "The operation to copy grants occurs atomically in the CREATE TABLE command (i.e. within the same transaction).",
        "This parameter is not supported by the CREATE OR ALTER variant syntax.",
        "Specifies a comment for the table.",
        "Default: No value",
        "(Note that comments can be specified at the column level, constraint level, or table level. The syntax for each is slightly different.)",
        "Specifies the row access policy to set on a table.",
        "This parameter is not supported by the CREATE OR ALTER variant syntax.",
        "Specifies the aggregation policy to set on a table.",
        "Use the optional ENTITY KEY parameter to define which columns uniquely identity an entity within the table. For more information, see\nImplementing entity-level privacy with aggregation policies.",
        "This parameter is not supported by the CREATE OR ALTER variant syntax.",
        "Specifies the tag name and the tag string value.",
        "The tag value is always a string, and the maximum number of characters for the tag value is 256.",
        "For information about specifying tags in a statement, see Tag quotas for objects and columns.",
        "This parameter is not supported by the CREATE OR ALTER variant syntax.",
        "A role used to execute this SQL command must have the following\nprivileges at a minimum:",
        "Privilege",
        "Object",
        "Notes",
        "CREATE TABLE",
        "Schema",
        "Note that creating a temporary table does not require the CREATE TABLE privilege.",
        "SELECT",
        "Table, external table, view",
        "Required on queried tables and/or views only when cloning a table or executing CTAS statements.",
        "APPLY",
        "Masking policy, row access policy, tag",
        "Required only when applying a masking policy, row access policy, object tags, or any combination of these\ngovernance features when creating tables.",
        "USAGE (external stage) or READ (internal stage)",
        "Stage",
        "Required to derive table column definitions from staged files using CREATE TABLE \u2026 USING TEMPLATE statements.",
        "OWNERSHIP",
        "Table",
        "A role must be granted or inherit the OWNERSHIP privilege on the object to create a temporary object that has the same name as the object\nthat already exists in the schema.",
        "Required to execute a CREATE OR ALTER TABLE statement for an existing table.",
        "OWNERSHIP is a special privilege on an object that is automatically granted to the role that created the object, but can also be transferred using the GRANT OWNERSHIP command to a different role by the owning role (or any role with the MANAGE GRANTS privilege).",
        "Note that in a managed access schema, only the schema owner (i.e. the role with the OWNERSHIP privilege on the schema) or a role with the MANAGE GRANTS privilege can grant or revoke privileges on objects in the schema, including future grants.",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "For instructions on creating a custom role with a specified set of privileges, see Creating custom roles.",
        "For general information about roles and privilege grants for performing SQL actions on\nsecurable objects, see Overview of Access Control.",
        "A schema cannot contain tables and/or views with the same name. When creating a table:",
        "If a view with the same name already exists in the schema, an error is returned and the table is not created.",
        "If a table with the same name already exists in the schema, an error is returned and the table is not created, unless the\noptional OR REPLACE keyword is included in the command.",
        "Important",
        "Using OR REPLACE is the equivalent of using DROP TABLE on the existing table and then creating a new table\nwith the same name; however, the dropped table is not permanently removed from the system. Instead, it is retained in\nTime Travel. This is important to note because dropped tables in Time Travel can be recovered, but they also contribute to data\nstorage for your account. For more information, see Storage Costs for Time Travel and Fail-safe.",
        "CREATE OR REPLACE <object> statements are atomic. That is, when an object is replaced, the old object is deleted and the new object is created in a single transaction.",
        "This means that any queries concurrent with the CREATE OR REPLACE TABLE operation use either the old or new table version.",
        "Recreating or swapping a table drops its change data. Any stream on the table becomes stale. In\naddition, any stream on a view that has this table as an underlying table, becomes stale. A stale stream is unreadable.",
        "Similar to reserved keywords, ANSI-reserved function names\n(CURRENT_DATE, CURRENT_TIMESTAMP, etc.) cannot be used as column\nnames.",
        "CREATE OR ALTER TABLE:",
        "For more information, see CREATE OR ALTER TABLE usage notes.",
        "CREATE TABLE \u2026 CLONE:",
        "If the source table has clustering keys, then the new table has clustering keys. By default, Automatic Clustering is suspended\nfor the new table \u2013 even if Automatic Clustering was not suspended for the source table.",
        "CREATE TABLE \u2026 CHANGE_TRACKING = TRUE:",
        "When change tracking is enabled, the table is locked for the duration of the operation.\nLocks can cause latency with some associated DDL/DML operations.\nFor more information, refer to Resource locking.",
        "CREATE TABLE \u2026 LIKE:",
        "If the source table has clustering keys, then the new table has clustering keys. By default, Automatic Clustering is not\nsuspended for the new table \u2013 even if Automatic Clustering was suspended for the source table.",
        "CREATE TABLE \u2026 AS SELECT (CTAS):",
        "If the aliases for the column names in the SELECT list are valid columns, then the column definitions\nare not required in the CTAS statement; if omitted, the column names and types are inferred from the underlying query:",
        "Alternatively, the names can be explicitly specified using the following syntax:",
        "The number of column names specified must match the number of SELECT list items in the query; the\ntypes of the columns are inferred from the types produced by the query.",
        "When clustering keys are specified in a CTAS statement:",
        "Column definitions are required and must be explicitly specified in the statement.",
        "By default, Automatic Clustering is not suspended for the new table \u2013 even if Automatic Clustering is suspended for the\nsource table.",
        "If you want the table to be created with rows in a specific order, then use an ORDER BY sub-clause in the SELECT clause of the\nCTAS. Specifying CLUSTER BY does not cluster the data at the time that the table is created; instead, CLUSTER BY relies on\nautomatic clustering to recluster the data over time.",
        "The ORDER BY sub-clause in a CREATE TABLE statement does not affect the order of the rows returned by future SELECT statements\non that table. To specify the order of rows in future SELECT statements, use an ORDER BY sub-clause in those statements.",
        "Inside a transaction, any DDL statement (including CREATE TEMPORARY/TRANSIENT TABLE) commits\nthe transaction before executing the DDL statement itself. The DDL statement then runs in its own transaction. The\nnext statement after the DDL statement starts a new transaction. Therefore, you can\u2019t create, use, and drop a\ntemporary or transient table within a single transaction. If you want to use a temporary or transient table inside a\ntransaction, then create the table before the transaction, and drop the table after the transaction.",
        "Recreating a table (using the optional OR REPLACE keyword) drops its history, which makes any stream on the table stale.\nA stale stream is unreadable.",
        "A single masking policy that uses conditional columns can be applied to multiple tables provided that the column structure of the table\nmatches the columns specified in the policy.",
        "When creating a table with a masking policy on one or more table columns, or a row access policy added to the table, use the\nPOLICY_CONTEXT function to simulate a query on the column(s) protected by a masking policy and the table\nprotected by a row access policy.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Limitations",
        "Currently only supports permanent, temporary, and transient tables. Read-only, external, dynamic, Apache Iceberg\u2122, and hybrid tables\nare not supported.",
        "All limitations of the ALTER TABLE command apply.",
        "Currently does not support the following:",
        "CREATE TABLE \u2026 AS SELECT (CTAS) variant syntax.",
        "CREATE TABLE \u2026 USING TEMPLATE variant syntax.",
        "CREATE TABLE \u2026 LIKE variant syntax.",
        "CREATE TABLE \u2026 CLONE variant syntax.",
        "Table parameters and properties",
        "The absence of a property or parameter that was previously set in the modified table definition results in unsetting it.",
        "Unsetting an explicit parameter value results in setting it to the default parameter value.\nIf the parameter is set on the schema or database that contain the table, the table inherits the parameter value set on\nthe schema or database.",
        "Data governance",
        "Setting or unsetting a tag or policy on a table or column using a CREATE OR ALTER TABLE statement is not supported.",
        "Existing policies or tags are not altered by a CREATE OR ALTER statement and remain unchanged.",
        "Constraints",
        "Setting or unsetting an inline primary key changes the nullability of the column accordingly. This aligns with the behavior of\nthe CREATE TABLE command, but is different from the behavior of the ALTER TABLE command.",
        "Columns",
        "New columns can only be added to the end of the column list.",
        "Columns cannot be renamed. If you attempt to rename a column, the column is dropped and a new column is added.",
        "The default value for a column can only be modified to use a sequence.",
        "The default sequence for a column (for example, SET DEFAULT seq_name.NEXTVAL) can only be changed if the column\nalready has a sequence.",
        "For more information about modifying columns, see ALTER TABLE \u2026 ALTER COLUMN.",
        "Collation",
        "Collation specifications cannot be altered.",
        "Setting the DEFAULT_DDL_COLLATION parameter in the CREATE OR ALTER TABLE command\nsets the default collation specification for existing columns, which ensures the CREATE OR ALTER TABLE command\nyields the same results as the CREATE TABLE command. Therefore, you can\u2019t use the CREATE OR ALTER TABLE command to set the\nDEFAULT_DDL_COLLATION parameter on a table that has existing text columns. You can, however, make collations explicit\nfor existing columns when changing the DEFAULT_DDL_COLLATION parameter for a table.",
        "For example, create a new table my_table and  set the default collation specification for the table to \u2018fr\u2019:",
        "The collation specification for column b is \u2018fr\u2019 and cannot be changed. To change the default collation specification for\ntable my_table, you must explicitly set the collation for text column b in the CREATE OR ALTER statement:",
        "Atomicity",
        "The CREATE OR ALTER TABLE command currently does not guarantee atomicity. This means that if a CREATE OR ALTER TABLE statement\nfails during execution, it is possible that a subset of changes might have been applied to the table. If there is a possibility\nof partial changes, the error message, in most cases, includes the following text:",
        "For example, if the statement is attempting to drop column A and add a new column B to a table, and the\nstatement is aborted, it is possible that column A was dropped but column B was not added.",
        "Note",
        "If changes are partially applied, the resulting table is still in a valid state, and you can use additional ALTER TABLE\nstatements to complete the original set of changes.",
        "To recover from partial updates, Snowflake recommends the following recovery mechanisms:",
        "Fix forward",
        "Re-execute the CREATE OR ALTER TABLE statement. If the statements succeeds on the second attempt, the target\nstate is achieved.",
        "Investigate the error message. If possible, fix the error and re-execute the CREATE OR ALTER TABLE statement.",
        "Roll back",
        "If it is not possible to fix forward, Snowflake recommends manually rolling back partial changes:",
        "Investigate the state of the table using the DESCRIBE TABLE and SHOW TABLES commands. Determine which partial\nchanges were applied, if any.",
        "If any partial changes were applied, execute the appropriate ALTER TABLE statements to transform the table back to its\noriginal state.",
        "Note",
        "In some cases, you might not be able to undo partial changes. For more information, see the supported and unsupported\nactions for modifying column properties in the ALTER TABLE \u2026 ALTER COLUMN topic.",
        "If you need help recovering from a partial update, contact Snowflake Support.",
        "Create a simple table in the current database and insert a row in the table:",
        "Create a simple table and specify comments for both the table and the column in the table:",
        "Create a table by selecting from an existing table:",
        "More advanced example of creating a table by selecting from an existing table; in this example, the values in the summary_amount\ncolumn in the new table are derived from two columns in the source table:",
        "Create a table by selecting columns from a staged Parquet data file:",
        "Create a table with the same column definitions as another table, but with no rows:",
        "Create a table with a multi-column clustering key:",
        "Specify collation for columns in a table:",
        "Create a table where the column definitions are derived from a set of staged files that contain Avro, Parquet, or ORC data.",
        "Note that the mystage stage and my_parquet_format file format referenced in the statement must already exist. A set of files\nmust already be staged in the cloud storage location referenced in the stage definition.",
        "The following example creates a table using the detected schema from staged files and sorts the columns by order_id.\nIt builds on an example in the INFER_SCHEMA topic.",
        "Note that sorting the columns by order_id only applies if all staged files share a single schema. If the set of staged data\nfiles includes multiple schemas with shared column names, the order represented in the order_id column might not match any\nsingle file.",
        "Note",
        "Using * for ARRAY_AGG(OBJECT_CONSTRUCT()) may result in an error if the returned result is larger than 16MB.\nIt is recommended to avoid using * for larger result sets, and only use the required columns, COLUMN NAME,\nTYPE, and NULLABLE, for the query. Optional column ORDER_ID can be included when using\nWITHIN GROUP (ORDER BY order_id).",
        "Create a temporary table that is dropped automatically at the end of the session:",
        "For compatibility with other vendors, Snowflake also supports using the keywords below as synonyms for TEMPORARY:",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Create a table my_table using the CREATE OR ALTER TABLE command:",
        "Note",
        "CREATE OR ALTER TABLE statements for existing tables can only be executed by a role\nwith the OWNERSHIP privilege on table my_table.",
        "Alter table my_table to add and modify columns and set the DATA_RETENTION_TIME_IN_DAYS and\nDEFAULT_DDL_COLLATION parameters:",
        "Unset the DATA_RETENTION_TIME_IN_DAYS parameter. The absence of a parameter in the modified table definition results in unsetting it.\nIn this case, unsetting the DATA_RETENTION_TIME_IN_DAYS parameter for the table resets it to the default value of 1:",
        "The CREATE OR ALTER TABLE command supports adding columns at the end of the column list. If you attempt to rename an existing column, the existing\ncolumn is dropped, and a new column with the new column name is added. This might result in data loss if data exists in the original column.",
        "The following example illustrates this behavior.",
        "Create a table:",
        "Insert data into table my_table:",
        "Returns:",
        "Attempt to rename column b:",
        "Column b is dropped and column c is added:",
        "Returns:",
        "Note",
        "You can recover dropped columns using Time Travel.",
        "Setting or unsetting an inline primary key changes the nullability of the column in a way that aligns with the behavior of the\nCREATE TABLE command, but is different from the behavior of the ALTER TABLE command. For example, adding a primary key constraint\non a column using an ALTER TABLE statement does not change column nullability.",
        "The following example illustrates this behavior.",
        "Create a table:",
        "Alter the table to add a PRIMARY KEY constraint:",
        "Column a is now the primary key and is set to NOT NULL:",
        "Returns:",
        "Replace table t:",
        "Insert a NULL value:",
        "Add primary key constraint to column a.",
        "The NULL value in column a causes the following statement to fail:",
        "Returns:",
        "Was this page helpful?",
        "On this page"
    ]
}