{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/python/creating-sprocs",
    "title": "Creating Stored Procedures for DataFrames in Python | Snowflake Documentation",
    "paragraphs": [
        "The Snowpark API provides methods that you can use to create a stored procedure in Python.\nThis topic explains how to create stored procedures.",
        "With Snowpark, you can create stored procedures for your custom lambdas and functions, and you can call these\nstored procedures to process the data in your DataFrame.",
        "You can create stored procedures that only exist within the current session (temporary stored procedures)\nas well as stored procedures that you can use in other sessions (permanent stored procedures).",
        "You can specify Anaconda packages to install when you create Python stored procedures.\nWhen calling the Python stored procedure inside a Snowflake warehouse, Anaconda packages\nare installed seamlessly and cached on the virtual warehouse on your behalf.\nFor more information about best practices, how to view the available packages, and how to\nset up a local development environment, see Using third-party packages.",
        "Use session.add_packages to add packages at the session level.",
        "This code example shows how to import packages and return their versions.",
        "You can also use session.add_requirements to specify packages with a\nrequirements file.",
        "You can add the stored-procedure-level packages to overwrite the session-level packages you might have added previously.",
        "Important",
        "If you don\u2019t specify a package version, Snowflake will use the latest version when resolving dependencies.\nWhen deploying the stored procedure to production, however, you may want to ensure that your code always\nuses the same dependency versions. You can do that for both permanent and temporary stored procedures.",
        "When you create a permanent stored procedure, the stored procedure is created and registered only once.\nThis resolves dependencies once and the selected version is used for production workloads. When the stored procedure executes,\nit will always use the same dependency versions.",
        "When you create a temporary stored procedure, specify dependency versions as part of the version spec.\nThat way, when the stored procedure is registered, package resolution will use the specified version.\nIf you don\u2019t specify the version, the dependency might be updated when a new version becomes available.",
        "To create an anonymous stored procedure, you can either:",
        "Call the sproc function in the snowflake.snowpark.functions module, passing in the definition of the anonymous function.",
        "Call the register method in the StoredProcedureRegistration class, passing in the definition of the anonymous function.\nTo access an attribute or method of the StoredProcedureRegistration class, call the sproc property of the Session class.",
        "Here is an example of an anonymous stored procedure:",
        "Note",
        "When writing code that might execute in multiple sessions, use the register method to register stored procedures,\nrather than using the sproc function. This can prevent errors in which the default Snowflake Session object\ncannot be found.",
        "If you want to call a stored procedure by name (e.g. by using the call function in the Session object),\nyou can create and register a named stored procedure. To do this, you can either:",
        "Call the sproc function in the snowflake.snowpark.functions module, passing in the name argument\nand the definition of the anonymous function.",
        "Call the register method in the StoredProcedureRegistration class, passing in the name argument\nand the definition of the anonymous function.\nTo access an attribute or method of the StoredProcedureRegistration class, call the sproc property of the Session class.",
        "Calling register or sproc will create a temporary stored procedure that you can use in the current session.",
        "To create a permanent stored procedure, call the register method or the sproc function and set\nthe is_permanent argument to True. When you create a permanent stored procedure, you must also set the stage_location\nargument to the stage location where the Python connector used by Snowpark uploads the Python file for the stored procedure and its dependencies.",
        "Here is an example of how to register a named temporary stored procedure:",
        "Here is an example of how to register a named permanent stored procedure by setting the is_permanent argument to True:",
        "Here is an example of these stored procedures being called:",
        "To read the contents of a file with a stored procedure, you can:",
        "Read a statically-specified file by importing a file and then reading it from the stored procedure\u2019s home directory.",
        "Read a dynamically-specified file with SnowflakeFile. You might do this if you need to access a file during computation.",
        "Specify that the file is a dependency, which uploads the file to the server. This is done the same way as for UDFs.\nFor more information, see Specifying Dependencies for a UDF.",
        "For example:",
        "In the stored procedure, read the file.",
        "You can read a file from a stage using the SnowflakeFile class in the Snowpark snowflake.snowpark.files module.\nThe SnowflakeFile class provides dynamic file access, which lets you stream files of any size. Dynamic file access is also useful when you want to iterate over multiple files. For example, see Processing multiple files.",
        "For more information about and examples of reading files using SnowflakeFile, see Reading a File Using the SnowflakeFile Class in a Python UDF Handler.",
        "The following example creates a permanent stored procedure that reads a file from a stage using SnowflakeFile and returns the file length.",
        "Create the stored procedure:",
        "Call the stored procedure:",
        "Was this page helpful?",
        "On this page"
    ]
}