{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-cli/introduction/introduction",
    "title": "Introducing Snowflake CLI | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "Snowflake CLI\u2019s open-source nature means that developers can leverage the community\u2019s collective knowledge and contributions to\nimprove and enhance the tool. By using Snowflake CLI, developers can expect a streamlined, efficient experience that empowers\nthem to work with Snowflake in new and innovative ways. Snowflake CLI is a powerful and flexible tool that helps developers\nstreamline their workflow and optimize their Snowflake experience.",
        "As a command-line interface (CLI), Snowflake CLI provides several benefits for developers, such as:",
        "Speed and efficiency",
        "A CLI allows developers to perform tasks quickly and efficiently by executing commands from the\nterminal without needing a graphical user interface. This can save developers significant time and effort, especially\nwhen performing repetitive or complex tasks.",
        "Automation",
        "A CLI can automate tasks and workflows, such as building, testing, CI/CD, and deploying applications.\nCLI can help developers streamline their development process and reduce the risk of errors or inconsistencies.",
        "Portability",
        "A CLI is often platform-independent and can be used across different operating systems and environments.\nDevelopers can work more easily on multiple projects or collaborate with others who use different systems.",
        "Version control",
        "A CLI can be integrated with version control systems like Git to manage changes and track code\nhistory, which can help developers collaborate more effectively, resolve conflicts, and document changes appropriately.",
        "Customization",
        "A CLI can be customized and extended by using modules and scripts, so developers can tailor it to\ntheir needs and preferences. Automating common tasks and workflows can help developers work more efficiently\nand effectively.",
        "Accessibility",
        "CLI can be accessed remotely, so developers can work on servers and other remote\nsystems without a graphical interface.",
        "SnowSQL is the command-line client for connecting to Snowflake to execute SQL queries and perform all DDL and DML\noperations, including loading data into and unloading data out of database tables.",
        "The Snowflake CLI command-line client, in contrast, focuses primarily on managing workloads and applications that connect\nto Snowflake. Snowflake CLI lets you locally\nrun and debug Snowflake apps, with the following benefits:",
        "You can search, create, and upload Python packages that might not be supported in Anaconda yet.",
        "Snowflake CLI supports Snowpark Python user-defined functions and stored procedures, warehouses, and Streamlit apps.",
        "You can define packages by using requirements.txt, with dependencies automatically added\nthrough integration with Anaconda at deployment time.",
        "Snowflake CLI can include packages that are identified in requirements.txt\u2014but aren\u2019t yet in\nAnaconda\u2014in the application package deployed to Snowflake.\n(This feature only works with packages that don\u2019t rely on native libraries).",
        "When you update existing applications, code and dependencies are automatically altered as needed.",
        "Deployment artifacts are automatically managed and uploaded to Snowflake stages.",
        "Snowflake plans to continue enhancing Snowflake CLI to provide developers a robust tool for leveraging all of the SnowSQL capabilities in a new open source CLI.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}