{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/snowpark/api/snowflake.snowpark.udtf.UDTFRegistration",
    "title": "snowflake.snowpark.udtf.UDTFRegistration | Snowflake Documentation",
    "paragraphs": [
        "Bases: object",
        "Provides methods to register classes as UDTFs in the Snowflake database.\nFor more information about Snowflake Python UDTFs, see Python UDTFs.",
        "session.udtf returns an object of this class.\nYou can use this object to register UDTFs that you plan to use in the current session or\npermanently. The methods that register a UDTF return a UserDefinedTableFunction object,\nwhich you can also use to call the UDTF.",
        "Registering a UDTF is like registering a scalar UDF, you can use register() or snowflake.snowpark.functions.udtf()\nto explicitly register it. You can also use the decorator @udtf. They all use cloudpickle to transfer the code from the client to the server.\nAnother way is to use register_from_file(). Refer to module snowflake.snowpark.udtf.UDTFRegistration for when to use them.",
        "To query a registered UDTF is the same as to query other table functions.\nRefer to table_function() and join_table_function().\nIf you want to query a UDTF right after it\u2019s created, you can call the created UserDefinedTableFunction instance like in Example 1 below.",
        "Create a temporary UDTF and call it:",
        "Create a UDTF with type hints and @udtf decorator and query it:",
        "Create a permanent UDTF with a name and call it in SQL:",
        "Create a UDTF with type hints:",
        "Create a UDTF with type hints by using ... for multiple columns of the same type:",
        "Create a UDTF with UDF-level imports and type hints:",
        "Create a UDTF with UDF-level packages and type hints:",
        "Creating a UDTF with the constructor and end_partition method.",
        "Creating a UDTF from a local Python file:",
        "Creating a UDTF from a Python file on an internal stage:",
        "You can use udtf(), register() or\npandas_udtf() to create a vectorized UDTF by providing\nappropriate return and input types. If you would like to use register_from_file() to\ncreate a vectorized UDTF, you would need to explicitly mark the handler method as vectorized using\neither the decorator @vectorized(input=pandas.DataFrame) or setting\n<class>.end_partition._sf_vectorized_input = pandas.DataFrame",
        "Creating a vectorized UDTF by specifying a PandasDataFrameType as input_types and a\nPandasDataFrameType with column names as output_schema.",
        "Creating a vectorized UDTF by specifying PandasDataFrame with nested types as type hints.",
        "Creating a vectorized UDTF by specifying a pandas.DataFrame as type hints and a StructType with type information and column names as output_schema.",
        "Same as Example 12, but does not specify input_names and instead set the column names in end_partition.",
        "The syntax for declaring UDTF with a vectorized process method is similar to above.\nDefining __init__ and end_partition methods are optional. The process method only accepts one\nargument which is the pandas Dataframe object, and outputs the same number of rows as is in the given input.\nBoth __init__ and end_partition do not take any additional arguments.",
        "Vectorized UDTF process method without end_partition",
        "Vectorized UDTF process method with end_partition",
        "Vectorized UDTF process method with end_partition and max_batch_size",
        "See also",
        "udtf()",
        "register()",
        "register_from_file()",
        "add_import()",
        "add_packages()",
        "table_function()",
        "join_table_function()",
        "Methods",
        "register(handler,\u00a0output_schema[,\u00a0...])",
        "Registers a Python class as a Snowflake Python UDTF and returns the UDTF.",
        "register_from_file(file_path,\u00a0handler_name,\u00a0...)",
        "Registers a Python class as a Snowflake Python UDTF from a Python or zip file, and returns the UDTF.",
        "Was this page helpful?"
    ]
}