{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/python/tutorials/testing-tutorial",
    "title": "Tutorial: Testing Python Snowpark | Snowflake Documentation",
    "paragraphs": [
        "This tutorial introduces the basics of testing your Snowpark Python code.",
        "In this tutorial, you will learn how to:",
        "Test your Snowpark code while connected to Snowflake.",
        "You can use standard testing utilities, like PyTest, to test your Snowpark Python UDFs, DataFrame transformations, and stored procedures.",
        "Test your Snowpark Python DataFrames locally without connecting to a Snowflake account by using the local testing framework.",
        "You can use the local testing framework to test locally, on your development machine, before deploying code changes.",
        "To use the local testing framework:",
        "You must use version 1.11.1 or higher of the Snowpark Python library.",
        "The supported versions of Python are:",
        "3.9",
        "3.10",
        "3.11",
        "In this section, you\u2019ll clone the project repository and set up the environment you\u2019ll need for the tutorial.",
        "Clone the project repository.",
        "If you do not have git installed, go to the repository page and download the contents by clicking Code \u00bb Download Contents.",
        "Set environment variables with your account credentials. The Snowpark API will use these to authenticate to your Snowflake account.",
        "Optional: You can set this env var permanently by editing your bash profile (on Linux/MacOS) or using the System Properties menu (on Windows).",
        "Create and activate a conda environment using Anaconda:",
        "Create the sample table in your account by running setup/create_table.py. This Python script will create a database called CITIBIKE, a schema called PUBLIC, and a small table called TRIPS.",
        "You\u2019re now ready to move to the next section. In this section you:",
        "Cloned the tutorial repository.",
        "Created environment variables with your account information.",
        "Created a conda environment for the project.",
        "Connected to Snowflake using the Snowpark API and created a sample database, schema, and table.",
        "The sample project includes a stored procedure handler (sproc.py) and three DataFrames transformer methods (transformers.py).\nThe stored procedure handler uses the UDF and DataFrame transformers to read from the source table, CITIBIKE.PUBLIC.TRIPS, and creates\ntwo fact tables: MONTH_FACTS and BIKE_FACTS.",
        "You can execute the stored procedure from the command line by running this command.",
        "Now that you\u2019ve familiarized yourself with the project, in the next section you will set up the test directory and create a PyTest Fixture for the Snowflake session.",
        "PyTest fixtures are functions which are executed before a test (or module of tests), typically to provide data or connections to tests.\nFor this project, you will create a PyTest fixture which returns a Snowpark Session object. Your test cases will use this session to connect to Snowflake.",
        "Create a test directory under the project root directory.",
        "Under the test directory, create a new Python file named conftest.py. Within conftest.py, create a PyTest fixture for the Session object:",
        "In the test directory, create a new Python file named test_transformers.py.",
        "In the test_transformers.py file, import the transformer methods.",
        "Next, create unit tests for these transformers. The typical convention is to create a method for each test with the name test_<name of method>. In our case, the tests will be:",
        "The session parameter in each test case refers to the PyTest fixture that you created in the previous section.",
        "Now implement the test cases for each transformer. Use the following pattern.",
        "Create an input DataFrame.",
        "Create the expected output DataFrame.",
        "Pass the input DataFrame from step 1 into the transformer method.",
        "Compare the output of step 3 to the expected output from step 2.",
        "You can now run PyTest to run all of the unit tests.",
        "Now that we have unit tests for the DataFrame transformer methods, let\u2019s add an integration test for the stored procedure.\nThe test case will follow this pattern:",
        "Create a table representing the input data to the stored procedure.",
        "Create two DataFrames with the expected contents of the stored procedure\u2019s two output tables.",
        "Call the stored procedure.",
        "Compare the actual output tables to the DataFrames from step 2.",
        "Clean up: delete the input table from step 1 and the output tables from step 3.",
        "Create a Python file named test_sproc.py under the test directory.",
        "Import the stored procedure hander from the project directory and create a test case.",
        "Implement the test case, starting with the creation of the input table.",
        "Next, create DataFrames for the expected output tables.",
        "And finally, call the stored procedure and read the output tables. Compare the actual tables against the DataFrame contents.",
        "To run the test case, run pytest from the terminal.",
        "To run all the tests in the project, run pytest without any other options.",
        "At this point you have a PyTest test suite for your DataFrame transformers and stored procedure.\nIn each test case, the Session fixture is used to connect to your Snowflake account, send the SQL from the Snowpark Python API, and retrieve the response.",
        "Alternatively, you can use the local testing framework to run the transformations locally without a connection to Snowflake.\nIn large test suites, this can add up to significantly faster test execution. This section shows how to update the test suite to use the local testing framework functionality.",
        "Begin by updating the PyTest Session fixture. We will add a command line option to PyTest to switch between local and live testing modes.",
        "We must first patch this method because not all built-in functions are supported with the local testing framework, for example the monthname() function used in the calc_month_facts() transformer.\nCreate a file named patches.py under the tests directory. In this file, paste the following code.",
        "The patch above accepts a single parameter, column, which is a pandas.Series-like object containing the rows of data within the column.\nWe then use a combination of methods from the Python modules datetime and calendar to emulate the functionality of the built-in monthname() column.\nFinally, we set the return type to String, as the built-in method returns strings corresponding to the months (\u201cJan\u201d, \u201cFeb\u201d, \u201cMar\u201d, etc.).",
        "Next, import this method into the tests for the DataFrame transformer and the stored procedure.",
        "Rerun pytest with the local flag.",
        "Now apply the same patch to the stored procedure test.",
        "Re-run pytest with the local flag.",
        "To wrap things up, let\u2019s compare the time taken to run the full test suite locally versus with a live connection.\nWe will use the time command to measure the time taken for both commands. Let\u2019s start with the live connection.",
        "In this case, the test suite took 7.89 seconds to run. (Your exact time may differ depending on your computer, network connection, and other factors.)",
        "Now let\u2019s try with the local testing framework:",
        "With the local testing framework the test suite, execution only took 1 second!",
        "You finished! Nicely done.",
        "In this tutorial, you got an end-to-end view of how you can test your Python Snowpark code.\nAlong the way, you:",
        "Created a PyTest fixture and added unit tests and integration tests.",
        "For more information, see Writing Tests for Snowpark Python.",
        "Configured local testing",
        "For more information, see Local testing framework.",
        "Was this page helpful?"
    ]
}