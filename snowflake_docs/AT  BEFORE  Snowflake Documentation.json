{
    "url": "https://docs.snowflake.com/en/sql-reference/constructs/at-before",
    "title": "AT | BEFORE | Snowflake Documentation",
    "paragraphs": [
        "Query syntax",
        "The AT or BEFORE clause is used for Snowflake Time Travel. In a query, it is specified in the FROM clause\nimmediately after the table name, and it determines the point in the past from which historical data is requested for the object:",
        "The AT keyword specifies that the request is inclusive of any changes made by a statement or transaction with a timestamp equal to the\nspecified parameter.",
        "The BEFORE keyword specifies that the request refers to a point immediately preceding the specified parameter. This point in time is just\nbefore the statement, identified by its query ID, is completed. For more information, see Using the BEFORE clause.",
        "For more information, see Understanding & using Time Travel.",
        "FROM",
        "Specifies an exact date and time to use for Time Travel. The value must be explicitly cast to a TIMESTAMP,\nTIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ data type.",
        "If no explicit cast is specified, the timestamp in the AT clause is treated as a timestamp with the UTC time zone (equivalent to\nTIMESTAMP_NTZ). Using the TIMESTAMP data type for an explicit cast may also result in the value being treated as a TIMESTAMP_NTZ\nvalue. For details, see Date & time data types.",
        "Specifies the difference in seconds from the current time to use for Time Travel, in the form -N where N\ncan be an integer or arithmetic expression (e.g. -120 is 120 seconds, -30*60 is 1800 seconds or 30 minutes).",
        "Specifies the query ID of a statement to use as the reference point for Time Travel. This parameter supports any statement of one of the\nfollowing types:",
        "DML (e.g. INSERT, UPDATE, DELETE)",
        "TCL (BEGIN, COMMIT transaction)",
        "SELECT",
        "The query ID must reference a query that has been executed within the last 14 days. If the query ID references a query over 14 days old,\nthe following error is returned:",
        "To work around this limitation, use the timestamp for the referenced query.",
        "Specifies the identifier (i.e. name) for an existing stream on the queried table or view. The current offset in\nthe stream is used as the AT point in time for returning change data for the source object.",
        "This keyword is supported only when creating a stream (using CREATE STREAM) or querying change data (using\nthe CHANGES clause). For examples, see these topics.",
        "In the AT clause, you can specify the TIMESTAMP keyword followed by a string that represents a timestamp and an optional explicit cast to\nthe TIMESTAMP, TIMESTAMP_TZ, TIMESTAMP_LTZ, or TIMESTAMP_NTZ data type. The following examples are all valid:",
        "If no explicit cast is specified, the timestamp in the AT clause is treated as a timestamp with the UTC time zone (equivalent to TIMESTAMP_NTZ).\nUsing the TIMESTAMP data type for an explicit cast may also result in the value being treated as a TIMESTAMP_NTZ value, as discussed in\nDate & time data types.",
        "The explicit cast that you choose affects the results of Time Travel queries because timestamps are interpreted with respect to the\ncurrent time zone for the session and the value of the TIMESTAMP_TYPE_MAPPING parameter. For more details about this behavior, see\nQuerying Time Travel data in a session with a non-UTC time zone.",
        "For example, you are running queries in a SQL session where the current time zone is America/Los_Angeles and TIMESTAMP_TYPE_MAPPING is set to\nTIMESTAMP_NTZ. Create a table and immediately insert two rows:",
        "Check the creation time of the table with a SHOW TABLES command:",
        "Note the time zone offset in the created_on column. Five minutes later, insert another row:",
        "Now run the following Time Travel query, expecting it to return the first two rows:",
        "The query fails because the time zone of the session is UTC, and the explicit cast to TIMESTAMP honors that time zone.\nTherefore, the table is assumed to have been created after the specified timestamp. To solve this problem, run the\nquery again with an explicit cast to TIMESTAMP_LTZ (local time zone):",
        "As expected, the query returns the first two rows that were inserted. Finally, run the same query but specify a slightly later timestamp:",
        "This query returns all three rows, given the later timestamp.",
        "The STATEMENT parameter in the BEFORE clause must refer to a query ID. The point in the past used by Time Travel is just before the\nstatement for that query ID is completed rather than before the statement is started. If concurrent queries commit modifications to\nthe data between the start and end of the statement, these changes are included in your results.",
        "For example, the following statements are being executed on table my_table in parallel in two separate threads:",
        "Time",
        "Thread",
        "Operation",
        "Phase",
        "Description",
        "t1",
        "1",
        "INSERT INTO my_table(id) VALUE(1)",
        "Start",
        "Insert starts execution by performing required checks.",
        "t2",
        "1",
        "INSERT INTO my_table(id) VALUE(1)",
        "End",
        "Insert updated my_table.",
        "t3",
        "1",
        "DELETE FROM my_table",
        "Start",
        "Delete identifies the list of records to delete (id=1).",
        "t4",
        "2",
        "INSERT INTO my_table(id) VALUE(2)",
        "Start",
        "Insert starts execution by performing required checks.",
        "t5",
        "2",
        "INSERT INTO my_table(id) VALUE(2)",
        "End",
        "Insert updated my_table.",
        "t6",
        "2",
        "SELECT * FROM my_table",
        "End",
        "Thread 2 selects rows from my_table. The results include all rows (id=1, id=2).",
        "t7",
        "1",
        "DELETE FROM my_table",
        "End",
        "Delete updates my_table deleting all old records present before time t3 when the delete statement started in\nthread 1 (id=1).",
        "t8",
        "1",
        "SELECT * FROM my_table BEFORE(STATEMENT => LAST_QUERY_ID())",
        "End",
        "SELECT statement uses Time Travel to retrieve historical data from before the completion of the delete operation.\nThe results include the row from the 2nd insert statement that happened concurrently in thread 2 (id=1, id=2).",
        "As a workaround, you can use a TIMESTAMP parameter that specifies a point in time just before the start of the statement.",
        "Data in Snowflake is identified by timestamps that can differ slightly from the exact value of system time.",
        "The value for TIMESTAMP or OFFSET must be a constant expression.",
        "The smallest time resolution for TIMESTAMP is milliseconds.",
        "If requested data is beyond the Time Travel retention period (default is 1 day), the statement fails.",
        "In addition, if the requested data is within the Time Travel retention period but no historical data is available (e.g. if the retention\nperiod was extended), the statement fails.",
        "If the specified Time Travel time is at or before the point in time when the object was created, the statement fails. See\nUsing the AT TIMESTAMP parameter.",
        "When you access historical table data, the results include the columns, default values, etc. from the current definition of the table.\nThe same applies to non-materialized views. For example, if you alter a table to add a column, querying for historical data before\nthe point in time when the column was added returns results that include the new column.",
        "Historical data has the same access control requirements as current data. Any changes are applied retroactively.",
        "The AT and BEFORE clauses do not support selecting historical data from a CTE.",
        "For example, the following query is not supported:",
        "However, these clauses are supported in a query in a WITH clause. For example, the following\nquery is supported:",
        "Time Travel queries against hybrid tables have the following limitations:",
        "Only the TIMESTAMP parameter is supported in the AT clause. The OFFSET, STATEMENT, and STREAM parameters are not supported.",
        "The value of the TIMESTAMP parameter must be the same for all tables that belong to the same database. If the tables belong\nto different databases, different TIMESTAMP values may be used.",
        "The BEFORE clause is not supported.",
        "Error",
        "Cause",
        "In some cases, this is caused by using a string where a timestamp is expected.",
        "Solution",
        "Cast the string to a timestamp.",
        "Select historical data from a table using a specific timestamp. In the first two\nexamples, which use the TIMESTAMP parameter, my_table could be a standard table or a hybrid table.",
        "Select historical data from a table as of 5 minutes ago:",
        "Select historical data from a table up to, but not including any changes made by the specified transaction:",
        "Return the difference in table data resulting from the specified transaction:",
        "The following example runs a Time Travel join query against two tables in the same database, one of\nwhich is a hybrid table. The same TIMESTAMP expression must be used for both tables.",
        "Was this page helpful?",
        "On this page"
    ]
}