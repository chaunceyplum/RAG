{
    "url": "https://docs.snowflake.com/en/sql-reference/data-types-numeric.html#label-data-types-for-fixed-point-numbers",
    "title": "Numeric data types | Snowflake Documentation",
    "paragraphs": [
        "This topic describes the numeric data types supported in Snowflake, along with the supported formats for numeric constants/literals.",
        "Snowflake supports the following data types for fixed-point numbers.",
        "Numbers up to 38 digits, with an optional precision and scale:",
        "Total number of digits allowed.",
        "Number of digits allowed to the right of the decimal point.",
        "By default, precision is 38, and scale is 0 (that is, NUMBER(38, 0)). Precision limits the range\nof values that can be inserted into (or cast to) columns of a given type. For example, the value 999 fits into\nNUMBER(38,0) but not into NUMBER(2,0).",
        "The maximum scale (number of digits to the right of the decimal point) is 37. Numbers that have fewer than 38\nsignificant digits, but whose least significant digit is past the 37th decimal place, for example\n0.0000000000000000000000000000000000000012 (1.2e-39), can\u2019t be represented without losing some digits of precision.",
        "Note",
        "If data is converted to another data type with lower precision, then back to the higher-precision data type, the data\ncan lose precision. For example, precision is lost if you convert a NUMBER(38,37) value to a DOUBLE value (which has a\nprecision of approximately 15 decimal digits), and then back to NUMBER.",
        "Snowflake also supports the FLOAT data type, which allows a wider range of values,\nalthough with less precision.",
        "Synonymous with NUMBER.",
        "Synonymous with NUMBER, except that precision and scale can\u2019t be specified (that is, it always defaults to NUMBER(38, 0)).\nTherefore, for all INTEGER data types, the range of values is all integer values from\n-99999999999999999999999999999999999999 to +99999999999999999999999999999999999999 (inclusive).",
        "The various names (TINYINT, BYTEINT, and so on) are to simplify porting from other systems and to suggest the expected\nrange of values for a column of the specified type.",
        "Precision (total number of digits) doesn\u2019t affect storage. The storage requirements for the same number in columns with\ndifferent precisions, such as NUMBER(2,0) and NUMBER(38,0), are the same. For each micro-partition, Snowflake determines\nthe minimum and maximum values for a given column and uses that information to determine the storage size for all values\nfor that column in the partition. For example:",
        "If a column contains only values between -128 and +127, then each of the values consumes 1 byte (uncompressed).",
        "If the largest value in the column is 10000000, then each of the values consumes 4 bytes (uncompressed).",
        "However, scale (the number of digits following the decimal point) affects storage. For example, the same value stored in\na column of type NUMBER(10,5) consumes more space than NUMBER(5,0). Also, processing values with a larger scale might be\nslightly slower and consume more memory.",
        "To save space, Snowflake compresses values before writing them to storage. The amount of compression depends on the data\nvalues and other factors.",
        "The following statement creates a table with columns of various fixed-point data types:",
        "Snowflake supports the following data types for floating-point numbers.",
        "The names FLOAT, FLOAT4, and FLOAT8 are for compatibility with other systems. Snowflake treats all three as 64-bit\nfloating-point numbers.",
        "Snowflake uses double-precision (64 bit) IEEE 754 floating-point numbers.",
        "Precision is approximately 15 digits. For example, for integers, the range is from -9007199254740991 to +9007199254740991\n(-253 + 1 to +253 - 1). Floating-point values can range from approximately\n10-308 to 10+308. (Snowflake can represent more extreme values between approximately 10-324\nand 10-308 with less precision.) For more details, see the\nWikipedia article on double-precision numbers.",
        "Snowflake supports the fixed-point data type NUMBER, which allows greater precision,\nalthough a smaller range of exponents.",
        "Snowflake supports the following special values for FLOAT:",
        "'NaN' (not a number)",
        "'inf' (infinity)",
        "'-inf' (negative infinity)",
        "The symbols 'NaN', 'inf', and '-inf' must be in single quotes, and are case-insensitive.",
        "Comparison semantics for 'NaN' differ from the IEEE 754 standard in the following ways:",
        "Condition",
        "Snowflake",
        "IEEE 754",
        "Comment",
        "'NaN' = 'NaN'",
        "TRUE",
        "FALSE",
        "In Snowflake, 'NaN' values are all equal.",
        "'NaN' > X . where X is any FLOAT value, including . infinity (other than NaN itself).",
        "TRUE",
        "FALSE",
        "In Snowflake, 'NaN' is greater . than any other FLOAT value, . including infinity.",
        "Floating point operations can have small rounding errors in the least significant digits. Rounding errors can occur in any type\nof floating-point processing, including trigonometric, statistical, and geospatial functions.",
        "The following are considerations for rounding errors:",
        "Errors can vary each time the query is executed.",
        "Errors can be larger when operands have different precision or scale.",
        "Errors can accumulate, especially when aggregate functions (for example, SUM\nor AVG) process large numbers of rows. Casting to a fixed-point data type before\naggregating can reduce or eliminate these errors.",
        "Rounding errors can occur not only when working with SQL, but also when working with other code (for example, Java, JavaScript, or Python) that runs\ninside Snowflake (for example, in\nUDFs and stored procedures).",
        "When comparing two floating-point numbers, Snowflake recommends comparing for approximate equality rather than exact equality.",
        "Synonymous with FLOAT.",
        "The following statement creates a table with columns of various floating-point data types:",
        "Note",
        "The DESC TABLE command\u2019s type column displays the data type FLOAT not only for FLOAT, but also for synonyms\nof FLOAT (for example, DOUBLE, DOUBLE PRECISION, and REAL).",
        "The term constants (also known as literals) refers to fixed data values. The following formats are\nsupported for numeric constants:",
        "[+-][digits][.digits][e[+-]digits]",
        "Where:",
        "+ or - indicates a positive or negative value. The default is positive.",
        "digits is one or more digits from 0 to 9.",
        "e (or E) indicates an exponent in scientific notation. At least one digit must follow the exponent marker if present.",
        "The following numbers are all examples of supported numeric constants:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}