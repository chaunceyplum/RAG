{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/reference/latest/_autosummary/snowflake.core.CreateMode",
    "title": "snowflake.core.CreateMode | Snowflake Documentation",
    "paragraphs": [
        "Bases: str, Enum",
        "Enum for Snowflake create modes.",
        "Attributes",
        "Methods",
        "Encode the string using the codec registered for encoding.",
        "The encoding in which to encode the string.",
        "The error handling scheme to use for encoding errors.\nThe default is \u2018strict\u2019 meaning that encoding errors raise a\nUnicodeEncodeError.  Other possible values are \u2018ignore\u2019, \u2018replace\u2019 and\n\u2018xmlcharrefreplace\u2019 as well as any other name registered with\ncodecs.register_error that can handle UnicodeEncodeErrors.",
        "Return a copy with all occurrences of substring old replaced by new.",
        "Maximum number of occurrences to replace.\n-1 (the default value) means replace all occurrences.",
        "If the optional argument count is given, only the first count occurrences are\nreplaced.",
        "Return a list of the substrings in the string, using sep as the separator string.",
        "The separator used to split the string.",
        "When set to None (the default value), will split on any whitespace\ncharacter (including n r t f and spaces) and will discard\nempty strings from the result.",
        "Maximum number of splits.\n-1 (the default value) means no limit.",
        "Splitting starts at the front of the string and works to the end.",
        "Note, str.split() is mainly useful for data that has been intentionally\ndelimited.  With natural text that includes punctuation, consider using\nthe regular expression module.",
        "Return a list of the substrings in the string, using sep as the separator string.",
        "The separator used to split the string.",
        "When set to None (the default value), will split on any whitespace\ncharacter (including n r t f and spaces) and will discard\nempty strings from the result.",
        "Maximum number of splits.\n-1 (the default value) means no limit.",
        "Splitting starts at the end of the string and works to the front.",
        "Concatenate any number of strings.",
        "The string whose method is called is inserted in between each given string.\nThe result is returned as a new string.",
        "Example: \u2018.\u2019.join([\u2018ab\u2019, \u2018pq\u2019, \u2018rs\u2019]) -> \u2018ab.pq.rs\u2019",
        "Return a capitalized version of the string.",
        "More specifically, make the first character have upper case and the rest lower\ncase.",
        "Return a version of the string suitable for caseless comparisons.",
        "Return a version of the string where each word is titlecased.",
        "More specifically, words start with uppercased characters and all remaining\ncased characters have lower case.",
        "Return a centered string of length width.",
        "Padding is done using the specified fill character (default is a space).",
        "Return the number of non-overlapping occurrences of substring sub in\nstring S[start:end].  Optional arguments start and end are\ninterpreted as in slice notation.",
        "Return a copy where all tab characters are expanded using spaces.",
        "If tabsize is not given, a tab size of 8 characters is assumed.",
        "Return the lowest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.",
        "Return -1 on failure.",
        "Partition the string into three parts using the given separator.",
        "This will search for the separator in the string.  If the separator is found,\nreturns a 3-tuple containing the part before the separator, the separator\nitself, and the part after it.",
        "If the separator is not found, returns a 3-tuple containing the original string\nand two empty strings.",
        "Return the lowest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.",
        "Raises ValueError when the substring is not found.",
        "Return a left-justified string of length width.",
        "Padding is done using the specified fill character (default is a space).",
        "Return a copy of the string converted to lowercase.",
        "Return a copy of the string with leading whitespace removed.",
        "If chars is given and not None, remove characters in chars instead.",
        "Return the highest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.",
        "Return -1 on failure.",
        "Return the highest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.",
        "Raises ValueError when the substring is not found.",
        "Return a right-justified string of length width.",
        "Padding is done using the specified fill character (default is a space).",
        "Return a copy of the string with trailing whitespace removed.",
        "If chars is given and not None, remove characters in chars instead.",
        "Partition the string into three parts using the given separator.",
        "This will search for the separator in the string, starting at the end. If\nthe separator is found, returns a 3-tuple containing the part before the\nseparator, the separator itself, and the part after it.",
        "If the separator is not found, returns a 3-tuple containing two empty strings\nand the original string.",
        "Return a list of the lines in the string, breaking at line boundaries.",
        "Line breaks are not included in the resulting list unless keepends is given and\ntrue.",
        "Return a copy of the string with leading and trailing whitespace removed.",
        "If chars is given and not None, remove characters in chars instead.",
        "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "Replace each character in the string using the given translation table.",
        "Translation table, which must be a mapping of Unicode ordinals to\nUnicode ordinals, strings, or None.",
        "The table must implement lookup/indexing via __getitem__, for instance a\ndictionary or list.  If this operation raises LookupError, the character is\nleft untouched.  Characters mapped to None are deleted.",
        "Return a copy of the string converted to uppercase.",
        "Return True if S starts with the specified prefix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nprefix can also be a tuple of strings to try.",
        "Return True if S ends with the specified suffix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nsuffix can also be a tuple of strings to try.",
        "Return a str with the given prefix string removed if present.",
        "If the string starts with the prefix string, return string[len(prefix):].\nOtherwise, return a copy of the original string.",
        "Return a str with the given suffix string removed if present.",
        "If the string ends with the suffix string and that suffix is not empty,\nreturn string[:-len(suffix)]. Otherwise, return a copy of the original\nstring.",
        "Return True if all characters in the string are ASCII, False otherwise.",
        "ASCII characters have code points in the range U+0000-U+007F.\nEmpty string is ASCII too.",
        "Return True if the string is a lowercase string, False otherwise.",
        "A string is lowercase if all cased characters in the string are lowercase and\nthere is at least one cased character in the string.",
        "Return True if the string is an uppercase string, False otherwise.",
        "A string is uppercase if all cased characters in the string are uppercase and\nthere is at least one cased character in the string.",
        "Return True if the string is a title-cased string, False otherwise.",
        "In a title-cased string, upper- and title-case characters may only\nfollow uncased characters and lowercase characters only cased ones.",
        "Return True if the string is a whitespace string, False otherwise.",
        "A string is whitespace if all characters in the string are whitespace and there\nis at least one character in the string.",
        "Return True if the string is a decimal string, False otherwise.",
        "A string is a decimal string if all characters in the string are decimal and\nthere is at least one character in the string.",
        "Return True if the string is a digit string, False otherwise.",
        "A string is a digit string if all characters in the string are digits and there\nis at least one character in the string.",
        "Return True if the string is a numeric string, False otherwise.",
        "A string is numeric if all characters in the string are numeric and there is at\nleast one character in the string.",
        "Return True if the string is an alphabetic string, False otherwise.",
        "A string is alphabetic if all characters in the string are alphabetic and there\nis at least one character in the string.",
        "Return True if the string is an alpha-numeric string, False otherwise.",
        "A string is alpha-numeric if all characters in the string are alpha-numeric and\nthere is at least one character in the string.",
        "Return True if the string is a valid Python identifier, False otherwise.",
        "Call keyword.iskeyword(s) to test whether string s is a reserved identifier,\nsuch as \u201cdef\u201d or \u201cclass\u201d.",
        "Return True if the string is printable, False otherwise.",
        "A string is printable if all of its characters are considered printable in\nrepr() or if it is empty.",
        "Pad a numeric string with zeros on the left, to fill a field of the given width.",
        "The string is never truncated.",
        "Return a formatted version of S, using substitutions from args and kwargs.\nThe substitutions are identified by braces (\u2018{\u2019 and \u2018}\u2019).",
        "Return a formatted version of S, using substitutions from mapping.\nThe substitutions are identified by braces (\u2018{\u2019 and \u2018}\u2019).",
        "Return a translation table usable for str.translate().",
        "If there is only one argument, it must be a dictionary mapping Unicode\nordinals (integers) or characters to Unicode ordinals, strings or None.\nCharacter keys will be then converted to ordinals.\nIf there are two arguments, they must be strings of equal length, and\nin the resulting dictionary, each character in x will be mapped to the\ncharacter at the same position in y. If there is a third argument, it\nmust be a string, whose characters will be mapped to None in the result.",
        "Was this page helpful?"
    ]
}