{
    "url": "https://docs.snowflake.com/en/sql-reference/external-functions-creating-azure-ui-remote-service",
    "title": "Step 1: Create the remote service (Azure function) in the Portal | Snowflake Documentation",
    "paragraphs": [
        "This topic provides detailed instructions for creating an Azure Function for use as the remote service for your external function.",
        "Planning an external function for Azure",
        "There are multiple possible ways to create a remote service. This section shows how to create a remote service that is implemented\nas a JavaScript function.",
        "This external function is synchronous.\nFor information about creating an\nasynchronous external function, see\nCreating an Asynchronous Function on Azure.",
        "Create an Azure Functions app to serve as a container for the function(s) that you create later:",
        "If you haven\u2019t already, log into the Azure Portal.",
        "Create the Azure Functions app by following the instructions in the Microsoft documentation:\nAzure Functions App.",
        "As you follow the instructions, remember the following:",
        "When you enter a name the Function App Name field, also record the name in the Azure Function app name field in\nyour tracking worksheet.",
        "When asked to choose how to Publish, choose Code.",
        "Some restrictions apply when creating multiple apps in the same resource group. For details, see the Microsoft documentation:\nAzure app service.",
        "Snowflake provides a sample \u201cecho\u201d function in Node.js. To use this sample function to get started:",
        "When asked for the Runtime stack, select Node.js.",
        "When asked for the version of Node.js, select version 12.",
        "When asked which OS to run the function on, choose \u201cWindows\u201d or \u201cLinux\u201d.",
        "If you are only creating a demo function, Snowflake recommends selecting \u201cWindows\u201d.",
        "Linux Function Apps cannot be edited in the Azure Portal. Users must publish the code through the Visual Studio Code interface.",
        "If you want to run your Azure Function on Linux rather than Microsoft Windows, see the Microsoft documentation:\nAzure Functions.",
        "Azure AD authentication is not available on Linux when using the \u201cConsumption\u201d pricing plan for Azure Functions.\nYou must use an \u201cApp Service\u201d pricing plan or \u201cPremium\u201d pricing plan in order to authenticate with Azure AD.",
        "For more details, see the Microsoft documentation:\nAzure AD.",
        "After you create your Azure Functions app (container), you need to create an Azure Function in the container. This function acts as the\nremote service.",
        "Microsoft allows Azure Functions to be called (\u201ctriggered\u201d) different ways. A Snowflake external function invokes a remote service via an\nHTTP POST command, so the Azure Function you create must be an \u201cHTTP-triggered function\u201d.",
        "Tip",
        "You can use the instructions provided by Microsoft to create the HTTP-triggered function:",
        "Create an app portal",
        "Create an Azure function",
        "However, Snowflake provides custom instructions that include additional details and sample code, and suggest a different authorization\nlevel than Microsoft. We suggest using the custom instructions in place of Microsoft\u2019s instructions.",
        "To perform the tasks described in this section, you should be in the Function App screen in the Azure Portal. The name of your\nAzure Functions app should be displayed, typically near the upper left corner of the screen.",
        "To create the HTTP-triggered function:",
        "In the left-hand side menu tree, look for the section titled Functions. In that section, click on the item\nlabeled Functions to add a function.",
        "Click on the + Add button.",
        "Select HTTP trigger from the list of potential triggers on the right.",
        "Enter the name to use for your HTTP-triggered function.",
        "Record this name in the HTTP-Triggered Function name field in your tracking worksheet.",
        "Enter the Authorization level.",
        "Snowflake recommends choosing Function as the authorization level.",
        "For more information about possible authorization levels, see the Microsoft documentation:\nHTTP-triggered functions.",
        "Click on the button titled Add.",
        "This takes you to a screen that shows the function name and, below that, the word Function.",
        "In the tree menu on the left-hand side, click on Code + Test.",
        "Replace the default code with your own code.",
        "Sample code for a JavaScript \u201cecho\u201d function is provided below.",
        "The function reads each row, then copies the row to the output (results). The row number is also included in the output. The output is\nreturned as part of a multi-level dictionary.",
        "This function accepts and returns data in the same format (JSON) that Snowflake sends and reads. For more details about data\nformats, see Remote Service Input and Output Data Formats .",
        "Normally, the function returns HTTP code 200. If no rows are passed to the function (i.e. if the request body is empty), the function\nreturns error code 400.",
        "Click on the Save button above the code.",
        "To test the HTTP-triggered Azure Function you just created, paste the following sample data into the Body field and click on\nthe Test/Run button:",
        "The content of the output should be similar to the following:",
        "Note that the formatting might be different from what is shown above.",
        "When an external function is called, Snowflake sends an HTTP POST command to the proxy service (e.g. the Azure API Management service),\nwhich relays the POST to the remote service (e.g. the Azure Function).",
        "Each of these two steps should have authorization requirements, so you typically specify:",
        "The authorization needed to call the API Management service.",
        "The authorization needed to call functions in the Azure Functions app that contains your Azure Function.",
        "This section describes how to require authorization for your Azure Functions app. The API Management service is created later, so its\nauthorization requirements are also specified later.",
        "When Snowflake authenticates with your Azure Functions app, Snowflake uses OAuth client credential grant flow with Azure AD.",
        "For more details about the client credential grant flow, see the Microsoft documentation:\nclient credential.",
        "This client credential flow requires an Azure AD app registration that represents the Azure Functions app.",
        "This section includes instructions for creating the Azure AD app registration for the Azure Functions app. For example, you can set your\nAzure Functions app to require Azure AD authentication. To configure authorization via Azure AD, you must:",
        "Create an Azure AD app registration, which is an Azure AD-based entity that represents\nan identity or resource identifier (i.e. what you want to protect).",
        "Associate the Azure AD app registration with the Azure Functions app for which you want to require authentication.",
        "Note",
        "For Azure Functions, the fastest way to create an Azure AD app registration is by enabling Azure AD Authentication for the service, as\ndocumented below. If you are using a remote service other than an Azure Function, use the App registrations page to create\na new Azure AD app registration for your remote service.",
        "For more details about app registration, see the Microsoft documentation:",
        "app registration documentation",
        "Before you execute the steps below, you should be on the Function App screen for your Azure Functions app.",
        "In the left-hand menu pane, look for the section named Settings and click on Authentication.",
        "If the left-hand margin shows the Developer menu (with Code + Test, Integration, etc.), if you have a scroll\nbar at the bottom of your screen, try sliding the scroll bar to the left to return to the Function App\nor App Service section, and then look for Settings.",
        "Click the Add identity provider button.",
        "In the Identity provider drop-down menu, select Microsoft.",
        "For App registration type, select Create new app registration.",
        "In the Name field, type the name of your app.",
        "For Supported account types, select Current tenant - Single tenant.",
        "For Restrict access, select Require authentication.",
        "For Unauthenticated requests, select HTTP 401 Unauthorized.",
        "Click Next: Permissions. Review the permissions.",
        "Click Add. A new Azure AD application is created and the application page is displayed.",
        "Click the link that shows your application\u2019s name to go to your Azure AD application\u2019s page.",
        "Find the Application (client) ID field.",
        "Record this ID in the Azure Function App AD Application ID field in your tracking worksheet.",
        "Important",
        "Make sure you copy the ID, not the Azure AD application name. The ID should contain a UUID.",
        "Step 2: Create the proxy service (Azure API Management service) in the Portal",
        "Was this page helpful?",
        "On this page"
    ]
}