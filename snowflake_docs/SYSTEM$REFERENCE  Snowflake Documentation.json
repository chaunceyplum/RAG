{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/system_reference",
    "title": "SYSTEM$REFERENCE | Snowflake Documentation",
    "paragraphs": [
        "System functions (Information)",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Returns a reference to an object (a table, view, or function). When\nyou execute SQL actions on a reference to an object, the actions are performed using the role of the user who created the\nreference.",
        "Note",
        "As an alternative to calling this function, you can use the TABLE keyword, if you need to create a reference to an object that\nyou don\u2019t plan to modify (for example, if you are passing in a table that the stored procedure will query) and you want that\nreference to be valid for the scope of the call (rather than for the entire session). See\nUsing the TABLE keyword to create a reference to a table, view, or query.",
        "SYSTEM$QUERY_REFERENCE",
        "Required",
        "Type of the object. You can specify one of the following values:",
        "api_integration",
        "compute_pool",
        "database",
        "external_table",
        "function",
        "materialized_view",
        "pipe",
        "procedure",
        "schema",
        "table",
        "task",
        "view",
        "warehouse",
        "Identifier for the object. If the identifier contains spaces or special characters, the entire string must be enclosed in\ndouble quotes. Identifiers enclosed in double quotes are also case-sensitive.",
        "For more details about identifiers, see Identifier requirements.",
        "Optional",
        "Specifies the scope of the reference.",
        "If 'CALL' or omitted, specifies that the reference is valid within the context in which it was created.\nSee Specifying the scope of the reference.",
        "If 'SESSION', specifies that the reference should be valid for the duration for the session.",
        "If 'PERSISTENT', specifies that the reference should be valid until the object is dropped. See\npersistent references.",
        "Note: If you need to specify the 'privilege' argument, the 'reference_scope' argument is required.",
        "Valid values:",
        "'CALL'",
        "'SESSION'",
        "'PERSISTENT'",
        "Default value: 'CALL'",
        "Additional privilege that is needed to perform an SQL action on the\nobject.",
        "For example, suppose that you are passing the reference for a table to a stored procedure that inserts rows into that table.\nSpecify 'INSERT' to confer the INSERT privilege on that table to the stored procedure.",
        "For a list of supported objects and privileges, see Supported object types and privileges for references.",
        "To specify more than one additional privilege, pass each privilege name as an additional argument to the function. For example,\nto confer the INSERT, UPDATE, and TRUNCATE privileges:",
        "Note that you cannot specify OWNERSHIP or ALL as privileges.",
        "A serialized string representation of the reference that can be used as an identifier.",
        "The 'object_type' argument must match the type of the object specified by object_identifier.",
        "The following scenarios can help you troubleshoot issues that can occur.",
        "Error",
        "Cause",
        "If you try to create a reference using the SYSTEM$REFERENCE function and the object_type argument does not match the\ntype of the object specified by object_identifier, the function fails. For example, if the object_type argument is TABLE, but object_identifier\nresolves to an object type other than TABLE (for example, VIEW), the function fails.",
        "Solution",
        "Verify that the type of the object specified by object_identifier matches the object_type argument.\nFor a list of supported object types, see Supported object types and privileges for references.",
        "See Background: The problem with passing tables, views, and queries to stored procedures.",
        "Was this page helpful?",
        "On this page"
    ]
}