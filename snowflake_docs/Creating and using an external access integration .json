{
    "url": "https://docs.snowflake.com/en/developer-guide/external-network-access/creating-using-external-network-access",
    "title": "Creating and using an external access integration | Snowflake Documentation",
    "paragraphs": [
        "To enable access to specific external network locations, you create an external access integration that specifies a list of network rules\nthat specify external locations and a list of secrets you are allowed to use. By using the EXTERNAL_ACCESS_INTEGRATIONS clause to refer to\nthis integration when creating the UDF or procedure with CREATE FUNCTION or CREATE PROCEDURE, you allow the handler code to use the secret\nto authenticate with the external location.",
        "An administrator can monitor requests made to external network locations by using the\nEXTERNAL_ACCESS_HISTORY view.",
        "For an end-to-end sequence of code examples you might use to set up and use external access, refer to\nExternal network access examples.",
        "Use the following steps to set up access to an external network location from a UDF or procedure.",
        "Choose whether to connect to the external network location using the\npublic Internet or private connectivity.",
        "Create a network rule to represent the external network location.",
        "Create a secret to hold credentials.",
        "Create an external access integration,\naggregating the secret and network rule so that they may be used by the handler when accessing the external location.",
        "Create the UDF or procedure with the EXTERNAL_ACCESS_INTEGRATIONS\nparameter set to the integration\u2019s name as a value. This gives the function or procedure permission to access the external network\nlocations and use the credentials specified by network rules and secrets in the integration.",
        "You separately set the SECRET parameter to the name of a secret included in the integration so that you have access to the\nsecret\u2019s contents from handler code.",
        "In function or procedure handler code, access the external network location specified in a network rule included in the integration.\nAn attempt to access a network location that is not specified by an allowed network rule will be denied.",
        "When you connect to an external network location, the connectivity from Snowflake to the external network location can go through the\npublic Internet or use Azure Private Link\n(Microsoft documentation). The choice to use Azure Private Link depends on your security requirements in terms of how you need to connect\nto the external network location. Using Azure Private Link can help you meet your security requirements.",
        "If you choose to use the public Internet, follow the instructions in the following sections in this topic.",
        "If you choose to use Azure Private Link, the configuration process requires using the ACCOUNTADMIN role and a Snowflake account that is\nBusiness Critical Edition (or higher). There is an additional billing charge to use Azure\nPrivate Link. Review these topics for more information:",
        "Private connectivity for outbound network traffic",
        "Manage private connectivity endpoints: Azure",
        "Next, configure the access to the external network location to use Azure Private Link as shown in\nExternal network access and private connectivity on Microsoft Azure.",
        "You can use the CREATE NETWORK RULE command to create a network rule that represents the external network\u2019s\nlocation and restrictions for access. For example, a network rule specifies network identifiers such as a hostname and the direction of\ncommunication with the network (ingress or egress).",
        "To support access to an external network, an administrator will include the rule when creating an\nexternal access integration. Each rule included in the\nintegration specifies an external network location that the function or procedure is allowed to access.",
        "When creating a network rule for use in an external access integration, you specify the following:",
        "EGRESS as the MODE parameter value.",
        "A TYPE parameter value that indicates the type of network, such as HOST_PORT or PRIVATE_HOST_PORT.",
        "The external location\u2019s endpoint in the VALUE_LIST parameter.",
        "(Optional) A port number with the external location\u2019s endpoint name. If you omit a port number, Snowflake will use the default port number for\nexternal access, 443.",
        "For example, if the endpoint requires port 80, the VALUE_LIST parameter might be as follows:",
        "For security, Snowflake requires that when creating a network rule, you must use a role that has the following:",
        "The CREATE NETWORK RULE privilege on the schema that will hold the rule.",
        "Code in the following example creates a network rule called google_apis_network_rule for outbound requests to the Google\nTranslation API.",
        "For more examples, see External network access examples.",
        "You can use CREATE SECRET to create a secret that represents credentials required to authenticate with the\nexternal network location. For example, the secret can contain credentials such as a username and password or a\nsecurity integration.",
        "For access to an external network location that supports OAuth, a best practice is have your secret contain a reference to a\nsecurity integration that contains values needed for OAuth flow such as a client ID,\nclient secret, token endpoint, and so on.",
        "The secret will be used in the following ways:",
        "By an administrator when creating the external access integration.",
        "When creating the integration, the administrator will specify the secrets that developers may use  in handler code when creating a\nfunction or procedure that uses the integration.",
        "By a developer when creating a UDF or procedure handler.",
        "The developer will specify the allowed secret that contains the credentials that handler code can use to authenticate when making a request\nto the external location. When writing a handler, a developer can use a Snowflake API to retrieve credentials contained by the secret\nrather than including the credentials as literal values in handler code.",
        "Note",
        "For an OAuth secret that requires a refresh token, you can obtain the token in multiple ways, including through system functions available\nin Snowflake. For an example, see Accessing the Google Translate API with OAuth.",
        "For security, Snowflake requires that when creating a secret, you must use a role that has the following:",
        "The CREATE SECRET privilege on the schema that will hold the secret.",
        "Code in the following example creates a secret called oauth_token that specifies a security integration (represented by\ngoogle_translate_oauth) containing values needed to authenticate using OAuth.",
        "For a more complete example, including the code for creating the security integration, refer to\nExternal network access examples.",
        "Tip",
        "In this preview, you can specify the TYPE as GENERIC_STRING when you want to use an API key only as credentials.",
        "You can use the CREATE EXTERNAL ACCESS INTEGRATION command to create an external access integration that aggregates allowed network\nrules (representing external network locations) and allowed secrets (representing credentials for authenticating) for use with UDFs\nand procedures.",
        "In particular, the external access integration specifies those network rules and secrets that UDFs and procedures referencing the\nintegration may use.",
        "The external access integration will be used by an administrator to manage access to external network locations from UDFs and procedures.\nThe integration specifies only those locations and credentials allowed for use by UDFs and procedures that reference the integration.\nAn administrator can also enable or disable the integration to manage access to external locations.",
        "For security, Snowflake requires that when creating an external access integration, you must use a role that has the following:",
        "The CREATE INTEGRATION privilege on the account.",
        "The USAGE privilege on any secret the integration uses, as well as the USAGE privilege on the secret\u2019s schema.",
        "Code in the following example creates an external access integration called google_apis_access_integration. The integration specifies\nthe google_apis_network_rule network rule (representing the network location) and the oauth_token secret\n(representing credentials).",
        "For more information about this rule and secret, refer to Creating a network rule to represent the external network location and\nCreating a secret to represent credentials.",
        "When using the CREATE FUNCTION or CREATE PROCEDURE command to create a UDF or\nprocedure, you can enable access to external network locations as follows:",
        "Include the EXTERNAL_ACCESS_INTEGRATIONS parameter, setting its value to one or more integrations.",
        "Each integration you specify allows access to the external network locations and secrets the integration specifies.",
        "Include the SECRETS parameter, setting its value to one or more secrets and the names you\u2019ll use to access them from handler code.",
        "The secrets you specify as values must also be specified in the external access integration.",
        "In handler code, access the secret to retrieve credentials for authenticating with the external network location.",
        "Note",
        "Always use a Snowflake secret to represent credentials rather than including the credentials as literal values in code. In addition to\nprotecting credentials, using a secret makes it possible to audit and manage use of the credentials because only those granted the\nREAD privilege on the secret may use an integration containing it in a UDF or procedure.",
        "Snowflake limits the total number of connections that can be made from a particular UDF. To avoid running into resource exhaustion issues,\nreuse connections as much as possible. You can achieve this by creating the TCP client or session once during the UDF initialization,\nthen using it in the UDF handler for the rest of the query.",
        "For security, Snowflake requires that when creating a UDF or procedure, you must use a role that has the following:",
        "The READ privilege on any secret it references, as well the USAGE privilege on the secret\u2019s schema.",
        "The USAGE privilege on any integration it references.",
        "Requiring these privileges enables an administrator to manage the set of users who can enable external access. For more information, refer\nto GRANT <privileges> and Access control privileges.",
        "Code in the following example creates a UDF called google_translate_python, specifying an external access integration called\ngoogle_apis_access_integration (refer to Creating an external access integration for details).\nThe integration specifies a network rule (representing an external network location) and secret (representing credentials) that a UDF\nreferencing the integration is allowed to use. For more information about this rule and secret, refer to\nCreating a network rule to represent the external network location and Creating a secret to represent credentials.",
        "The Python handler code uses the _snowflake.get_oauth_access_token function to retrieve the OAuth token from the secret, then uses\nthe token to authenticate with the external location. The handler code may make a request to the specified URL because that URL\u2019s host is\nlisted in the network rule specified by the integration.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}