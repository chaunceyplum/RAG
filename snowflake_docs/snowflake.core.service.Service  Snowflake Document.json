{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/reference/latest/_autosummary/snowflake.core.service.Service",
    "title": "snowflake.core.service.Service | Snowflake Documentation",
    "paragraphs": [
        "Bases: BaseModel",
        "A model object representing the Service resource.",
        "Constructs an object of type Service with the provided properties.",
        "name (str) \u2013 A Snowflake object identifier.",
        "compute_pool (str) \u2013 Specifies the name of the compute pool in your account on which to run the service.",
        "spec (ServiceSpec)",
        "status (str, optional) \u2013 The current status of the service.",
        "external_access_integrations (List[str], optional) \u2013 Specifies the names of the external access integrations that allow your service to access external sites.",
        "query_warehouse (str, optional) \u2013 A Snowflake object identifier.",
        "comment (str, optional) \u2013 Specifies a comment for the service.",
        "auto_resume (bool, optional) \u2013 Specifies whether to automatically resume a service when a service function or ingress is called.",
        "current_instances (int, optional) \u2013 The current number of instances for the service.",
        "target_instances (int, optional) \u2013 The target number of service instances that should be running as determined by Snowflake.",
        "min_ready_instances (int, optional) \u2013 The minimum number of ready service instances to declare the service as READY.",
        "min_instances (int, optional) \u2013 Specifies the minimum number of service instances to run.",
        "max_instances (int, optional) \u2013 Specifies the maximum number of service instances to run.",
        "database_name (str, optional) \u2013 A Snowflake object identifier.",
        "schema_name (str, optional) \u2013 A Snowflake object identifier.",
        "owner (str, optional) \u2013 Role that owns the service.",
        "dns_name (str, optional) \u2013 Snowflake-assiged DNS name of the service. The DNS name enables service-to-service communications.",
        "created_on (datetime, optional) \u2013 Timestamp when the service was created.",
        "updated_on (datetime, optional) \u2013 Timestamp when the service was last updated.",
        "resumed_on (datetime, optional) \u2013 Timestamp when the service was last resumed.",
        "owner_role_type (str, optional) \u2013 The role type of the service owner.",
        "is_job (bool, optional) \u2013 True if the service is a job service; false otherwise.",
        "spec_digest (str, optional) \u2013 The unique and immutable identifier representing the service spec content.",
        "is_upgrading (bool, optional) \u2013 TRUE, if Snowflake is in the process of upgrading the service.",
        "managing_object_domain (str, optional) \u2013 The domain of the managing object (for example, the domain of the notebook that manages the service). NULL if the service is not managed by a Snowflake entity.",
        "managing_object_name (str, optional) \u2013 The name of the managing object (for example, the name of the notebook that manages the service). NULL if the service is not managed by a Snowflake entity.",
        "Create a new model by parsing and validating input data from keyword arguments.",
        "Raises [ValidationError][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.",
        "self is explicitly positional-only to allow self as a field name.",
        "Methods",
        "Create an instance of Service from a dict.",
        "Create an instance of Service from a JSON string.",
        "Returns the dictionary representation of the model using alias.",
        "Return the dictionary representation of the model without readonly properties.",
        "Returns the JSON representation of the model using alias.",
        "Returns the string representation of the model using alias.",
        "Was this page helpful?"
    ]
}