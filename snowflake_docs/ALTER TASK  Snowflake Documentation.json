{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/alter-task",
    "title": "ALTER TASK | Snowflake Documentation",
    "paragraphs": [
        "Modifies the properties for an existing task.",
        "For information about tasks, see Introduction to tasks.",
        "CREATE TASK , DROP TASK , SHOW TASKS , DESCRIBE TASK",
        "Identifier for the task to alter. If the identifier contains spaces or special characters, the entire string must be enclosed in double\nquotes. Identifiers enclosed in double quotes are also case-sensitive.",
        "Specifies the action to perform on the task:",
        "RESUME brings a suspended task to the \u2018Started\u2019 state. Note that accounts are currently limited to a maximum of 30000 started\ntasks.",
        "Before resuming the root task of your Task Graph, resume all child tasks. To recursively resume the root task\u2019s child\ntasks, use SYSTEM$TASK_DEPENDENTS_ENABLE.",
        "SUSPEND puts the task into a \u2018Suspended\u2019 state.",
        "If the task schedule is set to an interval (number MINUTE), the base interval time for the schedule is reset to the current\ntime the task is resumed.",
        "The base interval time starts the interval counter from the current clock time. For example, if an INTERVAL value of 10 is set and\nthe task is resumed at 9:03 AM, then the task runs at 9:13 AM, 9:23 AM, and so on. Note that we only guarantee that tasks don\u2019t execute\nbefore their set interval occurs. In the current example, the task could first run at 9:14 AM, but won\u2019t run at 9:12 AM.",
        "Specifies the names of one or more current predecessor tasks for this child task in a task graph.",
        "When all predecessors for a child task are removed, then the former child task becomes either a standalone task or a root task, depending on\nwhether other tasks identify this former child task as their predecessor. If the former child task becomes a root task, this task is suspended\nby default and must be resumed manually.",
        "Specifies the names of one or more existing tasks to add as predecessors for this child task in a task graph.\nEach child task in a task graph runs when all predecessor tasks finish their runs successfully. For more information, see the description\nof the AFTER parameter in CREATE TASK.",
        "Each child task is limited to 100 predecessor tasks.",
        "Specifies either or both of the following:",
        "One (or more) properties to set for the task (separated by blank spaces, commas, or new lines). For more details about the properties you\ncan set, see CREATE TASK.",
        "A comma-separated list of session parameters to set for the session when the task runs. A task supports all session parameters. For the\ncomplete list, see Parameters.",
        "Specifies the tag name and the tag string value.",
        "The tag value is always a string, and the maximum number of characters for the tag value is 256.",
        "For information about specifying tags in a statement, see Tag quotas for objects and columns.",
        "Specifies one (or more) properties and/or session parameters to unset for the task, which resets them to the defaults.",
        "You can reset multiple properties/parameters with a single ALTER statement; however, each property/parameter must be separated by a\ncomma. When resetting a property/parameter, specify only the name; specifying a value for the property/parameter will return an error.",
        "Specifies the SQL code to execute when the task runs:",
        "Single SQL statement",
        "Call to a stored procedure",
        "Procedural logic using Snowflake Scripting",
        "Note that currently, Snowsight and the Classic Console do not support creating or modifying tasks to use Snowflake Scripting.\nInstead, use SnowSQL or another command-line client.",
        "Note",
        "Verify that the SQL code you reference in a task executes as expected before you create the task. Tasks are intended to\nautomate SQL code that has already been tested thoroughly.",
        "Specifies a Boolean SQL expression. When a task is triggered, it validates the conditions of the expression to determine whether to\nexecute. If the conditions of the expression are not met, then the task skips the current run. Any tasks that identify this task\nas a predecessor also do not run.",
        "Validating the conditions of the WHEN expression does not require a virtual warehouse. The validation is instead processed in the cloud\nservices layer. A nominal charge accrues each time a task evaluates its WHEN condition and does not run. The charges accumulate each time\nthe task is triggered until it runs. At that time, the charge is converted to Snowflake credits and added to the compute resource usage\nfor the task run.",
        "Generally the compute time to validate the condition is insignificant compared to task execution time. As a best practice, align\nscheduled and actual task runs as closely as possible. Avoid task schedules that are wildly out of synch with actual task runs. For\nexample, if data is inserted into a table with a stream roughly every 24 hours, don\u2019t schedule a task that checks for stream data every\nminute. The charge to validate the WHEN expression with each run is generally insignificant, but the charges are cumulative.",
        "Note that daily consumption of cloud services that falls below the\n10% quota of the daily usage of the compute resources accumulates no cloud services charges.",
        "Currently, the following functions are supported for evaluation in the SQL expression:",
        "Indicates whether a specified stream contains change tracking data. Used to run a triggered task if no schedule is defined for the\ntask. You can also use this to skip the current task run if the stream contains no change data.",
        "If the result is FALSE, then the task does not run.",
        "Retrieves the return value for the predecessor task in a task graph.\nUsed to decide whether the task should run based on the returned result.",
        "Remove the WHEN condition that you have specified.",
        "Resuming or suspending a task (using ALTER TASK \u2026 RESUME or ALTER TASK \u2026 SUSPEND, respectively) requires either the OWNERSHIP or\nOPERATE privilege on the task.",
        "When a task is resumed, Snowflake verifies that the role with the OWNERSHIP privilege on the task also has the USAGE privilege on the\nwarehouse assigned to the task, as well as the global EXECUTE TASK privilege; if not, an error is produced.",
        "Only account administrators (users with the ACCOUNTADMIN role) can grant the EXECUTE TASK privilege to a role. For ease of use, we recommend\ncreating a custom role (e.g. TASKADMIN) and assigning the EXECUTE TASK privilege to this role. Any role that can grant privileges\n(e.g. SECURITYADMIN or any role with the MANAGE GRANTS privilege) can then grant this custom role to any task owner role to allow altering\ntheir own tasks. For instructions for creating custom roles and role hierarchies, see Configuring access control.",
        "Only the task owner (i.e. the role with the OWNERSHIP privilege on the task) can set or unset properties on a task.",
        "When altering configuration you cannot update individual key-value pairs. Rather you must supply the entire replacement json string\nrepresenting the complete configuration.",
        "A standalone task must be suspended before it can be modified.",
        "The root task in a task graph must be suspended before any\ntask in the task graph is modified, a child task is suspended or resumed, or a child task is added (using ALTER TASK \u2026 AFTER).",
        "A task graph is limited to a maximum of 1000 tasks total (including the root task) in either a resumed or suspended state.",
        "To recursively resume all dependent tasks tied to a root task in a task graph, query the SYSTEM$TASK_DEPENDENTS_ENABLE\nfunction rather than enabling each task individually (using ALTER TASK \u2026 RESUME).",
        "By default, a DML statement executed without explicitly starting a transaction is automatically committed on success or rolled back on failure\nat the end of the statement. This behavior is called autocommit and is controlled with the AUTOCOMMIT parameter. This parameter\nmust be set to TRUE. If the AUTOCOMMIT parameter is set to FALSE at the account level, then set the parameter to TRUE for the\nindividual task (using ALTER TASK \u2026 SET AUTOCOMMIT = TRUE).",
        "When a task is suspended, any current run of the task (i.e. a run with an EXECUTING state in the TASK_HISTORY\noutput) is completed. To abort the run of the specified task, execute the SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS\nfunction.",
        "The compute resources for individual runs of a task are either managed by Snowflake (i.e. the serverless compute model) or a\nuser-specified virtual warehouse. To convert a task that relies on a warehouse to the serverless compute model, unset the\nWAREHOUSE.",
        "If a task fails with an unexpected error, you can receive a notification about the error.\nFor more information on configuring task error notifications refer to Enabling notifications for tasks.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "Regarding the finalizer task:",
        "When you SET FINALIZE = <root task name>, this function configures a normal task to be a finalizer task associated with the\ngiven root task.",
        "When you UNSET FINALIZE, a finalizer task changes to a normal standalone task with no schedule or predecessor.",
        "SET FINALIZE conflicts with SET SCHEDULE and ADD AFTER. A task with an existing schedule or predecessor will\nalso fail the SET FINALIZE query.",
        "To alter the root task\u2019s defined finalizer task, first use UNSET FINALIZE to unset the finalizer task and then use\nSET FINALIZE = <root task name> to update the root task\u2019s finalizer task.",
        "The root task must be suspended before the finalizer task is modified, set, or unset.",
        "The following example initiates operation of a task:",
        "The following example converts a task to the serverless compute model and sets xsmall as the amount of compute resources to provision\nfor the first serverless runs of the task:",
        "The following example sets the TIMEZONE and CLIENT_TIMESTAMP_TYPE_MAPPING session parameters for the session in which the task runs:",
        "The following example sets a different schedule for a task:",
        "The following example removes the current predecessor tasks for the mytask child task (pred_task1, pred_task2) and replace them\nwith a different predecessor task (pred_task3):",
        "The following example changes the SQL statement associated with a task. The task now queries the CURRENT_VERSION function when it runs:",
        "The following example modifies the WHEN condition associated with a task. When triggered (on a schedule or after the predecessor task runs\nsuccessfully), the task now runs only when the mystream stream contains data:",
        "Update an existing task with new or replacement configuration.",
        "Remove configuration from an existing task.",
        "Was this page helpful?",
        "On this page"
    ]
}