{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/create-row-access-policy",
    "title": "CREATE ROW ACCESS POLICY | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading,\nplease contact Snowflake Support.",
        "Creates a new row access policy in the current/specified schema or replaces an existing row access policy.",
        "After creating a row access policy, add the policy to a table using an ALTER TABLE command or a view using an ALTER VIEW\ncommand.",
        "Row access policy DDL",
        "Snowflake supports the following syntax to create a row access policy.",
        "Identifier for the row access policy; must be unique for your schema.",
        "The identifier value must start with an alphabetic character and cannot contain spaces or special characters unless the entire\nidentifier string is enclosed in double quotes (e.g. \u201cMy object\u201d). Identifiers enclosed in double quotes are also case-sensitive.",
        "For more details, see Identifier requirements",
        "The signature for the row access policy.",
        "A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values come\nfrom the database object (e.g. table or view) to be protected by the row access policy.",
        "A row access policy must evaluate to true or false. A user that queries a table protected by a row access policy sees rows in the output\nbased on how the body is written.",
        "SQL expression that operates on the argument values in the signature to determine which rows to return for a query on a table that is\nprotected by a row access policy.",
        "The body can be any boolean-valued SQL expression. Snowflake supports expressions that invoke\nUser-defined functions overview, Writing external functions, and expressions that use sub-queries.",
        "Specifies a comment for the row access policy.",
        "Default: No value",
        "A role used to execute this SQL command must have the following\nprivileges at a minimum:",
        "Privilege",
        "Object",
        "Notes",
        "CREATE ROW ACCESS POLICY",
        "Schema",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "For instructions on creating a custom role with a specified set of privileges, see Creating custom roles.",
        "For general information about roles and privilege grants for performing SQL actions on\nsecurable objects, see Overview of Access Control.",
        "For additional details on masking policy DDL and privileges, see Managing Column-level Security.",
        "Including one or more subqueries in the policy body may cause errors. When possible, limit the\nnumber of subqueries, limit the number of JOIN operations, and simplify WHERE clause conditions.",
        "If a database object has both a row access policy and one or more masking policy, the row access\npolicy is evaluated first.",
        "For more information on row access policies during query runtime, see Understanding row access policies.",
        "A given table or view column can be specified in either a masking policy signature or a row access policy signature. In other words, the\nsame column cannot be specified in both a masking policy signature and a row access policy signature at the same time.",
        "For more information, see CREATE MASKING POLICY.",
        "You cannot change the policy signature (i.e. argument name or input/output data type) using\nCREATE OR REPLACE ROW ACCESS POLICY if the policy is attached to a table or view, or using\nALTER ROW ACCESS POLICY. If you need to change the signature, execute a\nDROP ROW ACCESS POLICY statement on the policy and create a new row access policy.",
        "If the policy body contains a mapping table lookup, create a centralized mapping table and store the mapping table\nin the same database as the protected table. This is particularly important if the body calls the\nIS_DATABASE_ROLE_IN_SESSION function. For details, see the function usage notes.",
        "A data sharing provider cannot create a row access policy in a reader account.",
        "If you specify the CURRENT_DATABASE or CURRENT_SCHEMA function in the\nbody of a masking or row access policy, the function returns the database or schema that contains the protected table, not the database or\nschema in use for the session.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "CREATE OR REPLACE <object> statements are atomic. That is, when an object is replaced, the old object is deleted and the new object is created in a single transaction.",
        "These examples use the CURRENT_ROLE context function. If role activation and role hierarchy is\nnecessary in the policy conditions, use IS_ROLE_IN_SESSION.",
        "The following row access policy allows users whose CURRENT_ROLE is the it_admin custom role to see rows that contain the\nemployee ID number (i.e. empl_id) in the query result.",
        "The following row access policy allows users to view rows in the query result if either of the following two conditions are true:",
        "The current role is the sales_executive_role custom role. Call the CURRENT_ROLE function to\ndetermine the current role.",
        "The current role is the sales_manager custom role and the query specifies a sales_region that corresponds to the\nsalesmanageregions mapping table.",
        "Where:",
        "The name of the row access policy.",
        "The signature for the row access policy.",
        "A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values\ncome from the table to be protected by the row access policy.",
        "Specifies the application of the row access policy.",
        "Note that the <expression> of the row access policy immediately follows the right-arrow (i.e. ->).",
        "The expression can be any boolean-valued SQL expression. Snowflake supports expressions that invoke UDFs, External Functions, and\nexpressions that use subqueries.",
        "The first condition of the row access policy expression that allows users with the sales_executive_role custom role to view data.",
        "The second condition of the row access policy expression that uses a subquery.",
        "The subquery requires the CURRENT_ROLE to be the sales_manager custom role with the executed query on\nthe data to specify a region listed in the salesmanagerregions mapping table.",
        "The following row access policy specifies two attributes in the policy signature:",
        "Where:",
        "The name of the row access policy.",
        "The signature for the row access policy.",
        "A signature specifies a set of attributes that must be considered to determine whether the row is accessible. The attribute values\ncome from the table to be protected by the row access policy.",
        "Determines the application of the row access policy.",
        "The returned value determines whether the user has access to a given row on the database object to which the row access policy is\nadded.",
        "For additional examples, see Use row access policies.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}