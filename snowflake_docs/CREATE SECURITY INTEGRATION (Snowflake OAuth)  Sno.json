{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/create-security-integration-oauth-snowflake",
    "title": "CREATE SECURITY INTEGRATION (Snowflake OAuth) | Snowflake Documentation",
    "paragraphs": [
        "Creates a new Snowflake OAuth security integration in the account or replaces an existing integration. A Snowflake OAuth security\nintegration enables clients that support OAuth to redirect users to an authorization page and generate access tokens (and optionally,\nrefresh tokens) for access to Snowflake.",
        "For information about creating other types of security integrations (e.g. External OAuth), see CREATE SECURITY INTEGRATION.",
        "ALTER SECURITY INTEGRATION (Snowflake OAuth) , DROP INTEGRATION , SHOW INTEGRATIONS",
        "Snowflake OAuth for partner applications",
        "Snowflake OAuth for custom clients",
        "String that specifies the identifier (i.e. name) for the integration; must be unique in your account.",
        "In addition, the identifier must start with an alphabetic character and cannot contain spaces or special characters unless the entire\nidentifier string is enclosed in double quotes\n(e.g. \"My object\"). Identifiers enclosed in double quotes are also case-sensitive.",
        "For more details, see Identifier requirements.",
        "Specify the type of integration:",
        "OAUTH: Creates a security interface between Snowflake and a client that supports OAuth.",
        "Specify the client type:",
        "CUSTOM: Creates an OAuth interface between Snowflake and a custom client.",
        "partner_application: Creates an OAuth interface between Snowflake and a partner application. Supported values are:",
        "TABLEAU_DESKTOP: Tableau Desktop version 2019.1 or higher.",
        "TABLEAU_SERVER: Tableau Cloud. If Tableau Cloud is connecting to Snowflake using private connectivity to\nthe Snowflake service, be sure to specify OAUTH_CLIENT = CUSTOM instead.",
        "LOOKER: The Looker business intelligence tool.",
        "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI.",
        "This parameter is required when OAUTH_CLIENT = LOOKER. For details, see the example in the\nLooker documentation.",
        "Required only when OAUTH_CLIENT = CUSTOM (i.e. when creating an integration for a custom client)",
        "Specifies the type of client being registered. Snowflake supports both confidential and public clients. Confidential clients can store a\nsecret. They run in a protected area where end users cannot access them. For example, a secured service deployed on the cloud could be a\nconfidential client; whereas, a client running on a desktop or distributed through an app store could be a public client.",
        "Specifies the client URI. After a user is authenticated, the web browser is redirected to this URI. The URI must be protected by TLS\n(Transport Layer Security) unless the optional OAUTH_ALLOW_NON_TLS_REDIRECT_URI parameter is set to TRUE.",
        "Do not include query parameters sent with the redirect URI in the request to the\nauthorization endpoint. For example, if the value of the redirect_uri query parameter\nin the request to the authorization endpoint is https://www.example.com/connect?authType=snowflake, make sure the OAUTH_REDIRECT_URI\nparameter is set to https://www.example.com/connect.",
        "Specifies whether to initiate operation of the integration or suspend it.",
        "TRUE enables the integration.",
        "FALSE disables the integration for maintenance. Any integration between Snowflake and a third-party service fails to work.",
        "Default FALSE. If a security integration is created without setting this parameter to TRUE, Snowflake sets the parameter\nto FALSE.",
        "Valid when OAUTH_CLIENT = <partner_application> (i.e. when creating an integration for a partner application)",
        "Boolean that specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. If set to FALSE, a refresh token is not issued regardless of the integer value set in\nOAUTH_REFRESH_TOKEN_VALIDITY. User consent is revoked, and the user must confirm authorization again.",
        "Default: TRUE",
        "Note",
        "If this parameter is set to FALSE and the security integration also has ENABLED = TRUE, the Snowflake OAuth flow\nrepeats, a non-configurable access token is issued, and the access token is valid for 600 seconds (10 minutes). After this access token\nexpires, the user must authenticate again.",
        "Setting this parameter to FALSE and ENABLED = FALSE results in no tokens being issued and the integration is disabled.",
        "Integer that specifies how long refresh tokens should be valid (in seconds). This can be used to expire the refresh token periodically.\nNote that OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.",
        "When a refresh token expires, the application will need to direct the user through the authorization flow again to obtain a new refresh\ntoken.",
        "The supported minimum, maximum, and default values are as follows:",
        "Application",
        "Minimum",
        "Maximum",
        "Default",
        "Tableau Desktop",
        "60 (1 minute)",
        "36000 (10 hours)",
        "36000 (10 hours)",
        "Tableau Cloud",
        "60 (1 minute)",
        "7776000 (90 days)",
        "7776000 (90 days)",
        "Custom client",
        "3600 (1 hour)",
        "7776000 (90 days)",
        "7776000 (90 days)",
        "If you have a business need to lower the minimum value or raise the maximum value, ask your account administrator to send a request to\nSnowflake Support.",
        "IMPLICIT: Default secondary roles set in the user properties are activated by default in the session being opened.",
        "NONE: Default secondary roles are not supported in the session being opened.",
        "Default: NONE",
        "Comma-separated list of Snowflake roles that a user cannot explicitly consent to using after authenticating\n(e.g. 'BLOCKED_ROLES_LIST = ('custom_role1', 'custom_role2')).",
        "By default, Snowflake prevents the ACCOUNTADMIN, ORGADMIN, and SECURITYADMIN roles from authenticating. To allow these privileged roles to\nauthenticate, use the ALTER ACCOUNT command to set the OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST\naccount parameter to FALSE.",
        "Specifies a comment for the integration.",
        "Default: No value",
        "Valid when OAUTH_CLIENT = CUSTOM (i.e. when creating an integration for a custom client)",
        "If TRUE, allows setting OAUTH_REDIRECT_URI to a URI not protected by TLS. We highly recommend use of TLS to\nprevent man-in-the-middle OAuth redirects for use in phishing attacks.",
        "Default: FALSE",
        "Boolean that specifies whether Proof Key for Code Exchange (PKCE) should be required for the integration.",
        "By default, PKCE is optional and is enforced only if the code_challenge and code_challenge_method parameters are both\nincluded in the authorization endpoint URL. However, we highly recommend that your client require PKCE for all authorizations\nto make the OAuth flow more secure. For more information, see Configure Snowflake OAuth for custom clients.",
        "Default: FALSE",
        "IMPLICIT: Default secondary roles set in the user properties are activated by default in the session being opened.",
        "NONE: Default secondary roles are not supported in the session being opened.",
        "Default: NONE",
        "Comma-separated list of Snowflake roles that a user does not need to explicitly consent to using after authenticating (e.g.\nPRE_AUTHORIZED_ROLES_LIST = ('custom_role1', 'custom_role2')). Note that the ACCOUNTADMIN, ORGADMIN, and SECURITYADMIN roles cannot be included in this list.",
        "Note",
        "This parameter is supported for confidential clients only.",
        "Comma-separated list of Snowflake roles that a user cannot explicitly consent to using after authenticating\n(e.g. BLOCKED_ROLES_LIST = ('custom_role1', 'custom_role2')).",
        "Note that the ACCOUNTADMIN, ORGADMIN, and SECURITYADMIN roles are included in this list by default; however, if these roles should\nbe removed for your account, ask your account administrator to send a request to Snowflake Support.",
        "Boolean that specifies whether to allow the client to exchange a refresh token for an access token when the current access token has\nexpired. If set to FALSE, a refresh token is not issued. User consent is revoked, and the user must confirm authorization again.",
        "Default: TRUE",
        "Integer that specifies how long refresh tokens should be valid (in seconds). This can be used to expire the refresh token periodically.\nNote that OAUTH_ISSUE_REFRESH_TOKENS must be set to TRUE.",
        "Note that if your organization would like the minimum or maximum values lowered or raised, respectively, ask your account administrator\nto send a request to Snowflake Support.",
        "86400 (1 day) to 7776000 (90 days)",
        "7776000",
        "Specifies an existing network policy. This network policy controls network traffic that is\nattempting to exchange an authorization code for an access or refresh token or to use a refresh token to obtain a new\naccess token.",
        "If there are also network policies set for the account or user, see Network policy precedence.",
        "Specifies an RSA public key.",
        "Specifies a second RSA public key. Used for key rotation.",
        "Specifies a comment for the integration.",
        "Default: No value",
        "A role used to execute this SQL command must have the following\nprivileges at a minimum:",
        "Privilege",
        "Object",
        "Notes",
        "CREATE INTEGRATION",
        "Account",
        "Only the ACCOUNTADMIN role has this privilege by default. The privilege can be granted to additional roles as needed.",
        "For instructions on creating a custom role with a specified set of privileges, see Creating custom roles.",
        "For general information about roles and privilege grants for performing SQL actions on\nsecurable objects, see Overview of Access Control.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "CREATE OR REPLACE <object> statements are atomic. That is, when an object is replaced, the old object is deleted and the new object is created in a single transaction.",
        "The following example creates an OAuth integration with the default settings:",
        "View the integration settings using DESCRIBE INTEGRATION:",
        "The following example creates an OAuth integration with refresh tokens that expire after 10 hours (36000 seconds). The integration blocks\nusers from starting a session with SYSADMIN as the active role:",
        "The following example creates an OAuth integration with the default settings:",
        "View the integration settings using DESCRIBE INTEGRATION:",
        "The following example creates an OAuth integration with refresh tokens that expire after 1 day (86400 seconds). The integration blocks\nusers from starting a session with SYSADMIN as the active role:",
        "The following example creates an OAuth integration that uses key pair authentication. The integration allows refresh tokens, which expire\nafter 1 day (86400 seconds). The integration blocks users from starting a session with SYSADMIN as the active role:",
        "Was this page helpful?",
        "On this page"
    ]
}