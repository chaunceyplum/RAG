{
    "url": "https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-snowflake-scripting",
    "title": "Writing stored procedures in Snowflake Scripting | Snowflake Documentation",
    "paragraphs": [
        "This topic provides an introduction to writing a stored procedure in SQL by using Snowflake Scripting.\nFor more information about Snowflake Scripting, see the Snowflake Scripting Developer Guide.",
        "To write a stored procedure that uses Snowflake Scripting:",
        "Use the CREATE PROCEDURE or WITH \u2026 CALL \u2026 command with\nLANGUAGE SQL.",
        "In the body of the stored procedure (the AS clause), you use a\nSnowflake Scripting block.",
        "Note",
        "If you are creating a Snowflake Scripting procedure in SnowSQL or the\nClassic Console, you must use\nstring literal delimiters (' or $$) around the body of the stored procedure.",
        "For details, see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector.",
        "You can capture log and trace data as your handler code executes. For more information, refer to\nLogging, tracing, and metrics.",
        "Note the following:",
        "The same rules around caller\u2019s rights vs. owner\u2019s rights apply to these stored procedures.",
        "The same considerations and guidelines in Working with stored procedures apply to Snowflake Scripting stored procedures.",
        "The following is an example of a simple stored procedure that returns the value of the argument that is passed in:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "The following is an example of creating and calling an anonymous stored procedure by using the\nWITH \u2026 CALL \u2026 command:",
        "Note that in an anonymous stored procedure, you must use string literal delimiters ('\nor $$) around the body of the procedure.",
        "If you pass in any arguments to your stored procedure, you can refer to those arguments by name in any Snowflake Scripting\nexpression. See the next sections for more details:",
        "Simple example of using arguments passed to a stored procedure",
        "Using an argument in a SQL statement (binding)",
        "Using an argument as an object identifier",
        "Using an argument when building a string for a SQL statement",
        "The following stored procedure uses the values of the arguments in IF and\nRETURN statements.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "As is the case with Snowflake Scripting variables, if you need to use an argument in a SQL statement, put a colon (:) in front\nof the argument name. (See Using a variable in a SQL statement (binding).)",
        "The following sections contain examples that use bind variables in stored procedures:",
        "Example that uses a bind variable in a WHERE clause",
        "Example of using a bind variable to set the value of a property",
        "Example that uses bind variables to set parameters in a command",
        "The following stored procedure uses the id argument in the WHERE clause of a SELECT statement. In the WHERE\nclause, the argument is specified as :id.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "In addition, the TO_QUERY function provides a simple syntax for accepting a SQL string\ndirectly in the FROM clause of a SELECT statement. For a comparison of the TO_QUERY function with dynamic SQL,\nsee Constructing SQL at runtime.",
        "The following stored procedure uses the comment argument to add a comment for a table in a\nCREATE TABLE statement. In the statement, the argument is specified as :comment.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "View the comment for the table by querying the TABLES view\nin the INFORMATION_SCHEMA:",
        "You can also view the comment by running a SHOW TABLES command.",
        "Assume you have a stage named st with CSV files:",
        "You want to load the data in the CSV files into a table named test_bind_stage_and_load:",
        "The following stored procedure uses the FROM, ON_ERROR, and VALIDATION_MODE parameters in\na COPY INTO <table> statement. In the statement, the parameter values are specified as\n:my_stage_name, :on_error, and :valid_mode, respectively.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "If you need to use an argument to refer to an object (e.g. a table name in the FROM clause of a SELECT statement),  use the\nIDENTIFIER keyword to indicate that the argument represents an object identifier. For\nexample:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "This example executes a CREATE TABLE \u2026 AS SELECT (CTAS) statement in a stored procedure based on\nthe table names provided in arguments.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Before calling the procedure, create a simple table and insert data:",
        "Call the stored procedure to create a new table that is based on this table:",
        "Note that if you are building a SQL statement as a string to be passed to\nEXECUTE IMMEDIATE (see Assigning a query to a declared RESULTSET), do not prefix the argument with a\ncolon. For example:",
        "If you need to return tabular data (e.g. data from a RESULTSET) from your stored procedure, specify\nRETURNS TABLE(\u2026) in your CREATE PROCEDURE statement.",
        "If you know the Snowflake data types of the columns in the returned table, specify the column\nnames and types in the RETURNS TABLE().",
        "Otherwise (e.g. if you are determining the column types during run time), you can omit the column names and types:",
        "Note",
        "Currently, in the RETURNS TABLE(...) clause, you can\u2019t specify GEOGRAPHY as a column type. This\napplies whether you are creating a stored or anonymous procedure.",
        "If you attempt to specify GEOGRAPHY as a column type, calling the stored procedure results in the error:",
        "To work around this issue, you can omit the column arguments and types in RETURNS TABLE().",
        "If you need to return the data in a RESULTSET, use TABLE() in your\nRETURN statement.",
        "For example:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "In a stored procedure, if you need to call another stored procedure, use one of the following approaches:",
        "Calling a stored procedure without using the returned value",
        "Using the value returned from a stored procedure call",
        "Use a CALL statement to call the stored procedure (as you normally would).",
        "If you need to pass in any variables or arguments as input arguments in the CALL statement, remember to use a colon (:) in\nfront of the variable name. (See Using a variable in a SQL statement (binding).)",
        "The following is an example of a stored procedure that calls another stored procedure but does not depend on the return value.",
        "First, create a table for use in the example:",
        "Then, create the stored procedure that you will call from another stored procedure:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Next, create a second stored procedure that calls the first stored procedure:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Finally, call the second stored procedure:",
        "If are calling a stored procedure that returns a scalar value and you need to access that value, use the\nINTO :snowflake_scripting_variable clause in the CALL statement to capture the value in a\nSnowflake Scripting variable.",
        "The following example calls the get_row_count stored procedure that was defined in\nUsing an argument as an object identifier.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following is an example of calling the stored procedure:",
        "If the stored procedure returns a table, you can capture the return value by setting a\nRESULTSET to a string containing the CALL statement. (See\nAssigning a query to a declared RESULTSET.)",
        "To retrieve the return value from the call, you can use a\nCURSOR for the RESULTSET. For example:",
        "By default, Snowflake Scripting stored procedures run with owner\u2019s rights. When a\nstored procedure runs with owner\u2019s rights, it can\u2019t access\nSQL (or session) variables.",
        "However, a caller\u2019s rights stored procedure can read the caller\u2019s session variables and use\nthem in the logic of the stored procedure. For example, a caller\u2019s rights stored procedure\ncan use the value in a SQL variable in a query. To create a stored procedure that runs with\ncaller\u2019s rights, specify the EXECUTE AS CALLER parameter in the\nCREATE PROCEDURE statement.",
        "These examples illustrate this key difference between caller\u2019s rights and owner\u2019s rights stored\nprocedures. They attempt to use SQL variables in two ways:",
        "Set a SQL variable before calling the stored procedure, then use the SQL variable inside the stored\nprocedure.",
        "Set a SQL variable inside the stored procedure, then use the SQL variable after returning from the stored\nprocedure.",
        "Both using the SQL variable and setting the SQL variable work correctly in a caller\u2019s rights stored procedure.\nBoth fail when using an owner\u2019s rights stored procedure, even if the caller is the owner.",
        "For more information about owner\u2019s rights and caller\u2019s rights, see Understanding caller\u2019s rights and owner\u2019s rights stored procedures.",
        "This example uses a SQL variable in a stored procedure.",
        "First, set a SQL variable in a session:",
        "Create a simple stored procedure that runs with caller\u2019s rights and uses this SQL variable:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure:",
        "Set the SQL variable to a different value:",
        "Call the procedure again to see that the returned value has changed:",
        "You can set a SQL variable in a stored procedure that\u2019s running with caller\u2019s rights. For\nmore information, including guidelines for using SQL variables in stored procedures, see\nCaller\u2019s rights stored procedures.",
        "Note",
        "Although you can set a SQL variable inside a stored procedure and leave it set after the end of the procedure,\nSnowflake does not recommend doing this.",
        "This example sets a SQL variable in a stored procedure.",
        "First, set a SQL variable in a session:",
        "Confirm the value of the SQL variable:",
        "For example, the following stored procedure sets the SQL variable example_set_variable\nto a new value and returns the new value:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure:",
        "Confirm the new value of the SQL variable:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}