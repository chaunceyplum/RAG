{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/create-view",
    "title": "CREATE VIEW | Snowflake Documentation",
    "paragraphs": [
        "Creates a new view in the current/specified schema, based on a query of one or more existing tables (or any other valid query expression).",
        "This command supports the following variants:",
        "CREATE OR ALTER VIEW: Creates a view if it doesn\u2019t exist or alters an existing view.",
        "ALTER VIEW , DROP VIEW , SHOW VIEWS , DESCRIBE VIEW",
        "CREATE OR ALTER <object>",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Creates a new view if it doesn\u2019t already exist, or updates the properties of an existing view to match those defined in the statement.\nA CREATE OR ALTER VIEW statement follows the syntax rules of a CREATE VIEW statement and has the same limitations as an\nALTER VIEW statement.",
        "The CREATE OR ALTER VIEW command doesn\u2019t support changing a view definition once a view is created. This limitation is inherited\nfrom the ALTER VIEW command.",
        "The following modifications are supported:",
        "Converting to (or reverting from) a secure view.",
        "Adding, overwriting, removing a comment for a view or a view\u2019s columns.",
        "Enabling or disabling change tracking for a view.",
        "For more information, see CREATE OR ALTER VIEW usage notes and CREATE OR ALTER <object>.",
        "Specifies the identifier for the view; must be unique for the schema in which the view is created.",
        "In addition, the identifier must start with an alphabetic character and cannot contain spaces or special characters unless the\nentire identifier string is enclosed in double quotes (e.g. \"My object\"). Identifiers enclosed in double quotes are also\ncase-sensitive.",
        "For more details, see Identifier requirements.",
        "Specifies the query used to create the view. Can be on one or more source tables or any other valid SELECT statement. This\nquery serves as the text/definition for the view and is displayed in the SHOW VIEWS output and the\nVIEWS Information Schema view.",
        "Specifies that the view is secure. For more information about secure views, see Working with Secure Views.",
        "Default: No value (view is not secure)",
        "Specifies that the view persists only for the duration of the session that you created it in. A\ntemporary view and all its contents are dropped at the end of the session.",
        "The synonyms and abbreviations for TEMPORARY (e.g. GLOBAL TEMPORARY) are provided for compatibility with other databases\n(e.g. to prevent errors when migrating CREATE VIEW statements). Views created with any of these keywords appear and behave identically to\na view created with the TEMPORARY keyword.",
        "Default: No value. If a view is not declared as TEMPORARY, the view is permanent.",
        "If you want to avoid unexpected conflicts, avoid naming temporary views after views that already exist in the schema.",
        "If you created a temporary view with the same name as another view in the schema, all queries and operations used on the view only affect\nthe temporary view in the session, until you drop the temporary view. If you drop the view, you drop the temporary view, and not the view\nthat already exists in the schema.",
        "Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table\nexpression). For more information about recursive views in general, and the RECURSIVE keyword in particular,\nsee Recursive Views (Non-materialized Views Only) and the recursive view examples below.",
        "Default: No value (view is not recursive, or is recursive only by using a CTE)",
        "If you want to change the name of a column or add a comment to a column in the new view,\ninclude a column list that specifies the column names and (if needed) comments about\nthe columns. (You do not need to specify the data types of the columns.)",
        "If any of the columns in the view are based on expressions (not just simple column names), then you must supply\na column name for each column in the view. For example, the column names are required in the following case:",
        "You can specify an optional comment for each column. For example:",
        "Comments are particularly helpful when column names are cryptic.",
        "To view comments, use DESCRIBE VIEW.",
        "Specifies the masking policy to set on a column.",
        "Specifies the arguments to pass into the conditional masking policy SQL expression.",
        "The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the\ncolumn to which the masking policy is set.",
        "The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result\nwhen a query is made on the first column.",
        "If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal\nmasking policy.",
        "Specifies the projection policy to set on a column.",
        "Specifies whether to enable change tracking on the view.",
        "TRUE enables change tracking on the view. This setting adds a pair of hidden columns to the source table and begins\nstoring change tracking metadata in the columns. These columns consume a small amount of storage.",
        "The change-tracking metadata can be queried using the CHANGES clause for\nSELECT statements, or by creating and querying one or more streams on the table.",
        "FALSE does not enable change tracking on the view.",
        "Retains the access permissions from the original view when a new view is created using the OR REPLACE clause.",
        "The parameter copies all privileges, except OWNERSHIP, from the existing view to the new view. The new view does not\ninherit any future grants defined for the object type in the schema. By default, the role that executes the CREATE VIEW statement owns\nthe new view.",
        "If the parameter is not included in the CREATE VIEW statement, then the new view does not inherit any explicit access\nprivileges granted on the original view but does inherit any future grants defined for the object type in the schema.",
        "Note that the operation to copy grants occurs atomically with the CREATE VIEW statement (i.e. within the same transaction).",
        "Default: No value (grants are not copied)",
        "Specifies a comment for the view.",
        "Default: No value",
        "Specifies the row access policy to set on a view.",
        "Specifies the aggregation policy to set on a view.",
        "Use the optional ENTITY KEY parameter to define which columns uniquely identity an entity within the view. For more information, see\nImplementing entity-level privacy with aggregation policies.",
        "Specifies the tag name and the tag string value.",
        "The tag value is always a string, and the maximum number of characters for the tag value is 256.",
        "For information about specifying tags in a statement, see Tag quotas for objects and columns.",
        "A role used to execute this SQL command must have the following\nprivileges at a minimum:",
        "Privilege",
        "Object",
        "Notes",
        "CREATE VIEW",
        "Schema",
        "Required to create a new view.",
        "SELECT",
        "Table, external table, view",
        "Required on any tables and/or views queried in the view definition.",
        "APPLY",
        "Masking policy, row access policy, tag",
        "Required only when applying a masking policy, row access policy, object tags, or any combination of these\ngovernance features when creating views.",
        "OWNERSHIP",
        "View",
        "A role must be granted or inherit the OWNERSHIP privilege on the object to create a temporary object that has the same name as the object\nthat already exists in the schema.",
        "Required to execute a CREATE OR ALTER VIEW statement for an existing view.",
        "OWNERSHIP is a special privilege on an object that is automatically granted to the role that created the object, but can also be transferred using the GRANT OWNERSHIP command to a different role by the owning role (or any role with the MANAGE GRANTS privilege).",
        "Note that in a managed access schema, only the schema owner (i.e. the role with the OWNERSHIP privilege on the schema) or a role with the MANAGE GRANTS privilege can grant or revoke privileges on objects in the schema, including future grants.",
        "The USAGE privilege on the parent database and schema are required to perform operations on any object in a schema.",
        "For instructions on creating a custom role with a specified set of privileges, see Creating custom roles.",
        "For general information about roles and privilege grants for performing SQL actions on\nsecurable objects, see Overview of Access Control.",
        "A view definition can include an ORDER BY clause\n(e.g. create view v1 as select * from t1 ORDER BY column1). However, Snowflake recommends excluding\nthe ORDER BY clause from most view definitions. If the view is used in contexts that don\u2019t benefit from sorting,\nthen the ORDER BY clause adds unnecessary costs. For example, when the view is used in a join, and the join\ncolumn is not the same as the ORDER BY column, the extra cost to sort the view\u2019s results is typically wasted.\nIf you need to sort the query results, it\u2019s usually more efficient to specify ORDER BY in the query that uses\nthe view, rather than in the view itself.",
        "If you specify the CURRENT_DATABASE or CURRENT_SCHEMA function in the\ndefinition of the view, the function returns the database or schema that contains the view, not the database or schema in\nuse for the session.",
        "The definition for a view is limited to 95KB.",
        "Nesting levels are limited to a maximum of 20. An attempt to create a view that is nested more than 20 times will fail.",
        "View definitions are not dynamic. A view is not automatically updated if the underlying sources are modified such that they no longer\nmatch the view definition, particularly when columns are dropped. For example:",
        "A view is created referencing a specific column in a source table, and the column is subsequently dropped from the table.",
        "A view is created using SELECT * from a table, and changes are made to the columns in the table, such as:",
        "A column is dropped.",
        "A column is added.",
        "The column order changes.",
        "In these scenarios, querying the view returns a column-related error.",
        "If a source table for a view is dropped, querying the view returns an object does not exist error.",
        "A schema cannot contain a table and view with the same name. A CREATE VIEW statement produces an error if a table with the same name\nalready exists in the schema.",
        "When a view is created, unqualified references to tables and other database\nobjects are resolved in the view\u2019s schema, not in the session\u2019s current schema. Similarly, objects that are\npartially qualified (i.e. schema.object) are resolved in the view\u2019s database, not in the session\u2019s current database.",
        "The SEARCH_PATH session parameter (if present) is ignored.",
        "Using OR REPLACE is the equivalent of using DROP VIEW on the existing view and then creating a new view with the same\nname.",
        "CREATE OR REPLACE <object> statements are atomic. That is, when an object is replaced, the old object is deleted and the new object is created in a single transaction.",
        "This means that any queries concurrent with the CREATE OR REPLACE VIEW operation use either the old or new view version.",
        "Recreating or swapping a view drops its change data, which makes any stream on the view stale. A\nstale stream is unreadable.",
        "Using COPY GRANTS:",
        "Data sharing:",
        "If the existing secure view was shared to another account, the replacement view is also shared.",
        "If the existing secure view was shared with your account as a data consumer, and access was further granted to other roles in the\naccount (using GRANT IMPORTED PRIVILEGES on the parent database), access is also granted to the replacement view.",
        "The SHOW GRANTS output for the replacement view lists the grantee for the copied privileges as the role\nthat executed the CREATE VIEW statement, with the current timestamp when the statement was executed.",
        "When you create a view and then grant privileges on that view to a role, the role can use the view even if the role does not have\nprivileges on the underlying table(s) that the view accesses. This means that you can create a view to give a role access to only\na subset of a table. For example, you can create a view that accesses medical billing information but not medical diagnosis\ninformation in the same table. Then you can grant privileges on that view to the \u201caccountant\u201d role so that the accountants\ncan look at the billing information without seeing the patient\u2019s diagnosis.",
        "By design, the SHOW VIEWS command does not provide information about secure views. To view information about a secure view,\nyou must use the VIEWS view in the Information Schema and you must use the role that owns\nthe view.",
        "A recursive view must provide a column name list.",
        "When defining recursive views, prevent infinite recursion. The WHERE clause in the recursive view definition should enable the\nrecursion to stop eventually, typically by running out of data after processing the last level of a hierarchy of data.",
        "Regarding metadata:",
        "Attention",
        "Customers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake.",
        "When creating a view with a masking policy on one or more view columns, or a row access policy added to the view, use the\nPOLICY_CONTEXT function to simulate a query on the column(s) protected by a masking policy and the\nview protected by a row access policy.",
        "Do not create views with streams as source objects unless the same role owns both the view and source streams (i.e. the same role,\nor a lower role in a role hierarchy, has the OWNERSHIP privilege on the view and source streams). Instead, create views that have\nthe objects to track as the source objects. Then, create streams on those views. For more information, see\nStreams on Views.",
        "Some vendors support the FORCE keyword:",
        "Snowflake accepts the FORCE keyword, but does not support it. In other words, you do not get a syntax error if you use this\nkeyword, but using FORCE does not force the creation of a view if the underlying database objects (table(s) or view(s))\ndo not already exist. Attempting to create a view of a non-existent table or view results in an error message even if the\nFORCE keyword is used.",
        "When looking up the tables in a view, some vendors search for unqualified table names in the active schema; Snowflake searches\nfor unqualified table names\nin the same schema as the view.\nWhen porting to Snowflake, consider updating views to use fully-qualified table names.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "All limitations of the ALTER VIEW command apply.",
        "This command doesn not support the following:",
        "Changing the definition of a view.",
        "Renaming a view using the RENAME TO parameter.",
        "Adding or changing tags and policies. Any existing tags and policies are preserved.",
        "Converting a TEMPORARY view into a permanent view, or vice versa.",
        "Create a view in the current schema, with a comment, that selects all the rows from a table:",
        "The next example is the same as the previous example, except the view is secure:",
        "The following shows two ways of creating recursive views:",
        "First, create and load the table:",
        "Create a view using a recursive CTE, and then query the view.",
        "Create a view using the keyword RECURSIVE, and then query the view.",
        "Create a table my_table with one column:",
        "Create a view named v2 that selects column a from table my_table:",
        "Create or alter view v2. Add or update the COMMENT and CHANGE_TRACKING properties for the view:",
        "Create or alter view v2 to add a comment to a column:",
        "The absence of a previously set property in the CREATE OR ALTER VIEW statement results\nin unsetting it. In the following example, unset the COMMENT property for the view v2 from the previous example:",
        "Was this page helpful?",
        "On this page"
    ]
}