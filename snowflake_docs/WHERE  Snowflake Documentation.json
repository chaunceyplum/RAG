{
    "url": "https://docs.snowflake.com/en/sql-reference/constructs/where",
    "title": "WHERE | Snowflake Documentation",
    "paragraphs": [
        "Query syntax",
        "The WHERE clause specifies a condition that acts as a filter. You can use the WHERE clause to:",
        "Filter the result of the FROM clause in a SELECT statement.",
        "Specify which rows to operate on in an UPDATE,\nMERGE, or DELETE .",
        "A boolean expression. The expression can include\nlogical operators,\nsuch as AND, OR, and NOT.",
        "Predicates in the WHERE clause behave as if they are evaluated after the FROM clause (though the optimizer\ncan reorder predicates if it does not impact the results). For example, if a predicate in the WHERE clause\nreferences columns of a table participating in an outer join in the FROM clause, the filter operates on the rows\nreturned from the join (which might be padded with NULLs).",
        "Use care when creating expressions that might evaluate NULLs.",
        "In most contexts, the boolean expression NULL = NULL returns NULL, not TRUE. Consider using\nIS [ NOT ] NULL to compare NULL values.",
        "In a WHERE clause, if an expression evaluates to NULL, the row for that expression is removed from the result\nset (i.e. it is filtered out).",
        "The maximum number of expressions in a list is 16,384. For example, the limit applies to the number of expressions\nin the following SELECT statement:",
        "To avoid reaching the limit, perform a join with a lookup table that contains the expression values, rather than specifying\nthe values using the IN clause. For example, when the expression values in the previous example are added to a lookup table\nnamed mylookuptable, you can run the following query successfully even if the lookup table has more than 16,384 rows:",
        "Although the WHERE clause is primarily for filtering, the WHERE clause can also be used to express many types\nof joins. For conceptual information about joins, see Working with Joins.",
        "A WHERE clause can specify a join by including join conditions, which are boolean expressions that define which row(s) from one\nside of the JOIN match row(s) from the other side of the join.",
        "The following two equivalent queries show how to express an inner join in either the WHERE or FROM clause:",
        "Outer joins can be specified by using either the (+) syntax in the WHERE clause or\nthe OUTER JOIN keywords in the FROM clause.",
        "When you specify an outer join with (+), the WHERE clause applies (+) to each join column of the table that is\n\u201cinner\u201d (defined below).",
        "Note",
        "The result of an outer join contains a copy of all rows from one table. In this topic, the table whose rows are preserved is\ncalled the \u201couter\u201d table, and the other table is called the \u201cinner\u201d table.",
        "In a LEFT OUTER JOIN, the left-hand table is the outer table and the right-hand table is the inner table.",
        "In a RIGHT OUTER JOIN, the right-hand table is the outer table and the left-hand table is the inner table.",
        "The following queries show equivalent left outer joins, one of which specifies the join in the FROM clause and one of which\nspecifies the join in the WHERE clause:",
        "In the second query, the (+) is on the right hand side and identifies the inner table.",
        "Sample output for both queries is below:",
        "If you are joining a table on multiple columns, use the (+) notation\non each column in the inner table (t2 in the example below):",
        "Note",
        "There are many restrictions on where the (+) annotation can appear; FROM clause outer joins are more expressive. Snowflake suggests using the\n(+) notation only when porting code that already uses that notation.\nNew code should avoid that notation.",
        "The restrictions include:",
        "You cannot use the (+) notation to create FULL OUTER JOIN; you\ncan only create LEFT OUTER JOIN and RIGHT OUTER JOIN.\nThe following is not valid. The statement causes the following error message:\nSQL compilation error: Outer join predicates form a cycle between 'T1' and 'T2'.",
        "If a table participates in more than one join in a query, the (+) notation can specify the table as the inner table in only\none of those joins. The following is not valid because t1 serves as the inner table in two joins.\nThe statement causes the following error message:\nSQL compilation error: Table 'T1' is outer joined to multiple tables: 'T3' and 'T2'.",
        "Note, however, that you can use (+) to identify different tables as\ninner tables in different joins in the same SQL statement. The following\nexample joins three tables: t1, t2, and t3, two of which are\ninner tables (in different joins). This statement performs:",
        "A LEFT OUTER JOIN between t1 and t2 (where t2 is the inner table).",
        "A LEFT OUTER JOIN between t2 and t3 (where t3 is the inner table).",
        "The (+) may be immediately adjacent to the table and column name, or it may be separated by whitespace. Both of the following\nare valid:",
        "A query can contain joins specified in both the FROM ... ON ... clause and the WHERE clause. However, specifying\njoins in different clauses of the same query can make that query more difficult to read.",
        "Support for joins in the WHERE clause is primarily for backwards compatibility with older queries that do not use\nthe FROM ... ON ... syntax. Snowflake recommends using FROM ... ON ... when writing new queries with joins.\nFor details, see JOIN.",
        "The following show some simple uses of the WHERE clause:",
        "This example uses a subquery and shows all the invoices that have\nsmaller-than-average billing amounts:",
        "To specify a join in the WHERE clause, list the tables to be joined in the FROM clause, separating the tables\nwith a comma. Specify the join condition as a filter in the WHERE clause, as shown in the following example:",
        "Note",
        "The comma operator is older syntax for INNER JOIN. The following statement shows the recommended way to\nperform a join using newer syntax. The query below is equivalent to the query above:",
        "This next section shows 3-table joins and shows the difference in behavior with 0, 1, or 2 (+) outer join\noperators.",
        "Before executing the queries, create and load the tables to use in the joins:",
        "Execute a 3-way inner join. This does not use (+) (or the OUTER keyword) and is therefore an inner join. The\noutput includes only rows for which there is a department, project, and employee:",
        "Perform an outer join. This is similar to the preceding statement except that this uses (+) to make the\nsecond join a right outer join. The effect is that if a department is included in the output, then all of that\ndepartment\u2019s projects are included, even if those projects have no employees:",
        "Perform two outer joins.\nThis is the same as the preceding statement except that this uses (+) to make both joins into\nouter joins. The effect is that all departments are included (even if they have no projects or employees yet) and\nall projects associated with departments are included (even if they have no employees yet). Note that the output\nexcludes projects that have no department.",
        "(Remember, however, that Snowflake recommends using the OUTER keyword in the FROM clause rather than using\nthe (+) operator in the WHERE clause.)",
        "Was this page helpful?",
        "On this page"
    ]
}