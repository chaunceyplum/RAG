{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/tutorials/common-setup",
    "title": "Common setup for Snowflake Python APIs tutorials | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "This topic provides instructions for the common setup required for all Snowflake Python APIs tutorials available in this documentation.",
        "Before starting your setup, take a look at the Snowflake Python APIs structure. The following table lists some common modules in the API:",
        "Module",
        "Description",
        "snowflake.core",
        "Defines an iterator to represent certain resource instances fetched from the Snowflake database.",
        "snowflake.core.database",
        "Manages Snowflake databases.",
        "snowflake.core.schema",
        "Manages Snowflake schemas.",
        "snowflake.core.table",
        "Manages Snowflake tables.",
        "snowflake.core.task",
        "Manages Snowflake tasks.",
        "snowflake.core.task.dagv1",
        "A set of APIs at a higher level than the task APIs in snowflake.core.task to more conveniently manage task graphs (DAGs).",
        "snowflake.core.compute_pool",
        "Manages compute pools in Snowpark Container Services.",
        "snowflake.core.image_repository",
        "Manages image repositories in Snowpark Container Services.",
        "snowflake.core.service",
        "Manages services in Snowpark Container Services.",
        "For a complete list of the APIs currently available, see the\nAPI reference documentation.",
        "The snowflake.core module represents the entry point to the core Snowflake Python APIs that manage Snowflake objects. To use the\nAPI, you follow a common pattern:",
        "Establish a session using Snowpark or a Python Connector connection, representing your connection to Snowflake.",
        "Import and instantiate the Root class from snowflake.core, and pass the Snowpark session object as an argument.",
        "You use the resulting Root object to access the rest of the methods and types in the API.",
        "The following code is an example of what this pattern typically looks like:",
        "For more information about various connection options and attributes, see\nConnect to Snowflake with the Snowflake Python APIs.",
        "Note",
        "The Snowflake Python APIs can establish a connection to Snowflake using either a Snowpark session or a Python Connector connection. The\npreceding example uses a Snowpark session.",
        "Continue to the next step to start setting up the API and your development environment!",
        "Important",
        "The Snowflake Python APIs currently supports the following versions of Python:",
        "3.9",
        "3.10",
        "3.11",
        "Before installing the API, you need to activate a Python environment.",
        "In this tutorial, you can use conda or a virtual environment (venv).",
        "To create and activate a conda or virtual environment, open a command line terminal and run the following commands:",
        "The Snowflake Python APIs package is available in PyPI.",
        "To install the API package in the new conda or virtual environment, run the following command:",
        "This tutorial walks through code examples that you can run in a Jupyter notebook. Each step in the tutorial incrementally showcases the\ncapabilities of the Snowflake Python APIs.",
        "You start by setting up your development environment so that you can run the code examples in a notebook.",
        "Create a file named $HOME/.snowflake/connections.toml with the following connection parameters, and update it with your real\ncredentials:",
        "Note",
        "The account parameter does not support account identifiers with\nunderscores. You must specify an account identifier with dashes in place of any underscores. For more information, see\nAccount name in your organization.",
        "This example specifies these parameters as the default connection to Snowflake in your environment by creating a connection\ndefinition named default.",
        "Use one of the following methods to open a notebook:",
        "Open a new notebook in a code editor that supports Jupyter notebooks (such as Visual Studio Code).",
        "To open a notebook in your browser, start a notebook server with the command jupyter notebook.",
        "To ensure that your environment can run a notebook, run conda install notebook in your terminal before starting the\nnotebook server.",
        "In the first cell of the notebook, run the following import statements:",
        "Note",
        "After running this cell, you might be prompted to set your Python kernel. If you activated a conda environment, select conda as the\nPython kernel (for example, something similar to: ~/miniconda3/envs/<your conda env>/bin/python).",
        "In this cell, you import Snowpark and the core APIs that manage Snowflake objects.",
        "In the next cell, run the following code:",
        "In this cell, you set the Snowflake connection parameters for your session by creating a connection_params dictionary specifying the\nconnection definition named default that you previously configured.",
        "To establish a connection to Snowflake, create a Snowpark session and pass connection_params as an argument:",
        "To create a Root object, pass your session object to the Root constructor:",
        "And that\u2019s it! By running the code in these four cells, you\u2019re now ready to use the Snowflake Python APIs.",
        "You can now explore Tutorial 1: Create a database, schema, table, and warehouse.",
        "Was this page helpful?"
    ]
}