{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/snowpark/api/snowflake.snowpark.Column",
    "title": "snowflake.snowpark.Column | Snowflake Documentation",
    "paragraphs": [
        "Bases: object",
        "Represents a column or an expression in a DataFrame.",
        "To access a Column object that refers a column in a DataFrame, you can:",
        "Use the column name.",
        "Use the functions.col() function.",
        "Use the DataFrame.col() method.",
        "Use the index operator [] on a dataframe object with a column name.",
        "Use the dot operator . on a dataframe object with a column name.",
        "Snowflake object identifiers, including column names, may or may not be case sensitive depending on a set of rules.\nRefer to Snowflake Object Identifier Requirements for details.\nWhen you use column names with a DataFrame, you should follow these rules.",
        "The returned column names after a DataFrame is evaluated follow the case-sensitivity rules too.\nThe above df was created with column name \u201cname\u201d while the returned column name after collect() was called became \u201cNAME\u201d.\nIt\u2019s because the column is regarded as ignore-case so the Snowflake database returns the upper case.",
        "To create a Column object that represents a constant value, use snowflake.snowpark.functions.lit():",
        "This class also defines utility functions for constructing expressions with Columns.\nColumn objects can be built with the operators, summarized by operator precedence,\nin the following table:",
        "Operator",
        "Description",
        "x[index]",
        "Index operator to get an item out of a Snowflake ARRAY or OBJECT",
        "**",
        "Power",
        "-x, ~x",
        "Unary minus, unary not",
        "*, /, %",
        "Multiply, divide, remainder",
        "+, -",
        "Plus, minus",
        "&",
        "And",
        "|",
        "Or",
        "==, !=, <, <=, >, >=",
        "Equal to, not equal to, less than, less than or equal to, greater than, greater than or equal to",
        "The following examples demonstrate how to use Column objects in expressions:",
        "When you use |, &, and ~ as logical operators on columns, you must always enclose column expressions\nwith parentheses as illustrated in the above example, because their order precedence is higher than ==, <, etc.",
        "Do not use and, or, and not logical operators on column objects, for instance, (df.col1 > 1) and (df.col2 > 2) is wrong.\nThe reason is Python doesn\u2019t have a magic method, or dunder method for them.\nIt will raise an error and tell you to use |, & or ~, for which Python has magic methods.\nA side effect is if column: will raise an error because it has a hidden call to bool(a_column), like using the and operator.\nUse if a_column is None: instead.",
        "To access elements of a semi-structured Object and Array, use [] on a Column object:",
        "This class has methods for the most frequently used column transformations and operators. Module snowflake.snowpark.functions defines many functions to transform columns.",
        "Methods",
        "alias(alias)",
        "Returns a new renamed Column.",
        "as_(alias)",
        "Returns a new renamed Column.",
        "asc()",
        "Returns a Column expression with values sorted in ascending order.",
        "asc_nulls_first()",
        "Returns a Column expression with values sorted in ascending order (null values sorted before non-null values).",
        "asc_nulls_last()",
        "Returns a Column expression with values sorted in ascending order (null values sorted after non-null values).",
        "astype(to)",
        "Casts the value of the Column to the specified data type.",
        "between(lower_bound,\u00a0upper_bound)",
        "Between lower bound and upper bound.",
        "bitand(other)",
        "Bitwise and.",
        "bitor(other)",
        "Bitwise or.",
        "bitwiseAnd(other)",
        "Bitwise and.",
        "bitwiseOR(other)",
        "Bitwise or.",
        "bitwiseXOR(other)",
        "Bitwise xor.",
        "bitxor(other)",
        "Bitwise xor.",
        "cast(to)",
        "Casts the value of the Column to the specified data type.",
        "collate(collation_spec)",
        "Returns a copy of the original Column with the specified collation_spec property, rather than the original collation specification property.",
        "contains(string)",
        "Returns true if the column contains string for each row.",
        "desc()",
        "Returns a Column expression with values sorted in descending order.",
        "desc_nulls_first()",
        "Returns a Column expression with values sorted in descending order (null values sorted before non-null values).",
        "desc_nulls_last()",
        "Returns a Column expression with values sorted in descending order (null values sorted after non-null values).",
        "endswith(other)",
        "Returns true if this Column ends with another string.",
        "eqNullSafe(other)",
        "Equal to.",
        "equal_nan()",
        "Is NaN.",
        "equal_null(other)",
        "Equal to.",
        "getField(field)",
        "Accesses an element of ARRAY column by ordinal position, or an element of OBJECT column by key.",
        "getItem(field)",
        "Accesses an element of ARRAY column by ordinal position, or an element of OBJECT column by key.",
        "getName()",
        "Returns the column name (if the column has a name).",
        "get_name()",
        "Returns the column name (if the column has a name).",
        "in_(*vals)",
        "Returns a conditional expression that you can pass to the DataFrame.filter() or where DataFrame.where() to perform the equivalent of a WHERE .",
        "isNotNull()",
        "Is not null.",
        "isNull()",
        "Is null.",
        "is_not_null()",
        "Is not null.",
        "is_null()",
        "Is null.",
        "isin(*vals)",
        "Returns a conditional expression that you can pass to the DataFrame.filter() or where DataFrame.where() to perform the equivalent of a WHERE .",
        "like(pattern)",
        "Allows case-sensitive matching of strings based on comparison with a pattern.",
        "name(alias[,\u00a0variant_is_as])",
        "Returns a new renamed Column.",
        "over([window])",
        "Returns a window frame, based on the specified WindowSpec.",
        "regexp(pattern[,\u00a0parameters])",
        "Returns true if this Column matches the specified regular expression.",
        "rlike(pattern[,\u00a0parameters])",
        "Returns true if this Column matches the specified regular expression.",
        "startswith(other)",
        "Returns true if this Column starts with another string.",
        "substr(start_pos,\u00a0length)",
        "Returns a substring of this string column.",
        "substring(start_pos,\u00a0length)",
        "Returns a substring of this string column.",
        "try_cast(to)",
        "Tries to cast the value of the Column to the specified data type.",
        "within_group(*cols)",
        "Returns a Column expression that adds a WITHIN GROUP clause to sort the rows by the specified columns.",
        "Was this page helpful?"
    ]
}