{
    "url": "https://docs.snowflake.com/en/user-guide/querying-joins",
    "title": "Working with Joins | Snowflake Documentation",
    "paragraphs": [
        "Query syntax",
        "A join combines rows from two tables to create a new combined row that can be used in the query.",
        "Joins are useful when the data in the tables is related. For example, one table might hold information about projects,\nand one table might hold information about employees working on those projects.",
        "The two joined tables usually contain one or more columns in common so that the rows\nin one table can be associated with the corresponding rows in the other table.\nFor example, each row in the projects table might have a unique project ID\nnumber, and each row in the employees table might include the ID number of\nthe project that the employee is currently assigned to.",
        "The join operation specifies (explicitly or implicitly) how to relate rows\nin one table to the corresponding rows in the other table, typically by\nreferencing the common column(s), such as project ID. For example, the following\njoins the project and employee tables shown above:",
        "Although a single join operation can join only two tables, joins can be chained together. The result of a join is\na table-like object, and that table-like object can then be joined to another table-like object. Conceptually,\nthe idea is similar to the following (this is not the actual syntax):",
        "In this pseudo-code, table2 and table3 are joined first. The table that results from that join is then joined with\ntable1.",
        "Joins can be applied not only to tables, but also to other table-like objects. You can join:",
        "A table.",
        "A view (materialized or non-materialized).",
        "A table literal.",
        "An expression that evaluates to the equivalent of a table (containing one or more columns and zero or more\nrows). For example:",
        "The result set returned by a table function.",
        "The result set returned by a subquery that returns a table.",
        "When this topic refers to joining a table, it generally means joining any table-like object.",
        "Note",
        "Snowflake can improve performance by eliminating unnecessary joins. For details, see Understanding How Snowflake Can Eliminate Redundant Joins.",
        "Snowflake supports the following types of joins:",
        "Inner join.",
        "Outer join.",
        "Cross join.",
        "Natural join.",
        "ASOF JOIN.",
        "An inner join pairs each row in one table with the matching row(s) in the other table.",
        "The example below uses an inner join:",
        "In this example, the output table contains two columns named \u201cProject_ID\u201d. One Project_ID column is from the projects\ntable, and one is from the employees table. For each row in the output table, the values in the two Project_ID\ncolumns match because the query specified e.project_id = p.project_id.",
        "The output includes only valid pairs (i.e. rows that match the join condition). In this example there is no row for the\nproject named \u201cNewProject\u201d (which has no employees assigned yet) or the employee named \u201cNewEmployee\u201d (who hasn\u2019t been assigned to\nany projects yet).",
        "An outer join lists all rows in the specified table, even if those rows have no match in the other table. For\nexample, a left outer join between projects and employees lists all projects, including projects that do not\nyet have any employee assigned.",
        "The project named \u201cNewProject\u201d is included in this output even though there is no matching row in the employees table. Because\nthere are no matching employee names for the project named \u201cNewProject\u201d, the employee name is set to NULL.",
        "A right outer join lists all employees (regardless of project).",
        "A full outer join lists all projects and all employees.",
        "A cross join combines each row in the first table with each row in the second table, creating every possible\ncombination of rows (called a \u201cCartesian product\u201d). Because most of the result rows contain parts of rows that are not\nactually related, a cross join is rarely useful by itself. In fact, cross joins are usually the result of accidentally\nomitting the join condition.",
        "The result of a cross join can be very large (and expensive). If the first table has N rows and the second table\nhas M rows, then the result is N x M rows. For example, if the first table has 100 rows and the second table\nhas 1000 rows, then the result set contains 100,000 rows.",
        "The following query shows a cross join:",
        "Note that this query contains no ON clause and no filter.",
        "The output of a cross join can be made more useful by applying a filter in the WHERE clause:",
        "The result of this cross join and filter is the same as the result of the following inner join:",
        "Important",
        "Although the two queries in this example produce the same output when they use the same condition\n(e.project_id = p.project_id) in different clauses (WHERE vs. FROM ... ON ...), it is possible to\nconstruct pairs of queries that use the same condition but that do not produce the same output.",
        "The most common examples involve outer joins. If you execute table1 LEFT OUTER JOIN table2, then for rows in\ntable1 that have no match, the columns that would have come from table2 contain NULL. A filter\nlike WHERE table2.ID = table1.ID filters out rows in which either table2.id or table1.id contains a\nNULL, while an explicit outer join in the FROM ... ON ... clause does not filter out rows with NULL values.\nIn other words, an outer join with a filter might not actually act like an outer join.",
        "A natural join is used when two tables contain columns that have the same name and in which the data in those\ncolumns corresponds. In the employees and projects tables shown above, both tables have columns named \u201cproject_ID\u201d.\nA natural join implicitly constructs the ON clause: ON projects.project_ID = employees.project_ID.",
        "If two tables have multiple columns in common, then all the common columns are used in the ON clause. For example, if you had\ntwo tables that each had columns named \u201ccity\u201d and \u201cprovince\u201d, then a natural join would construct the following ON clause:",
        "ON table2.city = table1.city AND table2.province = table1.province.",
        "The output of a natural join includes only one copy of each of the shared columns. For example, the following query produces a\nnatural join containing all columns in the two tables, except that it omits all but one copy of the redundant project_ID column:",
        "A natural join can be combined with an outer join.",
        "A natural join cannot be combined with an ON clause because the join condition is already implied. However, you\ncan use a WHERE clause to filter the results of a natural join.",
        "Syntactically, there are two ways to join tables:",
        "Use the JOIN operator in the ON sub-clause of the\nFROM clause.",
        "Use the WHERE with the FROM clause.",
        "Snowflake recommends using the ON sub-clause in the FROM clause. The syntax is more flexible. And specifying the predicate\nin the ON clause avoids the problem of accidentally filtering rows with NULLs when using a WHERE clause to\nspecify the join condition for an outer join.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}