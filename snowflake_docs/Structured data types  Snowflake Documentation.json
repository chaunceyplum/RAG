{
    "url": "https://docs.snowflake.com/en/sql-reference/data-types-structured",
    "title": "Structured data types | Snowflake Documentation",
    "paragraphs": [
        "The Snowflake structured types are ARRAY, OBJECT, and MAP. Structured types contain elements or key-value pairs with specific\nSnowflake data types. The following are examples of structured types:",
        "An ARRAY of INTEGER elements.",
        "An OBJECT with VARCHAR and NUMBER key-value pairs.",
        "A MAP that associates a VARCHAR key with a DOUBLE value.",
        "You can use structured types in the following ways:",
        "You can define a structured type column in an Apache Iceberg\u2122 table.",
        "The Apache Iceberg\u2122 data types list, struct, and map correspond\nto the structured ARRAY, structured OBJECT, and MAP types in Snowflake.",
        "A structured type column supports a maximum of 1000 sub-columns.",
        "You use structured types when accessing data from a structured type column in an Iceberg table.",
        "You can cast a semi-structured ARRAY, OBJECT, or VARIANT\nvalue to a corresponding structured type (for example, an ARRAY value to an ARRAY value of INTEGER elements). You can also cast a\nstructured type of a semi-structured type.",
        "Note",
        "Currently, tables other than Iceberg tables don\u2019t support structured types. You can\u2019t add a column of a structured type to a\nregular table.",
        "This topic explains how to use structured types in Snowflake.",
        "When defining a structured type column or casting a value to a structured type, use the syntax described in the following\nsections:",
        "Specifying a structured ARRAY type",
        "Specifying a structured OBJECT type",
        "Specifying a MAP type",
        "To specify a structured ARRAY type, use the following syntax:",
        "Where:",
        "element_type is the Snowflake data type of the elements in this ARRAY.",
        "You can also specify a structured ARRAY, a structured OBJECT, or a MAP as the type of the element.",
        "Note",
        "In the definition of an Iceberg table column, you can\u2019t specify a VARIANT, semi-structured ARRAY, or semi-structured OBJECT\nas the type of the ARRAY element.",
        "NOT NULL specifies that the ARRAY can\u2019t contain any elements that are NULL.",
        "For example, compare the types returned by the SYSTEM$TYPEOF function in the following statement:",
        "The first column expression casts a semi-structured ARRAY value to a structured ARRAY value (an ARRAY of NUMBER elements).",
        "The second column expression specifies a semi-structured ARRAY value.",
        "To specify a structured OBJECT type, use the following syntax:",
        "Where:",
        "key specifies a key for the OBJECT type.",
        "Each key in an OBJECT definition must be unique.",
        "The order of the keys is part of the OBJECT definition. Comparing two OBJECT values that have the same keys in a different order\nisn\u2019t allowed. (A compile time error occurs.)",
        "If you don\u2019t specify any key but specify the parentheses (that is, if you use OBJECT()), the resulting type is a structured\nOBJECT that contains no keys. A structured OBJECT with no keys is different from a semi-structured OBJECT.",
        "value_type is the Snowflake data type of the value corresponding to the key.",
        "You can also specify a structured ARRAY, a structured OBJECT, or a MAP as the type of the value.",
        "Note",
        "In the definition of an Iceberg table column, you can\u2019t specify a VARIANT, semi-structured ARRAY, or semi-structured OBJECT\nas the type of the value corresponding to the OBJECT key.",
        "NOT NULL specifies that the value corresponding to the key can\u2019t be NULL.",
        "For example, compare the types returned by the SYSTEM$TYPEOF function in the following statement:",
        "The first column expression casts a semi-structured OBJECT value to a structured OBJECT value that contains the following keys and values:",
        "A key named str with a VARCHAR value that is not NULL.",
        "A key named num with a NUMBER value.",
        "The second column expression specifies a semi-structured OBJECT value.",
        "To specify a MAP type, use the following syntax:",
        "Where:",
        "key_type is the Snowflake data type of the key for the map. You must use one of\nthe following types for keys:",
        "VARCHAR",
        "NUMBER with the scale 0",
        "You can\u2019t use a floating point data type as the type for the key.",
        "Map keys can\u2019t be NULL.",
        "value_type is the Snowflake data type of the values in the map.",
        "You can also specify a structured ARRAY, a structured OBJECT, or a MAP as the type of the values.",
        "Note",
        "In the definition of an Iceberg table column, you can\u2019t specify a VARIANT, semi-structured ARRAY, or semi-structured OBJECT\nas the type of the value in the MAP.",
        "NOT NULL specifies that the value corresponding to the key can\u2019t be NULL.",
        "The following example casts a semi-structured OBJECT value to a MAP value and uses the SYSTEM$TYPEOF\nfunction to print the resulting type of the value. The MAP associates VARCHAR keys with VARCHAR values.",
        "You can\u2019t use a MAP, structured OBJECT, or structured ARRAY value in a VARIANT, semi-structured OBJECT, or semi-structured ARRAY value. An\nerror occurs in the following situations:",
        "You use a MAP, structured OBJECT, or structured ARRAY value in an OBJECT constant or\nARRAY constant.",
        "You pass a MAP, structured OBJECT, or structured ARRAY value to an OBJECT or ARRAY\nconstructor function.",
        "The following table summarizes rules for converting structured OBJECT, structured\nARRAY, and MAP values to semi-structured OBJECT, ARRAY, and VARIANT values (and vice versa).",
        "Source data type",
        "Target data type",
        "Castable",
        "Coercible",
        "Semi-structured ARRAY",
        "Structured ARRAY",
        "\u2714",
        "\u274c",
        "Semi-structured OBJECT",
        "Structured OBJECT",
        "MAP",
        "\u2714",
        "\u274c",
        "Semi-structured VARIANT",
        "Structured ARRAY",
        "Structured OBJECT",
        "MAP",
        "\u2714",
        "\u274c",
        "Structured ARRAY",
        "Semi-structured ARRAY",
        "\u2714",
        "\u274c",
        "Structured OBJECT",
        "MAP",
        "Semi-structured OBJECT",
        "\u2714",
        "\u274c",
        "Structured ARRAY",
        "Structured OBJECT",
        "MAP",
        "Semi-structured VARIANT",
        "\u2714",
        "\u274c",
        "The following sections explain these rules in more detail.",
        "Explicitly casting a semi-structured type to a structured type",
        "Explicitly casting a structured type to a semi-structured type",
        "Implicit casting a value (coercion)",
        "Casting from one structured type to another",
        "To explicitly cast a value of a semi-structured type to a value of a structured type, you can\ncall the CAST function or use the :: operator.",
        "Note",
        "TRY_CAST isn\u2019t supported for structured types.",
        "You can only cast values of the following semi-structured types to values of the corresponding structured type;\notherwise, a runtime error occurs.",
        "Semi-structured type",
        "Structured type that you can cast to",
        "ARRAY",
        "Structured ARRAY",
        "OBJECT",
        "MAP or structured OBJECT",
        "VARIANT",
        "MAP or structured ARRAY or OBJECT",
        "The next sections provide more detail about how the types are cast:",
        "Casting semi-structured ARRAY and VARIANT values to structured ARRAY values",
        "Casting semi-structured OBJECT and VARIANT values to structured OBJECT values",
        "Casting semi-structured OBJECT and VARIANT values to MAP values",
        "The following steps demonstrate how to cast a semi-structured ARRAY or VARIANT value to an ARRAY value\nof NUMBER elements:",
        "Or:",
        "When you cast a semi-structured ARRAY or VARIANT value to a structured ARRAY value, note the following:",
        "Each element of the ARRAY value is cast to the specified type of the ARRAY.",
        "Casting the ARRAY column to ARRAY(VARCHAR) converts each value to a VARCHAR value:",
        "If the element can\u2019t be cast to the specified type (for example, casting ['a', 'b', 'c'] to ARRAY(NUMBER)), the cast fails.",
        "If the ARRAY value contains NULL elements and the ARRAY type specifies NOT NULL (for example, casting [1, NULL, 3] to\nARRAY(NUMBER NOT NULL), the cast fails.",
        "Elements that are JSON null values are converted to NULL, if the target element type doesn\u2019t\nsupport JSON nulls (that is, the target type isn\u2019t a semi-structured ARRAY, OBJECT, or VARIANT).",
        "For example, if you are casting to ARRAY(NUMBER), JSON null values are converted to NULL because NUMBER doesn\u2019t support JSON\nnulls.",
        "On the other hand, if you are casting to ARRAY(VARIANT), JSON null values aren\u2019t converted to NULL because VARIANT supports\nJSON nulls.",
        "The following steps demonstrate how to cast a semi-structured OBJECT or VARIANT value to a structured OBJECT value\ncontaining the city and state key-value pairs (which are VARCHAR values):",
        "Or:",
        "When you cast a semi-structured OBJECT or VARIANT value to a structured OBJECT value, note the following:",
        "The OBJECT value can\u2019t contain any additional keys that aren\u2019t specified in the OBJECT type.",
        "If there are additional keys, the cast fails.",
        "If the OBJECT value is missing a key that is specified in the OBJECT type, the cast fails.",
        "The value of each key in the OBJECT value is converted to the specified type for that key.",
        "If a value can\u2019t be cast to the specified type, the cast fails.",
        "If the value for a key is a JSON null value, the value is converted to NULL when the target value\ntype doesn\u2019t support JSON nulls (that is, the target type is not a semi-structured ARRAY, OBJECT, or VARIANT).",
        "For example, if you are casting to OBJECT(city VARCHAR), JSON null values are converted to NULL because VARCHAR doesn\u2019t\nsupport JSON nulls.",
        "On the other hand, if you are casting to OBJECT(city VARIANT), JSON null values aren\u2019t converted to NULL because VARIANT\nsupports JSON nulls.",
        "The following statements demonstrate how to cast a semi-structured OBJECT or VARIANT value to a MAP value\nthat associates a VARCHAR key with a VARCHAR value:",
        "Or:",
        "When you cast a semi-structured OBJECT or VARIANT value to a MAP value, note the following:",
        "If the keys and values do not match the specified types, the keys and values are converted to the specified types.",
        "If the keys and values can\u2019t be cast to the specified types, the cast fails.",
        "If the value for a key is a JSON null value, the value is converted to NULL when the target value\ntype doesn\u2019t support JSON nulls (that is, the target type is not a semi-structured ARRAY, OBJECT, or VARIANT).",
        "For example, if you are casting to MAP(VARCHAR, VARCHAR), JSON null values are converted to NULL because VARCHAR doesn\u2019t\nsupport JSON nulls.",
        "On the other hand, if you are casting to MAP(VARCHAR, VARIANT), JSON null values aren\u2019t converted to NULL because VARIANT\nsupports JSON nulls.",
        "To explicitly cast a value of a structured type to a value of a semi-structured type, you can\ncall the CAST function, use the :: operator, or call one of the conversion functions\n(for example, TO_ARRAY, TO_OBJECT,\nor TO_VARIANT).",
        "Note",
        "TRY_CAST isn\u2019t supported with structured types.",
        "Structured type",
        "Semi-structured type that you can cast to",
        "Structured ARRAY",
        "ARRAY",
        "MAP or structured OBJECT",
        "OBJECT",
        "MAP, structured ARRAY, or structured OBJECT",
        "VARIANT",
        "For example:",
        "If col_structured_array is ARRAY(VARCHAR) type:",
        "CAST(col_structured_array AS ARRAY) returns a semi-structured ARRAY value.",
        "CAST(col_structured_array AS VARIANT) returns a VARIANT value that holds a semi-structured ARRAY value.",
        "If col_structured_object is OBJECT(name VARCHAR, state VARCHAR) type:",
        "CAST(col_structured_object AS OBJECT) returns a semi-structured OBJECT value.",
        "CAST(col_structured_object AS VARIANT) returns a VARIANT value that holds a semi-structured OBJECT value.",
        "If col_map is MAP(VARCHAR, VARCHAR) type:",
        "CAST(col_map AS OBJECT) returns a semi-structured OBJECT value.",
        "CAST(col_map AS VARIANT) returns a VARIANT value that holds a semi-structured OBJECT value.",
        "Note the following:",
        "When you are casting to a semi-structured OBJECT value, the order of keys in the structured OBJECT value isn\u2019t preserved.",
        "When you are casting a structured OBJECT or MAP value to a semi-structured OBJECT or VARIANT value, any NULL values are converted to\nJSON null values.",
        "If you are casting a structured ARRAY value to a VARIANT value, NULL values are preserved as is.",
        "If you are casting a MAP value that uses a NUMBER type for keys, the MAP keys are converted to strings in the returned OBJECT value.",
        "The following rules apply to implicitly casting (coercion) from a value of one structured type to\na value of another structured type:",
        "A structured type value can be coerced to another structured type value if the two basic types are the same:",
        "An ARRAY value of one type can be coerced to an ARRAY value of another type, provided that the first element type is coercible to the\nsecond element type.",
        "An element type can be coerced to another element type in either of the following cases:",
        "Both types are numeric. The following cases are supported:",
        "Both use the same numeric type but possibly differ in precision and/or scale.",
        "Coercing NUMBER to FLOAT (and vice versa).",
        "Both types are timestamps. The following cases are supported:",
        "Both use the same type but possibly differ in precision.",
        "Coercing TIMESTAMP_LTZ to TIMESTAMP_TZ (and vice versa).",
        "For example:",
        "An ARRAY(NUMBER) value can be coerced to an ARRAY(DOUBLE) value.",
        "An ARRAY(DATE) value can\u2019t be coerced to an ARRAY(NUMBER) value.",
        "An OBJECT value with one type definition can be coerced to an OBJECT value of with another type definition only if all of the following\nare true:",
        "Both OBJECT types have the same number of keys.",
        "Both OBJECT types use the same names for keys.",
        "The keys in both OBJECT types are in the same order.",
        "The type of each value in one OBJECT type can be coerced to the type of the corresponding value in the other OBJECT type.",
        "As is the case with element types in structured ARRAY values, you can coerce the type of one value to another type only if:",
        "Both types are numeric. The following cases are supported:",
        "Both use the same numeric type but possibly differ in precision and/or scale.",
        "Coercing NUMBER to FLOAT (and vice versa).",
        "Both types are timestamps. The following cases are supported:",
        "Both use the same type but possibly differ in precision.",
        "Coercing TIMESTAMP_LTZ to TIMESTAMP_TZ (and vice versa).",
        "For example:",
        "An OBJECT(city VARCHAR, zipcode NUMBER) value can be coerced to an OBJECT(city VARCHAR, zipcode DOUBLE) value.",
        "An OBJECT(city VARCHAR, zipcode NUMBER) value can\u2019t be coerced to an OBJECT(city VARCHAR, zipcode DATE) value.",
        "A MAP value with one value type can be coerced to a MAP value with a different value type if:",
        "Both value types are numeric. The following cases are supported:",
        "Both use the same numeric type but possibly differ in precision and/or scale.",
        "Coercing NUMBER to FLOAT (and vice versa).",
        "Both value types are timestamps. The following cases are supported:",
        "Both use the same type but possibly differ in precision.",
        "Coercing TIMESTAMP_LTZ to TIMESTAMP_TZ (and vice versa).",
        "For example, a MAP(VARCHAR, NUMBER) value can be coerced to a MAP(VARCHAR, DOUBLE) value.",
        "A MAP value with one key type can be coerced to a MAP value with a different key type if both key types use the same integer NUMERIC\ntype that differ only in precision.",
        "For example, a MAP(VARCHAR, NUMBER) value can\u2019t be coerced to a MAP(NUMBER, NUMBER) value.",
        "A structured type value can\u2019t be coerced to a semi-structured value (and vice versa).",
        "A VARCHAR value can\u2019t be coerced to a structured type value.",
        "You can call the CAST function or use the :: operator to cast from a value of\none structured type to a value of another structured type. You can cast values from and to the following structured types:",
        "For structured ARRAYs:",
        "You can cast an ARRAY value of one type to an ARRAY value of another type.",
        "For structured OBJECTs:",
        "You can use a cast to\nchange the order of key-value pairs in an OBJECT value.",
        "You can use a cast to\nchange the names of the keys in an OBJECT value.",
        "You can use a cast to\nadd keys to an OBJECT value.",
        "You can cast a structured OBJECT value to a MAP value.",
        "For MAP values:",
        "You can cast a MAP value with keys and values of a specific type to a MAP value with keys and values of a different type.",
        "You can cast a MAP value to a structured OBJECT value.",
        "Note",
        "TRY_CAST isn\u2019t supported with structured types.",
        "If it isn\u2019t possible to cast the values from one type to the other, the cast fails. For example, attempting to cast an\nARRAY(BOOLEAN) value to an ARRAY(DATE) value fails.",
        "The following example casts an ARRAY(NUMBER) value to an ARRAY(VARCHAR) value:",
        "The following example changes the order of key-value pairs in a structured OBJECT value:",
        "To change the key names in a structured OBJECT value, specify the RENAME FIELDS keywords at the end of CAST. For example:",
        "If the type that you are casting to has additional key-value pairs that aren\u2019t present in the original structured OBJECT value,\nspecify the ADD FIELDS keywords at the end of CAST. For example:",
        "The values for the newly added keys are set to NULL. If you want to assign a value to these keys, call the\nOBJECT_INSERT function instead.",
        "The following sections explain how to construct structured ARRAY, structured OBJECT, and MAP values.",
        "Using SQL functions to construct structured ARRAY and OBJECT values",
        "Using ARRAY and OBJECT constants to construct structured ARRAY and OBJECT values",
        "Constructing a MAP value",
        "The following functions construct semi-structured ARRAY values:",
        "ARRAY_CONSTRUCT",
        "ARRAY_CONSTRUCT_COMPACT",
        "ARRAY_AGG",
        "TO_ARRAY",
        "The following functions construct semi-structured OBJECT values:",
        "OBJECT_CONSTRUCT",
        "OBJECT_CONSTRUCT_KEEP_NULL",
        "OBJECT_AGG",
        "TO_OBJECT",
        "To construct a structured ARRAY or OBJECT value, use these functions and explicitly cast the return value of the function. For example:",
        "For details, refer to Explicitly casting a semi-structured type to a structured type.",
        "Note",
        "You can\u2019t pass structured ARRAY, structured OBJECT, or MAP values to these functions. Doing so would result in a structured\ntype being implicitly cast to a semi-structured type, which isn\u2019t allowed, as noted in\nImplicit casting a value (coercion).",
        "When you specify an ARRAY constant or an OBJECT constant, you are\nspecifying a semi-structured ARRAY or OBJECT value.",
        "To construct a structured ARRAY or OBJECT value, you must explicitly cast the expression. For example:",
        "For details, refer to Explicitly casting a semi-structured type to a structured type.",
        "To construct a MAP value, construct a semi-structured OBJECT value, and cast the OBJECT value to a MAP value.",
        "For example, the following statements both produce the MAP value {'city'->'San Mateo','state'->'CA'}:",
        "The following statement produces the MAP value {-10->'CA',-20->'OR'}:",
        "For details, refer to Casting semi-structured OBJECT and VARIANT values to MAP values.",
        "The following sections explain how to use keys, values, and elements in values of structured types.",
        "Getting the list of keys from a structured OBJECT value",
        "Getting the list of keys from a MAP value",
        "Accessing values and elements from values of structured types",
        "Determining the size of a structured ARRAY value",
        "Determining the size of a MAP value",
        "Looking up elements in a structured ARRAY value",
        "Determining if a MAP value contains a key",
        "To get the list of keys in a structured OBJECT value, call the OBJECT_KEYS function:",
        "If the input is a structured OBJECT value, the function returns an ARRAY(VARCHAR) value containing the keys. If the input is a\nsemi-structured OBJECT value, the function returns an ARRAY value.",
        "To get the list of keys in a MAP value, call the MAP_KEYS function:",
        "You can use the following methods to access values and elements from structured ARRAY, structured OBJECT, and MAP\nvalues:",
        "The GET function",
        "The GET_IGNORE_CASE function",
        "The GET_PATH function",
        "Dot Notation",
        "Bracket Notation",
        "The returned values and elements have the type specified for the structured value, rather than VARIANT.",
        "The following example passes the first element of a semi-structured ARRAY value and an ARRAY(VARCHAR) value to the\nSYSTEM$TYPEOF function to return the data type of that element:",
        "Note the following:",
        "When you pass a structured OBJECT value to the GET or GET_IGNORE_CASE function, you must specify a constant for the key.",
        "You don\u2019t need to specify a constant if you are passing a MAP or structured ARRAY value to the GET function.",
        "You also don\u2019t need to specify a constant if you are passing a MAP value to the GET_IGNORE_CASE function.",
        "When you pass a structured OBJECT, structured ARRAY, or MAP value to the GET_PATH function, you must specify a constant for the path\nname.",
        "For a structured OBJECT value, if you use an OBJECT key or a path that doesn\u2019t exist, a compile-time error occurs.",
        "In contrast, when you use an index, key, or path that doesn\u2019t exist with a semi-structured OBJECT value, the function returns NULL.",
        "To determine the size of a structured ARRAY value, pass the ARRAY value to the ARRAY_SIZE function:",
        "To determine the size of a MAP value, pass the MAP value to MAP_SIZE function:",
        "To determine if an element is present in a structured ARRAY value, call the ARRAY_CONTAINS function.\nFor example:",
        "To determine the position of an element in a structured ARRAY value, call the ARRAY_POSITION function.\nFor example:",
        "Note",
        "For both functions, use an element of a type that is comparable to the type of the\nARRAY value.",
        "Don\u2019t cast the expression for the element to a VARIANT value.",
        "To determine if a MAP value contains a key, call the MAP_CONTAINS_KEY function:",
        "For example:",
        "The following sections explain how to compare values:",
        "Comparing structured values with semi-structured values",
        "Comparing structured values with other structured values",
        "Determining if two ARRAY values overlap",
        "You can\u2019t compare a structured ARRAY, structured OBJECT, or MAP value with a semi-structured ARRAY, OBJECT, or VARIANT value.",
        "You can compare two values of the same type (for example, two structured ARRAY values, two structured OBJECT values, or two MAP values).",
        "Currently, the following comparison operators are supported for comparing values of structured types:",
        "=",
        "!=",
        "<",
        "<=",
        ">=",
        ">",
        "When you compare two structured values for equality, note the following:",
        "If one type can\u2019t be coerced to the other type, the comparison fails.",
        "When you compare MAP values that have numeric keys, the keys are compared as numbers (not as VARCHAR values).",
        "When you compare two structured values using <, <=, >=, or >, the structured value fields are compared in\nalphabetical order. For example, the following value:",
        "is greater than:",
        "To determine if the elements of two structured ARRAY values overlap, call the\nARRAYS_OVERLAP function. For example:",
        "The ARRAY values must be of comparable types.",
        "You can\u2019t pass a semi-structured ARRAY value and a structured ARRAY value to this function. Both ARRAY values must either be structured\nor semi-structured.",
        "The following sections explain how to transform structured ARRAY, structured OBJECT, and MAP values:",
        "Transforming structured ARRAY values",
        "Transforming structured OBJECT values",
        "Transforming MAP values",
        "When you pass a structured ARRAY value to these functions, the functions return a structured ARRAY value of the same type:",
        "ARRAY_APPEND",
        "ARRAY_CAT",
        "ARRAY_COMPACT",
        "ARRAY_EXCEPT",
        "ARRAY_INSERT",
        "ARRAY_INTERSECTION",
        "ARRAY_PREPEND",
        "ARRAY_SLICE",
        "ARRAY_UNION_AGG",
        "The next sections explain how these functions work with structured ARRAY values.",
        "Functions that add elements to ARRAY values",
        "Functions that accept multiple ARRAY values as input",
        "The following functions add elements to an ARRAY values:",
        "ARRAY_APPEND",
        "ARRAY_INSERT",
        "ARRAY_PREPEND",
        "For these functions, the type of the element must be coercible to the type of\nthe ARRAY value.",
        "For example, the following call succeeds because a NUMBER value can be coerced to a DOUBLE value (the type of the ARRAY value):",
        "The following call succeeds because VARCHAR values can be coerced to DOUBLE values:",
        "The following call fails because DATE values can\u2019t be coerced to NUMBER values:",
        "The following functions accept multiple ARRAY values as input arguments:",
        "ARRAY_CAT",
        "ARRAY_EXCEPT",
        "ARRAY_INTERSECTION",
        "When you call these functions, both arguments must either be structured ARRAY values or semi-structured ARRAY values.\nFor example, the following calls fail because one argument is a structured ARRAY value and the other argument is a\nsemi-structured ARRAY value:",
        "The ARRAY_EXCEPT function returns an ARRAY value of the same type as the ARRAY value in the first argument.",
        "The ARRAY_CAT and ARRAY_INTERSECTION functions return an ARRAY value of a type that can accommodate the types of both input values.",
        "For example, the following call to ARRAY_CAT passes in two structured ARRAY values:",
        "The first structured ARRAY value doesn\u2019t allow NULLs and contains NUMBER values with the scale of 0 (NUMBER(38, 0)).",
        "The second structured ARRAY value contains a NULL and a NUMBER value that has the scale of 1.",
        "The ARRAY value returned by ARRAY_CAT allows NULLs and contains NUMBER values with the scale of 1.",
        "For the ARRAY_CAT function, the ARRAY value in the second argument must be coercible\nto the type in the first argument.",
        "For the ARRAY_EXCEPT and ARRAY_INTERSECTION functions, the ARRAY value in the second argument must be\ncomparable to the ARRAY value in the first argument.",
        "For example, the following call succeeds because an ARRAY(NUMBER) value is comparable to an ARRAY(DOUBLE) value:",
        "The following call fails because an ARRAY(NUMBER) value isn\u2019t comparable to an ARRAY(VARCHAR) value:",
        "The following sections explain how to return a structured OBJECT value that has been transformed from another OBJECT value:",
        "Removing key-value pairs",
        "Inserting key-value pairs and updating values",
        "Selecting key-value pairs from an existing OBJECT",
        "To change the order of key-value pairs, rename keys, or add keys without specifying values, use the\nCAST function or :: operator. For details, see\nCasting from one structured type to another.",
        "To return a new OBJECT value that contains the key-value pairs from an existing OBJECT value with specific key-value pairs removed,\ncall the OBJECT_DELETE function.",
        "When calling this function, note the following:",
        "For the arguments that are keys, you must specify constants.",
        "If the specified key isn\u2019t part of the OBJECT type definition, the call fails. For example, the following call fails because\nthe OBJECT value doesn\u2019t contain the specified key zip_code:",
        "The function returns a structured OBJECT value. The type of the OBJECT value excludes the deleted key. For example, suppose that you\nremove the city key:",
        "The function returns an OBJECT value of the type OBJECT(state VARCHAR), which doesn\u2019t include the city key.",
        "If the function removes all keys from the OBJECT value, the function returns an empty structured OBJECT value of the type OBJECT().",
        "When the type of a structured OBJECT value includes key-value pairs, the names and types of those pairs are included in parentheses\nin the type (for example, OBJECT(city VARCHAR)). Because an empty structured OBJECT value contains no key-value pairs, the\nparentheses are empty.",
        "To return a new OBJECT value that contains the key-value pairs from an existing OBJECT value with additional key-value pairs or new values for\nkeys, call the OBJECT_INSERT function.",
        "When calling this function, note the following:",
        "For the arguments that are keys, you must specify constants.",
        "When the updateFlag argument is FALSE (when you are inserting a new key-value pair):",
        "If you specify a key that already exists in the OBJECT value, an error occurs.",
        "The function returns a structured OBJECT value. The type of the OBJECT value includes the newly inserted key. For example, suppose that\nyou add the zipcode key with the FLOAT value 94402:",
        "The type of the inserted value determines the type added to the OBJECT type definition. In this case, the value for\nzipcode is a value cast to a FLOAT, so the type of zipcode is FLOAT.",
        "When the updateFlag argument is TRUE (when you are replacing an existing key-value pair):",
        "If you specify a key that doesn\u2019t exist in the OBJECT value, an error occurs.",
        "The function returns a structured OBJECT value of the same type.",
        "The type of the inserted value is coerced to the type of the existing key.",
        "To return a new OBJECT value that contains selected key-value pairs from an existing OBJECT value,\ncall the OBJECT_PICK function.",
        "When calling this function, note the following:",
        "For the arguments that are keys, you must specify constants.",
        "You can\u2019t pass in an ARRAY of keys as the second argument. You must specify each key as a separate argument.",
        "The function returns a structured OBJECT value. The type of the OBJECT value includes the keys in the order in which they are specified.",
        "For example, suppose that you select the state and city keys in that order:",
        "The function returns an OBJECT value of the type OBJECT(state VARCHAR, city VARCHAR).",
        "To transform MAP values, use the following functions:",
        "MAP_CAT",
        "MAP_DELETE",
        "MAP_INSERT",
        "MAP_PICK",
        "The following sections explain how to use different SQL functions and set operators with values of structured types:",
        "Using the FLATTEN function with values of structured types",
        "Using the PARSE_JSON function",
        "Using structured types with set operators and CASE expressions",
        "Working with other semi-structured functions",
        "You can pass structured ARRAY, structured OBJECT, and MAP values to the FLATTEN function. As is the case with semi-structured data\ntypes, you can use the PATH argument to specify the value being flattened.",
        "If the value being flattened is a structured ARRAY value and the RECURSIVE argument is FALSE, the value column contains a value of\nthe same type as the ARRAY value.",
        "For example:",
        "If the value being flattened is a MAP value and the RECURSIVE argument is FALSE, the key column contains a key of the same type as\nthe MAP key, and the value column contains a value of the same type as the MAP value.",
        "For example:",
        "Otherwise, the key and value columns have the type VARIANT.",
        "For MAP values, the order of keys and values returned is indeterminate.",
        "The PARSE_JSON function doesn\u2019t return structured types.",
        "You can use structured ARRAY, structured OBJECT, and MAP values in:",
        "Query expressions combined by set operators (e.g. UNION ALL).",
        "CASE expressions.",
        "For set operators, if different types are used in the different expressions  (for example, if one type is ARRAY(NUMBER) and the other is\nARRAY(DOUBLE)), one type is coerced to the other.",
        "The following functions don\u2019t accept a structured ARRAY, structured OBJECT, or MAP values as an input argument:",
        "AS_ARRAY",
        "AS_OBJECT",
        "IS_ARRAY",
        "IS_OBJECT",
        "TYPEOF",
        "Passing a structured type value as input results in an error.",
        "In applications that use drivers (for example, the ODBC or JDBC driver, the Snowflake Connector for Python, etc.), structured type\nvalues are returned as semi-structured type values. For example:",
        "The values in a structured ARRAY column are returned as semi-structured ARRAY values to the client application.",
        "The values in a structured OBJECT or MAP column are returned as semi-structured OBJECT values to the client application.",
        "Note",
        "For client applications that use the JDBC driver, the ResultSet.getArray() method returns an error\nif the query results you want to retrieve contain a structured ARRAY value with NULL values.",
        "To retrieve a string representation instead, use the ResultSet.getString() method:",
        "When you create a user-defined function (UDF), user-defined table function (UDTF), or stored procedure in\nSQL,\nSnowflake Scripting,\nJava,\nPython, or\nScala, you can use structured\ntypes in the arguments and return values. For example:",
        "Note",
        "Structured types aren\u2019t yet supported in UDFs, UDTFs, and stored procedures in JavaScript.",
        "The following sections describe the views and commands that you can use to view information about structured types:",
        "Using the SHOW COLUMNS command to view structured type information",
        "Using the DESCRIBE and other SHOW commands to view structured type information",
        "Viewing information about the structured types used in a database",
        "In the output of the SHOW COLUMNS command, the data_type column includes information about the\ntypes of elements, keys, and values.",
        "The output of the following commands includes information about structured types:",
        "DESCRIBE TABLE",
        "DESCRIBE RESULT",
        "DESCRIBE FUNCTION",
        "DESCRIBE PROCEDURE",
        "SHOW FUNCTIONS",
        "SHOW PROCEDURES",
        "For example, in the DESCRIBE RESULT output, the row for a MAP(VARCHAR, VARCHAR) column contains the following value in the\ntype column:",
        "The row for an ARRAY(NUMBER) column contains the following value in the type column:",
        "For columns of structured types, the INFORMATION_SCHEMA COLUMNS view only provides information about\nthe basic data type of the column (ARRAY, OBJECT, or MAP).",
        "For example, the data_type column just contains ARRAY, OBJECT, or MAP. The column doesn\u2019t include the types of the\nelements, keys, or values.",
        "To view information about the types of elements, keys, and values, use the following views:",
        "For information about the types of elements in structured ARRAY types, query the\nELEMENT_TYPES view in INFORMATION_SCHEMA or the\nELEMENT_TYPES view in ACCOUNT_USAGE.",
        "For information about the types of keys and values in structured OBJECT and MAP types, query the\nFIELDS view in INFORMATION_SCHEMA or the\nFIELDS view in ACCOUNT_USAGE.",
        "Was this page helpful?",
        "On this page"
    ]
}