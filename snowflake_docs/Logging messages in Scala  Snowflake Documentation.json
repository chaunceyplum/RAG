{
    "url": "https://docs.snowflake.com/en/developer-guide/logging-tracing/logging-scala",
    "title": "Logging messages in Scala | Snowflake Documentation",
    "paragraphs": [
        "You can log messages from a function or procedure handler written in Scala by using the SLF4J API. When you\u2019ve\nset up an event table to store log entries, Snowflake stores log\nentries generated by your handler code in the table.",
        "You can use the SLF4J API included with the Snowflake Telemetry library included on Snowflake. To do so, include the following\nvalue in the PACKAGES clause when you create the function or procedure: com.snowflake:telemetry:latest.",
        "For information on including the Telemetry library when packaging your code with Maven, see\nSetting up your Java and Scala environment to use the Telemetry class.",
        "Note",
        "Using the Snowflake Telemetry Library adds other libraries to your function or procedure\u2019s execution environment. For more information,\nsee Snowflake telemetry package dependencies.",
        "Note",
        "SLF4J does not support logging messages at the FATAL level. For handlers written in Java or Scala, the FATAL level is\ntreated as the ERROR level.",
        "For example, if you set the LOG_LEVEL parameter to FATAL, ERROR-level messages from a Java or Scala\nhandler are ingested.",
        "For general information about setting up logging and retrieving messages in Snowflake, see\nLogging messages from functions and procedures.",
        "Before logging from code, you must:",
        "Set up an event table to collect messages logged from handler code.",
        "For more information, see Event table overview.",
        "Be sure you have the logging level set so that the messages you want are stored in the event table.",
        "For more information, see Setting levels for logging, metrics, and tracing.",
        "When you create a log entry, you can add your own attributes in key-value pairs. Snowflake saves these custom attributes to the event\ntable\u2019s RECORD_ATTRIBUTES column.",
        "To add custom attributes, call methods of the slf4j fluent API, such as Logger.atInfo and Logger.atError. Use these\nmethods to set key-value pairs in the log entry. Each returns an org.slf4j.spi.LoggingEventBuilder, which you can use to set the\nlog message.",
        "Code in the following example logs a message \u201cLogging with attributes\u201d to the event table\u2019s VALUE column. It also adds a custom\nattribute to the RECORD_ATTRIBUTES column.",
        "Output of this Logger.atInfo call appears in the event table as follows. Note that the RECORD_ATTRIBUTES column will include\nattributes that Snowflake adds automatically.",
        "Code in the following example imports references the Snowflake Telemetry library and from it gets a logger. It logs a message at the\nINFO level. It also logs an error for an exception.",
        "For more information about the methods you can use to log at specific levels, see SLF4J methods.",
        "You can access log messages by executing a SELECT command on the event table. For more information, see\nViewing log messages.",
        "Code in the following example queries the event table where the log messages are stored. The query reports on the severity and message of\neach log entry from the handler class.",
        "The preceding example generates the following output.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}