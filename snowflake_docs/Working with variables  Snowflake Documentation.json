{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-scripting/variables",
    "title": "Working with variables | Snowflake Documentation",
    "paragraphs": [
        "In Snowflake Scripting, you can use variables in expressions, Snowflake Scripting statements, and SQL statements.",
        "Before you can use a variable, you must declare the variable. When you declare a variable, you must specify the type of the\nvariable in one of the following ways:",
        "Explicitly specify the data type.",
        "Specify an expression for the initial value of the variable. Snowflake Scripting uses the expression to determine the data\ntype of the variable. See How Snowflake Scripting infers the data type of a variable.",
        "You can declare a variable in the following ways:",
        "Within the DECLARE section of the block by using any of the following:",
        "Within the BEGIN \u2026 END section of the block (before you use the variable)\nby using the LET command in any of the following ways:",
        "Where:",
        "The name of the variable. The name must follow the naming rules for Object identifiers.",
        "The data type of the variable. The data type can be any of the following:",
        "A SQL data type",
        "CURSOR",
        "RESULTSET",
        "EXCEPTION",
        "Assigns the value of expression to the variable.",
        "If both type and expression are specified, the expression must evaluate to a data type that matches.\nIf the types do not match, you can cast the value to the specified type.",
        "The following example declares variables in the DECLARE section and in the BEGIN \u2026 END section of the block:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The next sections explain how the data type and scope of a variable are determined:",
        "How Snowflake Scripting infers the data type of a variable",
        "Understanding the scope of declarations",
        "For information about assigning a value to a variable, see Assigning a value to a declared variable.",
        "When you declare a variable without explicitly specifying the data type, Snowflake Scripting infers the\ndata type from the expression that you assign to the variable.",
        "If you choose to omit the data type from the declaration, note the following:",
        "If the expression can resolve to different data types of different sizes, Snowflake typically chooses the type that is flexible\n(e.g. FLOAT rather than NUMBER(3, 1)) and has a high storage capacity (e.g. VARCHAR rather than VARCHAR(4)).",
        "For example, if you set a variable to the value 12.3, Snowflake can choose one of several data types for the variable,\nincluding:",
        "NUMBER(3, 1)",
        "NUMBER(38, 1)",
        "FLOAT",
        "In this example, Snowflake chooses FLOAT.",
        "If you need a specific data type for a variable (especially a numeric or timestamp type), Snowflake recommends that you specify\nthe data type explicitly, even if you provide an initial value.",
        "If Snowflake is unable to infer the intended data type, Snowflake reports a SQL compilation error.",
        "For example, the following code declares a variable without explicitly specifying the data type. The code sets the variable to\nthe value in a cursor.",
        "When the Snowflake Scripting block is compiled (e.g. when the CREATE PROCEDURE command is executed), the cursor has not been\nopened, and the data type of the column in the cursor is unknown. As a result, Snowflake reports a SQL compilation error:",
        "Snowflake Scripting uses lexical scoping. When a\nvariable for a value, result set, cursor, or exception is declared in the DECLARE section of a block, the scope (or visibility)\nof the declared object is that block and any blocks nested in that block.",
        "If a block declares an object with the same name as an object declared in an outer block, then within the inner\nblock (and any blocks inside that block), only the inner block\u2019s object is in scope. When an object name is\nreferenced, Snowflake looks for the object with that name by starting first in the current block, and then working\noutward one block at a time until an object with a matching name is found.",
        "For example, if an exception is declared inside a stored procedure, the exception\u2019s scope is limited to that stored\nprocedure. Stored procedures called by that stored procedure cannot raise (or handle) that exception. Stored\nprocedures that call that procedure cannot handle (or raise) that exception.",
        "To assign a value to a variable that has already been declared, use the := operator:",
        "Where:",
        "The name of the variable. The name must follow the naming rules for Object identifiers.",
        "The expression is evaluated and the resulting value is assigned to the variable.",
        "The expression must evaluate to a data type that matches the type of the variable.\nIf the expression does not match the type, you can cast the value to the type of\nthe variable.",
        "In the expression, you can use functions, including built-in SQL functions\nand UDFs (user-defined functions).",
        "You can use variables in expressions and with Snowflake Scripting language elements (such as\nRETURN). For example, the code below uses the variables revenue and\ncost in an expression and the variable profit in a RETURN statement:",
        "To use a variable in an exception handler (the EXCEPTION section of\na block), the variable must be declared in the DECLARE section or passed\nas an argument to a stored procedure. It can\u2019t be declared in the BEGIN \u2026 END\nsection. For more information, see Passing variables to an exception handler.",
        "Tip",
        "You can also use and set SQL (session) variables in Snowflake Scripting anonymous blocks and in stored procedures that run with\ncaller\u2019s rights. For more information, see Using and setting SQL variables in a stored procedure.",
        "You can use a variable in a SQL statement, which is sometimes referred to as binding\na variable. To do so, prefix the variable name with a colon. For example:",
        "For information about binding variables in Snowflake Scripting stored procedures, see\nUsing an argument in a SQL statement (binding).",
        "If you are using the variable as the name of an object (e.g. the name of a table in the FROM clause of a SELECT statement), use\nthe IDENTIFIER keyword to indicate that the variable represents an object identifier.\nFor example:",
        "If you are using a variable in an expression or with a\nSnowflake Scripting language element (e.g.\nRETURN), you do not need to prefix the variable with a colon.",
        "For example, you do not need the colon prefix in the following cases:",
        "You are using the variable with RETURN. In this example, the variable profit is used with a Snowflake Scripting language\nelement and does not need the colon prefix.",
        "You are building a string containing a SQL statement to execute. In this example, the variable id_variable is used in an\nexpression and does not need the colon prefix.",
        "In addition, the TO_QUERY function provides a simple syntax for accepting a SQL string\ndirectly in the FROM clause of a SELECT statement. For a comparison of the TO_QUERY function with dynamic SQL,\nsee Constructing SQL at runtime.",
        "In a Snowflake Scripting block, you can use the INTO clause to set variables to the values of\nexpressions specified in a SELECT clause:",
        "When you use this syntax:",
        "variable1 is set to the value of expression1.",
        "variable2 is set to the value of expression2.",
        "The SELECT statement must return a single row.",
        "The following example contains a SELECT statement that returns a single row. The example relies on data from this table:",
        "The example sets the Snowflake Scripting variables id and name to the values returned for the columns with those names.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The example prints out the id and name from the row returned by the SELECT statement.",
        "See Using the value returned from a stored procedure call.",
        "The following example shows how to declare a variable, assign a value or expression to a variable, and cast a value to the data\ntype of a variable:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following example uses a built-in SQL function in the expression:",
        "The following declaration implicitly specifies the data types of the variables profit, cost, and revenue by\nspecifying an initial value of the intended data type for each variable.",
        "The example also demonstrates how to use the LET statement to declare the\ncost and revenue variables outside of the DECLARE portion of the block:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following example demonstrates the scope of a variable. This example includes two variables and a parameter that all have the\nsame name but different scope.",
        "The example contains three blocks: the outermost, middle, and innermost blocks.",
        "Within the innermost block, PV_NAME resolves to the variable declared and set in that innermost block\n(which is set to innermost block variable).",
        "Within the middle block (and outside of the innermost block), PV_NAME resolves to the variable declared and set in the\nmiddle block (which is set to middle block variable).",
        "Within the outermost block (and outside any of the nested blocks), PV_NAME resolves to the parameter passed to the stored\nprocedure (which is set to parameter by the CALL statement).",
        "The example relies on this table:",
        "In this example, the assignment of the string innermost block variable to PV_NAME in the innermost block does not affect the\nvalue of the variable in the middle block. The variable in the innermost block is different from the variable in the middle block,\neven if both variables have the same name.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure:",
        "Check the values in the table:",
        "The output shows that:",
        "In the innermost nested block (which was nested two layers), the inner block\u2019s variable PV_NAME was used.",
        "In the middle block (which was nested one layer), that middle block\u2019s variable PV_NAME was used.",
        "In the outermost block, the parameter was used.",
        "For an example of binding a variable when opening a cursor, see the\nexamples of opening cursors.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}