{
    "url": "https://docs.snowflake.com/en/user-guide/search-optimization/geospatial-queries",
    "title": "Speeding up geospatial queries with search optimization | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact Snowflake Support.",
        "The search optimization service can improve the performance of queries with predicates that use geospatial functions with\nGEOGRAPHY objects.",
        "Note",
        "You must enable this feature for specific columns using the ON clause in the ALTER TABLE \u2026 ADD SEARCH OPTIMIZATION command. For example:",
        "Queries that use geospatial functions are not improved if you omit the ON clause.",
        "The following sections provide more details:",
        "Supported predicates with geospatial functions",
        "Other performance considerations",
        "Examples that use geospatial functions",
        "Note",
        "GEOMETRY objects are not yet supported.",
        "For queries with predicates that use the following functions:",
        "ST_INTERSECTS",
        "ST_CONTAINS",
        "ST_WITHIN",
        "ST_DWITHIN",
        "ST_COVERS",
        "ST_COVEREDBY",
        "The search optimization service can improve performance if:",
        "One input expression is a GEOGRAPHY column in a table, and",
        "The other input expression is a GEOGRAPHY constant (created through a\nconversion or constructor function).",
        "For ST_DWITHIN, the distance argument is a non-negative REAL constant.",
        "Note that this feature has the same\nlimitations that apply to the search optimization service.",
        "Because the search optimization service is designed for predicates that are highly selective and because predicates filter by proximity\nbetween geospatial objects, clustering geospatial objects by proximity in the table can result in better performance. You can cluster\nyour data either by specifying the sort order when loading the data or by using Automatic Clustering, depending on whether the base\ntable changes frequently:",
        "If the data in your base table does not change often, you can specify the sort order when loading the data. You can then enable search\noptimization on the GEOGRAPHY column. For example:",
        "After every large change made to your base data, you can manually re-sort the data.",
        "If there are frequent updates to your base table, you can use the ALTER TABLE \u2026 CLUSTER BY \u2026\ncommand to enable Automatic Clustering so the table is automatically reclustered as it\nchanges.",
        "The following example adds a new column geom_geohash of the type VARCHAR and stores the geohash or H3 index of the GEOGRAPHY column\ngeom in that new column. It then enables Automatic Clustering with the new column as the cluster key. This approach will\nautomatically recluster the parts of the table that change.",
        "The following statements create and configure the table used in the examples in this section. The last statement uses the\nON clause in ALTER TABLE \u2026 ADD SEARCH OPTIMIZATION command\nto add search optimization for the g1 GEOGRAPHY column.",
        "The following query is an example of a query supported by the search optimization service. The search optimization service can\nuse search access paths to improve the performance of this query:",
        "The following are examples of additional predicates that are supported by the search optimization service:",
        "The following are examples of predicates that use different\nconversion and constructor functions for the GEOGRAPHY constant.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}