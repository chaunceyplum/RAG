{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/reference/latest/_autosummary/snowflake.core.notebook.Notebook",
    "title": "snowflake.core.notebook.Notebook | Snowflake Documentation",
    "paragraphs": [
        "Bases: BaseModel",
        "A model object representing the Notebook resource.",
        "Constructs an object of type Notebook with the provided properties.",
        "name (str) \u2013 Name of the notebook",
        "version (str, optional) \u2013 User specified version alias",
        "from_location (str, optional) \u2013 Location to copy the file from. This must be a Snowflake stage location.",
        "main_file (str, optional) \u2013 Name + path of the file for the Notebook",
        "comment (str, optional) \u2013 user comment associated to an object in the dictionary",
        "default_version (str, optional) \u2013 The default version name of a file based entity.",
        "query_warehouse (str, optional) \u2013 Warehouse against which the queries issued by the Streamlit app are run against",
        "created_on (datetime, optional) \u2013 Date and time when the notebook was created.",
        "database_name (str, optional) \u2013 Database in which the notebook is stored",
        "schema_name (str, optional) \u2013 Schema in which the notebook is stored",
        "owner (str, optional) \u2013 Role that owns the notebook",
        "owner_role_type (str, optional) \u2013 The type of role that owns the notebook",
        "url_id (str, optional) \u2013 Unique ID associated with the notebook object.",
        "title (str, optional) \u2013 User facing title of the Streamlit app or an Organization Profile",
        "default_packages (str, optional) \u2013 Default packages of the notebook",
        "user_packages (str, optional) \u2013 User packages of the notebook",
        "runtime_name (str, optional) \u2013 The runtime to run the Streamlit or Notebook on.  If this is not set, the warehouse is assumed",
        "compute_pool (str, optional) \u2013 Compute pool name where the snowservice runs",
        "import_urls (List[str], optional) \u2013 List of urls",
        "external_access_integrations (List[str], optional) \u2013 List of external access integrations attached to this function",
        "external_access_secrets (str, optional) \u2013 Secrets to be used with this function for external access",
        "idle_auto_shutdown_time_seconds (int, optional) \u2013 Sets the time in seconds for when to shutdown an idle Notebook.",
        "default_version_details (VersionDetails, optional)",
        "last_version_details (VersionDetails, optional)",
        "live_version_location_uri (str, optional) \u2013 The current version location",
        "budget (str, optional) \u2013 Name of the budget if the notebook is monitored by a budget",
        "Create a new model by parsing and validating input data from keyword arguments.",
        "Raises [ValidationError][pydantic_core.ValidationError] if the input data cannot be\nvalidated to form a valid model.",
        "self is explicitly positional-only to allow self as a field name.",
        "Methods",
        "Create an instance of Notebook from a dict.",
        "Create an instance of Notebook from a JSON string.",
        "Returns the dictionary representation of the model using alias.",
        "Return the dictionary representation of the model without readonly properties.",
        "Returns the JSON representation of the model using alias.",
        "Returns the string representation of the model using alias.",
        "Was this page helpful?"
    ]
}