{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.DataFrame",
    "title": "modin.pandas.DataFrame | Snowflake Documentation",
    "paragraphs": [
        "Bases: BasePandasDataset",
        "Snowpark pandas representation of pandas.DataFrame with a lazily-evaluated relational dataset.",
        "A DataFrame is considered lazy because it encapsulates the computation or query required to produce\nthe final dataset. The computation is not performed until the datasets need to be displayed, or I/O\nmethods like to_pandas, to_snowflake are called.",
        "Internally, the underlying data are stored as Snowflake table with rows and columns.",
        "data (DataFrame, Series, pandas.DataFrame, ndarray, Iterable or dict, optional) \u2013 Dict can contain Series, arrays, constants, dataclass or list-like objects.\nIf data is a dict, column order follows insertion-order.",
        "index (Index or array-like, optional) \u2013 Index to use for resulting frame. Will default to RangeIndex if no\nindexing information part of input data and no index provided.",
        "columns (Index or array-like, optional) \u2013 Column labels to use for resulting frame. Will default to\nRangeIndex if no column labels are provided.",
        "dtype (str, np.dtype, or pandas.ExtensionDtype, optional) \u2013 Data type to force. Only a single dtype is allowed. If None, infer.",
        "copy (bool, default: False) \u2013 Copy data from inputs. Only affects pandas.DataFrame / 2d ndarray input.",
        "query_compiler (BaseQueryCompiler, optional) \u2013 A query compiler object to create the DataFrame from.",
        "Notes",
        "DataFrame can be created either from passed data or query_compiler. If both\nparameters are provided, an assertion error will be raised. query_compiler can only\nbe specified when the data, index, and columns are None.",
        "Using pandas/NumPy/Python data structures as the data parameter is less desirable since\nimporting such data structures is very inefficient.\nPlease use previously created Modin structures or import data using highly efficient Modin IO\ntools (for example pd.read_csv).",
        "Examples",
        "Creating a Snowpark pandas DataFrame from a dictionary:",
        "Constructing DataFrame from numpy ndarray:",
        "Constructing DataFrame from a numpy ndarray that has labeled columns:",
        "Constructing DataFrame from Series/DataFrame:",
        "Methods",
        "abs()",
        "Return a BasePandasDataset with absolute numeric value of each element.",
        "add(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get addition of DataFrame and other, element-wise (binary operator add).",
        "add_prefix(prefix[,\u00a0axis])",
        "Prefix labels with string prefix.",
        "add_suffix(suffix[,\u00a0axis])",
        "Suffix labels with string suffix.",
        "agg([func,\u00a0axis])",
        "Aggregate using one or more operations over the specified axis.",
        "aggregate([func,\u00a0axis])",
        "Aggregate using one or more operations over the specified axis.",
        "align(other[,\u00a0join,\u00a0axis,\u00a0level,\u00a0copy,\u00a0...])",
        "Align two objects on their axes with the specified join method.",
        "all([axis,\u00a0bool_only,\u00a0skipna])",
        "Return whether all elements are True, potentially over an axis.",
        "any(*[,\u00a0axis,\u00a0bool_only,\u00a0skipna])",
        "Return whether any element are True, potentially over an axis.",
        "apply(func[,\u00a0axis,\u00a0raw,\u00a0result_type,\u00a0args])",
        "Apply a function along an axis of the DataFrame.",
        "applymap(func[,\u00a0na_action])",
        "Apply a function to a Dataframe elementwise.",
        "asfreq(freq[,\u00a0method,\u00a0how,\u00a0normalize,\u00a0...])",
        "Convert time series to specified frequency.",
        "asof(where[,\u00a0subset])",
        "Return the last row(s) without any NaNs before where.",
        "assign(**kwargs)",
        "Assign new columns to a DataFrame.",
        "astype(dtype[,\u00a0copy,\u00a0errors])",
        "Cast a pandas object to a specified dtype dtype.",
        "at_time(time[,\u00a0asof,\u00a0axis])",
        "Select values at particular time of day (e.g., 9:30AM).",
        "backfill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0downcast])",
        "Synonym for DataFrame.fillna with method='bfill'.",
        "between_time(start_time,\u00a0end_time[,\u00a0...])",
        "Select values between particular times of the day (e.g., 9:00-9:30 AM).",
        "bfill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0limit_area,\u00a0...])",
        "Synonym for DataFrame.fillna with method='bfill'.",
        "bool()",
        "Return the bool of a single element BasePandasDataset.",
        "boxplot([column,\u00a0by,\u00a0ax,\u00a0fontsize,\u00a0rot,\u00a0...])",
        "Make a box plot from DataFrame columns.",
        "cache_result([inplace])",
        "Persists the current Snowpark pandas DataFrame to a temporary table to improve the latency of subsequent operations.",
        "clip([lower,\u00a0upper,\u00a0axis,\u00a0inplace])",
        "Trim values at input threshold(s).",
        "combine(other,\u00a0func[,\u00a0fill_value,\u00a0overwrite])",
        "Perform column-wise combine with another DataFrame.",
        "combine_first(other)",
        "Update null elements with value in the same location in other.",
        "compare(other[,\u00a0align_axis,\u00a0keep_shape,\u00a0...])",
        "Compare to another DataFrame and show the differences.",
        "convert_dtypes([infer_objects,\u00a0...])",
        "Convert columns to best possible dtypes using dtypes supporting pd.NA.",
        "copy([deep])",
        "Make a copy of this object's indices and data.",
        "corr([method,\u00a0min_periods,\u00a0numeric_only])",
        "Compute pairwise correlation of columns, excluding NA/null values.",
        "corrwith(other[,\u00a0axis,\u00a0drop,\u00a0method,\u00a0...])",
        "Compute pairwise correlation.",
        "count([axis,\u00a0numeric_only])",
        "Count non-NA cells for each column or row.",
        "cov([min_periods,\u00a0ddof,\u00a0numeric_only])",
        "",
        "cummax([axis,\u00a0skipna])",
        "Return cumulative maximum over a BasePandasDataset axis.",
        "cummin([axis,\u00a0skipna])",
        "Return cumulative minimum over a BasePandasDataset axis.",
        "cumprod([axis,\u00a0skipna])",
        "Return cumulative product over a BasePandasDataset axis.",
        "cumsum([axis,\u00a0skipna])",
        "Return cumulative sum over a BasePandasDataset axis.",
        "describe([percentiles,\u00a0include,\u00a0exclude])",
        "Generate descriptive statistics for columns in the dataset.",
        "diff([periods,\u00a0axis])",
        "First discrete difference of element.",
        "div(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get floating division of DataFrame and other, element-wise (binary operator truediv).",
        "divide(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get floating division of DataFrame and other, element-wise (binary operator truediv).",
        "dot(other)",
        "Compute the matrix multiplication between the DataFrame and other.",
        "drop([labels,\u00a0axis,\u00a0index,\u00a0columns,\u00a0level,\u00a0...])",
        "Return Series with specified index labels removed.",
        "drop_duplicates([subset,\u00a0keep,\u00a0inplace,\u00a0...])",
        "Return DataFrame with duplicate rows removed.",
        "droplevel(level[,\u00a0axis])",
        "Return BasePandasDataset with requested index / column level(s) removed.",
        "dropna(*[,\u00a0axis,\u00a0how,\u00a0thresh,\u00a0subset,\u00a0inplace])",
        "Remove missing values.",
        "duplicated([subset,\u00a0keep])",
        "Return boolean Series denoting duplicate rows.",
        "eq(other[,\u00a0axis,\u00a0level])",
        "Perform equality comparison of DataFrame and other (binary operator eq).",
        "equals(other)",
        "Test whether two dataframes contain the same elements.",
        "eval(expr[,\u00a0inplace])",
        "Evaluate a string describing operations on DataFrame columns.",
        "ewm([com,\u00a0span,\u00a0halflife,\u00a0alpha,\u00a0...])",
        "Provide exponentially weighted (EW) calculations.",
        "expanding([min_periods,\u00a0axis,\u00a0method])",
        "Provide expanding window calculations.",
        "explode(column[,\u00a0ignore_index])",
        "Transform each element of a list-like to a row.",
        "ffill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0limit_area,\u00a0...])",
        "Synonym for DataFrame.fillna() with method='ffill'.",
        "fillna([value,\u00a0method,\u00a0axis,\u00a0inplace,\u00a0...])",
        "Fill NA/NaN values using the specified method.",
        "filter([items,\u00a0like,\u00a0regex,\u00a0axis])",
        "Subset the BasePandasDataset rows or columns according to the specified index labels.",
        "first(offset)",
        "Select initial periods of time series data based on a date offset.",
        "first_valid_index()",
        "Return index for first non-NA value or None, if no non-NA value is found.",
        "floordiv(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get integer division of DataFrame and other, element-wise (binary operator floordiv).",
        "from_dict(data[,\u00a0orient,\u00a0dtype,\u00a0columns])",
        "Construct DataFrame from dict of array-like or dicts.",
        "from_records(data[,\u00a0index,\u00a0exclude,\u00a0...])",
        "Convert structured or record ndarray to DataFrame.",
        "ge(other[,\u00a0axis,\u00a0level])",
        "Get greater than or equal comparison of DataFrame and other, element-wise (binary operator ge).",
        "get(key[,\u00a0default])",
        "Get item from object for given key (ex: DataFrame column).",
        "groupby([by,\u00a0axis,\u00a0level,\u00a0as_index,\u00a0sort,\u00a0...])",
        "Group DataFrame using a mapper or by a Series of columns.",
        "gt(other[,\u00a0axis,\u00a0level])",
        "Get greater than comparison of DataFrame and other, element-wise (binary operator ge).",
        "head([n])",
        "Return the first n rows.",
        "hist([column,\u00a0by,\u00a0grid,\u00a0xlabelsize,\u00a0xrot,\u00a0...])",
        "Make a histogram of the DataFrame.",
        "idxmax([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return index of first occurrence of maximum over requested axis.",
        "idxmin([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return index of first occurrence of minimum over requested axis.",
        "infer_objects([copy])",
        "Attempt to infer better dtypes for object columns.",
        "info([verbose,\u00a0buf,\u00a0max_cols,\u00a0memory_usage,\u00a0...])",
        "Print a concise summary of the DataFrame.",
        "insert(loc,\u00a0column,\u00a0value[,\u00a0allow_duplicates])",
        "Insert column into DataFrame at specified location.",
        "interpolate([method,\u00a0axis,\u00a0limit,\u00a0inplace,\u00a0...])",
        "Fill NaN values using an interpolation method.",
        "isetitem(loc,\u00a0value)",
        "",
        "isin(values)",
        "Whether each element in the DataFrame is contained in values.",
        "isna()",
        "Detect missing values.",
        "isnull()",
        "DataFrame.isnull is an alias for DataFrame.isna.",
        "items()",
        "Iterate over (column name, Series) pairs.",
        "iterrows()",
        "Iterate over DataFrame rows as (index, Series) pairs.",
        "itertuples([index,\u00a0name])",
        "Iterate over DataFrame rows as namedtuples.",
        "join(other[,\u00a0on,\u00a0how,\u00a0lsuffix,\u00a0rsuffix,\u00a0...])",
        "Join columns of another DataFrame.",
        "keys()",
        "Get columns of the DataFrame.",
        "kurt([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return unbiased kurtosis over requested axis.",
        "kurtosis([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return unbiased kurtosis over requested axis.",
        "last(offset)",
        "Select final periods of time series data based on a date offset.",
        "last_valid_index()",
        "Return index for last non-NA value or None, if no non-NA value is found.",
        "le(other[,\u00a0axis,\u00a0level])",
        "Get less than or equal comparison of DataFrame and other, element-wise (binary operator le).",
        "lt(other[,\u00a0axis,\u00a0level])",
        "Get less than comparison of DataFrame and other, element-wise (binary operator le).",
        "map(func[,\u00a0na_action])",
        "Apply a function to the DataFrame elementwise.",
        "mask(cond[,\u00a0other,\u00a0inplace,\u00a0axis,\u00a0level])",
        "Replace values where the condition is True.",
        "max([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the maximum of the values over the requested axis.",
        "mean([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the mean of the values over the requested axis.",
        "median([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the median of the values over the requested axis.",
        "melt([id_vars,\u00a0value_vars,\u00a0var_name,\u00a0...])",
        "Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.",
        "memory_usage([index,\u00a0deep])",
        "Return the memory usage of each column in bytes.",
        "merge(right[,\u00a0how,\u00a0on,\u00a0left_on,\u00a0right_on,\u00a0...])",
        "Merge DataFrame or named Series objects with a database-style join.",
        "min([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the minimum of the values over the requested axis.",
        "mod(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get modulo of DataFrame and other, element-wise (binary operator mod).",
        "mode([axis,\u00a0numeric_only,\u00a0dropna])",
        "Get the mode(s) of each element along the selected axis.",
        "mul(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get multiplication of DataFrame and other, element-wise (binary operator mul).",
        "multiply(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get multiplication of DataFrame and other, element-wise (binary operator mul).",
        "ne(other[,\u00a0axis,\u00a0level])",
        "Get not equal comparison of DataFrame and other, element-wise (binary operator ne).",
        "nlargest(n,\u00a0columns[,\u00a0keep])",
        "Return the first n rows ordered by columns in descending order.",
        "notna()",
        "Detect non-missing values for an array-like object.",
        "notnull()",
        "Detect non-missing values for an array-like object.",
        "nsmallest(n,\u00a0columns[,\u00a0keep])",
        "Return the first n rows ordered by columns in ascending order.",
        "nunique([axis,\u00a0dropna])",
        "Count number of distinct elements in specified axis.",
        "pad(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0downcast])",
        "Synonym for DataFrame.fillna() with method='ffill'.",
        "pct_change([periods,\u00a0fill_method,\u00a0limit,\u00a0freq])",
        "Fractional change between the current and a prior element.",
        "pipe(func,\u00a0*args,\u00a0**kwargs)",
        "Apply chainable functions that expect BasePandasDataset.",
        "pivot(*,\u00a0columns[,\u00a0index,\u00a0values])",
        "Return reshaped DataFrame organized by given index / column values.",
        "pivot_table([values,\u00a0index,\u00a0columns,\u00a0...])",
        "Create a spreadsheet-style pivot table as a DataFrame.",
        "pop(item)",
        "Return item and drop from frame.",
        "pow(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get exponential power of DataFrame and other, element-wise (binary operator pow).",
        "prod([axis,\u00a0skipna,\u00a0numeric_only,\u00a0min_count])",
        "Return the product of the values over the requested axis.",
        "product([axis,\u00a0skipna,\u00a0numeric_only,\u00a0min_count])",
        "Return the product of the values over the requested axis.",
        "quantile([q,\u00a0axis,\u00a0numeric_only,\u00a0...])",
        "Return values at the given quantile over requested axis.",
        "query(expr[,\u00a0inplace])",
        "Query the columns of a DataFrame with a boolean expression.",
        "radd(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get addition of DataFrame and other, element-wise (binary operator radd).",
        "rank([axis,\u00a0method,\u00a0numeric_only,\u00a0...])",
        "Compute numerical data ranks (1 through n) along axis.",
        "rdiv(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get floating division of DataFrame and other, element-wise (binary operator rtruediv).",
        "reindex([labels,\u00a0index,\u00a0columns,\u00a0axis,\u00a0...])",
        "Conform DataFrame to new index with optional filling logic.",
        "reindex_like(other[,\u00a0method,\u00a0copy,\u00a0limit,\u00a0...])",
        "Return an object with matching indices as other object.",
        "rename([mapper,\u00a0index,\u00a0columns,\u00a0axis,\u00a0copy,\u00a0...])",
        "Rename columns or index labels.",
        "rename_axis([mapper,\u00a0index,\u00a0columns,\u00a0axis,\u00a0...])",
        "Set the name of the axis for the index or columns.",
        "reorder_levels(order[,\u00a0axis])",
        "Rearrange index levels using input order.",
        "replace([to_replace,\u00a0value,\u00a0inplace,\u00a0limit,\u00a0...])",
        "Replace values given in to_replace with value.",
        "resample(rule[,\u00a0axis,\u00a0closed,\u00a0label,\u00a0...])",
        "Resample time-series data.",
        "reset_index([level,\u00a0drop,\u00a0inplace,\u00a0...])",
        "Reset the index, or a level of it.",
        "rfloordiv(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get integer division of DataFrame and other, element-wise (binary operator rfloordiv).",
        "rmod(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get modulo of DataFrame and other, element-wise (binary operator rmod).",
        "rmul(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get multiplication of DataFrame and other, element-wise (binary operator mul).",
        "rolling(window[,\u00a0min_periods,\u00a0center,\u00a0...])",
        "Provide rolling window calculations.",
        "round([decimals])",
        "Round a BasePandasDataset to a variable number of decimal places.",
        "rpow(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get exponential power of DataFrame and other, element-wise (binary operator rpow).",
        "rsub(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get subtraction of DataFrame and other, element-wise (binary operator rsub).",
        "rtruediv(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get floating division of DataFrame and other, element-wise (binary operator rtruediv).",
        "sample([n,\u00a0frac,\u00a0replace,\u00a0weights,\u00a0...])",
        "Return a random sample of items from an axis of object.",
        "select_dtypes([include,\u00a0exclude])",
        "Return a subset of the DataFrame's columns based on the column dtypes.",
        "sem([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return unbiased standard error of the mean over requested axis.",
        "set_axis(labels,\u00a0*[,\u00a0axis,\u00a0copy])",
        "Assign desired index to given axis.",
        "set_flags(*[,\u00a0copy,\u00a0allows_duplicate_labels])",
        "Return a new BasePandasDataset with updated flags.",
        "set_index(keys[,\u00a0drop,\u00a0append,\u00a0inplace,\u00a0...])",
        "Set the DataFrame index using existing columns.",
        "shift([periods,\u00a0freq,\u00a0axis,\u00a0fill_value,\u00a0suffix])",
        "Shift data by desired number of periods along axis and replace columns with fill_value (default: None).",
        "skew([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return unbiased skew, normalized over n-1",
        "sort_index(*[,\u00a0axis,\u00a0level,\u00a0ascending,\u00a0...])",
        "Sort object by labels (along an axis).",
        "sort_values(by[,\u00a0axis,\u00a0ascending,\u00a0inplace,\u00a0...])",
        "Sort by the values along either axis.",
        "squeeze([axis])",
        "Squeeze 1 dimensional axis objects into scalars.",
        "stack([level,\u00a0dropna,\u00a0sort,\u00a0future_stack])",
        "Stack the prescribed level(s) from columns to index.",
        "std([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return sample standard deviation over requested axis.",
        "sub(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get subtraction of DataFrame and other, element-wise (binary operator sub).",
        "subtract(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get subtraction of DataFrame and other, element-wise (binary operator sub).",
        "sum([axis,\u00a0skipna,\u00a0numeric_only,\u00a0min_count])",
        "Return the sum of the values over the requested axis.",
        "swapaxes(axis1,\u00a0axis2[,\u00a0copy])",
        "Interchange axes and swap values axes appropriately.",
        "swaplevel([i,\u00a0j,\u00a0axis])",
        "Swap levels i and j in a MultiIndex.",
        "tail([n])",
        "Return the last n rows.",
        "take(indices[,\u00a0axis])",
        "Return the elements in the given positional indices along an axis.",
        "to_clipboard([excel,\u00a0sep])",
        "Copy object to the system clipboard.",
        "to_csv([path_or_buf,\u00a0sep,\u00a0na_rep,\u00a0...])",
        "Write object to a comma-separated values (csv) file.",
        "to_dict([orient,\u00a0into,\u00a0index])",
        "Convert the DataFrame to a dictionary.",
        "to_excel(excel_writer[,\u00a0sheet_name,\u00a0na_rep,\u00a0...])",
        "Write object to an Excel sheet.",
        "to_feather(path,\u00a0**kwargs)",
        "Write a DataFrame to the binary Feather format.",
        "to_gbq(destination_table[,\u00a0project_id,\u00a0...])",
        "Write a DataFrame to a Google BigQuery table.",
        "to_hdf(path_or_buf,\u00a0key[,\u00a0format])",
        "Write the contained data to an HDF5 file using HDFStore.",
        "to_html([buf,\u00a0columns,\u00a0col_space,\u00a0header,\u00a0...])",
        "Render a DataFrame as an HTML table.",
        "to_json([path_or_buf,\u00a0orient,\u00a0date_format,\u00a0...])",
        "Convert the object to a JSON string.",
        "to_latex([buf,\u00a0columns,\u00a0col_space,\u00a0header,\u00a0...])",
        "Render object to a LaTeX tabular, longtable, or nested table.",
        "to_markdown([buf,\u00a0mode,\u00a0index,\u00a0storage_options])",
        "Print BasePandasDataset in Markdown-friendly format.",
        "to_numpy([dtype,\u00a0copy,\u00a0na_value])",
        "Convert the DataFrame or Series to a NumPy array.",
        "to_orc([path,\u00a0engine,\u00a0index,\u00a0engine_kwargs])",
        "",
        "to_pandas(*[,\u00a0statement_params])",
        "",
        "Convert Snowpark pandas DataFrame to pandas.DataFrame",
        "",
        "to_parquet([path,\u00a0engine,\u00a0compression,\u00a0...])",
        "",
        "to_period([freq,\u00a0axis,\u00a0copy])",
        "Convert DataFrame from DatetimeIndex to PeriodIndex.",
        "to_pickle(path[,\u00a0compression,\u00a0protocol,\u00a0...])",
        "Pickle (serialize) object to file.",
        "to_records([index,\u00a0column_dtypes,\u00a0index_dtypes])",
        "Convert DataFrame to a NumPy record array.",
        "to_snowflake(name[,\u00a0if_exists,\u00a0index,\u00a0...])",
        "Save the Snowpark pandas DataFrame as a Snowflake table.",
        "to_snowpark([index,\u00a0index_label])",
        "Convert the Snowpark pandas DataFrame to a Snowpark DataFrame.",
        "to_sql(name,\u00a0con[,\u00a0schema,\u00a0if_exists,\u00a0...])",
        "Write records stored in a BasePandasDataset to a SQL database.",
        "to_stata(path[,\u00a0convert_dates,\u00a0write_index,\u00a0...])",
        "",
        "to_string([buf,\u00a0columns,\u00a0col_space,\u00a0header,\u00a0...])",
        "Render a BasePandasDataset to a console-friendly tabular output.",
        "to_timestamp([freq,\u00a0how,\u00a0axis,\u00a0copy])",
        "Cast to DatetimeIndex of timestamps, at beginning of period.",
        "to_xarray()",
        "Return an xarray object from the BasePandasDataset.",
        "to_xml([path_or_buffer,\u00a0index,\u00a0root_name,\u00a0...])",
        "",
        "transform(func[,\u00a0axis])",
        "Call func on self producing a Snowpark pandas DataFrame with the same axis shape as self.",
        "transpose([copy])",
        "Transpose index and columns.",
        "truediv(other[,\u00a0axis,\u00a0level,\u00a0fill_value])",
        "Get floating division of DataFrame and other, element-wise (binary operator truediv).",
        "truncate([before,\u00a0after,\u00a0axis,\u00a0copy])",
        "Truncate a Series before and after some index value.",
        "tz_convert(tz[,\u00a0axis,\u00a0level,\u00a0copy])",
        "Convert tz-aware axis to target time zone.",
        "tz_localize(tz[,\u00a0axis,\u00a0level,\u00a0copy,\u00a0...])",
        "Localize tz-naive index of a BasePandasDataset to target time zone.",
        "unstack([level,\u00a0fill_value,\u00a0sort])",
        "Pivot a level of the (necessarily hierarchical) index labels.",
        "update(other)",
        "Modify Series in place using values from passed Series.",
        "value_counts([subset,\u00a0normalize,\u00a0sort,\u00a0...])",
        "Return a Series containing the frequency of each distinct row in the Dataframe.",
        "var([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return unbiased variance over requested axis.",
        "where(cond[,\u00a0other,\u00a0inplace,\u00a0axis,\u00a0level])",
        "Replace values where the condition is False.",
        "xs(key[,\u00a0axis,\u00a0level,\u00a0drop_level])",
        "Return cross-section from the Series/DataFrame.",
        "Attributes",
        "T",
        "Transpose index and columns.",
        "at",
        "Get a single value for a row/column label pair.",
        "attrs",
        "",
        "axes",
        "Return a list representing the axes of the DataFrame.",
        "columns",
        "Get the columns for this Snowpark pandas DataFrame.",
        "dtypes",
        "Return the dtypes in the DataFrame.",
        "empty",
        "Indicator whether the DataFrame is empty.",
        "flags",
        "",
        "iat",
        "Get a single value for a row/column pair by integer position.",
        "iloc",
        "Purely integer-location based indexing for selection by position.",
        "index",
        "Get the index for this Series/DataFrame.",
        "loc",
        "Access a group of rows and columns by label(s) or a boolean array.",
        "ndim",
        "Return the number of dimensions of the underlying data, by definition 2.",
        "plot",
        "Make plots of DataFrame.",
        "shape",
        "Return a tuple representing the dimensionality of the DataFrame.",
        "size",
        "Return an int representing the number of elements in this object.",
        "sparse",
        "",
        "style",
        "Returns a Styler object.",
        "values",
        "Return a NumPy representation of the dataset.",
        "Was this page helpful?"
    ]
}