{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-data-loading",
    "title": "Managing data loading and unloading resources with Python | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "You can use Python to manage data loading and unloading resources in Snowflake, including external volumes, pipes, and stages.",
        "The examples in this topic assume that you\u2019ve added code to connect with Snowflake and to create a Root object from which to use the\nSnowflake Python APIs.",
        "For example, the following code uses connection parameters defined in a configuration file to create a connection to Snowflake:",
        "Using the resulting Session object, the code creates a Root object to use the API\u2019s types and methods. For more information,\nsee Connect to Snowflake with the Snowflake Python APIs.",
        "Minimum API version required",
        "0.9.0",
        "You can manage Snowflake stages, which are locations of data files in cloud storage. For an overview of stages, see\nOverview of data loading.",
        "The Snowflake Python APIs represents stages with two separate types:",
        "Stage: Exposes a stage\u2019s properties such as its name, encryption type, credentials, and directory table settings.",
        "StageResource: Exposes methods you can use to fetch a corresponding Stage object, upload and list files on the stage, and\ndrop the stage.",
        "To create a stage, first create a Stage object, and then create a StageCollection object from the API Root\nobject. Using StageCollection.create, add the new stage to Snowflake.",
        "Code in the following example creates a Stage object that represents a stage named my_stage with an encryption type of\nSNOWFLAKE_SSE (server-side encryption only):",
        "The code creates a StageCollection variable stages and uses StageCollection.create to create a new stage in Snowflake.",
        "You can get information about a stage by calling the StageResource.fetch method, which returns a Stage object.",
        "Code in the following example gets information about a stage named my_stage:",
        "You can list stages using the StageCollection.iter method, which returns a PagedIter iterator of Stage objects.",
        "Code in the following example lists stages whose name includes the text my and prints the name of each:",
        "You can perform common stage operations\u2014such as uploading a file to a stage and listing files on a stage\u2014with a StageResource\nobject.",
        "To demonstrate some operations you can do with a stage resource, code in the following example does the following:",
        "Uploads a file named my-file.yaml to the my_stage stage with the specified auto-compress and overwrite options.",
        "Lists all files on the stage to verify that the file was uploaded successfully.",
        "Drops the stage.",
        "Minimum API version required",
        "0.13.0",
        "You can manage Snowflake pipes, which are named, first-class Snowflake objects that contain a COPY INTO statement used by Snowpipe to load\ndata from an ingestion queue into tables. For an overview of pipes, see Snowpipe.",
        "The Snowflake Python APIs represents pipes with two separate types:",
        "Pipe: Exposes a pipe\u2019s properties such as its name and the COPY INTO statement to be used by Snowpipe.",
        "PipeResource: Exposes methods you can use to fetch a corresponding Pipe object, refresh the pipe with staged data files,\nand drop the pipe.",
        "To create a pipe, first create a Pipe object, and then create a PipeCollection object from the API Root\nobject. Using PipeCollection.create, add the new pipe to Snowflake.",
        "Code in the following example creates a Pipe object that represents a pipe named my_pipe with the specified COPY INTO\nstatement:",
        "The code creates a PipeCollection variable pipes and uses PipeCollection.create to create a new pipe in Snowflake.",
        "You can get information about a pipe by calling the PipeResource.fetch method, which returns a Pipe object.",
        "Code in the following example gets information about a pipe named my_pipe:",
        "You can list pipes using the PipeCollection.iter method, which returns a PagedIter iterator of Pipe objects.",
        "Code in the following example lists pipes whose name starts with my and prints the name of each:",
        "You can perform common pipe operations\u2014such as refreshing a pipe and dropping a pipe\u2014with a PipeResource object.",
        "Note",
        "Only the REFRESH functionality of ALTER PIPE is currently supported.",
        "To demonstrate operations you can do with a pipe resource, code in the following example does the following:",
        "Gets the my_pipe pipe resource object.",
        "Refreshes the pipe with staged data files with the specified, optional prefix (or path).",
        "Drops the pipe.",
        "Minimum API version required",
        "0.13.0",
        "You can manage external volumes, which are named, account-level Snowflake objects that you use to connect Snowflake to your external cloud\nstorage for Apache Iceberg\u2122 tables. For more information, see the External volume section of\nApache Iceberg\u2122 tables.",
        "The Snowflake Python APIs represents external volumes with two separate types:",
        "ExternalVolume: Exposes an external volume\u2019s properties such as its name and storage locations.",
        "ExternalVolumeResource: Exposes methods you can use to fetch a corresponding ExternalVolume object, and drop and undrop\nthe external volume.",
        "To create an external volume, first create an ExternalVolume object, and then create an ExternalVolumeCollection object\nfrom the API Root object. Using ExternalVolumeCollection.create, add the new external volume to Snowflake.",
        "Code in the following example creates an ExternalVolume object that represents an external volume named my_external_volume\nwith the specified AWS S3 storage locations:",
        "You can get information about an external volume by calling the ExternalVolumeResource.fetch method, which returns an\nExternalVolume object.",
        "Code in the following example gets information about an external volume named my_external_volume:",
        "You can list external volumes using the ExternalVolumeCollection.iter method, which returns a PagedIter iterator of\nExternalVolume objects.",
        "Code in the following example lists external volumes whose name starts with my and prints the name of each:",
        "You can perform common external volume operations\u2014such as dropping and undropping an external volume\u2014with an\nExternalVolumeResource object.",
        "To demonstrate operations you can do with an external volume resource, code in the following example does the following:",
        "Gets the my_external_volume external volume resource object.",
        "Drops the external volume.",
        "Undrops the external volume.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}