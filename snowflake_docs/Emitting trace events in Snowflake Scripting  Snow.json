{
    "url": "https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-snowflake-scripting",
    "title": "Emitting trace events in Snowflake Scripting | Snowflake Documentation",
    "paragraphs": [
        "You can use the Snowflake SYSTEM functions to emit trace events from a function or procedure handler written in Snowflake Scripting.",
        "Before emitting trace events, be sure you have the trace level set so that the data you want are stored in the event table. For more\ninformation, see Setting levels for logging, metrics, and tracing.",
        "Note",
        "Before you can begin emitting trace events, you must set up an event table. For more information, see\nEvent table overview.",
        "You can access stored trace event data by executing a SELECT command on the event table. For more information, see\nViewing trace data.",
        "For general information about setting up logging and retrieving messages in Snowflake, see\nTrace events for functions and procedures.",
        "Note",
        "For guidelines to keep in mind when adding trace events, see General guidelines for adding trace events.",
        "You can add trace events by calling the SYSTEM$ADD_EVENT function,\npassing a name for the event. You can also optionally associate attributes (key-value pairs) with an event.",
        "Code in the following example adds two events, SProcEmptyEvent and SProcEventWithAttributes. With\nSProcEventWithAttributes, the code also adds two attributes: key1 and key2.",
        "Adding these events results in two rows in the event table, each with a different value in the RECORD column:",
        "The SProcEventWithAttributes event row includes the following attributes in the row\u2019s RECORD_ATTRIBUTES column:",
        "You can set attributes (key-value pairs) associated with spans by calling the\nSYSTEM$SET_SPAN_ATTRIBUTES function.",
        "For details on spans, see How Snowflake represents trace events.",
        "The SYSTEM$SET_SPAN_ATTRIBUTES function is available in the following form:",
        "where",
        "object is a Snowflake Scripting object with key-value pairs that specify the attributes for this trace event.",
        "Code in the following example creates two attributes and sets their values:",
        "Setting these attributes results in the following in the event table\u2019s RECORD_ATTRIBUTES column:",
        "Code in the following example uses the SYSTEM$ADD_EVENT function to add an event named name_a and an event named name_b.\nWith name_b, it associates two attributes, score and pass. The code also uses SYSTEM$SET_SPAN_ATTRIBUTES to\nset two attributes for the span, key1 and key2.",
        "You can automatically emit the following additional types of trace events for a Snowflake Scripting stored procedure\nin the event table:",
        "Exception catching.",
        "Information about child job execution.",
        "Child job statistics.",
        "Stored procedure statistics, including execution time and input values.",
        "Automatic trace emission is intended for the following use cases:",
        "You want to emit predefined trace events without modifying the body of the stored procedure.",
        "You want to collect information about stored procedure execution that you can analyze later,\nincluding:",
        "Information about child job execution (such as childJobUUID, rowCount, exceptionCode, and so on).",
        "Child job execution time.",
        "Input argument values.",
        "You want more visibility into stored procedure execution to make it easier to develop and debug it without\nmanually adding tracing code in the procedure.",
        "To automatically emit these additional trace events for a stored procedure, set the AUTO_EVENT_LOGGING parameter\nto TRACING or ALL using the ALTER PROCEDURE command. When you set\nthis parameter to ALL, additional log messages are also generated automatically\nfor the stored procedure.",
        "Important",
        "The additional information is added to the event table only if the effective TRACE_LEVEL is set\nto ALWAYS or ON_EVENT. For more information, see Setting levels for logging, metrics, and tracing.",
        "For example, create a simple table and insert data:",
        "Next, create a stored procedure named auto_event_logging_sp. This sample stored procedure updates a table row and\nthen queries the table:",
        "The following examples set the AUTO_EVENT_LOGGING parameter for the stored procedure:",
        "Call the stored procedure:",
        "Query the event table for trace data recorded by the stored procedure named auto_event_logging_sp.\nFor each trace event, print out the timestamp, name, and attributes of the event.",
        "Now, call the stored procedure, but specify a table that doesn\u2019t exist to cause an exception:",
        "Run the query on the event table again to see the information about the exception:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}