{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/reference/latest/_autosummary/snowflake.core.stream.StreamCollection",
    "title": "snowflake.core.stream.StreamCollection | Snowflake Documentation",
    "paragraphs": [
        "Bases: SchemaObjectCollectionParent[StreamResource]",
        "Represents the collection operations on the Snowflake Stream resource.",
        "With this collection, you can create, iterate through, and fetch streams\nthat you have access to in the current context.",
        "Attributes",
        "Methods",
        "Create a stream in Snowflake.",
        "There are two ways to create a stream: by cloning or by building from scratch.",
        "Cloning an existing stream",
        "stream (str) \u2013 The new stream\u2019s name",
        "clone_stream (str or Clone object) \u2013 The name of stream to be cloned",
        "mode (CreateMode, optional) \u2013",
        "One of the following enum values:",
        "CreateMode.error_if_exists: Throw an snowflake.core.exceptions.ConflictError\nif the stream already exists in Snowflake.  Equivalent to SQL create stream <name> ....",
        "CreateMode.or_replace: Replace if the stream already exists in Snowflake. Equivalent to SQL\ncreate or replace stream <name> ....",
        "CreateMode.if_not_exists: Do nothing if the stream already exists in Snowflake.\nEquivalent to SQL create stream <name> if not exists...",
        "Default is CreateMode.error_if_exists.",
        "",
        "copy_grants (bool, optional) \u2013 Whether to enable copy grants when creating the object. Default is False.",
        "Examples",
        "Cloning a Stream instance:",
        "Cloning a Stream instance in a different database and schema",
        "Creating a stream from scratch",
        "stream (Stream) \u2013 The details of Stream object, together with Stream\u2019s properties:\nname; comment is optional\nstream_source: StreamSource object, one of:\nStreamSourceStage, StreamSourceTable, StreamSourceView.",
        "mode (CreateMode, optional) \u2013",
        "One of the following enum values:",
        "CreateMode.error_if_exists: Throw an snowflake.core.exceptions.ConflictError\nif the stream already exists in Snowflake.  Equivalent to SQL create stream <name> ....",
        "CreateMode.or_replace: Replace if the stream already exists in Snowflake. Equivalent to SQL\ncreate or replace stream <name> ....",
        "CreateMode.if_not_exists: Do nothing if the stream already exists in Snowflake.\nEquivalent to SQL create stream <name> if not exists...",
        "Default is CreateMode.error_if_exists.",
        "",
        "copy_grants (bool, optional) \u2013 Whether to enable copy grants when creating the object. Default is False.",
        "Examples",
        "Creating a stream instance by source table:",
        "Creating a stream instance by source view:",
        "Creating a stream instance by source directory table:",
        "Iterate through Stream objects from Snowflake, filtering on any optional \u2018like\u2019 pattern.",
        "like (str, optional) \u2013 A case-insensitive string functioning as a filter, with support for SQL\nwildcard characters (% and _).",
        "starts_with (str, optional) \u2013 String used to filter the command output based on the string of characters that appear\nat the beginning of the object name. Uses case-sensitive pattern matching.",
        "show_limit (int, optional) \u2013 Limit of the maximum number of rows returned by iter(). The default is None, which behaves equivalently\nto show_limit=10000. This value must be between 1 and 10000.",
        "from_name (str, optional) \u2013 Fetch rows only following the first row whose object name matches\nthe specified string. This is case-sensitive and does not have to be the full name.",
        "Examples",
        "Showing all streams that you have access to see:",
        "Showing information of the exact stream you want to see:",
        "Showing streams starting with \u2018your-stream-name-\u2018:",
        "Using a for loop to retrieve information from iterator:",
        "Was this page helpful?"
    ]
}