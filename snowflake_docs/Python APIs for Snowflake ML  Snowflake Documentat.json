{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-ml/snowpark-ml",
    "title": "Python APIs for Snowflake ML | Snowflake Documentation",
    "paragraphs": [
        "The snowflake-ml-python Python package provides Python APIs that connect to the various Snowflake ML workflow\ncomponents and also includes APIs for building and training your own models. You can use these APIs in your favorite\nPython IDE on your own workstation, in Snowsight worksheets, or in Snowflake notebooks.",
        "Tip",
        "See Introduction to Machine Learning with Snowpark ML\nfor an example of an end-to-end workflow using this library.",
        "Snowflake Notebooks provide an easy-to-use notebook interface for your data\nwork, blending Python, SQL, and Markdown. To use Snowflake ML features in notebooks, choose the Anaconda package\nsnowflake-ml-python using the Packages menu at the top of the notebook.",
        "Notebooks support both CPU and GPU runtime options. Many kinds of models require, or benefit from, having a GPU available.",
        "Important",
        "The snowflake-ml-python package and its dependencies must be allowed by your organization\u2019s\npackage policy.",
        "Snowsight Worksheets provide a powerful and versatile method for running\nPython code. To use Snowflake ML features in worksheets, choose the Anaconda package snowflake-ml-python using the Packages menu\nat the top of the worksheet.",
        "Important",
        "The snowflake-ml-python package and its dependencies must be allowed by your organization\u2019s\npackage policy.",
        "You must install the snowflake-ml-python package to develop on your own workstation or elsewhere outside Snowflake.\nAll Snowpark ML features are available in a single package, snowflake-ml-python. You can install the package\nfrom the Snowflake conda channel using the conda command or from the Python Package Index (PyPI) using\npip. Conda is preferred.",
        "Installing from the Snowflake conda Channel",
        "Installing from PyPI",
        "Important",
        "Installing snowflake-ml-python from conda on an arm-based Mac (with M1 or M2 chip) requires specifying the system architecture when\ncreating the conda environment. To do this, include CONDA_SUBDIR=osx-arm64 in the conda create command:\nCONDA_SUBDIR=osx-arm64 conda create --name snowpark-ml.",
        "Create the conda environment where you will install Snowpark ML. If you prefer to use an existing environment, skip this step.",
        "Activate the conda environment:",
        "Install snowflake-ml-python from the Snowflake conda channel:",
        "Tip",
        "Install packages from the Snowflake conda channel whenever possible to ensure that you receive packages that have\nbeen validated with Snowpark ML.",
        "You can install snowflake-ml-python from the Python Package Index (PyPI) by using the standard Python package manager,\npip.",
        "Warning",
        "Do not use this installation procedure if you are using a conda environment. Use the\nconda instructions instead.",
        "Change to your project directory and activate your Python virtual environment:",
        "Install the snowflake-ml-python package:",
        "Some modeling APIs require dependencies that are not installed as dependencies of snowflake-ml-python. The\nscikit-learn and xgboost packages are installed by default, but lightgbm is an optional dependency. If you plan to use\nclasses in the snowflake.ml.modeling.lightgbm namespace, install lightgbm yourself.",
        "Use the following commands to activate your conda environment and install lightgbm from the Snowflake conda channel.",
        "Use the following commands to activate your virtual environment and install lightgbm using pip.",
        "Snowflake might add additional optional dependencies from time to time. To install all optional dependencies using pip:",
        "Snowpark Python is a dependency of snowflake-ml-python and is installed automatically with it. If Snowpark\nPython is not already set up on your system, you might need to perform additional configuration steps. See\nSetting Up Your Development Environment for Snowpark Python for Snowpark Python setup instructions.",
        "Before using Snowflake ML features in Python, connect to Snowflake using a Snowpark Session object. Use the\nSnowflakeLoginOptions function in the snowflake.ml.utils.connection_params module to get the\nconfiguration settings to create the session. The function can read the connection settings from a named connection in\nyour SnowSQL configuration file or from environment variables that you set. It\nreturns a dictionary containing these parameters, which can be used to create a connection.",
        "The following examples read the connection parameters from the named connection myaccount in the SnowSQL\nconfiguration file. To create a Snowpark Python session, create a builder for the Session class, and pass the\nconnection information to the builder\u2019s configs method:",
        "You can now pass the session to any that needs it.",
        "Tip",
        "To create a Snowpark Python session from a Snowflake Connector for Python connection, pass the connection object to\nthe session builder. Here, connection is the Snowflake Connector for Python connection.",
        "Many Snowflake ML featues, for example model training or inference, run code in a Snowflake warehouse. These operations\nrun in the warehouse specified by the session you use to connect. For example, if you create a session from a named\nconnection in your SnowSQL configuration file, you can specify a warehouse using the\nwarehousename parameter in the named configuration.",
        "You can add the warehouse setting when creating the Session object, as shown here, if it does not already\nexist in the configuration.",
        "If no warehouse is specified in the session, or if you want to use a different warehouse, call the session\u2019s\nuse_warehouse method to specify a warehouse.",
        "The Snowpark ML API reference includes documentation on\nall publicly-released functionality. You can also obtain detailed API documentation for any API by using Python\u2019s\nhelp function in an interactive Python session. For example:",
        "Was this page helpful?",
        "On this page"
    ]
}