{
    "url": "https://docs.snowflake.com/en/sql-reference/data-type-conversion",
    "title": "Data type conversion | Snowflake Documentation",
    "paragraphs": [
        "In many cases, a value of one data type can be converted to another data type. For example, an\nINTEGER value can be converted to a\nfloating-point data type value. Converting a data type is called casting.",
        "Users can explicitly convert a value from one data type to another. This is called explicit casting.",
        "In some situations, Snowflake converts a value to another data type automatically. This is called implicit casting or coercion.",
        "Users can explicitly cast a value by using any of the following options:",
        "The CAST function.",
        "The :: operator (called the cast operator).",
        "The appropriate SQL function (for example, TO_DOUBLE).",
        "For example, each query casts a string value to a DATE value:",
        "Casting is allowed in most contexts in which a general expression is allowed, including the WHERE clause. For example:",
        "Coercion occurs when a function (or operator) requires a data type that is different from, but compatible with, the arguments\n(or operands).",
        "Examples for functions or stored procedures:",
        "The following code coerces the INTEGER value in column my_integer_column to FLOAT so that the value can\nbe passed to the function my_float_function(), which expects a FLOAT:",
        "Examples for operators:",
        "The following code coerces the INTEGER value 17 to VARCHAR so that the values can be concatenated by using\nthe || operator:",
        "The result of this SELECT statement is the string '1776'.",
        "The following statement coerces the INTEGER value in column my_integer_column to FLOAT so that the value can be\ncompared to the value my_float_column using the < comparison operator:",
        "Not all contexts (for example, not all operators) support coercion.",
        "When casting inside an expression, the code must take into account the precedence of the cast operator relative to other\noperators in the expression.",
        "Consider the following example:",
        "The cast operator has higher precedence than the arithmetic operator * (multiply), so the statement is interpreted as:",
        "To cast the result of the expression height * width, use parentheses, as shown below:",
        "As another example, consider the following statement:",
        "You might expect this to be interpreted as:",
        "Therefore, it would be expected to return FALSE (0 = FALSE, 1 = TRUE).",
        "However, the cast operator has higher precedence than the unary minus (negation) operator, so the statement is interpreted as:",
        "Therefore, the query results in an error message because the unary minus can\u2019t be applied to a BOOLEAN.",
        "The following table shows the valid data type conversions in Snowflake. The table also shows which coercions Snowflake\ncan perform automatically.",
        "Note",
        "Internally, the CAST function and the :: operator call the appropriate conversion\nfunction. For example, if you cast a NUMBER to a BOOLEAN, then Snowflake calls the TO_BOOLEAN\nfunction. The usage notes for each conversion function apply when the function is called indirectly using a cast, as well as when\nthe function is called directly. For example, if you execute CAST(my_decimal_column AS BOOLEAN), the rules for calling\nTO_BOOLEAN with a DECIMAL value apply. For convenience, the table includes links to the relevant conversion functions.",
        "For details on conversions between semi-structured types and\nstructured types, see Converting structured and semi-structured types.",
        "Source data type",
        "Target data type",
        "Castable",
        "Coercible",
        "Conversion function",
        "Notes",
        "ARRAY",
        "VARCHAR",
        "\u2714",
        "\u274c",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u2714",
        "TO_VARIANT",
        "VECTOR",
        "\u2714",
        "\u2714",
        "BINARY",
        "VARCHAR",
        "\u2714",
        "\u274c",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u274c",
        "TO_VARIANT",
        "BOOLEAN",
        "NUMBER",
        "\u2714",
        "\u274c",
        "TO_NUMBER",
        "VARCHAR",
        "\u2714",
        "\u2714",
        "TO_VARCHAR",
        "For example, from TRUE to 'true'.",
        "VARIANT",
        "\u2714",
        "\u2714",
        "TO_VARIANT",
        "DATE",
        "TIMESTAMP",
        "\u2714",
        "\u2714",
        "TO_TIMESTAMP",
        "VARCHAR",
        "\u2714",
        "\u2714",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u274c",
        "TO_VARIANT",
        "FLOAT   . (floating-point numbers)",
        "BOOLEAN",
        "\u2714",
        "\u2714",
        "TO_BOOLEAN",
        "For example, from 0.0 to FALSE.",
        "NUMBER[(p,s)]",
        "\u2714",
        "\u2714",
        "TO_NUMBER",
        "VARCHAR",
        "\u2714",
        "\u2714",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u2714",
        "TO_VARIANT",
        "GEOGRAPHY",
        "VARIANT",
        "\u2714",
        "\u274c",
        "TO_VARIANT",
        "GEOMETRY",
        "VARIANT",
        "\u2714",
        "\u274c",
        "TO_VARIANT",
        "NUMBER[(p,s)]   . (Fixed-point numbers, including INTEGER)",
        "BOOLEAN",
        "\u2714",
        "\u2714",
        "TO_BOOLEAN",
        "For example, from 0 to FALSE.",
        "FLOAT",
        "\u2714",
        "\u2714",
        "TO_DOUBLE",
        "TIMESTAMP",
        "\u2714",
        "\u2714",
        "TO_TIMESTAMP",
        "[1]",
        "VARCHAR",
        "\u2714",
        "\u2714",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u2714",
        "TO_VARIANT",
        "OBJECT",
        "ARRAY",
        "\u2714",
        "\u274c",
        "TO_ARRAY",
        "VARCHAR",
        "\u2714",
        "\u274c",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u2714",
        "TO_VARIANT",
        "TIME",
        "VARCHAR",
        "\u2714",
        "\u2714",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u274c",
        "TO_VARIANT",
        "TIMESTAMP",
        "DATE",
        "\u2714",
        "\u2714",
        "TO_DATE , DATE",
        "TIME",
        "\u2714",
        "\u2714",
        "TO_TIME , TIME",
        "VARCHAR",
        "\u2714",
        "\u2714",
        "TO_VARCHAR",
        "VARIANT",
        "\u2714",
        "\u274c",
        "TO_VARIANT",
        "VARCHAR",
        "BOOLEAN",
        "\u2714",
        "\u2714",
        "TO_BOOLEAN",
        "For example, from 'false' to FALSE.",
        "DATE",
        "\u2714",
        "\u2714",
        "TO_DATE , DATE",
        "FLOAT",
        "\u2714",
        "\u2714",
        "TO_DOUBLE",
        "For example, from '12.34' to 12.34.",
        "NUMBER[(p,s)]",
        "\u2714",
        "\u2714",
        "TO_NUMBER",
        "For example, from '12.34' to 12.34.",
        "TIME",
        "\u2714",
        "\u2714",
        "TO_TIME , TIME",
        "TIMESTAMP",
        "\u2714",
        "\u2714",
        "TO_TIMESTAMP",
        "VARIANT",
        "\u2714",
        "\u274c",
        "TO_VARIANT",
        "VARIANT",
        "ARRAY",
        "\u2714",
        "\u2714",
        "TO_ARRAY",
        "BOOLEAN",
        "\u2714",
        "\u2714",
        "TO_BOOLEAN",
        "For example, from a VARIANT containing 'false' to FALSE.",
        "DATE",
        "\u2714",
        "\u2714",
        "TO_DATE , DATE",
        "FLOAT",
        "\u2714",
        "\u2714",
        "TO_DOUBLE",
        "GEOGRAPHY",
        "\u2714",
        "\u274c",
        "TO_GEOGRAPHY",
        "NUMBER[(p,s)]",
        "\u2714",
        "\u2714",
        "TO_NUMBER",
        "OBJECT",
        "\u2714",
        "\u2714",
        "TO_OBJECT",
        "TIME",
        "\u2714",
        "\u2714",
        "TO_TIME , TIME",
        "TIMESTAMP",
        "\u2714",
        "\u2714",
        "TO_TIMESTAMP",
        "VARCHAR",
        "\u2714",
        "\u2714",
        "TO_VARCHAR",
        "VECTOR",
        "\u2714",
        "\u274c",
        "The VARIANT must contain an ARRAY of type FLOAT or INT.",
        "VECTOR",
        "ARRAY",
        "\u2714",
        "\u2714",
        "TO_ARRAY",
        "NUMBER can be converted to TIMESTAMP because the values are treated as seconds since the beginning of the epoch (1970-01-01 00:00:00).",
        "Note",
        "For each listed data type (for example, FLOAT), the rules apply to all aliases for that data type (for example, the rules for FLOAT apply to\nDOUBLE, which is an alias for FLOAT).",
        "Except where stated otherwise, the following rules apply to both explicit casting and implicit casting:",
        "Conversion depends not only on the data type, but also the value, of the source. For example:",
        "The VARCHAR value '123' can be converted to a numeric value, but the VARCHAR value 'xyz' can\u2019t be converted to\na numeric value.",
        "The ability to cast a specific value of type VARIANT depends on the type of the data inside the VARIANT. For\nexample, if the VARIANT contains a value of type TIME, then you can\u2019t cast the VARIANT value to a TIMESTAMP value,\nbecause you can\u2019t cast a TIME value to a TIMESTAMP value.",
        "If possible, pass in arguments of the same type. Avoid passing in arguments of different types.",
        "If one of the arguments is a number, the function coerces non-numeric string arguments\n(for example, 'a string') and string arguments that aren\u2019t constants to the type NUMBER(18,5).",
        "For numeric string arguments that aren\u2019t constants, if NUMBER(18,5) isn\u2019t sufficient to represent the numeric value, then\ncast the argument to a type that can represent the value.",
        "For some pairs of data types, conversion can result in loss of precision. For example:",
        "Converting a FLOAT value to an INTEGER value rounds the value.",
        "Converting a value from fixed-point numeric (for example, NUMBER(38, 0)) to floating point (for example, FLOAT) can result in rounding or\ntruncation if the fixed-point number can\u2019t be precisely represented in a floating point number.",
        "Converting a TIMESTAMP value to a DATE value removes the information about the time of day.",
        "Although Snowflake converts values in some situations where loss of precision can occur, Snowflake doesn\u2019t allow conversion in\nother situations where a loss of precision would occur. For example, Snowflake doesn\u2019t allow conversion when conversion would:",
        "Truncate a VARCHAR value. For example, Snowflake doesn\u2019t cast VARCHAR(10) to VARCHAR(5), either implicitly or explicitly.",
        "Result in the loss of digits other than the least significant digits. For example, the following fails:",
        "In this example, the number 12.3 has two digits before the decimal point, but the data type NUMBER(3,2) has room for\nonly one digit before the decimal point.",
        "When converting from a type with less precision to a type with more precision, conversion uses default values. For example,\nconverting a DATE value to a TIMESTAMP_NTZ value causes the hour, minute, second, and fractional seconds to be set to 0.",
        "When a FLOAT value is cast to a VARCHAR value, trailing zeros are omitted.",
        "For example, the following statements create a table and insert a row that contains a VARCHAR value, a FLOAT value, and\na VARIANT value. The VARIANT value is constructed from JSON that contains a floating-point value represented with trailing zeros.",
        "The following SELECT statement explicitly casts both the FLOAT column and the FLOAT value inside the VARIANT column to VARCHAR.\nIn each case, the VARCHAR contains no trailing zeros:",
        "Some operations can return different data types, depending upon a conditional expression. For example, the following\nIFNULL calls return slightly different data types depending upon the input values:",
        "If the expression has more than one possible data type, then Snowflake chooses the data type based on the actual result.\nFor more information about precision and scale in calculations, see Scale and precision in arithmetic operations.\nIf the query generates more than one result (for example, multiple rows of results), then Snowflake chooses a data type that is capable\nof holding each of the individual results.",
        "Some application programs, such as SnowSQL, and some graphical user interfaces, such as the Classic Console, apply their\nown conversion and formatting rules when displaying data. For example, SnowSQL displays BINARY values as a string that contains\nonly hexadecimal digits; that string is generated by implicitly calling a conversion function. Therefore, the data that SnowSQL\ndisplays might not unambiguously indicate which data conversions Snowflake coerced.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}