{
    "url": "https://docs.snowflake.com/en/user-guide/account-replication-failover-failback",
    "title": "Failing over account objects | Snowflake Documentation",
    "paragraphs": [
        "Business Critical Feature",
        "This features requires Business Critical Edition (or higher). To inquire about upgrading, please\ncontact Snowflake Support.",
        "This topic describes the steps necessary to fail over replicated account objects across multiple accounts in different\nregions for disaster recovery.",
        "Enable replication for a primary failover group in a set of accounts.",
        "Create at least one secondary failover group (i.e. replica) of the primary failover group in one or more accounts and regularly\nrefresh (i.e. synchronize) the replica with the latest updates to the objects in the failover group.",
        "For instructions, see Replicating databases and account objects across multiple accounts.",
        "To promote a target account to serve as the source account, you must sign in to the target account you want to promote to\nserve as the new source account and execute the ALTER FAILOVER GROUP \u2026 PRIMARY\ncommand.",
        "Note",
        "The example in this section must be executed by a role with the FAILOVER privilege.",
        "The following example promotes myaccount2 in the current myorg organization to serve as the source account.",
        "Sign in to target account myaccount2.",
        "List failover groups in the account:",
        "Execute the following statement for each secondary failover group you want to promote to serve as the primary failover group:",
        "Note",
        "During a partial outage in your source region, the replication service might continue to be available and might continue\nto refresh the secondary failover groups in target regions.",
        "To ensure data integrity, Snowflake prevents failover if a refresh operation is in progress. This means you cannot\npromote a secondary failover group to serve as the primary if it is being refreshed by a replication operation.\nThe ALTER FAILOVER GROUP \u2026 PRIMARY command returns an error in this scenario.",
        "If there is a refresh operation in progress for the secondary failover group you are trying to promote, the failover statement\nresults in the following error:",
        "To successfully fail over, you must complete the following steps.",
        "Select and complete one of the following options:",
        "Important",
        "Suspending a refresh operation in the SECONDARY_DOWNLOADING_METADATA or SECONDARY_DOWNLOADING_DATA phase\nmight result in an inconsistent state on the target account. For more information, see\nView the current phase of an in-progress refresh operation.",
        "Suspend future refresh operations for the failover group. If there is an in-progress refresh operation, you must wait for\nit to complete before you can failover:",
        "Suspend future refresh operations and cancel a scheduled refresh operation that is currently in progress (if there is one).",
        "If the in-progress refresh operation was manually triggered, see Cancel an in-progress refresh operation that wasn\u2019t automatically scheduled.",
        "Note",
        "You might experience a slight delay between the time that the statement returns and the time that the cancellation\nof the refresh operation is finished.",
        "Verify no refresh operations are in progress for the failover group myfg. The following query\nshould return no results:",
        "To see canceled refresh operations for failover group myfg, you can execute the following statement:",
        "Now you can promote the secondary failover group myfg to primary failover group:",
        "On failover, scheduled refreshes on all secondary failover groups are suspended.\nALTER FAILOVER GROUP \u2026 RESUME must be executed in each target account with a\nsecondary failover group to resume automatic refreshes.",
        "A refresh operation can be safely canceled during most phases of the refresh operation. However, canceling a refresh operation\nin the SECONDARY_DOWNLOADING_METADATA or SECONDARY_DOWNLOADING_DATA phase might result in an inconsistent state on the target\naccount.  If the refresh operation has started one of these phases, it proceeds to completion regardless of the availability of\nthe source account. Allowing the phase to complete before you fail over ensures replicas are in a consistent state.\nAfter the replicas are in a consistent state, you can resume or replay your ingest and transformation pipelines to update the\nreplicas to the current state.",
        "To view the current phase of an in-progress refresh operation for a failover group, use the Information Schema\nREPLICATION_GROUP_REFRESH_PROGRESS, REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB table function.",
        "For example, to view the current phase of an in-progress refresh operation for failover group myfg, execute\nthe following statement:",
        "For a list of refresh operations phases, see the usage notes\nfor the function.",
        "To cancel an in-progress refresh operation that was not triggered automatically by a replication schedule, you must use the\nSYSTEM$CANCEL_QUERY function:",
        "Find the query ID or JOB_UUID for running refresh operations using one of the following options:",
        "Find the query IDs for all running refresh operations:",
        "Use the QUERY_TEXT column to identify the QUERY_ID for failover group refresh operations from the list.",
        "Find the JOB_UUID for an in-progress refresh operation for a specific failover group myfg:",
        "Cancel the refresh operation using the SYSTEM$CANCEL_QUERY function and the QUERY_ID or JOB_UUID:",
        "Returns the following output:",
        "After you cancel the in-progress refresh operation, continue to the\nnext steps.",
        "Tables in a primary database that are populated by Snowpipe Streaming are replicated\nto secondary databases. After failover, reopen active Snowpipe Streaming channels for tables and re-insert any missing data rows\nfor the channels:",
        "Reopen active channels for the table by calling the openChannel API.",
        "Fetch offset tokens:",
        "Call the getLatestCommittedOffsetToken API or",
        "Execute the SHOW CHANNELS command to retrieve a list of the active channels of the table.",
        "Re-insert data rows for the channel from the fetched offset tokens.",
        "If you are using the Kafka connector and Snowpipe Streaming, follow these steps after failover:",
        "Update the Kafka connector configuration to point to the newly promoted source account.",
        "Execute the SHOW CHANNELS command to retrieve the list of active channels and the offset tokens. Each channel belongs to a\nsingle partition in the Kafka topic.",
        "Manually reset offsets in the Kafka Topic for each of those partitions (channels).",
        "Restart the Kafka Connector.",
        "For more information, refer to:",
        "Using Snowflake Connector for Kafka with Snowpipe Streaming.",
        "Replication and Snowpipe Streaming.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}