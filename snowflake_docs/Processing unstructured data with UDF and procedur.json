{
    "url": "https://docs.snowflake.com/en/user-guide/unstructured-data-java",
    "title": "Processing unstructured data with UDF and procedure handlers | Snowflake Documentation",
    "paragraphs": [
        "This topic provides examples of reading and processing unstructured data in staged files with handler code written for the following:",
        "Java user-defined functions (UDFs)",
        "Java user-defined table functions (UDTFs)",
        "Java procedures",
        "You can also read a file with handlers written in other languages:",
        "Python UDFs",
        "Python procedures",
        "Scala UDFs",
        "Scala procedures",
        "Note",
        "To make your code resilient to file injection attacks, always use a scoped URL when passing a file\u2019s location to a UDF, particularly\nwhen the function\u2019s caller is not also its owner. You can create a scoped URL in SQL using the built-in function\nBUILD_SCOPED_FILE_URL. For more information about what the BUILD_SCOPED_FILE_URL does, see\nIntroduction to unstructured data.",
        "In this Topic:",
        "The examples in this section process staged unstructured files using Java handler code \u2013 first with a UDF, then with a procedure. Both\nhandlers extract the contents of a specified PDF file using the Apache PDFBox library.",
        "The handler code is very similar between the UDF and procedure. They differ in how the read the incoming PDF file.",
        "In the UDF, the handler reads the file using a Java InputStream.",
        "In the procedure, the handler reads the file using a Snowflake SnowflakeFile.",
        "The examples use in-line handler code (as opposed to compiled in a staged JAR), which means that you do not need to compile,\npackage, and upload the handler code to a stage. For more information on the difference between in-line and staged handlers, see\nKeeping handler code in-line or on a stage.",
        "Before you begin writing the UDF, download the PDFBox library JAR file if you don\u2019t have it already. It will be a dependency for your\nhandler code. You\u2019ll later upload the library JAR file to a stage.",
        "Download the latest released version of the library from the\nApache PDFBox library download page.",
        "Create stages in which to keep your handler code\u2019s dependency libraries and the data file the handler code will read.",
        "Using the code below, you\u2019ll create separate internal stages to hold:",
        "A library JAR file that\u2019s a dependency for your handler. You\u2019ll reference the stage and JAR file from the UDF.",
        "A data file that your handler code will read.",
        "Code in the following example uses the CREATE STAGE command to create the stages you\u2019ll need.",
        "Complete the following steps to upload the dependency JAR file (with the library code that processes the PDF) and the data file (the PDF\nfile the handler code will process).",
        "You can use the PDF file of your choosing in this example.",
        "Copy the JAR file for Apache PDFBox from the local temporary directory to the stage that stores JAR files:",
        "Copy the PDF file from the local temporary directory to the stage that stores data files:",
        "Complete the following steps to create a UDF that reads and processes PDF files.",
        "Paste and run the following code to create a UDF.",
        "This UDF\u2019s handler parses PDF documents and retrieves their content. The handler uses the InputStream class to read the file.\nFor more on reading files with InputStream, refer to Reading a dynamically-specified file with InputStream.",
        "Refresh the directory table for the data_stage stage with the ALTER STAGE command:",
        "Call the UDF to read the staged PDF file and extract the content.",
        "Code in the following example calls the UDF, passing a scoped URL to make the code resilient to file injection attacks. Always use a\nscoped URL when the function\u2019s caller is not also its owner. You can pass the URL argument as a scoped URL or another form when the UDF\u2019s\ncaller is also its owner.",
        "Complete the following steps to create a procedure that reads and processes PDF files.",
        "Paste and run the following code to create a procedure.",
        "This procedure\u2019s handler parses PDF documents and retrieves their content. The handler uses the SnowflakeFile class to read the\nfile. For more on reading files with SnowflakeFile, refer to Reading a dynamically-specified file with SnowflakeFile.",
        "Refresh the directory table for the data_stage stage with the ALTER STAGE command:",
        "Call the procedure to read the staged PDF file and extract the content.",
        "Code in the following example passes a scoped URL pointing to the PDF file on the stage you created.",
        "The example in this section extracts and returns data from staged files using Java UDTFs.",
        "Create a stage using the CREATE STAGE command:",
        "The following SQL statement creates an internal stages to store the data files for the example:",
        "Copy the CSV file from the local temporary directory to the stage that stores data files:",
        "This example extracts the contents of a specified set of CSV files and returns the rows in a table. By processing file data as it\u2019s read\nfrom the source, you can avoid potential out-of-memory errors that might arise when the file is very large.",
        "Code in the following UDTF handler example uses SnowflakeFile to generate an InputStream from a file URL to read a CSV\nfile. (In a Java UDTF handler, row processing begins when Snowflake calls the process method you implement.) The code uses the\nstream when constructing an instance of a CsvStreamingReader class defined in the handler itself.",
        "The CsvStreamingReader class reads the contents of the received CSV file stream row by row, providing a way for other code to\nretrieve each row as a record where commas delimit columns. The process method returns each record as it is read from the stream.",
        "For more about writing tabular user-defined functions (UDTFs) with a Java handler, see\nTabular Java UDFs (UDTFs).",
        "Complete the following steps to create the Java UDTF and upload the required files:",
        "Create a Java UDTF that uses the SnowflakeFile class:",
        "Refresh the directory table for the data_stage stage:",
        "Call the Java UDTF to read one or more staged CSV files and extract the contents in a table format:",
        "Code in the following example calls the UDF, passing a scoped URL to reduce the risk of file injection attacks. Always used a scoped\nURL when the function\u2019s caller is not also its owner. You can pass the URL argument as a scoped URL or another supported form when the\nUDF\u2019s caller is also its owner.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}