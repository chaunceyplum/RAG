{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/requesting-refs",
    "title": "Request references and object-level privileges from consumers | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic describes how providers can configure a Snowflake Native App to request access to objects in\nthe consumer account that exist outside the APPLICATION object.",
        "In some contexts an installed Snowflake Native App needs to access existing objects in\nthe consumer account that exist outside the APPLICATION object. For example, an app\nmight need to access existing tables in a consumer database.",
        "In this context, it\u2019s not sufficient for the consumer to grant access on an object to\nthe APPLICATION object because the app cannot determine the name of the schema and object in\nthe consumer account.",
        "To allow the Snowflake Native App to access existing objects outside the APPLICATION object, the Snowflake Native App Framework\nprovides references that allow the customer to specify the name and schema for an object\nand enable access to the object.",
        "To request a reference and object-level privilege, the provider performs the following when\ndeveloping and publishing a Snowflake Native App:",
        "Determine which objects require references and their corresponding privileges.",
        "Define the references in the manifest file.",
        "Add a stored procedure in the setup script to handle the callback for each reference\ndefined in the manifest file.",
        "After installing the Snowflake Native App, the consumer performs the following:",
        "View the references required by the Snowflake Native App.",
        "Create the reference by calling the SYSTEM$REFERENCE system function.",
        "Run the callback stored procedure passing the id of the reference.",
        "After the consumer runs the callback stored procedure, the Snowflake Native App can access the\nrequested object.",
        "This workflow outlines the process where the consumer creates the reference\nmanually. Refer to Create a user interface to request privileges and references for information on creating\na user interface to allow consumers to create references and grant privileges using Snowsight.",
        "The following table lists the object types that a reference can include and the privileges\nallowed for each object:",
        "Object Type",
        "Privileges Allowed",
        "TABLE",
        "SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES",
        "VIEW",
        "SELECT, REFERENCES",
        "EXTERNAL TABLE",
        "SELECT, REFERENCES",
        "FUNCTION",
        "USAGE",
        "PROCEDURE",
        "USAGE",
        "WAREHOUSE",
        "MODIFY, MONITOR, USAGE, OPERATE",
        "API INTEGRATION",
        "USAGE",
        "EXTERNAL ACCESS INTEGRATION",
        "USAGE",
        "SECRET",
        "USAGE, READ",
        "The following example shows how to define a reference in the manifest.yml file for\na table in the consumer account that exists outside the APPLICATION object:",
        "This example defines an reference named consumer_table that requires the INSERT and SELECT\nprivileges on a table in the consumer account. The register_callback property specifies a stored\nprocedure used to bind a consumer table to this reference definition.",
        "Use multi_valued to bind multiple consumer objects to the same reference. When this property is specified,\nthe same operations are performed on objects with a single value reference. The property can also be used with\nobjects with multi-valued references. See Supported reference functions to learn more about Snowflake Native App Framework reference operations.",
        "Note",
        "Snowflake recommends against removing a reference definition from the manifest file in a new version of an app. If you need to\nremove a defined reference, update any code that uses the removed reference in the same version release and notify the consumer\nin the README file.",
        "If an app defines a reference then later deletes the reference definition from a subsequent version of the app, calling any function or\nprocedure that still uses the deleted reference results in an error for consumers. For example, the manifest file for version V1 of app\nmy_app includes a reference definition for REF_TO_TABLE and a stored procedure CREATE_VIEW_FROM_TABLE that uses the table reference\nREF_TO_TABLE to create a view VIEW_SELECT_FROM_DEFINED_REF.",
        "In version V2 of my_app, the reference definition for REF_TO_TABLE is removed from the manifest file. When a consumer upgrades\ntheir installed app my_app to version V2, calling the CREATE_VIEW_FROM_TABLE procedure results in the following error:",
        "After defining a reference in the manifest.yml file, a provider must add a\nstored procedure to the setup script to register the callback for the reference.",
        "The following example shows a stored procedure used to handle a callback for the reference\nshown in Define a reference in the manifest file:",
        "This example creates a stored procedure named REGISTER_SINGLE_REFERENCE that calls\na system function to perform a specific operation on a reference that is passed as an\nargument to the stored procedure.",
        "Note",
        "Because the stored procedure uses the SYSTEM$SET_REFERENCE system function, the stored procedure\nonly works for a reference with a single value in the description. To associate a reference with\nmultiple values, use the SYSTEM$ADD_REFERENCE system function.",
        "For some object types, a provider must add a stored procedure to the setup script to provide additional\nconfiguration. This callback is used when consumers allow references using Snowsight.",
        "The following example shows how to define a configuration callback stored procedure for the reference\nshown in Define a reference in the manifest file:",
        "This example creates a stored procedure named GET_CONFIGURATION_FOR_REFERENCE that returns\na JSON-formatted configuration that is used to build a reference of type EXTERNAL ACCESS INTEGRATION or\nSECRET reference. The entries in the switch statement should map to the reference names in the\nmanifest.yml file.",
        "Note",
        "This callback function is required by references of type EXTERNAL ACCESS INTEGRATION and SECRET.\nIt is only applicable to these types of references.",
        "When a provider defines references in the manifest.yml file, they are included as part\nof the installed Snowflake Native App.",
        "To view the references defined for a Snowflake Native App, run the SHOW REFERENCES\ncommand as shown in the following example:",
        "After viewing the reference definition for a Snowflake Native App, the consumer creates a reference by running\nthe SYSTEM$REFERENCE system function as shown in the following example:",
        "This command returns an identifier for the reference. The consumer can pass the identifier to the\ncallback stored procedure for the reference as shown in the following example:",
        "In this example, consumer_table is the name of the reference defined in the manifest.yml file.\nAfter the consumer runs the stored procedure that associates the reference, the Snowflake Native App can access the\ntable in the consumer account.",
        "The callback stored procedure in the previous section\ncalls the SYSTEM$SET_REFERENCE system function as shown in the following example:",
        "Refer to Supported reference functions for other system functions related\nto references.",
        "Snowflake recommends that you do not modify reference definitions across versions.\nTo update a reference definition in a new version, for example, to change the privileges\nto SELECT, INSERT from SELECT, you must define a new reference definition with a different name\nThe updated Snowflake Native App can use this new reference in the new version of the app.",
        "To embed a reference within another object, for example to assign a reference to a variable,\nthe reference must already be bound to an object in the consumer account. For example, you\ncannot create a task unless you first bind the reference to the consumer warehouse.",
        "The following sections provide examples of using references in different contexts.",
        "Note",
        "The reference() functions in the following examples can only be called in a stored procedure\nin the APPLICATION object.",
        "The following examples show how to run queries using references:",
        "The following example shows how to call a stored procedure using a reference:",
        "The following examples show how to modify data in a table using references:",
        "The following example shows how to run the DESCRIBE operation using a reference:",
        "Note",
        "Consumers cannot directly call functions or stored procedures that contain references to external access\nintegrations or secrets. References to secrets and external access integrations can be used by all\nother application components, for example Streamlit apps, tasks, other functions and stored procedures.",
        "To allow consumers to directly call a function or stored procedure that contains references to\nexternal access integrations or secrets, providers can include a function containing these objects\nwithin a wrapper function that the consumer can call directly.",
        "The configuration callback function returns a response in JSON format. The JSON\nformat returned is different for external access integration and secret references.",
        "For EXTERNAL ACCESS INTEGRATION references, the expected structure of the JSON response is:",
        "host_ports",
        "An array of strings. Each value must be a valid domain.",
        "Optionally, it can also include a port. The valid port range is 1 to 65535, inclusive.\nIf you do not specify a port, it defaults to 443. If an external network location supports\ndynamic ports, you need to specify all possible ports.",
        "To allow access to all ports, specify the port as 0. For example, company.com:0.",
        "These values are used to create an egress network rule for the external access integration.\nSee CREATE NETWORK RULE for more information.",
        "allowed_secrets",
        "Specifies the secrets allowed by the EXTERNAL ACCESS INTEGRATION reference. Valid values are:",
        "NONE: Secrets are not allowed.",
        "ALL: Allows any existing secret.",
        "LIST: Allows a specific set of secrets as specified in the secret_references\nproperty.",
        "The values of the allowed_secrets are used to create the external access integration.\nSee CREATE EXTERNAL ACCESS INTEGRATION for more information.",
        "secret_references:",
        "Specifies a list of secret references that are allowed by the external access integration.",
        "The values specified here must be the same as the secret references defined in the manifest.",
        "This property is only applicable if the allowed_secrets is set to LIST. In this\ncontext, secret_references is required.",
        "For secret references, the expected structure of the JSON response is:",
        "The type of secret. The valid value is:",
        "OAUTH2: Specifies the secret to use with the OAuth2 grant flow. See\nCREATE SECRET for more information.",
        "Specifies the values required to configure the\nAPI Authentication for an OAuth secret.",
        "In case of errors or if the reference is not yet ready for configuration, the expected structure of\nthe error response is:",
        "message:\nThe error message from the application that is displayed in Snowsight.",
        "The Snowflake Native App Framework supports the following functions to perform different operations\nrelated to references.",
        "System Function",
        "Description",
        "set_reference",
        "SYSTEM$SET_REFERENCE('<reference_name>', '<reference_string>')",
        "Supports only for a single reference. If a reference has already been\ncreated using the same name, the existing reference is overwritten.",
        "Returns a unique system-generated alias for the reference.",
        "add_reference",
        "SYSTEM$ADD_REFERENCE('<reference_name>', '<reference_string>')",
        "Supports both single and multi-valued references. For single-value references, the function\nreturns an error if a reference has already been created using the same value specified\nby reference_name.",
        "Returns a unique system-generated alias for the reference.",
        "remove_reference",
        "SYSTEM$REMOVE_REFERENCE('<reference_name>'[, '<alias>'])",
        "Supports both single and multi-valued references. An <alias> is required to remove\nmulti-valued references.",
        "Removes an association with a multi-valued reference.",
        "remove_all_references",
        "SYSTEM$REMOVE_ALL_REFERENCES('<reference_name>')",
        "Removes all associations to the reference.",
        "get_all_references",
        "SYSTEM$GET_ALL_REFERENCES('<reference_name>')",
        "Returns an array of system-generated aliases of entities associated to a reference name:",
        "Empty list if the reference name is not bound to an entity",
        "All associations for multi-valued references",
        "1 or 0 association for single-valued references",
        "Returned value does not contain consumer\u2019s object name",
        "Used to iterate through all associations for a multi-valued reference in a loop.",
        "get_referenced_object_id_hash",
        "SYSTEM$GET_REFERENCED_OBJECT_ID_HASH('<reference_name>'[, '<alias>'])",
        "Takes system-generated alias for multi-valued reference.",
        "Returns the hash of the entity id of the bound object.\nThis is the identifier of the entity resolved originally when a reference was created.",
        "This function is useful for the Snowflake Native App to determine if the object bound to a\nreference has been changed. The Snowflake Native App can save the value,\nthen compare the current value to the previously known value.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}