{
    "url": "https://docs.snowflake.com/en/sql-reference/session-variables",
    "title": "SQL variables | Snowflake Documentation",
    "paragraphs": [
        "You can define and use SQL variables in sessions in Snowflake.",
        "Snowflake supports SQL variables declared by the user. They have many uses, such as storing application-specific environment settings.",
        "SQL variables are globally identified using case-insensitive names.",
        "Snowflake provides the following DDL commands for using SQL variables:",
        "SET",
        "UNSET",
        "SHOW VARIABLES",
        "You can set variables by executing the SQL statement SET or by setting the variables in the connection\nstring when you connect to Snowflake.",
        "The size of string or binary variables is limited to 256 bytes.",
        "Variables can be initialized in SQL using the SET command. The data type of the variable is derived from the\ndata type of the result of the evaluated expression.",
        "Multiple variables can be initialized in the same statement, thereby reducing the number of round-trip communications with the server.",
        "In addition to using SET to set variables within a session, you can pass variables as arguments in the connection\nstring used to initialize a session in Snowflake. This option is especially useful when using tools where the specification of the connection string\nis the only customization possible.",
        "For example, using the Snowflake JDBC driver, you can set additional connection properties that will be interpreted as parameters. Note that\nthe JDBC API requires SQL variables to be strings.",
        "Variables can be used in Snowflake anywhere a literal constant is allowed, except where noted in the documentation. To distinguish them\nfrom bind values and column names, all variables must be prefixed with a $ sign.",
        "For example:",
        "Note",
        "Because the $ sign is the prefix used to identify variables in SQL statements, it is treated as a special character when used\nin identifiers. Identifiers (database names, table names, column names, etc.) cannot start with special characters unless the entire\nname is enclosed in double quotes. For more information, see Object identifiers.",
        "Variables can also contain identifier names, such as table names. To use a variable as an identifier, you must\nwrap it inside IDENTIFIER(), e.g. IDENTIFIER($my_variable). Some examples are below:",
        "In the context of a FROM clause, you can wrap the variable name in TABLE(), as shown below:",
        "For more information about IDENTIFIER(), see Literals and variables as identifiers.",
        "To see all the variables defined in the current session, use the SHOW VARIABLES command:",
        "The following convenience functions are provided for manipulating session variables to support compatibility with other database systems\nand to issue SQL through tools that do not support the $ syntax for accessing variables. Note that all these functions accept and\nreturn session variable values as strings:",
        "SYS_CONTEXT and SET_SYS_CONTEXT",
        "SESSION_CONTEXT and SET_SESSION_CONTEXT",
        "GETVARIABLE and SETVARIABLE",
        "Here are examples of using GETVARIABLE. First, define a variable using SET:",
        "Return the variable value:",
        "In this example, the output is NULL because Snowflake stores variables with all uppercase letters.",
        "Update the casing:",
        "You can use the variable name in a WHERE clause, for example:",
        "SQL variables are private to a session. When a Snowflake session is closed, all variables created during the session are dropped. This\nmeans that no one can access user-defined variables that have been set in another session, and when the session is closed, these variables\nexpire.",
        "In addition, variables always can be explicitly destroyed using the UNSET command.",
        "For example:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}