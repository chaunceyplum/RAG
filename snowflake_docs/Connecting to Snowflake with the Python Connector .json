{
    "url": "https://docs.snowflake.com/en/developer-guide/python-connector/python-connector-connect#setting-a-default-connection",
    "title": "Connecting to Snowflake with the Python Connector | Snowflake Documentation",
    "paragraphs": [
        "This topic explains the various ways you can connect to Snowflake with the Python connector.",
        "Important",
        "Beginning with Snowflake version 8.24, network administrators have the option to require multi-factor authentication (MFA) for all connections to Snowflake. If your administrator decides to enable this feature, you must configure your client or driver to use MFA when connecting to Snowflake. For more information, see the following resources:",
        "8.24 release notes",
        "Multi-factor authentication (MFA)",
        "Troubleshooting service users authentication issues with Snowflake MFA Knowledge Base article",
        "After configuring your driver, you can evaluate and troubleshoot your network connectivity to Snowflake using SnowCD.",
        "You can use SnowCD during the initial configuration process and on-demand to evaluate and troubleshoot your network connection to Snowflake.",
        "To import the snowflake.connector module, execute the following command:",
        "You can get login information from environment variables, the command line, a configuration file, or another appropriate\nsource. For example:",
        "For the ACCOUNT parameter, use your account identifier. Note that the account identifier\ndoes not include the snowflakecomputing.com suffix.",
        "For details and examples, see Usage notes for the account parameter (for the connect method).",
        "Note",
        "For descriptions of available connector parameters, see the snowflake.connector methods.",
        "If you copy data from your own Amazon S3 bucket, then you need the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.",
        "Note",
        "If your data is stored in a Microsoft Azure container, provide the credentials directly in the COPY statement.",
        "After reading the connection information, connect using either the default authenticator or federated authentication\n(if enabled).",
        "You can set session parameters, such as QUERY_TAG, in multiple ways when using the Python Connector:",
        "You can set session-level parameters at the time you connect to Snowflake by passing\nthe optional connection parameter named session_parameters, as follows:",
        "The session_parameters dictionary passed to the snowflake.connector.connect method can contain one or more session-level parameters.",
        "Note",
        "You cannot set the SEARCH_PATH parameter within a Python connection. You must establish a session before setting a search path.",
        "You can also set session parameters by executing the ALTER SESSION SET SQL statement after connecting:",
        "For more information about session parameters, see the descriptions of individual parameters on the general\nParameters page.",
        "Connect to Snowflake using the login parameters:",
        "You might need to extend this with other information available in the snowflake.connector.connect method.",
        "The Python connector lets you add connection definitions to a connections.toml configuration file.\nA connection definition refers to a collection of connection-related parameters.  Snowflake Python libraries currently support TOML version 1.0.0.",
        "For more information about toml file formats, see TOML (Tom\u2019s Obvious Minimal Language).",
        "The Python connector looks for the connections.toml file in the following locations, in order:",
        "If a ~/.snowflake directory exists on your machine, Snowflake CLI uses the\n~/.snowflake/connections.toml file. You can override the default ~/.snowflake directory by setting the\nlocation in the SNOWFLAKE_HOME environment variable.",
        "Otherwise, Snowflake CLI uses the connections.toml file in the one of the following locations, based on your operating system:",
        "Linux: ~/.config/snowflake/connections.toml, but you can update it with XDG vars",
        "Windows: %USERPROFILE%\\AppData\\Local\\snowflake\\connections.toml",
        "Mac: ~/Library/Application Support/snowflake/connections.toml",
        "To add credentials in a connections configuration file:",
        "In a text editor, open the connections.toml file for editing. For example, to open the file in the Linux vi editor:",
        "Add a new Snowflake connection definition.",
        "For example, to add a Snowflake connection called myconnection with the account myaccount,\nuser johndoe, and password credentials, as well as database information,\nadd the following lines to the configuration file:",
        "Connection definitions support the same configuration options available in the\nsnowflake.connector.connect method.",
        "Optional: Add more connections, as shown:",
        "Save changes to the file.",
        "In your Python code, supply the connection name to snowflake.connector.connect, similar to the following:",
        "You can also override values defined for the connection in the connections.toml file, as follows:",
        "You can set a connection as the default, so you don\u2019t have to specify one every time you call\nsnowflake.connector.connect() to connect to Snowflake. You can define a default connection in any of\nthe following ways, which are listed in increasing order of precedence:",
        "Create a connection definition named default.",
        "In the connections.toml file, create the connection definition and give it the name default, as shown:",
        "Save the file.",
        "Specify a named connection as the default connection in the Snowflake config.toml file, in the same directory\nas the connections.toml file.",
        "Open the config.toml file for editing; then:",
        "Set the default_connection_name parameter similar to the following:",
        "Save the file.",
        "Set the SNOWFLAKE_DEFAULT_CONNECTION_NAME environment variable.",
        "Sometimes you might want to override the default connection temporarily, such as trying a test connection, without needing\nto change the normal default connection. You can override the default connection specified in the connections.toml\nand config.toml files by setting the SNOWFLAKE_DEFAULT_CONNECTION_NAME environment variable as follows:",
        "To use the default connection, execute Python code similar to the following:",
        "Note",
        "If you choose to rely on a default connection, you cannot override connection parameters, such as username,\ndatabase, or schema.",
        "If you have configured Snowflake to use single sign-on (SSO), you can configure\nyour client application to use SSO for authentication. See Using SSO with client applications that connect to Snowflake for details.",
        "Snowflake supports caching MFA tokens, including combining MFA token caching with SSO.",
        "For more information, see Using MFA token caching to minimize the number of prompts during authentication \u2014 optional.",
        "The Python connector supports key pair authentication and key rotation.",
        "For more information on how to configure key pair authentication and key rotation, see Key-pair authentication and key-pair rotation.",
        "After completing the key pair authentication configuration, set the private_key_file parameter in the connect function to the path to the private key file. Also, set the private_key_file_pwd parameter to the passphrase of the private key file.",
        "Modify and execute the sample code, below:",
        "Update the security parameters:",
        "path: Specifies the local path to the private key file you created.",
        "Update the connection parameters:",
        "user: Specifies your Snowflake login name.",
        "account_identifier: Specifies your account identifier.",
        "For more details, see Usage notes for the account parameter (for the connect method).",
        "Sample code",
        "To use a proxy server, configure the following environment variables:",
        "HTTP_PROXY",
        "HTTPS_PROXY",
        "NO_PROXY",
        "For example:",
        "Tip",
        "Snowflake\u2019s security model does not allow Secure Sockets Layer (SSL) proxies (using an HTTPS certificate). Your proxy server must use a publicly-available Certificate Authority (CA), reducing potential security risks such as a MITM (Man In The Middle) attack through a compromised proxy.",
        "If you must use your SSL proxy, we strongly recommend that you update the server policy to pass through the Snowflake certificate such that no certificate is altered in the middle of\ncommunications.",
        "Optionally NO_PROXY can be used to bypass the proxy for specific communications. For example, access to Amazon S3 can bypass the proxy server by specifying NO_PROXY=\".amazonaws.com\".",
        "NO_PROXY does not support wildcards. Each value specified should be one of the following:",
        "The end of a hostname (or a complete hostname), for example:",
        ".amazonaws.com",
        "myorganization-myaccount.snowflakecomputing.com",
        "An IP address, for example:",
        "192.196.1.15",
        "If more than one value is specified, values should be separated by commas, for example:",
        "To connect using OAuth, the connection string must include the authenticator parameter set to oauth and the token parameter set to the oauth_access_token. For more information, see Clients, drivers, and connectors.",
        "Calling snowflake.connector.connect submits a login request. If a login request fails, the connector can resend the connection\nrequest. The following parameters set time limits after which the connector stops retrying requests:",
        "login_timeout: Specifies how long, in seconds, to keep resending the connection request. If the connection is\nunsuccessful within that time, the connector fails with a timeout error after completing the current attempt instead of\ncontinuing to retry the login request. After the timeout passes, further retries are prevented. However, the current ongoing attempt terminates naturally.",
        "network_timeout: Specifies how long to wait for network issues to resolve for other requests, such as query\nrequests from cursor.execute. When network_timeout seconds have passed, if the current attempt fails, a timeout occurs, and the request in question is not retried.\nAfter network_timeout seconds pass,\nthe current attempt is still allowed to finish (fail on its own), after which the timeout occurs.",
        "socket_timeout: Specifies the connection and request timeouts at the socket level.",
        "The following example overrides the socket_timeout for the SNOWFLAKE_JWT authenticator:",
        "The following example demonstrates the effect of setting socket_timeout to a large value:",
        "The following example shows how to override the socket timeout for the SNOWFLAKE_JWT authenticator:",
        "Note that the MAX_CON_RETRY_ATTEMPTS environment variable limits the maximum number of retry attempts for login requests.\nIf a request has not timed out but the maximum number of retry attempts is reached, the request immediately fails.\nThe default value is 1, meaning the connector makes only one retry attempt.",
        "In some situations, you might want to vary the rate or frequency the connector uses to retry failed requests due to timeouts.\nFor example, if you notice that very large numbers of attempts occur concurrently, you can spread those requests out by\ndefining a retry backoff policy. A backoff policy specifies the time to wait between retry attempts.",
        "The Snowflake Connector for Python implements backoff policies with the backoff_policy connection parameter\nthat specifies a Python generator function. The generator function lets you specify how long to wait (back off) before sending\nthe next retry request.",
        "Snowflake provides the following helpers to create predefined generator functions with your desired parameters.\nYou can use these if you do not want to create your own:",
        "linear_backoff, which increases the backoff duration by a constant each iteration.",
        "exponential_backoff, which multiplies the backoff duration by a constant each iteration.",
        "mixed_backoff, which randomly chooses between incrementing the backoff duration with exponential_backoff and leaving it unchanged each iteration.",
        "These predefined generator functions use the following parameters to specify their behaviors:",
        "base: Initial backoff time, in seconds (default = 1).",
        "factor: Coefficient for incrementing the backoff time. The effect depends on implementation (default = 2); linear_backup adds the value, while exponential_backup multiplies the value.",
        "cap: Maximum backoff time, in seconds (default = 16).",
        "enable_jitter: Whether to enable jitter on computed durations (default = True).",
        "For more information about jitter in exponential backoff, see the AWS Exponential Backoff And Jitter article.",
        "For example, you can use the exponential_backoff policy with default values or with custom values, as shown:",
        "You can also create your own backoff policy generator functions, similar to the following that defines\nthe my_backoff_policy generator function:",
        "You then set the backoff_policy connection parameter to the name of your generator function as follows:",
        "When the driver connects, Snowflake sends a certificate to confirm that the connection is to Snowflake rather than to\na host that is impersonating Snowflake. The driver sends that certificate to an OCSP (Online Certificate Status\nProtocol) server to verify that the certificate has not been revoked.",
        "If the driver cannot reach the OCSP server to verify the certificate, the driver can\n\u201cfail open\u201d or \u201cfail closed\u201d.",
        "Versions of the Snowflake Connector for Python prior to 1.8.0 default to fail-close mode. Versions 1.8.0 and later\ndefault to fail-open. You can override the default behavior by setting the optional connection parameter\nocsp_fail_open when calling the connect() method. For example:",
        "The driver or connector version and its configuration both determine the OCSP behavior. For more information about the driver or connector version, their configuration, and OCSP behavior, see OCSP Configuration.",
        "To ensure all communications are secure, the Snowflake Connector for Python uses the HTTPS protocol to connect to Snowflake, as well as to connect to all other services (e.g. Amazon S3 for staging data files and Okta for federated authentication). In addition to the regular HTTPS protocol, the connector also checks the TLS/SSL certificate revocation status on each connection via OCSP (Online Certificate Status Protocol) and aborts the connection if it finds the certificate is revoked or the OCSP status is not reliable.",
        "Because each Snowflake connection triggers up to three round trips with the OCSP server, multiple levels of cache for OCSP responses have been introduced to reduce the network overhead added to the connection:",
        "Memory cache, which persists for the life of the process.",
        "File cache, which persists until the cache directory (e.g. ~/.cache/snowflake) is purged.",
        "OCSP response server cache.",
        "Caching also addresses availability issues for OCSP servers (i.e. in the event the actual OCSP server is down). As long as the cache is valid, the connector can still validate the certificate revocation status.",
        "If none of the cache layers contain the OCSP response, the client attempts to fetch the validation status directly from the CA\u2019s OCSP server.",
        "By default, the file cache is enabled in the following locations, so no additional configuration tasks are required:",
        "~/.cache/snowflake/ocsp_response_cache.json",
        "~/Library/Caches/Snowflake/ocsp_response_cache.json",
        "%USERPROFILE%\\AppData\\Local\\Snowflake\\Caches\\ocsp_response_cache.json",
        "However, if you want to specify a different location and/or file name for the OCSP response cache file, the connect method accepts the ocsp_response_cache_filename parameter, which specifies the path and name for the OCSP cache file in the form of a URI.",
        "Note",
        "The OCSP response cache server is currently supported by the Snowflake Connector for Python 1.6.0 and higher.",
        "The memory and file types of OCSP cache work well for applications connected to Snowflake using one of the clients Snowflake provides, with a persistent host. However, they don\u2019t work in dynamically-provisioned environments such as AWS Lambda or Docker.",
        "To address this situation, Snowflake provides a third level of caching: the OCSP response cache server. The OCSP response cache server fetches OCSP responses hourly from the CA\u2019s OCSP servers and stores them for 24 hours. Clients can then request the validation status of a given Snowflake certificate from this server cache.",
        "Important",
        "If your server policy denies access to most or all external IP addresses and web sites, you must allow the cache server address to allow normal service operation. The cache server URL is\nocsp*.snowflakecomputing.com:80.",
        "If you need to disable the cache server for any reason, set the SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED environment variable to false. Note that the value is case-sensitive and must be in\nlowercase.",
        "Note",
        "Running diagnostics for a connection requires the following:",
        "Snowflake Connector for Python version 3.9.1 or newer.",
        "Python version 3.8 or newer.",
        "If you encounter connectivity issues, you can run diagnostics directly within the connector. Snowflake Support might also request this information to help you with connectivity issues.",
        "The diagnostics collection uses the following connection parameters:",
        "enable_connection_diag: Whether to generate a diagnostic report.",
        "connection_diag_log_path: Absolute path for the generated report.",
        "connection_diag_allowlist_path: Absolute path to a JSON file containing the output of SYSTEM$ALLOWLIST() or SYSTEM$ALLOWLIST_PRIVATELINK(). Required only if the user defined in the connection does not have permission to run the system allowlist functions or if connecting to the account URL fails.",
        "To configure a connection to generate diagnostics:",
        "Configure the connection parameters:",
        "Set your Snowflake account credential parameters.",
        "Set enable_connection_diag=True in your connect parameters.",
        "If desired, change the location for the generated report by setting the connection_diag_log_path parameter.",
        "For example:",
        "Execute the code snippet.",
        "Review the diagnostic test output of the generated SnowflakeConnectionTestReport.txt file located in the specified log path.",
        "You can review the report for any connectivity issues and discuss them with your network team. You can also provide the report to Snowflake Support for additional assistance.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}