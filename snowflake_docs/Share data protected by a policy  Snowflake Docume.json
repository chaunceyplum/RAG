{
    "url": "https://docs.snowflake.com/en/user-guide/data-sharing-policy-protected-data",
    "title": "Share data protected by a policy | Snowflake Documentation",
    "paragraphs": [
        "Data sharing consumers can use a shared database role to access shared data protected by a masking policy or a row access policy.",
        "A data sharing provider can share a database role to enable a data sharing consumer to access policy protected data. The provider defines\nthe policy to call the IS_DATABASE_ROLE_IN_SESSION function to evaluate the shared database role or\na mapping table column that contains the database role. This provides more options to the provider to share data and allows the consumer to\naccess sensitive data that the provider makes available.",
        "When the policies and protected tables are in different databases, the provider must:",
        "Create the database role in the same database as the protected table.",
        "Grant the database role to the share containing the protected table.",
        "Share the database that contains the protected table to the consumer account.",
        "When the consumer creates a database from the share, the database roles in the share are granted to the role that creates the database from\nthe share. This allows the account role in the consumer account to meet the policy conditions that specify the database role and access the\nshared data.",
        "To access the shared data protected by the policy, the consumer must specify the database containing the shared database role to make the\nshared database role active in the current session. In this context, making the database role active means that the database role is\navailable in the role hierarchy of the current role for the user. If you do not specify this shared database, users in the consumer account\ncannot access shared data that is protected by a policy. You can specify this database using either of the following options:",
        "Activate the database in the session with the USE <object> command or select the database in the worksheet. For example:",
        "Where mounted_db is the name of the database the consumer creates from the share.",
        "For a specific query, use the fully qualified name of the object that is in the same database as the database role. For example:",
        "There are two different ways to specify arguments in the IS_DATABASE_ROLE_IN_SESSION function: a string literal or a nonliteral\n(i.e. column name).",
        "When you specify a database role as a string in the IS_DATABASE_ROLE_IN_SESSION function, the result of calling the\nfunction depends on how the function is called. For example:",
        "In a worksheet, Snowflake looks at the database that is in use for the session or the database that is specified in the query. This\napplies to both the provider account and the consumer account.",
        "With a policy, UDF, or view, Snowflake looks at the database that contains the protected object. When these objects are not\nshared and the database role being is defined in a different database, the function evaluates to False.",
        "When you specify a column name as the argument in the IS_DATABASE_ROLE_IN_SESSION function:",
        "If a table query calls the function, the column maps to the table identifier of the table containing the column. Snowflake then looks\nat the database roles in the database containing the table. For example, to specify the AUTHZ_ROLE (i.e. authorized role) column as the\nargument:",
        "If a masking policy, row access policy, or UDF calls the function, the lookup occurs in the database that contains the protected table.",
        "Sharing policy-protected data with the IS_DATABASE_ROLE_IN_SESSION function in the policy requires the same steps to create a policy to\ncall the function and share data. To summarize:",
        "The provider creates an account role.",
        "The provider creates a policy and sets the policy on a table or column.",
        "The provider tests the policy with the account role.",
        "The provider creates a database role and tests the policy with the database role.",
        "The provider creates a share and grants privileges to the share, including granting the database role to the share.",
        "The consumer creates a database from the share (the mounted database).",
        "The consumer queries the shared object that is protected by the policy.",
        "In this example, the database roles, masking policy, and the protected table are all in the same database named mydb.",
        "For reference:",
        "The database roles are analyst_dbrole and support_dbrole.",
        "The masking policy is defined as follows:",
        "The EMAIL column is in a table named mydb.tables.empl_info and the masking policy is set on this column.",
        "Complete the following steps to share the database mydb and allow the consumer to use the shared database role to query the shared data\nprotected by the shared masking policy. These steps assume the provider has already tested the masking policy on the EMAIL column with\ntheir account roles and database roles.",
        "In the provider account, execute the CREATE SHARE command to create a share for the analyst database role:",
        "Grant privileges to the share. The same privileges are required for each share:",
        "Add the consumer account to the share:",
        "In the consumer account, create the account role r1 and grant privileges to this role to import the share:",
        "Import the share:",
        "Verify the database role is in session:",
        "The SELECT statement should return True.",
        "Query the protected table:",
        "The SELECT statement should return the unmasked email addresses.",
        "Grant the database roles to account roles so that users with these roles can query the protected table and view data based on the\nmasking policy definition.",
        "After repeating the previous two steps, a user that is granted the support_dbrole database role should see a partially masked email\naddress.",
        "When the policy and the protected table are in different databases, share the database that contains the protected table with the consumer.",
        "For example:",
        "mydb1 contains the masking policy.",
        "mydb2 contains the table named mydb2.tables.empl_info, which contains the EMAIL column. The masking policy is set on this column.",
        "You must group the table and the database role, analyst_dbrole, in the same database.",
        "The provider follows the same procedure as the previous example in terms of creating a share, granting privileges to the share, and\ngranting the database role to the share.",
        "The consumer follows the same procedure as the previous example in terms of creating a database from the share. However, the consumer must\nhave the database containing the protected table in use to activate the database role. Then the consumer can query the protected table by\nspecifying the fully qualified name of the table.",
        "In the provider account, execute the CREATE SHARE command to create a share for each database:",
        "Grant privileges to the share named analyst_table_share:",
        "Add the consumer account to the share:",
        "In the consumer account, create the account role r1 and grant privileges to this role to import the share:",
        "Import the share that contains the protected table and the database role:",
        "Verify the database role is in session:",
        "The SELECT statement should return True.",
        "Query the protected table:",
        "The SELECT statement should return the unmasked email addresses.",
        "In this example, the row access policy calls the IS_DATABASE_ROLE_IN_SESSION function to lookup the role name in the authz_role\n(authorized role) column. The nonliteral syntax and that function lookup occurs in the database that contains the protected table.",
        "Create the policy:",
        "Add the policy to a table:",
        "The provider can choose to share objects in a single database or in multiple databases as shown in the masking policy examples. The\nconsumer follows the same procedure to create a database from a share for each database that the provider makes available.",
        "In this example, the row access policy calls the IS_DATABASE_ROLE_IN_SESSION function to look up the authorized role from a mapping table\ncolumn called role_name. The nonliteral syntax and that function lookup occurs in the database that contains the protected\ntable. In this scenario, the mapping table must be in the same database as the protected table. After creating the policy, add the policy\nto the table containing the authz_role column.",
        "Create the policy:",
        "Add the policy to a table:",
        "The provider can choose to share objects in a single database or in multiple databases as shown in the masking policy examples. The\nconsumer follows the same procedure to create a database from a share for each database that the provider makes available.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}