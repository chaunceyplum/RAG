{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark-ml/reference/latest/modeling",
    "title": "snowflake.ml.modeling | Snowflake Documentation",
    "paragraphs": [
        "Classes",
        "CalibratedClassifierCV(*[,\u00a0estimator,\u00a0...])",
        "Probability calibration with isotonic regression or logistic regression For more details on this class, see sklearn.calibration.CalibratedClassifierCV",
        "Classes",
        "AffinityPropagation(*[,\u00a0damping,\u00a0max_iter,\u00a0...])",
        "Perform Affinity Propagation Clustering of data For more details on this class, see sklearn.cluster.AffinityPropagation",
        "AgglomerativeClustering(*[,\u00a0n_clusters,\u00a0...])",
        "Agglomerative Clustering For more details on this class, see sklearn.cluster.AgglomerativeClustering",
        "Birch(*[,\u00a0threshold,\u00a0branching_factor,\u00a0...])",
        "Implements the BIRCH clustering algorithm For more details on this class, see sklearn.cluster.Birch",
        "BisectingKMeans(*[,\u00a0n_clusters,\u00a0init,\u00a0...])",
        "Bisecting K-Means clustering For more details on this class, see sklearn.cluster.BisectingKMeans",
        "DBSCAN(*[,\u00a0eps,\u00a0min_samples,\u00a0metric,\u00a0...])",
        "Perform DBSCAN clustering from vector array or distance matrix For more details on this class, see sklearn.cluster.DBSCAN",
        "FeatureAgglomeration(*[,\u00a0n_clusters,\u00a0...])",
        "Agglomerate features For more details on this class, see sklearn.cluster.FeatureAgglomeration",
        "KMeans(*[,\u00a0n_clusters,\u00a0init,\u00a0n_init,\u00a0...])",
        "K-Means clustering For more details on this class, see sklearn.cluster.KMeans",
        "MeanShift(*[,\u00a0bandwidth,\u00a0seeds,\u00a0...])",
        "Mean shift clustering using a flat kernel For more details on this class, see sklearn.cluster.MeanShift",
        "MiniBatchKMeans(*[,\u00a0n_clusters,\u00a0init,\u00a0...])",
        "Mini-Batch K-Means clustering For more details on this class, see sklearn.cluster.MiniBatchKMeans",
        "OPTICS(*[,\u00a0min_samples,\u00a0max_eps,\u00a0metric,\u00a0p,\u00a0...])",
        "Estimate clustering structure from vector array For more details on this class, see sklearn.cluster.OPTICS",
        "SpectralBiclustering(*[,\u00a0n_clusters,\u00a0...])",
        "Spectral biclustering (Kluger, 2003) For more details on this class, see sklearn.cluster.SpectralBiclustering",
        "SpectralClustering(*[,\u00a0n_clusters,\u00a0...])",
        "Apply clustering to a projection of the normalized Laplacian For more details on this class, see sklearn.cluster.SpectralClustering",
        "SpectralCoclustering(*[,\u00a0n_clusters,\u00a0...])",
        "Spectral Co-Clustering algorithm (Dhillon, 2001) For more details on this class, see sklearn.cluster.SpectralCoclustering",
        "Classes",
        "ColumnTransformer(*,\u00a0transformers[,\u00a0...])",
        "Applies transformers to columns of an array or pandas DataFrame For more details on this class, see sklearn.compose.ColumnTransformer",
        "TransformedTargetRegressor(*[,\u00a0regressor,\u00a0...])",
        "Meta-estimator to regress on a transformed target For more details on this class, see sklearn.compose.TransformedTargetRegressor",
        "Classes",
        "EllipticEnvelope(*[,\u00a0store_precision,\u00a0...])",
        "An object for detecting outliers in a Gaussian distributed dataset For more details on this class, see sklearn.covariance.EllipticEnvelope",
        "EmpiricalCovariance(*[,\u00a0store_precision,\u00a0...])",
        "Maximum likelihood covariance estimator For more details on this class, see sklearn.covariance.EmpiricalCovariance",
        "GraphicalLasso(*[,\u00a0alpha,\u00a0mode,\u00a0covariance,\u00a0...])",
        "Sparse inverse covariance estimation with an l1-penalized estimator For more details on this class, see sklearn.covariance.GraphicalLasso",
        "GraphicalLassoCV(*[,\u00a0alphas,\u00a0n_refinements,\u00a0...])",
        "Sparse inverse covariance w/ cross-validated choice of the l1 penalty For more details on this class, see sklearn.covariance.GraphicalLassoCV",
        "LedoitWolf(*[,\u00a0store_precision,\u00a0...])",
        "LedoitWolf Estimator For more details on this class, see sklearn.covariance.LedoitWolf",
        "MinCovDet(*[,\u00a0store_precision,\u00a0...])",
        "Minimum Covariance Determinant (MCD): robust estimator of covariance For more details on this class, see sklearn.covariance.MinCovDet",
        "OAS(*[,\u00a0store_precision,\u00a0assume_centered,\u00a0...])",
        "Oracle Approximating Shrinkage Estimator For more details on this class, see sklearn.covariance.OAS",
        "ShrunkCovariance(*[,\u00a0store_precision,\u00a0...])",
        "Covariance estimator with shrinkage For more details on this class, see sklearn.covariance.ShrunkCovariance",
        "Classes",
        "DictionaryLearning(*[,\u00a0n_components,\u00a0alpha,\u00a0...])",
        "Dictionary learning For more details on this class, see sklearn.decomposition.DictionaryLearning",
        "FactorAnalysis(*[,\u00a0n_components,\u00a0tol,\u00a0copy,\u00a0...])",
        "Factor Analysis (FA) For more details on this class, see sklearn.decomposition.FactorAnalysis",
        "FastICA(*[,\u00a0n_components,\u00a0algorithm,\u00a0...])",
        "FastICA: a fast algorithm for Independent Component Analysis For more details on this class, see sklearn.decomposition.FastICA",
        "IncrementalPCA(*[,\u00a0n_components,\u00a0whiten,\u00a0...])",
        "Incremental principal components analysis (IPCA) For more details on this class, see sklearn.decomposition.IncrementalPCA",
        "KernelPCA(*[,\u00a0n_components,\u00a0kernel,\u00a0gamma,\u00a0...])",
        "Kernel Principal component analysis (KPCA) For more details on this class, see sklearn.decomposition.KernelPCA",
        "MiniBatchDictionaryLearning(*[,\u00a0...])",
        "Mini-batch dictionary learning For more details on this class, see sklearn.decomposition.MiniBatchDictionaryLearning",
        "MiniBatchSparsePCA(*[,\u00a0n_components,\u00a0alpha,\u00a0...])",
        "Mini-batch Sparse Principal Components Analysis For more details on this class, see sklearn.decomposition.MiniBatchSparsePCA",
        "PCA(*[,\u00a0n_components,\u00a0copy,\u00a0whiten,\u00a0...])",
        "Principal component analysis (PCA) For more details on this class, see sklearn.decomposition.PCA",
        "SparsePCA(*[,\u00a0n_components,\u00a0alpha,\u00a0...])",
        "Sparse Principal Components Analysis (SparsePCA) For more details on this class, see sklearn.decomposition.SparsePCA",
        "TruncatedSVD(*[,\u00a0n_components,\u00a0algorithm,\u00a0...])",
        "Dimensionality reduction using truncated SVD (aka LSA) For more details on this class, see sklearn.decomposition.TruncatedSVD",
        "Classes",
        "LinearDiscriminantAnalysis(*[,\u00a0solver,\u00a0...])",
        "Linear Discriminant Analysis For more details on this class, see sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
        "QuadraticDiscriminantAnalysis(*[,\u00a0priors,\u00a0...])",
        "Quadratic Discriminant Analysis For more details on this class, see sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
        "Classes",
        "AdaBoostClassifier(*[,\u00a0estimator,\u00a0...])",
        "An AdaBoost classifier For more details on this class, see sklearn.ensemble.AdaBoostClassifier",
        "AdaBoostRegressor(*[,\u00a0estimator,\u00a0...])",
        "An AdaBoost regressor For more details on this class, see sklearn.ensemble.AdaBoostRegressor",
        "BaggingClassifier(*[,\u00a0estimator,\u00a0...])",
        "A Bagging classifier For more details on this class, see sklearn.ensemble.BaggingClassifier",
        "BaggingRegressor(*[,\u00a0estimator,\u00a0...])",
        "A Bagging regressor For more details on this class, see sklearn.ensemble.BaggingRegressor",
        "ExtraTreesClassifier(*[,\u00a0n_estimators,\u00a0...])",
        "An extra-trees classifier For more details on this class, see sklearn.ensemble.ExtraTreesClassifier",
        "ExtraTreesRegressor(*[,\u00a0n_estimators,\u00a0...])",
        "An extra-trees regressor For more details on this class, see sklearn.ensemble.ExtraTreesRegressor",
        "GradientBoostingClassifier(*[,\u00a0loss,\u00a0...])",
        "Gradient Boosting for classification For more details on this class, see sklearn.ensemble.GradientBoostingClassifier",
        "GradientBoostingRegressor(*[,\u00a0loss,\u00a0...])",
        "Gradient Boosting for regression For more details on this class, see sklearn.ensemble.GradientBoostingRegressor",
        "HistGradientBoostingClassifier(*[,\u00a0loss,\u00a0...])",
        "Histogram-based Gradient Boosting Classification Tree For more details on this class, see sklearn.ensemble.HistGradientBoostingClassifier",
        "HistGradientBoostingRegressor(*[,\u00a0loss,\u00a0...])",
        "Histogram-based Gradient Boosting Regression Tree For more details on this class, see sklearn.ensemble.HistGradientBoostingRegressor",
        "IsolationForest(*[,\u00a0n_estimators,\u00a0...])",
        "Isolation Forest Algorithm For more details on this class, see sklearn.ensemble.IsolationForest",
        "RandomForestClassifier(*[,\u00a0n_estimators,\u00a0...])",
        "A random forest classifier For more details on this class, see sklearn.ensemble.RandomForestClassifier",
        "RandomForestRegressor(*[,\u00a0n_estimators,\u00a0...])",
        "A random forest regressor For more details on this class, see sklearn.ensemble.RandomForestRegressor",
        "StackingRegressor(*,\u00a0estimators[,\u00a0...])",
        "Stack of estimators with a final regressor For more details on this class, see sklearn.ensemble.StackingRegressor",
        "VotingClassifier(*,\u00a0estimators[,\u00a0voting,\u00a0...])",
        "Soft Voting/Majority Rule classifier for unfitted estimators For more details on this class, see sklearn.ensemble.VotingClassifier",
        "VotingRegressor(*,\u00a0estimators[,\u00a0weights,\u00a0...])",
        "Prediction voting regressor for unfitted estimators For more details on this class, see sklearn.ensemble.VotingRegressor",
        "Classes",
        "GenericUnivariateSelect(*[,\u00a0score_func,\u00a0...])",
        "Univariate feature selector with configurable strategy For more details on this class, see sklearn.feature_selection.GenericUnivariateSelect",
        "SelectFdr(*[,\u00a0score_func,\u00a0alpha])",
        "Filter: Select the p-values for an estimated false discovery rate For more details on this class, see sklearn.feature_selection.SelectFdr",
        "SelectFpr(*[,\u00a0score_func,\u00a0alpha])",
        "Filter: Select the pvalues below alpha based on a FPR test For more details on this class, see sklearn.feature_selection.SelectFpr",
        "SelectFwe(*[,\u00a0score_func,\u00a0alpha])",
        "Filter: Select the p-values corresponding to Family-wise error rate For more details on this class, see sklearn.feature_selection.SelectFwe",
        "SelectKBest(*[,\u00a0score_func,\u00a0k])",
        "Select features according to the k highest scores For more details on this class, see sklearn.feature_selection.SelectKBest",
        "SelectPercentile(*[,\u00a0score_func,\u00a0percentile])",
        "Select features according to a percentile of the highest scores For more details on this class, see sklearn.feature_selection.SelectPercentile",
        "SequentialFeatureSelector(*,\u00a0estimator[,\u00a0...])",
        "Transformer that performs Sequential Feature Selection For more details on this class, see sklearn.feature_selection.SequentialFeatureSelector",
        "VarianceThreshold(*[,\u00a0threshold,\u00a0...])",
        "Feature selector that removes all low-variance features For more details on this class, see sklearn.feature_selection.VarianceThreshold",
        "Classes",
        "GaussianProcessClassifier(*[,\u00a0kernel,\u00a0...])",
        "Gaussian process classification (GPC) based on Laplace approximation For more details on this class, see sklearn.gaussian_process.GaussianProcessClassifier",
        "GaussianProcessRegressor(*[,\u00a0kernel,\u00a0alpha,\u00a0...])",
        "Gaussian process regression (GPR) For more details on this class, see sklearn.gaussian_process.GaussianProcessRegressor",
        "Classes",
        "IterativeImputer(*[,\u00a0estimator,\u00a0...])",
        "Multivariate imputer that estimates each feature from all the others For more details on this class, see sklearn.impute.IterativeImputer",
        "KNNImputer(*[,\u00a0missing_values,\u00a0n_neighbors,\u00a0...])",
        "Imputation for completing missing values using k-Nearest Neighbors For more details on this class, see sklearn.impute.KNNImputer",
        "MissingIndicator(*[,\u00a0missing_values,\u00a0...])",
        "Binary indicators for missing values For more details on this class, see sklearn.impute.MissingIndicator",
        "SimpleImputer(*[,\u00a0missing_values,\u00a0strategy,\u00a0...])",
        "Univariate imputer for completing missing values with simple strategies.",
        "Classes",
        "AdditiveChi2Sampler(*[,\u00a0sample_steps,\u00a0...])",
        "Approximate feature map for additive chi2 kernel For more details on this class, see sklearn.kernel_approximation.AdditiveChi2Sampler",
        "Nystroem(*[,\u00a0kernel,\u00a0gamma,\u00a0coef0,\u00a0degree,\u00a0...])",
        "Approximate a kernel map using a subset of the training data For more details on this class, see sklearn.kernel_approximation.Nystroem",
        "PolynomialCountSketch(*[,\u00a0gamma,\u00a0degree,\u00a0...])",
        "Polynomial kernel approximation via Tensor Sketch For more details on this class, see sklearn.kernel_approximation.PolynomialCountSketch",
        "RBFSampler(*[,\u00a0gamma,\u00a0n_components,\u00a0...])",
        "Approximate a RBF kernel feature map using random Fourier features For more details on this class, see sklearn.kernel_approximation.RBFSampler",
        "SkewedChi2Sampler(*[,\u00a0skewedness,\u00a0...])",
        "Approximate feature map for \"skewed chi-squared\" kernel For more details on this class, see sklearn.kernel_approximation.SkewedChi2Sampler",
        "Classes",
        "KernelRidge(*[,\u00a0alpha,\u00a0kernel,\u00a0gamma,\u00a0...])",
        "Kernel ridge regression For more details on this class, see sklearn.kernel_ridge.KernelRidge",
        "Classes",
        "LGBMClassifier(*[,\u00a0boosting_type,\u00a0...])",
        "LightGBM classifier For more details on this class, see lightgbm.LGBMClassifier",
        "LGBMRegressor(*[,\u00a0boosting_type,\u00a0...])",
        "LightGBM regressor For more details on this class, see lightgbm.LGBMRegressor",
        "Classes",
        "ARDRegression(*[,\u00a0max_iter,\u00a0tol,\u00a0alpha_1,\u00a0...])",
        "Bayesian ARD regression For more details on this class, see sklearn.linear_model.ARDRegression",
        "BayesianRidge(*[,\u00a0max_iter,\u00a0tol,\u00a0alpha_1,\u00a0...])",
        "Bayesian ridge regression For more details on this class, see sklearn.linear_model.BayesianRidge",
        "ElasticNet(*[,\u00a0alpha,\u00a0l1_ratio,\u00a0...])",
        "Linear regression with combined L1 and L2 priors as regularizer For more details on this class, see sklearn.linear_model.ElasticNet",
        "ElasticNetCV(*[,\u00a0l1_ratio,\u00a0eps,\u00a0n_alphas,\u00a0...])",
        "Elastic Net model with iterative fitting along a regularization path For more details on this class, see sklearn.linear_model.ElasticNetCV",
        "GammaRegressor(*[,\u00a0alpha,\u00a0fit_intercept,\u00a0...])",
        "Generalized Linear Model with a Gamma distribution For more details on this class, see sklearn.linear_model.GammaRegressor",
        "HuberRegressor(*[,\u00a0epsilon,\u00a0max_iter,\u00a0...])",
        "L2-regularized linear regression model that is robust to outliers For more details on this class, see sklearn.linear_model.HuberRegressor",
        "Lars(*[,\u00a0fit_intercept,\u00a0verbose,\u00a0...])",
        "Least Angle Regression model a For more details on this class, see sklearn.linear_model.Lars",
        "LarsCV(*[,\u00a0fit_intercept,\u00a0verbose,\u00a0...])",
        "Cross-validated Least Angle Regression model For more details on this class, see sklearn.linear_model.LarsCV",
        "Lasso(*[,\u00a0alpha,\u00a0fit_intercept,\u00a0precompute,\u00a0...])",
        "Linear Model trained with L1 prior as regularizer (aka the Lasso) For more details on this class, see sklearn.linear_model.Lasso",
        "LassoCV(*[,\u00a0eps,\u00a0n_alphas,\u00a0alphas,\u00a0...])",
        "Lasso linear model with iterative fitting along a regularization path For more details on this class, see sklearn.linear_model.LassoCV",
        "LassoLars(*[,\u00a0alpha,\u00a0fit_intercept,\u00a0...])",
        "Lasso model fit with Least Angle Regression a For more details on this class, see sklearn.linear_model.LassoLars",
        "LassoLarsCV(*[,\u00a0fit_intercept,\u00a0verbose,\u00a0...])",
        "Cross-validated Lasso, using the LARS algorithm For more details on this class, see sklearn.linear_model.LassoLarsCV",
        "LassoLarsIC(*[,\u00a0criterion,\u00a0fit_intercept,\u00a0...])",
        "Lasso model fit with Lars using BIC or AIC for model selection For more details on this class, see sklearn.linear_model.LassoLarsIC",
        "LinearRegression(*[,\u00a0fit_intercept,\u00a0copy_X,\u00a0...])",
        "Ordinary least squares Linear Regression For more details on this class, see sklearn.linear_model.LinearRegression",
        "LogisticRegression(*[,\u00a0penalty,\u00a0dual,\u00a0tol,\u00a0...])",
        "Logistic Regression (aka logit, MaxEnt) classifier For more details on this class, see sklearn.linear_model.LogisticRegression",
        "LogisticRegressionCV(*[,\u00a0Cs,\u00a0fit_intercept,\u00a0...])",
        "Logistic Regression CV (aka logit, MaxEnt) classifier For more details on this class, see sklearn.linear_model.LogisticRegressionCV",
        "MultiTaskElasticNet(*[,\u00a0alpha,\u00a0l1_ratio,\u00a0...])",
        "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer For more details on this class, see sklearn.linear_model.MultiTaskElasticNet",
        "MultiTaskElasticNetCV(*[,\u00a0l1_ratio,\u00a0eps,\u00a0...])",
        "Multi-task L1/L2 ElasticNet with built-in cross-validation For more details on this class, see sklearn.linear_model.MultiTaskElasticNetCV",
        "MultiTaskLasso(*[,\u00a0alpha,\u00a0fit_intercept,\u00a0...])",
        "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer For more details on this class, see sklearn.linear_model.MultiTaskLasso",
        "MultiTaskLassoCV(*[,\u00a0eps,\u00a0n_alphas,\u00a0alphas,\u00a0...])",
        "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer For more details on this class, see sklearn.linear_model.MultiTaskLassoCV",
        "OrthogonalMatchingPursuit(*[,\u00a0...])",
        "Orthogonal Matching Pursuit model (OMP) For more details on this class, see sklearn.linear_model.OrthogonalMatchingPursuit",
        "PassiveAggressiveClassifier(*[,\u00a0C,\u00a0...])",
        "Passive Aggressive Classifier For more details on this class, see sklearn.linear_model.PassiveAggressiveClassifier",
        "PassiveAggressiveRegressor(*[,\u00a0C,\u00a0...])",
        "Passive Aggressive Regressor For more details on this class, see sklearn.linear_model.PassiveAggressiveRegressor",
        "Perceptron(*[,\u00a0penalty,\u00a0alpha,\u00a0l1_ratio,\u00a0...])",
        "Linear perceptron classifier For more details on this class, see sklearn.linear_model.Perceptron",
        "PoissonRegressor(*[,\u00a0alpha,\u00a0fit_intercept,\u00a0...])",
        "Generalized Linear Model with a Poisson distribution For more details on this class, see sklearn.linear_model.PoissonRegressor",
        "RANSACRegressor(*[,\u00a0estimator,\u00a0min_samples,\u00a0...])",
        "RANSAC (RANdom SAmple Consensus) algorithm For more details on this class, see sklearn.linear_model.RANSACRegressor",
        "Ridge(*[,\u00a0alpha,\u00a0fit_intercept,\u00a0copy_X,\u00a0...])",
        "Linear least squares with l2 regularization For more details on this class, see sklearn.linear_model.Ridge",
        "RidgeClassifier(*[,\u00a0alpha,\u00a0fit_intercept,\u00a0...])",
        "Classifier using Ridge regression For more details on this class, see sklearn.linear_model.RidgeClassifier",
        "RidgeClassifierCV(*[,\u00a0alphas,\u00a0...])",
        "Ridge classifier with built-in cross-validation For more details on this class, see sklearn.linear_model.RidgeClassifierCV",
        "RidgeCV(*[,\u00a0alphas,\u00a0fit_intercept,\u00a0scoring,\u00a0...])",
        "Ridge regression with built-in cross-validation For more details on this class, see sklearn.linear_model.RidgeCV",
        "SGDClassifier(*[,\u00a0loss,\u00a0penalty,\u00a0alpha,\u00a0...])",
        "Linear classifiers (SVM, logistic regression, etc For more details on this class, see sklearn.linear_model.SGDClassifier",
        "SGDOneClassSVM(*[,\u00a0nu,\u00a0fit_intercept,\u00a0...])",
        "Solves linear One-Class SVM using Stochastic Gradient Descent For more details on this class, see sklearn.linear_model.SGDOneClassSVM",
        "SGDRegressor(*[,\u00a0loss,\u00a0penalty,\u00a0alpha,\u00a0...])",
        "Linear model fitted by minimizing a regularized empirical loss with SGD For more details on this class, see sklearn.linear_model.SGDRegressor",
        "TheilSenRegressor(*[,\u00a0fit_intercept,\u00a0...])",
        "Theil-Sen Estimator: robust multivariate regression model For more details on this class, see sklearn.linear_model.TheilSenRegressor",
        "TweedieRegressor(*[,\u00a0power,\u00a0alpha,\u00a0...])",
        "Generalized Linear Model with a Tweedie distribution For more details on this class, see sklearn.linear_model.TweedieRegressor",
        "Classes",
        "Isomap(*[,\u00a0n_neighbors,\u00a0radius,\u00a0...])",
        "Isomap Embedding For more details on this class, see sklearn.manifold.Isomap",
        "MDS(*[,\u00a0n_components,\u00a0metric,\u00a0n_init,\u00a0...])",
        "Multidimensional scaling For more details on this class, see sklearn.manifold.MDS",
        "SpectralEmbedding(*[,\u00a0n_components,\u00a0...])",
        "Spectral embedding for non-linear dimensionality reduction For more details on this class, see sklearn.manifold.SpectralEmbedding",
        "TSNE(*[,\u00a0n_components,\u00a0perplexity,\u00a0...])",
        "T-distributed Stochastic Neighbor Embedding For more details on this class, see sklearn.manifold.TSNE",
        "Functions",
        "accuracy_score(*,\u00a0df,\u00a0y_true_col_names,\u00a0...)",
        "Accuracy classification score.",
        "confusion_matrix(*,\u00a0df,\u00a0y_true_col_name,\u00a0...)",
        "Compute confusion matrix to evaluate the accuracy of a classification.",
        "correlation(*,\u00a0df[,\u00a0columns])",
        "Pearson correlation matrix for the columns in a snowpark dataframe.",
        "covariance(*,\u00a0df[,\u00a0columns,\u00a0ddof])",
        "Covariance matrix for the columns in a snowpark dataframe.",
        "d2_absolute_error_score(*,\u00a0df,\u00a0...[,\u00a0...])",
        "regression score function,     fraction of absolute error explained.",
        "d2_pinball_score(*,\u00a0df,\u00a0y_true_col_names,\u00a0...)",
        "regression score function, fraction of pinball loss explained.",
        "explained_variance_score(*,\u00a0df,\u00a0...[,\u00a0...])",
        "Explained variance regression score function.",
        "f1_score(*,\u00a0df,\u00a0y_true_col_names,\u00a0...[,\u00a0...])",
        "Compute the F1 score, also known as balanced F-score or F-measure.",
        "fbeta_score(*,\u00a0df,\u00a0y_true_col_names,\u00a0...[,\u00a0...])",
        "Compute the F-beta score.",
        "log_loss(*,\u00a0df,\u00a0y_true_col_names,\u00a0...[,\u00a0...])",
        "Log loss, aka logistic loss or cross-entropy loss.",
        "mean_absolute_error(*,\u00a0df,\u00a0y_true_col_names,\u00a0...)",
        "Mean absolute error regression loss.",
        "mean_absolute_percentage_error(*,\u00a0df,\u00a0...[,\u00a0...])",
        "Mean absolute percentage error (MAPE) regression loss.",
        "mean_squared_error(*,\u00a0df,\u00a0y_true_col_names,\u00a0...)",
        "Mean squared error regression loss.",
        "precision_recall_curve(*,\u00a0df,\u00a0...[,\u00a0...])",
        "Compute precision-recall pairs for different probability thresholds.",
        "precision_recall_fscore_support(*,\u00a0df,\u00a0...)",
        "Compute precision, recall, F-measure and support for each class.",
        "precision_score(*,\u00a0df,\u00a0y_true_col_names,\u00a0...)",
        "Compute the precision.",
        "r2_score(*,\u00a0df,\u00a0y_true_col_name,\u00a0y_pred_col_name)",
        "(coefficient of determination) regression score function.",
        "recall_score(*,\u00a0df,\u00a0y_true_col_names,\u00a0...[,\u00a0...])",
        "Compute the recall.",
        "roc_auc_score(*,\u00a0df,\u00a0y_true_col_names,\u00a0...)",
        "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores.",
        "roc_curve(*,\u00a0df,\u00a0y_true_col_name,\u00a0...[,\u00a0...])",
        "Compute Receiver operating characteristic (ROC).",
        "Classes",
        "BayesianGaussianMixture(*[,\u00a0n_components,\u00a0...])",
        "Variational Bayesian estimation of a Gaussian mixture For more details on this class, see sklearn.mixture.BayesianGaussianMixture",
        "GaussianMixture(*[,\u00a0n_components,\u00a0...])",
        "Gaussian Mixture For more details on this class, see sklearn.mixture.GaussianMixture",
        "Classes",
        "GridSearchCV(*,\u00a0estimator,\u00a0param_grid[,\u00a0...])",
        "Exhaustive search over specified parameter values for an estimator For more details on this class, see sklearn.model_selection.GridSearchCV",
        "RandomizedSearchCV(*,\u00a0estimator,\u00a0...[,\u00a0...])",
        "Randomized search on hyper parameters For more details on this class, see sklearn.model_selection.RandomizedSearchCV",
        "Classes",
        "OneVsOneClassifier(*,\u00a0estimator[,\u00a0n_jobs,\u00a0...])",
        "One-vs-one multiclass strategy For more details on this class, see sklearn.multiclass.OneVsOneClassifier",
        "OneVsRestClassifier(*,\u00a0estimator[,\u00a0n_jobs,\u00a0...])",
        "One-vs-the-rest (OvR) multiclass strategy For more details on this class, see sklearn.multiclass.OneVsRestClassifier",
        "OutputCodeClassifier(*,\u00a0estimator[,\u00a0...])",
        "(Error-Correcting) Output-Code multiclass strategy For more details on this class, see sklearn.multiclass.OutputCodeClassifier",
        "Classes",
        "BernoulliNB(*[,\u00a0alpha,\u00a0force_alpha,\u00a0...])",
        "Naive Bayes classifier for multivariate Bernoulli models For more details on this class, see sklearn.naive_bayes.BernoulliNB",
        "CategoricalNB(*[,\u00a0alpha,\u00a0force_alpha,\u00a0...])",
        "Naive Bayes classifier for categorical features For more details on this class, see sklearn.naive_bayes.CategoricalNB",
        "ComplementNB(*[,\u00a0alpha,\u00a0force_alpha,\u00a0...])",
        "The Complement Naive Bayes classifier described in Rennie et al For more details on this class, see sklearn.naive_bayes.ComplementNB",
        "GaussianNB(*[,\u00a0priors,\u00a0var_smoothing,\u00a0...])",
        "Gaussian Naive Bayes (GaussianNB) For more details on this class, see sklearn.naive_bayes.GaussianNB",
        "MultinomialNB(*[,\u00a0alpha,\u00a0force_alpha,\u00a0...])",
        "Naive Bayes classifier for multinomial models For more details on this class, see sklearn.naive_bayes.MultinomialNB",
        "Classes",
        "KernelDensity(*[,\u00a0bandwidth,\u00a0algorithm,\u00a0...])",
        "Kernel Density Estimation For more details on this class, see sklearn.neighbors.KernelDensity",
        "KNeighborsClassifier(*[,\u00a0n_neighbors,\u00a0...])",
        "Classifier implementing the k-nearest neighbors vote For more details on this class, see sklearn.neighbors.KNeighborsClassifier",
        "KNeighborsRegressor(*[,\u00a0n_neighbors,\u00a0...])",
        "Regression based on k-nearest neighbors For more details on this class, see sklearn.neighbors.KNeighborsRegressor",
        "LocalOutlierFactor(*[,\u00a0n_neighbors,\u00a0...])",
        "Unsupervised Outlier Detection using the Local Outlier Factor (LOF) For more details on this class, see sklearn.neighbors.LocalOutlierFactor",
        "NearestCentroid(*[,\u00a0metric,\u00a0...])",
        "Nearest centroid classifier For more details on this class, see sklearn.neighbors.NearestCentroid",
        "NearestNeighbors(*[,\u00a0n_neighbors,\u00a0radius,\u00a0...])",
        "Unsupervised learner for implementing neighbor searches For more details on this class, see sklearn.neighbors.NearestNeighbors",
        "NeighborhoodComponentsAnalysis(*[,\u00a0...])",
        "Neighborhood Components Analysis For more details on this class, see sklearn.neighbors.NeighborhoodComponentsAnalysis",
        "RadiusNeighborsClassifier(*[,\u00a0radius,\u00a0...])",
        "Classifier implementing a vote among neighbors within a given radius For more details on this class, see sklearn.neighbors.RadiusNeighborsClassifier",
        "RadiusNeighborsRegressor(*[,\u00a0radius,\u00a0...])",
        "Regression based on neighbors within a fixed radius For more details on this class, see sklearn.neighbors.RadiusNeighborsRegressor",
        "Classes",
        "BernoulliRBM(*[,\u00a0n_components,\u00a0...])",
        "Bernoulli Restricted Boltzmann Machine (RBM) For more details on this class, see sklearn.neural_network.BernoulliRBM",
        "MLPClassifier(*[,\u00a0hidden_layer_sizes,\u00a0...])",
        "Multi-layer Perceptron classifier For more details on this class, see sklearn.neural_network.MLPClassifier",
        "MLPRegressor(*[,\u00a0hidden_layer_sizes,\u00a0...])",
        "Multi-layer Perceptron regressor For more details on this class, see sklearn.neural_network.MLPRegressor",
        "Classes",
        "Pipeline(steps)",
        "Pipeline of transforms.",
        "StandardScaler(*[,\u00a0with_mean,\u00a0with_std,\u00a0...])",
        "Standardizes features by removing the mean and scaling to unit variance.",
        "OrdinalEncoder(*[,\u00a0categories,\u00a0...])",
        "Encodes categorical features as an integer array.",
        "MinMaxScaler(*[,\u00a0feature_range,\u00a0clip,\u00a0...])",
        "Transforms features by scaling each feature to a given range, by default between zero and one.",
        "LabelEncoder([input_cols,\u00a0output_cols,\u00a0...])",
        "Encodes target labels with values between 0 and n_classes-1.",
        "RobustScaler(*[,\u00a0with_centering,\u00a0...])",
        "Scales features using statistics that are robust to outliers.",
        "KBinsDiscretizer(*[,\u00a0n_bins,\u00a0encode,\u00a0...])",
        "Bin continuous data into intervals.",
        "MaxAbsScaler(*[,\u00a0input_cols,\u00a0output_cols,\u00a0...])",
        "Scale each feature by its maximum absolute value.",
        "Normalizer(*[,\u00a0norm,\u00a0input_cols,\u00a0...])",
        "Normalize samples individually to each row's unit norm.",
        "OneHotEncoder(*[,\u00a0categories,\u00a0drop,\u00a0sparse,\u00a0...])",
        "Encode categorical features as a one-hot numeric array.",
        "Binarizer(*[,\u00a0threshold,\u00a0input_cols,\u00a0...])",
        "Binarizes data (sets feature values to 0 or 1) according to the given threshold.",
        "PolynomialFeatures(*[,\u00a0degree,\u00a0...])",
        "Generate polynomial and interaction features For more details on this class, see sklearn.preprocessing.PolynomialFeatures",
        "Classes",
        "LabelPropagation(*[,\u00a0kernel,\u00a0gamma,\u00a0...])",
        "Label Propagation classifier For more details on this class, see sklearn.semi_supervised.LabelPropagation",
        "LabelSpreading(*[,\u00a0kernel,\u00a0gamma,\u00a0...])",
        "LabelSpreading model for semi-supervised learning For more details on this class, see sklearn.semi_supervised.LabelSpreading",
        "Classes",
        "LinearSVC(*[,\u00a0penalty,\u00a0loss,\u00a0dual,\u00a0tol,\u00a0C,\u00a0...])",
        "Linear Support Vector Classification For more details on this class, see sklearn.svm.LinearSVC",
        "LinearSVR(*[,\u00a0epsilon,\u00a0tol,\u00a0C,\u00a0loss,\u00a0...])",
        "Linear Support Vector Regression For more details on this class, see sklearn.svm.LinearSVR",
        "NuSVC(*[,\u00a0nu,\u00a0kernel,\u00a0degree,\u00a0gamma,\u00a0coef0,\u00a0...])",
        "Nu-Support Vector Classification For more details on this class, see sklearn.svm.NuSVC",
        "NuSVR(*[,\u00a0nu,\u00a0C,\u00a0kernel,\u00a0degree,\u00a0gamma,\u00a0...])",
        "Nu Support Vector Regression For more details on this class, see sklearn.svm.NuSVR",
        "SVC(*[,\u00a0C,\u00a0kernel,\u00a0degree,\u00a0gamma,\u00a0coef0,\u00a0...])",
        "C-Support Vector Classification For more details on this class, see sklearn.svm.SVC",
        "SVR(*[,\u00a0kernel,\u00a0degree,\u00a0gamma,\u00a0coef0,\u00a0tol,\u00a0...])",
        "Epsilon-Support Vector Regression For more details on this class, see sklearn.svm.SVR",
        "Classes",
        "DecisionTreeClassifier(*[,\u00a0criterion,\u00a0...])",
        "A decision tree classifier For more details on this class, see sklearn.tree.DecisionTreeClassifier",
        "DecisionTreeRegressor(*[,\u00a0criterion,\u00a0...])",
        "A decision tree regressor For more details on this class, see sklearn.tree.DecisionTreeRegressor",
        "ExtraTreeClassifier(*[,\u00a0criterion,\u00a0...])",
        "An extremely randomized tree classifier For more details on this class, see sklearn.tree.ExtraTreeClassifier",
        "ExtraTreeRegressor(*[,\u00a0criterion,\u00a0splitter,\u00a0...])",
        "An extremely randomized tree regressor For more details on this class, see sklearn.tree.ExtraTreeRegressor",
        "Classes",
        "XGBClassifier(*[,\u00a0objective,\u00a0...])",
        "Implementation of the scikit-learn API for XGBoost classification For more details on this class, see xgboost.XGBClassifier",
        "XGBRegressor(*[,\u00a0objective,\u00a0input_cols,\u00a0...])",
        "Implementation of the scikit-learn API for XGBoost regression For more details on this class, see xgboost.XGBRegressor",
        "XGBRFClassifier(*[,\u00a0learning_rate,\u00a0...])",
        "scikit-learn API for XGBoost random forest classification For more details on this class, see xgboost.XGBRFClassifier",
        "XGBRFRegressor(*[,\u00a0learning_rate,\u00a0...])",
        "scikit-learn API for XGBoost random forest regression For more details on this class, see xgboost.XGBRFRegressor",
        "Was this page helpful?",
        "On this page"
    ]
}