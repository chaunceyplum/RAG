{
    "url": "https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-api",
    "title": "JavaScript stored procedures API | Snowflake Documentation",
    "paragraphs": [
        "This topic covers the JavaScript API for Snowflake stored procedures.\nThe API consists of JavaScript objects and the methods in those objects.",
        "The snowflake object is accessible by default to the JavaScript code in a stored procedure; you do not need to create the object.\nThis object contains the methods in the stored procedure API. For example:",
        "More extensive code examples are provided in Working with stored procedures.",
        "None.",
        "Adds an event for tracing.",
        "For more information about trace events with JavaScript, refer to Emitting trace events in JavaScript",
        "name",
        "The name of the event to add.",
        "attributes",
        "An object specifying attributes to associate with the event.",
        "Throws a JavaScript Error if:",
        "name is not a string.",
        "There are zero or more than two arguments.",
        "Add a my_event event with score and pass attributes.",
        "Creates a Statement object and returns it. The execute() method for the object can be executed later.",
        "sql_command_object",
        "The input parameter is a JSON object (dictionary) that contains the text of the statement to be executed, and any values that should be bound to that statement.",
        "A Statement object.",
        "Throws a JavaScript Error if:",
        "sqlText is missing or contains an empty query text.",
        "The statement tries to bind an argument whose data type is not supported. For information about data type\nmapping, see SQL and JavaScript data type mapping.\nFor more information about binding, see Binding variables.",
        "This example does not bind any values:",
        "This example binds values:",
        "For more information about binding, including additional examples,\nsee Binding variables.",
        "Executes a SQL command.",
        "The input is the same as for the createStatement() method.",
        "A result set in the form of a ResultSet object.",
        "Throws a JavaScript Error if:",
        "An error, such as a compile error, occurred while executing the query.",
        "sqlText is missing or contains an empty query text.",
        "The statement tries to bind an argument whose data type is not supported. For information about data type\nmapping, see SQL and JavaScript data type mapping.\nFor more information about binding, including additional examples,\nsee Binding variables.",
        "Note",
        "This execute() method (e.g. snowflake.execute()) is not exactly the same as the method in the Statement object (e.g.\nStatement.execute()).",
        "Logs a message at the specified severity level, optionally with attributes.",
        "For more information, see Logging messages in JavaScript.",
        "level",
        "The severity level at which to log the message. You can specify one of the following strings:",
        "'off'",
        "'trace'",
        "'debug'",
        "'info'",
        "'warn'",
        "'error'",
        "'fatal'",
        "message",
        "The message to log.",
        "attributes",
        "Optional. A JSON object with key-value pairs.",
        "Throws a JavaScript error if:",
        "level is not a string.",
        "level is not one of the supported level values listed above.",
        "Sets an attribute for the current span when tracing events.",
        "For more information about trace events with JavaScript, refer to Emitting trace events in JavaScript",
        "key",
        "The attribute\u2019s key.",
        "value",
        "The attribute\u2019s value.",
        "Throws a JavaScript error if:",
        "Two arguments aren\u2019t specified.",
        "key is not a string.",
        "Set an attribute whose key is example.boolean and whose value is true.",
        "A stored procedure Statement object provides the methods for executing a query statement and accessing\nmetadata (such as column data types) about the statement.",
        "At the time the Statement object is created, the SQL is parsed, and a prepared statement is created.",
        "None.",
        "This method executes the prepared statement stored in this Statement object.",
        "None because the method uses information that is already stored in the Statement object.",
        "A result set in the form of a ResultSet object.",
        "Throws a JavaScript Error if the query fails.",
        "See Working with stored procedures.",
        "Note",
        "This execute() method (e.g. Statement.execute()) is not exactly the same as the method in the snowflake object (e.g.\nsnowflake.execute()).",
        "snowflake.execute(statement_in_JSON_form) requires a parameter, which is the SQL statement to be executed.\nStatement.execute() takes no parameter; it uses the SQL statement that was specified at the time the Statement object was created.",
        "This method returns the number of columns in the result set for an executed query. If the query has not yet been executed, this method throws an Error.",
        "None.",
        "The number of columns.",
        "Throw a JavaScript Error if the statement has not yet been executed (and thus the number of returned columns cannot necessarily\nbe determined).",
        "This method returns the name of the specified column.",
        "The index number of the column (starting from 1, not 0).",
        "The name of the column.",
        "Throws a JavaScript Error if:",
        "The Statement has not yet been executed.",
        "No column with the specified index exists.",
        "This method returns the scale of the specified column. The scale is the number of digits after the decimal point. The scale of the column was specified\nin the CREATE TABLE or ALTER TABLE statement. For example:",
        "Although this method can be called for any data type, it is intended for use with numeric data types.",
        "The index of the column for which you want the scale (starting from 1, not 0).",
        "The scale of the column (for numeric columns); 0 for non-numeric (columns).",
        "Throws a JavaScript Error if:",
        "The Statement has not yet been executed.",
        "No column with the specified index exists.",
        "See Working with stored procedures (search for getColumnScale()).",
        "This method returns the SQL data type of the specified column.",
        "Either the index number of the column (starting from 1, not 0) or the name of the column. (The method is overloaded to accept different\ndata types as parameters.)",
        "The column name should be all uppercase unless double quotes were used in the column name when the table was created (i.e. the case of the column\nname was preserved).",
        "The SQL data type of the column.",
        "Throws a JavaScript Error if:",
        "The Statement has not yet been executed.",
        "No column with the specified name or index exists.",
        "This method returns the JavaScript data type of the specified column.",
        "Either the index number of the column (starting from 1, not 0) or the name of the column. (The method is overloaded to accept different\ndata types as parameters.)",
        "The column name should be all uppercase unless double quotes were used in the column name when the table was created (i.e. the case of the column\nname was preserved).",
        "The JavaScript data type of the column.",
        "Throws a JavaScript Error if:",
        "The Statement has not yet been executed.",
        "No column with the specified index or name exists.",
        "This method returns the number of \u201cduplicate\u201d rows (often called multi-joined rows) updated by this Statement.\n(For information about how multi-joined rows are formed, see the\nUsage Notes and Examples for the UPDATE statement.)",
        "None.",
        "A value of type Number that indicates the number of multi-joined rows updated.",
        "Throws a JavaScript error if the statement has not yet been executed.",
        "This method returns the number of rows affected (e.g. inserted/updated/deleted) by this Statement.",
        "If more than one type of change applies (e.g. a MERGE operation inserted some rows and\nupdated others), then the number is the total number of rows affected by all of the changes.",
        "None.",
        "A value of type Number that indicates the number of rows affected.",
        "Throws a JavaScript error if the statement has not yet been executed.",
        "This method returns the number of rows deleted by this Statement.",
        "None.",
        "A value of type Number that indicates the number of rows deleted.",
        "Throws a JavaScript error if the statement has not yet been executed.",
        "This method returns the number of rows inserted by this Statement.",
        "None.",
        "A value of type Number that indicates the number of rows inserted.",
        "Throws a JavaScript error if the statement has not yet been executed.",
        "This method returns the number of rows updated by this Statement.",
        "None.",
        "A value of type Number that indicates the number of rows updated.",
        "Throws a JavaScript error if the statement has not yet been executed.",
        "This method returns the number of rows in the result set for an executed query. If the query has not yet been executed, this method throws an Error.",
        "None.",
        "The number of rows.",
        "Throw a JavaScript Error if the statement has not yet been executed (and thus the number of returned rows cannot be determined).",
        "This method returns the UUID of the most recent query executed.",
        "None.",
        "A string containing a UUID, which is the query ID.",
        "If no query has been executed yet by this statement, the method throws the error\n\u201cStatement is not executed yet.\u201d",
        "This method returns the text of the prepared query in the Statement object.",
        "None.",
        "A string of the prepared query text.",
        "None.",
        "This method returns whether the specified column allows SQL NULL values.",
        "The index of the column (starting from 1, not 0).",
        "true if the column allows SQL NULL values; otherwise, false.",
        "Throws a JavaScript Error if:",
        "The Statement has not yet been executed.",
        "No column with the specified index exists.",
        "This method returns true if the column data type is one of the following SQL text data types:",
        "CHAR or CHAR(N), as well as their synonyms CHARACTER and CHARACTER(N)",
        "VARCHAR or VARCHAR(N)",
        "STRING",
        "TEXT",
        "Otherwise, it returns false.",
        "The index of the column (starting from 1, not 0).",
        "true if the column data type is one of the SQL text data types; false for all other data types.",
        "Throws a JavaScript Error if:",
        "The Statement has not yet been executed.",
        "No column with the specified index exists.",
        "Note",
        "The API provides several methods for determining the data type of a column. The first method is described in detail above. The remaining methods have\nthe same parameters and errors; the only difference is the return value.",
        "true if the column data type is ARRAY (for semi-structured data); false for all other data types.",
        "true if the column data type is BINARY or VARBINARY; false for all other data types.",
        "true if the column data type is BOOLEAN; false for all other data types.",
        "true if the column data type is DATE; false for all other data types.",
        "true if the column data type is one of the SQL numeric types (NUMBER, NUMERIC, DECIMAL, INT, INTEGER, BIGINT, SMALLINT, TINYINT, BYTEINT,\nFLOAT, FLOAT4, FLOAT8, DOUBLE, DOUBLE PRECISION, or REAL); false for all other data types.",
        "true if the column data type is OBJECT (for semi-structured data); false for all other data types.",
        "true if the column data type is TIME or DATETIME; false for all other data types.",
        "true if the column data type is one of the SQL timestamp types (TIMESTAMP, TIMESTAMP_LTZ, TIMESTAMP_NTZ, or TIMESTAMP_TZ); false\nfor all other data types, including other date and time data types (DATE, TIME, or DATETIME).",
        "true if the column data type is VARIANT (for semi-structured data); false for all other data types.",
        "This object contains the results returned by a query. The results are treated as a set of zero or more rows, each of which contains one or more columns. The term\n\u201cset\u201d is not used here in the mathematical sense. In mathematics, a set is unordered, whereas a ResultSet has an order.",
        "A ResultSet is similar in some ways to the concept of a SQL cursor. For example, you can see one row at a time in a ResultSet, just as you can see\none row at a time in a cursor.",
        "Typically, after you retrieve a ResultSet, you iterate through it by repeating the following operations:",
        "Call next() to get the next row.",
        "Retrieve data from the current row by calling methods such as getColumnValue().",
        "If you do not know enough about the data in the ResultSet (e.g. you do not know the data type of each column), then you can call other methods that provide information about\nthe data.",
        "Some of the methods of the ResultSet object are similar to the methods of the Statement object.  For example, both objects have a\ngetColumnSqlType(colIdx) method.",
        "None.",
        "This method returns the number of columns in this ResultSet.",
        "None.",
        "A value of type Number that indicates the number of columns.",
        "None.",
        "This method returns the SQL data type of the specified column.",
        "Either the index number of the column (starting from 1, not 0) or the name of the column. (The method is overloaded to accept different\ndata types as parameters.)",
        "The column name should be all uppercase unless double quotes were used in the column name when the table was created (i.e. the case of the column\nname was preserved).",
        "The SQL data type of the column.",
        "Throws a JavaScript Error if:",
        "ResultSet is empty or next() has not yet been called.",
        "No column with the specified index or name exists.",
        "This method returns the value of a column in the current row (i.e. the row most recently retrieved by next()).",
        "Either the index number of the column (starting from 1, not 0) or the name of the column. (The method is overloaded to accept different\ndata types as parameters.)",
        "The column name should be all uppercase unless double quotes were used in the column name when the table was created (i.e. the case of the column\nname was preserved).",
        "The value of the specified column.",
        "Throws a JavaScript Error if:",
        "ResultSet is empty or next() has not yet been called.",
        "No column with the specified index or name exists.",
        "Convert a row in the database into a JavaScript array:",
        "Also, a column\u2019s value can be accessed as a property of the ResultSet object (e.g. myResultSet.MY_COLUMN_NAME).",
        "Note",
        "Remember that unless the column name was delimited with double quotes in the CREATE TABLE statement, the column name should be all uppercase in the\nJavaScript code.",
        "This method returns the value of a column as a string, which is useful when you need a column value regardless of the original data type in the table.",
        "The method is identical to the method getColumnValue() except that it returns a string value.",
        "For more details, see getColumnValue().",
        "This method returns the number of rows affected (e.g. inserted/updated/deleted) by the Statement that generated this ResultSet.",
        "If more than one type of change applies (e.g. a MERGE operation inserted some rows and\nupdated others), then the number is the total number of rows affected by all of the changes.",
        "None.",
        "A value of type Number that indicates the number of rows affected.",
        "None.",
        "This method returns the UUID of the most recent query executed.",
        "None.",
        "A string containing a UUID, which is the query ID.",
        "This method returns the number of rows in this ResultSet. (This is the total number of rows, not the number of rows that\nhaven\u2019t been consumed yet.)",
        "None.",
        "A value of type Number that indicates the number of rows.",
        "None.",
        "This method gets the next row in the ResultSet and makes it available for access.",
        "This method does not return the new data row. Instead, it makes the row available so that you can call methods such as ResultSet.getColumnValue() to\nretrieve the data.",
        "Note that you must call next() for each row in the result set, including the first row.",
        "None.",
        "true if it retrieved a row and false if there are no more rows to retrieve.",
        "Thus, you can iterate through ResultSet until next() returns false.",
        "None.",
        "JavaScript does not have a native data type that corresponds to the Snowflake SQL data types\nTIMESTAMP_LTZ, TIMESTAMP_NTZ, and TIMESTAMP_TZ. When you retrieve a value of type TIMESTAMP from the database\nand want to store it as a JavaScript variable (for example, copy the value from a ResultSet to a JavaScript variable),\nuse the Snowflake-defined JavaScript data type SfDate.\nThe SfDate (\u201cSnowFlake Date\u201d) data type is an extension of the JavaScript date data type.\nSfDate has extra methods, which are documented below.",
        "None.",
        "Unless otherwise specified, the examples below assume UTC time zone.",
        "This method returns the number of seconds since the beginning of \u201cthe epoch\u201d (midnight January 1, 1970).",
        "None.",
        "The number of seconds between midnight January 1, 1970 and the timestamp stored in the variable.",
        "Create the stored procedure:",
        "Pass the procedure different timestamps and retrieve the number of seconds since the epoch for each timestamp.",
        "This method returns the value of the nanoseconds field of the object. Note that this is just the fractional\nseconds, not the nanoseconds since the beginning of the epoch. Thus the value is always between 0 and 999999999.",
        "None.",
        "The number of nanoseconds.",
        "Create the stored procedure:",
        "Pass the procedure different timestamps and retrieve the number of nanoseconds from each.",
        "This method returns the precision of the data type, i.e. the number of digits after the decimal point.\nFor example, the precision of TIMESTAMP_NTZ(3) is 3 (milliseconds). The precision of TIMESTAMP_NTZ(0) is 0 (no\nfractional seconds). The precision of TIMSTAMP_NTZ is 9 (nanoseconds).",
        "The minimum is 0. The maximum is 9 (precision is to 1 nanosecond).  The default precision is 9.",
        "None.",
        "The number of digits after the decimal place (number of digits in the fractional seconds field).",
        "Create the stored procedure:",
        "In this example, the timestamp is defined as TIMESTAMP_NTZ(0), so the precision is 0.",
        "In this example, the timestamp is defined as TIMESTAMP_NTZ(2), so the precision is 2.",
        "In this example, the timestamp is defined as TIMESTAMP_NTZ, so the precision is 9, which is the default.",
        "This method returns the timezone as the number of minutes before or after UTC.",
        "None.",
        "The timezone as a number of minutes before or after UTC.",
        "Create the stored procedure:",
        "In this example, the time zone is 8 hours (480 minutes) behind UTC.",
        "In this example, the time zone is 11 hours (660 minutes) ahead of UTC.",
        "None.",
        "This method returns a string representation of the timestamp.",
        "This shows a simple example of creating an SfDate and calling its toString method:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}