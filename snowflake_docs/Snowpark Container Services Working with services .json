{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark-container-services/working-with-services",
    "title": "Snowpark Container Services: Working with services | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Available to accounts in AWS and Microsoft Azure commercial regions, with some exceptions. For more information, see Available regions.",
        "Snowpark Container Services enables you to easily\ndeploy, manage, and scale containerized applications.\nAfter you create an application and upload the\napplication image to a repository in your Snowflake account, you can run your\napplication containers as a service.",
        "A service represents Snowflake running your containerized application on a\ncompute pool, which is a collection of virtual machine (VM) nodes. There are two types of services:",
        "long running services. A long-running is like a web service that does not end\nautomatically. After you create a service, Snowflake manages the running service. For example, if a service container stops, for whatever reason, Snowflake restarts that container so the service runs uninterrupted.",
        "job services. A job service terminates when your code exits, similar to a stored procedure. When all containers exit, the job service is done.",
        "Snowpark Container Services provides\na set of SQL commands you can use to create and manage a service. These include:",
        "Creating a service. CREATE SERVICE, EXECUTE JOB SERVICE",
        "Altering a service. ALTER SERVICE, DROP SERVICE",
        "Getting information about a service. SHOW SERVICES, DESCRIBE SERVICE",
        "The minimum information required to start a service includes:",
        "A name: Name of the service.",
        "A service specification: This specification provides Snowflake\nwith the information needed to run your service. The specification is a YAML file.",
        "A compute pool: Snowflake runs your service in the specified\ncompute pool.",
        "Use CREATE SERVICE to create a long running service.",
        "Create a service using an inline specification. In most cases, during development, you might choose inline specification, as shown:",
        "Create a service using stage information. When you deploy the service in a\nproduction environment, it\u2019s advisable to apply the separation of concerns design principle and upload the specification to a stage, provide stage information CREATE SERVICE command, as shown:",
        "Use EXECUTE JOB SERVICE to create a job service. By default this command runs synchronously, and returns a response after all containers of the job service exit. You can optionally specify the ASYNC parameter to run the job service asynchronously.",
        "Execute a job service using an inline specification:",
        "You can optionally execute this job asynchronously using the ASYNC property.",
        "Execute a job service using stage information:",
        "There are times you might want to create multiple services using the same specification but with different configurations. For example, you suppose that you  define an environment variable in a service specification and you want to create multiple services using the same specification but different values for the environment variable.",
        "Specification templates enable you to define variables for field values in the specification. When you create a service you provide values for these variables.",
        "Using specification templates is a two-step process:",
        "Create a specification using variables as values for various specification fields. Use the {{ variable_name }} syntax to specify these variables. For example, the following specification uses a variable named \u201ctag_name\u201d for the image tag name, so that you specify a different image tag for each service.",
        "Create a service by providing the specification template in a CREATE SERVICE command. You use SPECIFICATION_TEMPLATE or SPECIFICATION_TEMPLATE_FILE to specify the template. Use the USING parameter to specify the value of the variable.  For example, the following statement uses a specification template from a Snowflake stage. The USING parameter sets the tag_name variable to the value 'latest'.",
        "Use the {{ variable_name }} syntax to define variables as field values in the specification.",
        "These variables can have default values. To specify the default value, use  the default function in the variable declaration. For example, the following specification defines two variables (character_name and  endpoint_name) with default values.",
        "In addition, you can specify an optional boolean parameter to the default function to indicate whether you want the default value used when a blank value is passed in for the variable. Consider this specification:",
        "In the specification:",
        "For the character_name variable, the boolean parameter is set to false. Therefore, if the variable is set to an empty string value (\u2018\u2019) to this parameter, the value remains blank; the default value (\u201cBob\u201d) is not used.",
        "For the echo_endpoint variable, the boolean parameter is set to true. Therefore, if you pass a blank value to this parameter, the default value (\u201cecho-endpoint\u201d) is used.",
        "By default, the boolean parameter for the default function is false.",
        "Specify the USING parameter in the CREATE SERVICE command to provide values for variables. The general syntax for USING is:",
        "where",
        "var_name is case sensitive and it should be a valid Snowflake identifier (see\nIdentifier requirements).",
        "var_value can be either an alphanumeric value or a valid JSON value.",
        "Examples:",
        "The USING parameter in CREATE SERVICE must provide values for the specification variables (except the variables for which the specification provides default values). Otherwise,  an error is returned.",
        "These examples show creating services using specification templates. The CREATE SERVICE commands in these examples use inline specification.",
        "In Tutorial 1 you create a service by providing an inline specification. The following example is a modified version of the same where the specification defines two variables: image_url and SERVER_PORT. Note that the SERVER_PORT variable is repeated in three places. This has the added benefit of using variables that ensure all these fields that are expected to have the same value do have the same value.",
        "In this CREATE SERVICE command, the USING parameter provides values for the two specification variables. The image_url value  includes slashes and a colon. These are not alphanumeric characters. Therefore, the example wraps the value in double quotes to make it a valid JSON string value. The template specification expands the following specification:",
        "In Tutorial 1, the specification defines two environment variables (SERVER_PORT and CHARACTER_NAME) as shown:",
        "You can templatize this specification by using a variable for the env field. This lets you create multiple services with different values for the environment variables. The following CREATE SERVICE command uses a variable (env_values) for the env field.",
        "The USING parameter in CREATE SERVICE provides value for the env_values variable. The value is a JSON map that provides values for both the environment variables.",
        "In Tutorial 2, the specification includes the args field that includes two arguments.",
        "In a template version of the specification, you can provide these arguments as a JSON list as shown:",
        "By default, Snowflake runs one instance of the service in the specified compute pool.\nTo manage heavy workloads, you can run multiple service instances by setting the MIN_INSTANCES and MAX_INSTANCES properties, which specify the minimum number of instances of the service to start with and the maximum instances Snowflake can scale to when needed.",
        "Example",
        "When multiple service instances are running, Snowflake automatically\nprovides a load balancer to distribute the incoming requests.",
        "Snowflake does not consider the service to be READY until at least two instances are available. While the service is not ready, Snowflake blocks access to it, meaning that associated service functions or ingress requests are denied until readiness is confirmed.",
        "In some cases, you might want Snowflake to consider the service ready (and forward incoming requests) even if fewer than the specified minimum instances are available. You can achieve this by setting the MIN_READY_INSTANCES property.",
        "Consider another scenario: During maintenance or a rolling service upgrade, Snowflake might terminate one or more service instances. This could lead to fewer available instances than the specified MIN_INSTANCES, causing the service to not be in a READY state. In such cases, you might want to set MIN_READY_INSTANCES to a value smaller than MIN_INSTANCES to ensure the service can continue accepting requests.",
        "Example",
        "For more information, see CREATE SERVICE.",
        "Note",
        "You cannot run more than one instance of a job service.",
        "To configure Snowflake to autoscale the number of service instances running, follow these steps:",
        "Specify the CPU and memory requirements for your service instance in the service specification file. For more information, see the\ncontainer.resources field.",
        "Example",
        "When running the CREATE SERVICE command, set the MIN_INSTANCES and  MAX_INSTANCES parameters. You can also use ALTER SERVICE to change these values. Autoscaling occurs when the specified MAX_INSTANCES is greater than MIN_INSTANCES.",
        "Snowflake starts by creating the minimum number of service instances on the specified compute pool. Snowflake then scales up or scales down the number of service instances based on an 80% CPU usage threshold. Snowflake continuously monitors CPU utilization within the compute pool, aggregating the usage data from all currently running service instances.",
        "When the aggregated CPU usage (across all service instances) surpasses 80%, Snowflake deploys an additional service instance within the compute pool. If the aggregated CPU usage falls below 80%, Snowflake scales down by removing a running service instance. Snowflake uses a five-minute stabilization window to prevent frequent scaling.",
        "Note the following scaling behaviors:",
        "The scaling of service instances is constrained by the MIN_INSTANCES and MAX_INSTANCES parameters configured for the service.",
        "If scaling up is necessary and the compute pool nodes lack the necessary resource capacity to start up another service instance, compute pool autoscaling can be triggered. For more information, see\nAutoscaling of compute pool nodes.",
        "If you specify the MAX_INSTANCES and MIN_INSTANCES parameters when creating a service but don\u2019t specify the CPU and memory requirements for your service instance in the service specification file, no autoscaling occurs; Snowflake starts with the number of instances specified by the MIN_INSTANCES parameter and does not autoscale.",
        "A long-running service consumes compute pool resources, incurring costs, but you can suspend the service when it\u2019s not performing meaningful work (see ALTER SERVICE \u2026 SUSPEND). When no services or jobs are active on any compute pool node, Snowflake\u2019s auto-suspend mechanism suspends the pool to reduce costs.",
        "After creating a service:",
        "Use the DROP SERVICE command to remove a service from a schema (Snowflake terminates all the service containers).",
        "Use the ALTER SERVICE command to modify the service (for example, suspend or resume the service, change the\nnumber of instances running, and direct Snowflake to redeploy your service using a new service specification).",
        "Note",
        "You cannot alter a job service.",
        "When you suspend a service (ALTER SERVICE \u2026 SUSPEND) or drop a service (DROP SERVICE), Snowflake terminates all the service instances. Similarly, when you upgrade service code (ALTER SERVICE \u2026 <fromSpecification>), Snowflake applies rolling upgrades by terminating and redeploying one service instance at a time.",
        "When terminating a service instance, Snowflake first sends a SIGTERM signal to each service container. The container has the option to process the signal and shut down gracefully with a 30-second window. Otherwise, after the grace period, Snowflake terminates all the processes in the container.",
        "After a service is created, use the ALTER SERVICE \u2026 <fromSpecification> command to update service code and redeploy the service.",
        "You first upload modified application code to your image repository and then call ALTER SERVICE, either providing the service specification inline or specifying the path to a specification file in the Snowflake stage. For example:",
        "Upon receiving the request, Snowflake redeploys the service using the new code.",
        "When you run the CREATE SERVICE \u2026 <from-Specification> command, Snowflake records the specific version of the provided image. Snowflake deploys that same image version in the following scenarios, even if the image in the repository has been updated:",
        "When a suspended service is resumed (using ALTER SERVICE \u2026 RESUME).",
        "When autoscaling adds more service instances.",
        "When service instances are restarted during cluster maintenance.",
        "But if you call ALTER SERVICE \u2026 <fromSpecification>, that triggers Snowflake to use the latest version in the repository for that image.",
        "If you are the service owner, the output of the DESCRIBE SERVICE command includes the service specification, which includes the image digest (the value of the sha256 field in the specification), as shown below:",
        "ALTER SERVICE can impact communications (see Using a service) with the service.",
        "If ALTER SERVICE \u2026 <fromSpecification> removes an endpoint or removes relevant permissions required to use an endpoint (see serviceRoles in Specification Reference), access to the service will fail. For more information, see Using a Service.",
        "While the upgrade is in progress, new connections might get routed to the new version. If the new service version is not backward compatible, it will disrupt any active service usage. For example, ongoing queries using a service function might fail.",
        "Note",
        "When updating service code that is part of a native app with containers, you can use the SYSTEM$WAIT_FOR_SERVICES system function to pause the native app setup script to allow for the services to upgrade completely. For more information, see Upgrade an app.",
        "When multiple service instances are running, Snowflake performs a rolling upgrade in descending order based on the ID of the service instances. Use the following commands to monitor service upgrades:",
        "DESCRIBE SERVICE and SHOW SERVICES:",
        "The is_upgrading column in the output shows is TRUE if the service is being upgraded.",
        "The spec_digest column in the output represents the spec digest of the current service specification. You can execute this command periodically; a change in the spec_digest value indicates a service upgrade was triggered. Use the SHOW SERVICE INSTANCES IN SERVICE command to check whether all the instances have been upgraded to the latest version as explained below.",
        "SHOW SERVICE INSTANCES IN SERVICE:",
        "The status column in the output provides the status of each individual service instance while the rolling upgrade is in progress. During the upgrade, you will observe each service instance transition status, such as TERMINATING to PENDING, and PENDING to READY.",
        "During the service upgrade, the SHOW SERVICE INSTANCES IN SERVICE commands might return different values in the spec_digest output column from SHOW SERVICES, which always returns the latest spec digest. It simply indicates the service upgrade is in progress and service instances are still running the old version of the service.",
        "You can use the these commands:",
        "Use the DESCRIBE SERVICE command to retrieve the properties and status of a service.",
        "Use the SHOW SERVICES command to list current services (including job services), for which you have permissions. For each service, the output provides properties and status of the service. By default, the output lists services in the current database and schema. You can alternatively specify any of the following scopes. For example:",
        "List the services in the account, in a specific database, or in a specific schema: For example, use the IN ACCOUNT filter to list\nservices in your Snowflake account, regardless of which\ndatabase or schema the services belong to. This is useful if you have Snowflake services\ncreated in multiple databases and schemas in your account. Like all other commands, SHOW SERVICES IN ACCOUNTS is gated by privileges, returning only the services for which the role you are using has viewing permissions.",
        "You can also specify IN DATABASE or IN SCHEMA to list the services in the current (or specified) database or schema.",
        "List the services running in a compute pool: For example, use IN COMPUTE POOL filter to list the services running in a compute pool.",
        "List the services that start with a prefix or that match a pattern: You can apply the LIKE and STARTS WITH filters to filter the services by name.",
        "List job services. or exclude job services from the list: You can use SHOW JOB SERVICES or SHOW SERVICES EXCLUDE JOBS to list only\njob services or exclude job services.",
        "You can also combine these options to customize the SHOW SERVICES output.",
        "Use the SHOW SERVICE INSTANCES IN SERVICE command to retrieve properties of the service instances.",
        "Use the SHOW SERVICE CONTAINERS IN SERVICE command to retrieve the properties and status of the service instances.",
        "Snowpark Container Services offers tools to monitor compute pools in your account and the services running on them. For more information, see Snowpark Container Services: Monitoring Services.",
        "The service owner role (the role that you use to create the service) has full access to the service and endpoints the service exposes. Other roles will need USAGE privilege on the endpoints to communicate with the service. For example,",
        "The owner role of the client needs USAGE privilege on the endpoint. Client refers to a service function or a service making requests to endpoints of another service.",
        "To create a service function  referencing an endpoint, the user needs access to the endpoint. That is, the service function\u2019s owner role needs USAGE privilege on the endpoint referenced in the CREATE FUNCTION.",
        "In service-to-service communications, the owner role of the client service (that is calling the other service\u2019s endpoint) needs the USAGE privilege on the endpoint.",
        "A user making ingress requests from outside Snowflake to a public endpoint needs USAGE privilege on the endpoint.",
        "To allow a role to access a service endpoint, you grant the following to that role:",
        "USAGE privilege on the database and schema where the service is created.",
        "Service role that has permission to access the endpoint (see GRANT SERVICE ROLE). A service role is a mechanism to grant privileges on service endpoints to other roles. You have these options:",
        "Use the default service role: Snowflake defines a default service role (ALL_ENDPOINTS_USAGE) that grants the USAGE privilege on all endpoints the service exposes and grants this default service role to the service\u2019s owner role. Thus, the owner role can access all the endpoints the service exposes. You can grant this default service role to other roles.",
        "Example: Suppose you create a service with a public endpoint (echoendpoint) as shown:",
        "To grant a role (custom_role) access to the endpoint, run the following commands:",
        "Create a service role: Instead of granting privileges on all endpoints using the default service role, you can define one or more service roles in the service specification. Within the definition, indicate specific endpoints for which the role is granted the USAGE privilege. You can grant (or revoke) the service role to other roles using the GRANT SERVICE ROLE and REVOKE SERVICE ROLE commands. You can also use the SHOW ROLES IN SERVICE, SHOW GRANTS commands to display information about the grants.",
        "Snowflake creates the service roles when you create a service and deletes them when you delete the service.",
        "Creating custom service roles enables you to grant different access permissions for difference scenarios. For example, you can grant a service role permission to an endpoint for use with a service function. You might create another service role with permission to a public endpoint used with a web UI.",
        "Example: Suppose you create a service with two public endpoint (ep1 and ep2) and a service role (ep1_role) with access to endpoint ep1 as shown:",
        "To grant the role (custom_role) access only to the endpoint ep1, run the following commands:",
        "Note the following:",
        "If you use the same role to create multiple services, because the owner role has access to all endpoints, those services can communicate with each other seamlessly without any extra configuration changes.",
        "If a service has multiple containers, these containers can communicate with each other via localhost, and these communications are local within each service instance and not subject to role-based access control.",
        "The following sections provide details. You can also try a tutorial (Configure and test service endpoint privileges) that provides step-by-step instructions to explore this feature.",
        "When you create a service (including job service), Snowflake also creates a default service role, named ALL_ENDPOINTS_USAGE. This role has USAGE privilege on all endpoints the service exposes. You can grant other roles this default service role using the GRANT SERVICE ROLE command:",
        "Users who are using some_other_role have the USAGE privilege on all the service endpoints.",
        "When you drop a service, Snowflake drops all the service roles (default service role and service roles defined in the service specification) associated with the service and voids all the service role grants.",
        "Use service roles to manage fine-grained access to service endpoints. You define the service roles, along with the list of endpoints they are granted USAGE privilege to, in the service specification.",
        "Granting privilege on specific endpoints of a service is a two-step process:",
        "Define a service role: Use a service specification to define a service role by providing a role name and a list of one or more\nendpoints for which you want to grant USAGE privilege. For example, in the following specification fragment, the top-level serviceRoles\nfield defines two service roles, each with USAGE privilege on specific endpoints.",
        "Grant the service role to other roles.  Using the GRANT SERVICE ROLE command, you grant the service role to other roles (account roles, application roles, or database roles). For example:",
        "After creating a service, users in the same account (that created the service) can use any of the following three supported methods to use it. The user will need access to roles having the necessary privileges.",
        "Use the service from a SQL query (Service function):\nYou create a service function, a user-defined function (UDF) associated with a service, and use it in a SQL query to communicate with the service.\nFor an example, see Tutorial 1.",
        "Use the service from outside Snowflake (Ingress): You can declare one or more service endpoints as public to allow network ingress access to the service. For an example, see Tutorial 1.",
        "Use service from another service (Service-to-service communications):  Services can communicate with each other using  Snowflake-assigned service DNS name for service-to-service communication\nFor an example, see Tutorial 3.",
        "Note",
        "A job service runs like a job and terminates when done. Using service function or ingress to communicate with a job service is not supported.",
        "You cannot associate a service function with any endpoint of a job service.",
        "You cannot create a job service wit a specification that defines a public endpoint.",
        "Service-to-service communications with job services are supported. That is, services and job services can communicate with each other.",
        "The following sections provide details.",
        "A service function is a user-defined function (UDF) you\ncreate using CREATE FUNCTION (Snowpark Container Services). However, instead of writing\nthe UDF code directly, you associate the UDF with your\nservice endpoint. Note that, you can associate a service function only with a service endpoint that supports the HTTP or HTTPS protocol.",
        "For example, in Tutorial 1, you create a\nservice named echo_service that exposes one endpoint (echoendoint) as defined in the service specification:",
        "echoendpoint is a user-friendly endpoint name that represents the\ncorresponding port (8080). To communicate with this service endpoint, you create\na service function by providing the SERVICE and ENDPOINT parameters as shown:",
        "The AS parameter provides the HTTP path to the service code.\nYou get this path value from the service code. For example, the following code lines are from service.py in Tutorial 1.",
        "When you invoke the service function, Snowflake directs the request to the\nassociated service endpoint and path.",
        "Note",
        "A service function is used to communicate with a service, and not with a job. In other words, you can only associate a service (not a job) with a service function.",
        "When you run multiple instances of your service, you can create a service function\nby specifying the optional MAX_BATCH_ROWS parameter\nto limit the\nbatch size, the maximum rows that Snowflake sends in a batch to\nthe service. For example, suppose MAX_BATCH_ROWS is 10 and you call\nmy_echo_udf service function with 100 input rows. Snowflake\npartitions the input rows into batches, with each batch having at most 10 rows,\nand sends a series of requests to the service with the batch of rows in the\nrequest body. Configuring batch size can help when processing takes nontrivial time, and\ndistributing rows across all available servers can also help.",
        "You can use ALTER FUNCTION to alter a service function. The following ALTER FUNCTION\ncommand changes the service endpoint to which it associates and the batch size:",
        "For data exchange between a service function and an application container,\nSnowflake  follows the same format that external functions\nuse (see Data Formats).\nFor example, suppose you have data rows stored in a table (input_table):",
        "To send this data to your service, you invoke the service function by passing\nthese rows as parameters:",
        "Snowflake sends a series of requests to the container,\nwith batches of data rows in the request body in this\nformat:",
        "The container then returns the output in the following format:",
        "The example output shown assumes that the result is a one-column\ntable with rows (\u201ca\u201d, \u201cb\u201d \u2026).",
        "When multiple service instances are running, you can create a service\nfunction using the MAX_BATCH_ROWS parameter to distribute the input\nrows for processing across all available servers. For more information, see\nSpecifying batch size when sending data to a service to increase concurrency.",
        "To create and manage service functions, a role needs the following\nprivileges:",
        "To create a service function: The\ncurrent role must have the USAGE privilege on the service being referenced.",
        "To alter a service function: You can alter a service function and associate it with\nanother service. The current role must have the USAGE privilege on\nthe new service.",
        "To use a service function: The current role must have the USAGE privilege on the\nservice function, and the service function owner role must\nhave the USAGE privilege on the associated service.",
        "The following example script shows how you might grant permission to use\na service function:",
        "A service can expose one or more endpoints as public to allow users to use the service\nfrom the public web.  In this case, Snowflake manages access control. Note that ingress is allowed only with HTTP or HTTPS endpoints.",
        "Mark the endpoint as public in your service specification file:",
        "Not everyone can access the public endpoints exposed by a service.\nOnly users in the same Snowflake account as the service and having USAGE privilege on the public endpoint can access the public endpoint. You can use   service role to grant this privilege.",
        "These users can access the public endpoint using a browser or programmatically. Snowflake uses OAuth to authenticate these requests:",
        "Accessing a public endpoint by using a browser: When the user uses a browser to access a public endpoint, Snowflake provides an automatic redirect for user authentication. The user is required to sign in and, behind the scenes, the user sign-in generates an OAuth token from Snowflake. The OAuth token is then used to send a request to the service endpoint.",
        "Accessing a public endpoint programmatically:  You application can use key pair authentication to  authenticate requests to the public endpoint. In your code, you  generate a JSON Web Token (JWT) from the key pair, exchange the JWT token with Snowflake for an OAuth token, and then use the OAuth token to authenticate requests to the public endpoint of a service.",
        "Tutorial 1 provides step-by-step instructions for you to test public endpoint access.",
        "Key pair authentication as shown in Tutorial 1 is the recommended way to authenticate requests when accessing public endpoints. The following code can be used to authenticate as an alternative to using key pair; however,  there is no guarantee the code will work with future versions of Snowflake Connector for Python. This Python code uses the Python connector to first generate a session token that represents your identity. The code then uses the session token to log in to the public endpoint.",
        "In the code:",
        "If you don\u2019t know your account information (<orgname>-<acctname>), see the Tutorial common setup.",
        "You can get the ingress_url of the public endpoint exposed by the service by using SHOW ENDPOINTS.",
        "When a request for an ingress endpoint arrives, Snowflake automatically passes the following header along with the HTTP request to the container.",
        "Your container code can optionally read the header, know who the caller is, and apply context-specific customization for different users. In addition, Snowflake can optionally include the  Sf-Context-Current-User-Email header. To include this header, contact Snowflake Support.",
        "Services can communicate with each other using the DNS name that Snowflake automatically assigns to each service.\nFor an example, see Tutorial 3.\nNote that if a service endpoint is created only to allow service-to-service communications, the TCP protocol should be used.",
        "The DNS name format is:",
        "Use SHOW SERVICES (or DESCRIBE SERVICE) to get the DNS name of a service.\nThe preceding DNS name is a full name. Services created in the same schema can\ncommunicate using just the <service-name>. Services that are in a different schema or database must provide the hash, such as <service-name>.<hash>.",
        "Call the SYSTEM$GET_SERVICE_DNS_DOMAIN function to find the DNS hash for a given schema. The DNS hash domain is specific to the current version of the schema. Note the following:",
        "If that schema or its database is renamed, the hash does not change.",
        "If the schema is dropped and then recreated (for example using CREATE OR REPLACE SCHEMA) the new schema will have a new hash.  If you UNDROP a schema, the hash remains the same.",
        "Snowflake allows network communications between services created by the\nsame role and blocks network communications between services created\nby different roles. If you want to prevent your services from communicating\nwith each other (for reasons such as security), use different Snowflake roles to create those services.",
        "DNS names have the following limitations:",
        "Your service names must be a valid DNS label. (See also https://www.ietf.org/rfc/rfc1035.html#section-2.3.1). Otherwise, creating a service will fail.",
        "Snowflake replaces an underscore (_) in the service name by a dash (-) in the DNS name.",
        "A DNS name is only for internal communications within Snowflake between services running in the same account. It is not accessible from the internet.",
        "Privilege",
        "Usage",
        "Notes",
        "USAGE",
        "To communicate with a service you need the USAGE privilege on the service endpoint. Required for creating a service function, using public endpoints, and connecting from another service.",
        "MONITOR",
        "To monitor a service and get runtime status.",
        "OPERATE",
        "To suspend or resume a service.",
        "OWNERSHIP",
        "Full control over the service. Only a single role can hold this privilege on a specific object at a time.",
        "ALL [ PRIVILEGES ]",
        "Grants all privileges, except OWNERSHIP, on the service.",
        "For more information, see Guidelines and limitations.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}