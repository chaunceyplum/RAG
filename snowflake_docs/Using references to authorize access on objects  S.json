{
    "url": "https://docs.snowflake.com/en/sql-reference/references",
    "title": "Using references to authorize access on objects | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "A reference can be used to authorize access on objects to a stored procedure, application, or class instance\nthat does not have access to those objects by default.",
        "A reference is a string that can be used as an identifier. The identifier resolves to the object being referenced.",
        "A reference encapsulates the following:",
        "The object name.",
        "The active role used to create the object reference and any active secondary role(s) if applicable.",
        "The privilege(s) on the object that are specified when the reference is created.",
        "Some scenarios where a reference might be required include:",
        "An owner\u2019s rights stored procedure requires access to insert data in a table\nowned by a different role.",
        "An application performs data analytics and requires read access to data in tables.",
        "An instance of the SNOWFLAKE.ML.ANOMALY_DETECTION class requires read access to a view for training the anomaly detection ML model.",
        "A reference identifies an object by name. This means if an object is renamed after a reference is created, the reference is\ninvalid. However, if a new object with the same name is created, the reference might be valid. For example, a role\nmy_role creates a reference my_ref1 for table my_table1 with the SELECT\nprivilege. After the reference is created, table my_table1 is dropped and a new table named my_table1 is created.\nThe reference my_ref1 identifies a table with the name my_table1. In this case, it identifies the new\ntable my_table1.",
        "If the role used to create the reference, and the privilege(s) granted on my_table1 are still valid, access to\nthe new my_table1 is authorized when using the reference.",
        "If the role and privilege(s) encapsulated in the reference are no longer valid, access to table my_table1 cannot\nbe authorized and a new reference must be created for the new table.",
        "The privileges granted to the role that created the reference are verified at the time the reference is used. For example, a role\nmy_role creates a reference to a table t1 with the SELECT privilege. If my_role is dropped or\nthe SELECT privilege on table t1 is revoked from my_role, the privileges encapsulated in the reference are no\nlonger valid. When the reference is passed to a stored procedure that requires the SELECT privilege on\nthe table, the stored procedure fails with a permissions error.",
        "The lifespan of a reference can be specified at creation time.",
        "A transient reference has a limited lifespan, either for the duration of the call in which the reference is passed, or\nfor the duration of the session.",
        "A persistent reference has an unlimited lifespan. The reference remains valid until the object it references is dropped,\nthe reference is unset, or the reference becomes invalid.",
        "For examples of unsetting references, see Unset a persistent reference for an application.",
        "A reference can become invalid for any of the following reasons:",
        "The object it references is renamed.",
        "The role that created the reference is dropped.",
        "The role that created the reference no longer has privileges on the object.",
        "For more information, see Objects identified by name and Privileges verified at execution time.",
        "An owner\u2019s rights stored procedure executes with the privileges of the owner\nrather than the privileges of the caller who executes the stored procedure. In order to perform actions on a table, view, or\nfunction that the caller has privileges to access, the caller must pass a reference to the table, view, or function. The reference\nenables the stored procedure to perform actions on the object that the reference identifies with the privileges of the\ncreator of the reference (in this case, the caller).",
        "By design, applications and classes do not have access to objects in the account where the application is installed or\nan instance of a class is created. Users can authorize access on objects to an application or class instance by creating a reference.",
        "A provider creates an application and a consumer installs and uses an application in the consumer account. In the case of\nSnowflake classes, Snowflake is the provider, and a user with a Snowflake account who creates an instance\nof a class is the consumer.",
        "Providers can create applications and classes that request and use references in their code. For more information, see\nReferences for providers.",
        "Consumers can create and pass references to applications that they install in their account or to instances\nof Snowflake classes. For more information, see References for consumers.",
        "The targets for a reference can be an object or a query. If the target of the reference is an object, privilege(s) on the object\nare required for the reference.",
        "The following table lists the object types that a reference can include, the type of reference that can be created,\nand the privileges allowed for each object:",
        "Object type",
        "Transient",
        "Persistent",
        "Privileges allowed",
        "Default privilege",
        "API INTEGRATION",
        "\u2714",
        "USAGE",
        "USAGE",
        "COMPUTE POOL",
        "\u2714",
        "APPLYBUDGET",
        "DATABASE",
        "\u2714",
        "APPLYBUDGET",
        "EXTERNAL TABLE",
        "\u2714",
        "SELECT, REFERENCES",
        "SELECT",
        "FUNCTION",
        "\u2714",
        "\u2714",
        "USAGE",
        "USAGE",
        "MATERIALIZED VIEW",
        "\u2714",
        "APPLYBUDGET",
        "PIPE",
        "\u2714",
        "APPLYBUDGET",
        "APPLYBUDGET",
        "PROCEDURE",
        "\u2714",
        "USAGE",
        "USAGE",
        "SCHEMA",
        "\u2714",
        "APPLYBUDGET",
        "TABLE",
        "\u2714",
        "APPLYBUDGET",
        "\u2714",
        "\u2714",
        "SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES",
        "SELECT",
        "TASK",
        "\u2714",
        "APPLYBUDGET",
        "APPLYBUDGET",
        "VIEW",
        "\u2714",
        "\u2714",
        "SELECT, REFERENCES",
        "SELECT",
        "WAREHOUSE",
        "\u2714",
        "APPLYBUDGET",
        "\u2714",
        "MODIFY, MONITOR, OPERATE, USAGE",
        "USAGE",
        "A query reference is a type of transient reference. It references a SELECT statement that can be used in the FROM clause of\nanother SQL statement in a stored procedure. You can create a query reference by using the\nSYSTEM$QUERY_REFERENCE function or the TABLE keyword.",
        "For more information, see Using query references and Using the TABLE keyword to create a reference to a table, view, or query.",
        "You can create applications as a provider by using the Snowflake Native App Framework.\nFor detailed information on requesting references from a consumer of your application, see\nRequest references and object-level privileges from consumers.",
        "You can create a reference by using the SYSTEM$REFERENCE function. You can pass the string identifier\nthat the function returns to a stored procedure, application, or class instance. Alternatively, you can pass in the statement that\ncreates the reference in place of the string identifier.",
        "Note",
        "If you are passing a reference to a stored procedure, you can use the TABLE keyword (rather than calling the SYSTEM$REFERENCE\nfunction) to create the reference. See Using the TABLE keyword to create a reference to a table, view, or query.",
        "Create a transient reference with session scope to table t1 with the SELECT privilege:",
        "To create a reference to the same table for the lifetime of the scope in which it is referenced (for example, if you pass it to\na stored procedure, its lifetime would be that of the outermost block of the stored procedure), execute the following statement:",
        "Create a persistent reference to a table t1 with the INSERT privilege to pass to an application:",
        "Create a query reference to pass to a stored procedure. The lifetime of this transient reference is for the outermost block of\nthe stored procedure to which you pass the reference to:",
        "For additional examples:",
        "Stored procedure example, see Background: The problem with passing tables, views, and queries to stored procedures.",
        "Native App Framework application example, see\nAssociating the Reference to the Application.",
        "Class instance example, see Training an Anomaly Detection Model with Labeled Data.",
        "An application or a class that requires a persistent reference will also provide a method to unset the reference. Method names can vary\nby implementation.",
        "Alternatively, you can unset references by using an ALTER APPLICATION \u2026 UNSET REFERENCES\nstatement.",
        "You can use the SHOW REFERENCES command to view all references, including references that have been\nset for an application.",
        "For example, to view references for application my_app:",
        "You can unset any references that have been set for the application by using the ALTER APPLICATION command.",
        "For example, to unset the reference named table_to_read in application my_app:",
        "For example, to unset all references in application my_app:",
        "If an object that is associated with a reference is renamed (or reparented), the reference is no longer valid.",
        "If a new object is created with the same name, and if the roles encoded in the reference association have the relevant\nprivileges on the new object, the reference remains valid. Otherwise it fails with a permissions error.",
        "If an object is swapped, and the roles encoded in the reference association have the relevant privileges on the new object\nthat now has the swapped name, the reference remains valid. Otherwise it fails with a permissions error.",
        "Object drop and undrop:",
        "If an object that is associated with a reference is dropped, the reference association becomes invalid.",
        "If the object is undropped, the reference association becomes valid again.",
        "Cloning",
        "You can clone a class instance, or its parent database or schema, that uses references to objects in your account.",
        "If the reference object is referenced with a fully qualified name, the instance clone refers to the original object.",
        "If the referenced object is referenced with a partially qualified or unqualified name, the instance clone might refer to\nthe clone object, the original object, or to no real object depending on the cloning boundary.",
        "Replication is supported for an application or a database containing a class instance that uses a reference to objects\nin the consumer account.",
        "References function correctly in the target account as long as the following objects are replicated:",
        "Application or class instance.",
        "Referenced object.",
        "Role that created the reference.",
        "These objects can be replicated in different replication or failover groups. Once all objects are replicated, the reference\nis usable.",
        "For providers of Snowflake Native App Framework applications, see also Considerations when using references.",
        "You can view references requested by an application by using the SHOW REFERENCES command. If you have set\nany references for an application, the output will include information about the object, database, schema, and the identifer for each\nreference.",
        "For example, to view references in application my_app:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}