{
    "url": "https://docs.snowflake.com/en/developer-guide/udf/scala/udf-scala-general",
    "title": "General Scala UDF handler coding guidelines | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "This topic describes general guidelines for writing handler code in Scala. For information specific to scalar function handlers, refer to\nWriting a scalar UDF in Scala.",
        "For suggestions on structuring your project, packaging your code, and managing dependencies, refer to\nScala UDF handler project and packaging.",
        "Write platform-independent code.",
        "Avoid code that assumes a specific CPU architecture (e.g. x86).",
        "Avoid code that assumes a specific operating system.",
        "If you need to execute initialization code and do not want to include it in the method that you call, you can put\nthe initialization code into a companion object of your handler class.",
        "Whenever possible when using an in-line handler, specify a value for the CREATE FUNCTION or\nCREATE PROCEDURE TARGET_PATH parameter. This will prompt Snowflake to reuse previously-generated\nhandler code output rather than recompiling for each call. For more information, see Using an in-line handler.",
        "You can write a scalar UDF with a handler written in Scala.",
        "The handler is called once for each row passed to the Scala UDF. A new instance of the class is not created for each row;\nSnowflake can call the same instance\u2019s handler method more than once.",
        "To optimize execution of your code, Snowflake timeout thresholds differ between the time it takes to initialize your handler class or\nobject, and the time it takes to execute its handler method. Snowflake allows more time to initialize the handler class or object on the\nassumption that initialization might take longer. This includes the time to load your UDF and the time\nto call the constructor of the handler method\u2019s containing class, if a constructor is defined.",
        "You can handle exceptions with common exception-handling techniques to catch errors within the handler method.",
        "If an exception occurs inside the method and is not caught by the method, Snowflake raises an error that includes the stack trace for the\nexception.",
        "You can explicitly throw an exception without catching it in order to end the query and produce a SQL error. For example:",
        "When debugging, you can include values in the SQL error message text. To do so:",
        "Place an entire Scala method body in a try-catch block;",
        "Append argument values to the caught error\u2019s message; and",
        "Throw an exception with the extended message.",
        "To avoid revealing sensitive data, remove argument values prior to deploying JAR files to a production environment.",
        "When writing your handler, you\u2019ll need to declare parameter and return data types (from the handler\u2019s language) that map well with the\nUDF\u2019s parameter and return data types (from SQL).",
        "When the UDF is called, Snowflake converts the UDF\u2019s arguments from the SQL parameter types to the handler\u2019s parameter types. When\nreturning a value, Snowflake converts the return value from the handler\u2019s return type to the UDF\u2019s return type.",
        "Snowflake converts values between types according to supported mappings between SQL types and Scala types. For more about those mappings,\nrefer to SQL-Scala Data Type Mappings.",
        "When choosing data types of Scala variables, take into account the maximum and minimum possible values of the data that could be sent\nfrom (and returned to) Snowflake.",
        "You create a UDF in SQL using the CREATE FUNCTION command, specifying the code you wrote as the handler. For the command reference, see\nCREATE FUNCTION.",
        "To associate the handler code you\u2019ve written with the UDF, you do the following when executing CREATE FUNCTION:",
        "Set LANGUAGE to SCALA.",
        "Set the IMPORTS clause value to the path and name of the handler class if the class is in an external location, such as on a stage.",
        "Set RUNTIME_VERSION to the version of the Scala runtime that your code requires.",
        "Set the PACKAGES clause value to the name of one or more packages, if any, required by the handler class.",
        "Set the HANDLER clause value to the name of the handler object and method.",
        "The AS '<scala_code>' clause is required if the handler code is specified in-line with CREATE FUNCTION.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}