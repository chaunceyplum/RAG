{
    "url": "https://docs.snowflake.com/en/user-guide/views-introduction",
    "title": "Overview of Views | Snowflake Documentation",
    "paragraphs": [
        "This topic covers concepts for understanding and using views.",
        "A view allows the result of a query to be accessed as if it were a table. The query is specified in the CREATE VIEW statement.",
        "Views serve a variety of purposes, including combining, segregating, and protecting data. For example, you can create separate views\nthat meet the needs of different types of employees, such as doctors and accountants at a hospital:",
        "A view can be used almost anywhere that a table can be used (joins, subqueries, etc.). For example, using the views created above:",
        "Show all of the types of medical problems for each patient:",
        "Show the cost of each treatment (without showing personally identifying information about specific patients):",
        "A CREATE VIEW command can use a fully-qualified, partly-qualified, or unqualified table\nname. For example:",
        "If the schema is not specified, then Snowflake assumes that the table is in the same schema as the view.\n(If the table were assumed to be in the active schema, then the view could refer to different tables at different\ntimes.)",
        "Snowflake supports two types of views:",
        "Non-materialized views (usually simply referred to as \u201cviews\u201d)",
        "Materialized views.",
        "The term \u201cview\u201d generically refers to all types of views; however, the term is used here to refer specifically to non-materialized\nviews.",
        "A view is basically a named definition of a query. A non-materialized view\u2019s results are created by executing the query at the\ntime that the view is referenced in a query. The results are not stored for future use. Performance is slower than with materialized\nviews. Non-materialized views are the most common type of view.",
        "Any query expression that returns a valid result can be used to create a non-materialized view, such as:",
        "Selecting some (or all) columns in a table.",
        "Selecting a specific range of data in table columns.",
        "Joining data from two or more tables.",
        "Although a materialized view is named as though it were a type of view, in many ways it behaves more like a table. A materialized\nview\u2019s results are stored, almost as though the results were a table. This allows faster access, but requires storage space and active\nmaintenance, both of which incur additional costs.",
        "In addition, materialized views have some restrictions that non-materialized views do not have.",
        "For more details, see Working with Materialized Views.",
        "Both non-materialized and materialized views can be defined as secure. Secure views have advantages over standard views, including\nimproved data privacy and data sharing; however, they also have some performance impacts to take into consideration.",
        "For more details, see Working with Secure Views.",
        "A non-materialized view can be recursive (i.e. the view can refer to itself).",
        "Use of recursion in views is similar to the use of recursion in recursive CTEs.\nIn fact, a view can be defined with a recursive CTE. For example:",
        "Instead of using a recursive CTE, you can create a recursive view with the keyword RECURSIVE, for example:",
        "For more details, including examples, see CREATE VIEW.",
        "Views help you to write clearer, more modular SQL code. For example, suppose that your hospital database has a table listing information\nabout all employees. You can create views to make it convenient to extract information about only the medical staff or only the maintenance\nstaff. You can even create hierarchies of views.",
        "For example, you can create one view for the doctors, and one for the nurses, and then create the medical_staff view by referring to\nthe doctors view and nurses view:",
        "In many cases, rather than writing one large and difficult-to-understand query, you can decompose the query into smaller pieces, and create\na view for each of those pieces. This not only makes the code easier to understand, but in many cases it also makes the code easier to debug\nbecause you can debug one view at a time, rather than the entire query.",
        "One view can be referenced by many different queries, so views help increase code re-use.",
        "Views allow you to grant access to just a portion of the data in a table(s). For example, suppose that you have a table of medical patient\nrecords. The medical staff should have access to all of the medical information (for example, diagnosis) but not the financial information\n(for example, the patient\u2019s credit card number). The accounting staff should have access to the billing-related information, such as the costs\nof each of the prescriptions given to the patient, but not to the private medical data, such as diagnosis of a mental health condition. You can\ncreate two separate views, one for the medical staff, and one for the billing staff, so that each of those roles sees only the information\nneeded to perform their jobs. Views allow this because you can grant privileges on a particular view to a particular role, without the grantee\nrole having privileges on the table(s) underlying the view.",
        "In the medical example:",
        "The medical staff would not have privileges on the data table(s), but would have privileges on the view showing diagnosis and treatment.",
        "The accounting staff would not have privileges on the data table(s), but would have privileges on the view showing billing information.",
        "For additional security, Snowflake supports defining a view as secure. For more details about secure views, see Working with Secure Views.",
        "Materialized Views are designed to improve performance. Materialized Views contain a copy of a subset of the data in a table.\nDepending upon the amount of data in the table and in the materialized view, scanning the materialized view can be much faster\nthan scanning the table. Materialized views also support clustering, and you can create multiple materialized views on the same\ndata, with each materialized view being clustered on a different column, so that different queries can each run on the view with\nthe best clustering for that query.",
        "For more details, see Working with Materialized Views.",
        "For limitations and usage notes related to creating views, see CREATE VIEW.",
        "The definition for a view cannot be updated (i.e. you cannot use ALTER VIEW or\nALTER MATERIALIZED VIEW to change the definition of a view). To change a view definition, you must recreate\nthe view with the new definition.",
        "Views are read-only (i.e. you cannot execute DML commands directly on a view). However, you can use a view in a subquery within a DML\nstatement that updates the underlying base table. For example:",
        "Changes to a table are not automatically propagated to views created on that table. For example, if you drop a column in a table, the\nviews on that table might become invalid.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}