{
    "url": "https://docs.snowflake.com/en/developer-guide/upload-dependencies",
    "title": "Making dependencies available to your code | Snowflake Documentation",
    "paragraphs": [
        "When your user-defined function (UDF) or stored procedure depends on code or files that are external to the UDF or procedure, you can make\nthe dependency available to the UDF or procedure from a stage, including a repository stage with a clone of a\nremote Git repository that Snowflake is using.",
        "For example, you might want your UDF or procedure to have access to the following:",
        "Python handler code in a module.",
        "Java or Scala handler code compiled and packaged in a JAR.",
        "Dependency code written in Java, Python, or Scala.",
        "Files to be read by your handler code and whose name and location is known when you create the UDF. This can be useful with configuration\nfiles, for example.",
        "Note",
        "You can also use the PACKAGES clause of CREATE FUNCTION or CREATE PROCEDURE to\nimport libraries that are included in Snowflake.",
        "Follow these steps to make dependencies available to your function or procedure.",
        "Choose or create a stage that\u2019s available to your handler.",
        "Upload the dependency to the stage.",
        "Reference the dependency with IMPORTS when you create the function or procedure.",
        "To make your dependency file available to a function or procedure, the file will need to be on a stage where it can be\nreached at runtime. The owner of the function or procedure must have the READ privilege\nto the stage.",
        "For more about creating stages, see CREATE STAGE.",
        "You can also set up Snowflake to\nuse a remote Git repository, creating a repository stage with a full clone of the\nremote repository\u2019s files.",
        "Note",
        "You can\u2019t execute the PUT command through the Snowflake GUI; you can use SnowSQL to execute PUT. For an example PUT command\nto copy a .jar file to a stage, see Uploading the dependency to the stage in this topic.",
        "Choose or create one of the following kinds of stage for your dependency:",
        "A repository stage with a clone of files from the remote repository.",
        "For more information, see Using a Git repository in Snowflake.",
        "A user or named internal stage.",
        "If you plan to use the PUT command to upload the files, use a named internal stage. For more on choosing an internal stage type,\nsee Choosing an internal stage for local files.",
        "An external stage.",
        "External stages are locations associated with external storage services, as described in CREATE STAGE. The\nPUT command does not support uploading files to external stages.",
        "If you don\u2019t already have a user stage, named internal stage, or external stage, you can create one by executing\nCREATE STAGE. For example, the following command creates a new internal stage named mystage:",
        "Note",
        "Snowflake does not currently support using a table stage to store handler code.",
        "Upload the files required for your stored procedure to a stage.",
        "If your handler is from a Git repository you\u2019re using with Snowflake, you might\ninstead need to fetch the latest from your remote repository to the Snowflake\nrepository stage.",
        "If you\u2019re using an external stage, use that storage service\u2019s means for uploading files. If you\u2019re using an internal stage, you can copy\nthe file from a local drive to the stage by using the PUT command. For command reference, see PUT. For\ninformation on staging files with PUT, see Staging data files from a local file system.",
        "Use the PUT command to upload files to the stage.",
        "Code in the following example uploads myjar.jar to a stage called mystage, overwriting an existing file of the same\nname if it exists.",
        "Note",
        "If you omit AUTO_COMPRESS = FALSE, the PUT command automatically compresses the file. The name of the compressed\nfile on the stage will be myjar.jar.gz. Later, when you execute a command such as\nCREATE PROCEDURE, you will need to specify the filename\nwith this .gz extension in the command\u2019s IMPORTS clause.",
        "Note",
        "The PUT command does not support uploading files to external stages.\nTo upload files to external stages, use the utilities provided by the cloud service.",
        "To make a function or procedure you\u2019re creating aware of the dependency\u2019s location, specify the dependency\u2019s location in the IMPORTS\nclause of the SQL you use to create the function or procedure.",
        "If you have multiple dependency files, such as when you have third-party libraries on which a handler depends, you can specify the stage\nlocation and file path-and-name of all dependency files as values of the IMPORTS clause.",
        "Code in the following example creates a procedure called MYPROC, specifying that the file MyCompiledJavaCode.jar (on\nthe mystage stage) should be included in the procedure\u2019s execution environment. In this case, MyCompiledJavaCode.jar\ncontains the procedure\u2019s handler \u2013 the compiled code for MyJavaClass.run.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}