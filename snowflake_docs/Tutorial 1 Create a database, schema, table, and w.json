{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/tutorials/tutorial-1",
    "title": "Tutorial 1: Create a database, schema, table, and warehouse | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "In this tutorial, you learn the fundamentals for managing Snowflake resource objects using the Snowflake Python APIs. To get started with the\nAPI, you create and manage a Snowflake database, schema, table, and virtual warehouse.",
        "Note",
        "If you have already completed the steps in Common setup for Snowflake Python APIs tutorials, you can skip these prerequisites and proceed to the first step of this\ntutorial.",
        "Before you start this tutorial, you must complete the common setup instructions, which includes the following steps:",
        "Set up your development environment.",
        "Install the Snowflake Python APIs package.",
        "Configure your Snowflake connection.",
        "Import all the modules required for the Python API tutorials.",
        "Create an API Root object.",
        "After completing these prerequisites, you are ready to start using the API.",
        "You can use your root object to create a database, schema, and table in your Snowflake account.",
        "To create a database, in the next cell of your notebook, run the following code:",
        "This code, which is functionally equivalent to the SQL command CREATE OR REPLACE DATABASE PYTHON_API_DB, creates a database in your\naccount named PYTHON_API_DB. This code follows a common pattern for managing objects in Snowflake:",
        "root.databases.create() creates a database in Snowflake. It accepts two arguments: a Database object and a mode.",
        "You pass a Database object by using Database(name=\"PYTHON_API_DB\"), and set the name of the database by using the\nname argument. Recall that you imported Database on line 3 of the notebook.",
        "You specify the creation mode by passing the mode argument. In this case, you set it to CreateMode.or_replace, but the\nfollowing values are also valid:",
        "CreateMode.if_not_exists: Functionally equivalent to CREATE IF NOT EXISTS in SQL.",
        "CreateMode.error_if_exists: Raises an exception if the object already exists in Snowflake. This is the default value if a\nmode is not specified.",
        "You manage the database programmatically by storing a reference to the database in an object you created named database.",
        "In Snowsight, navigate to the databases section of your Snowflake account. If your code was successful, the\nPYTHON_API_DB database is listed.",
        "Tip",
        "If you use VS Code, install the Snowflake extension to\nexplore all Snowflake objects within your editor.",
        "To create a schema in the PYTHON_API_DB database,  in your next cell, run the following code:",
        "Note that you call .schemas.create() on the database object you created previously.",
        "To create a table in the schema you just created,  in your next cell, run the following code:",
        "This code creates a table in the PYTHON_API_SCHEMA schema with two columns and their data types specified: TEMPERATURE as\nint, and LOCATION as string.",
        "These last two code examples should look familiar because they follow the pattern in the first step where you created the\nPYTHON_API_DB database.",
        "To confirm that the objects were created, return to your Snowflake account in Snowsight.",
        "You can retrieve metadata about an object in Snowflake.",
        "To retrieve details about the PYTHON_API_TABLE table you created previously, in your next notebook cell, run the following code:",
        "fetch() returns a TableModel object.",
        "You can then call .to_dict() on the resulting object to view its detailed information.",
        "To print the table details, in your next cell, run the following code:",
        "The notebook should display a dictionary that contains metadata about the PYTHON_API_TABLE table, similar to this:",
        "As shown, this dictionary contains information about the PYTHON_API_TABLE table that you created previously, with detailed\ninformation about columns, owner, database, schema, and more.",
        "Object metadata is useful when you are building business logic in your application. For example, you might build logic that runs depending\non certain information about an object. You can use fetch() to retrieve object metadata in such scenarios.",
        "You can programmatically add a column to a table. The PYTHON_API_TABLE table currently has two columns: TEMPERATURE and LOCATION.\nIn this scenario, you want to add a new column named ELEVATION of type int and set it as the table\u2019s primary key.",
        "In your next cell, run the following code:",
        "Note",
        "This code does not create the column. Instead, this column definition is appended to the array that represents the table\u2019s columns in\nthe TableModel. To view this array, review the value of columns as described in the instructions for viewing the table\nmetadata.",
        "To modify the table and add the column, in your next cell, run the following code:",
        "In this line, you call create_or_alter() on the object representing PYTHON_API_TABLE, and pass the updated value of\ntable_details. This line adds the ELEVATION column to PYTHON_API_TABLE.",
        "To confirm that the column was added, in your next cell, run the following code:",
        "The output should look similar to this:",
        "Review the value of columns and the value of constraints, both of which now include the ELEVATION column.",
        "To confirm the existence of the new column, return to your Snowflake account in Snowsight and inspect the table.",
        "You can also manage virtual warehouses with the Snowflake Python APIs. For example, you might need to create another warehouse temporarily to\nrun certain queries. In this scenario, you can use the API to create, suspend, or drop a warehouse.",
        "To retrieve the collection of warehouses associated with your session, in your next cell, run the following code:",
        "You manage warehouses in your session using the resulting warehouses object.",
        "To define and create a new warehouse, in your next cell, run the following code:",
        "In this code, you define a new warehouse by instantiating Warehouse and specifying the warehouse\u2019s name, size, and auto-suspend\npolicy. The auto-suspend timeout is in units of seconds. In this case, the warehouse will be suspended after 8.33 minutes of inactivity.",
        "You then create the warehouse by calling create() on your warehouse collection. You store the reference in the resulting\nwarehouse object.",
        "Navigate to your Snowflake account in Snowsight and confirm that the warehouse was created.",
        "To retrieve information about the warehouse, in your next cell, run the following code:",
        "This code should look familiar because it follows the same pattern you used to fetch table metadata in a previous step. The output should\nbe similar to this:",
        "Optional: If you have multiple warehouses in your session, use the API to iterate through them or to search for a specific warehouse.",
        "In your next cell, run the following code:",
        "In this code, you call iter() on the warehouse collection and pass the like argument, which returns any\nwarehouses whose names match the specified string. In this case, you pass the name of the warehouse you defined previously, but\nthis argument is generally a case-insensitive string that functions as a filter, with support for SQL wildcard characters like %\nand _.",
        "After you run the cell, output similar to the following code shows that you successfully returned a matching warehouse:",
        "To programmatically modify the warehouse by changing its size to LARGE, in your next cell, run the following code:",
        "To confirm that the warehouse size was updated to LARGE, do one of the following:",
        "In your next cell, run the following code:",
        "Navigate to your Snowflake account in Snowsight and confirm the change in warehouse size.",
        "Optional: If you don\u2019t want to continue using the warehouse, drop it. In your next cell, run the following code:",
        "To confirm the warehouse deletion, return to your Snowflake account in Snowsight.",
        "Congratulations! In this tutorial, you learned the fundamentals for managing Snowflake resource objects using the Snowflake Python APIs.",
        "Along the way, you completed the following steps:",
        "Install the Snowflake Python APIs.",
        "Set up a connection to Snowflake.",
        "Create a database, schema, and table.",
        "Retrieve object information.",
        "Programmatically alter an object.",
        "Create, suspend, and drop a warehouse.",
        "You can now proceed to Tutorial 2: Create and manage tasks and task graphs (DAGs), which shows how to create and manage tasks and task graphs.",
        "For more examples of using the API to manage other types of objects in Snowflake, see the following developer guides:",
        "Guide",
        "Description",
        "Managing Snowflake users, roles, and grants with Python",
        "Use the API to create and manage users, roles, and grants.",
        "Managing data loading and unloading resources with Python",
        "Use the API to create and manage data loading and unloading resources, including external volumes, pipes, and stages.",
        "Managing Snowflake tasks and task graphs with Python",
        "Use the API to create, execute, and manage tasks and task graphs.",
        "Managing Snowpark Container Services (including service functions) with Python",
        "Use the API to manage components of Snowpark Container Services, including compute pools, image repositories, services, and service\nfunctions.",
        "Was this page helpful?"
    ]
}