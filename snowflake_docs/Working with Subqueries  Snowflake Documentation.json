{
    "url": "https://docs.snowflake.com/en/user-guide/querying-subqueries",
    "title": "Working with Subqueries | Snowflake Documentation",
    "paragraphs": [
        "A subquery is a query within another query. Subqueries in a FROM or WHERE\nclause are used to provide data that will be used to limit or compare/evaluate the data returned by the containing query.",
        "Subqueries can be categorized as correlated or uncorrelated:",
        "A correlated subquery refers to one or more columns from outside of\nthe subquery. (The columns are typically referenced inside the WHERE\nclause of the subquery.) A correlated subquery can be thought of as a filter\non the table that it refers to, as if the subquery were evaluated on each\nrow of the table in the outer query.",
        "An uncorrelated subquery has no such external column references. It\nis an independent query, the results of which are returned to and used by\nthe outer query once (not per row).",
        "For example:",
        "Subqueries can also be categorized as scalar or non-scalar:",
        "A scalar subquery returns a single value (one column of one row).\nIf no rows qualify to be returned, the subquery returns NULL.",
        "A non-scalar subquery returns 0, 1, or multiple rows, each of which\nmay contain 1 or multiple columns. For each column, if there is no value to\nreturn, the subquery returns NULL. If no rows qualify to be returned, the\nsubquery returns 0 rows (not NULLs).",
        "Snowflake currently supports the following types of subqueries:",
        "Uncorrelated scalar subqueries in any place that a value expression can be used.",
        "Correlated scalar subqueries in WHERE clauses.",
        "EXISTS, ANY / ALL, and IN subqueries in WHERE clauses. These subqueries can be correlated or uncorrelated.",
        "Subquery operators operate on nested query expressions. They can be used to compute values that are:",
        "Returned in a SELECT list.",
        "Grouped in a GROUP BY clause.",
        "Compared with other expressions in the WHERE or HAVING clause.",
        "The following query demonstrates an uncorrelated subquery in a WHERE clause.\nThe subquery gets the per capita GDP of Brazil, and the outer query\nselects all the jobs (in any country) that pay less than the\nper-capita GDP of Brazil. The subquery is uncorrelated because the value\nthat it returns does not depend upon any column of the outer query. The\nsubquery only needs to be called once during the entire execution of the\nouter query.",
        "The next query demonstrates a correlated subquery in a WHERE clause.\nThe query lists jobs where the annual pay of the job is less than the\nper-capita GDP in that country.\nThis subquery is correlated because it is called once for each row in the\nouter query and is passed a value, p.country (country name), from the row.",
        "Note",
        "The MAX aggregate function is not logically necessary in this case because the\ninternational_GDP table has only one row per country; however, because the server doesn\u2019t know that, and because the server\nrequires that the subquery return no more than one row, the query uses the aggregate function to force the server to recognize that the\nsubquery will return only one row each time that the subquery is executed.",
        "The functions MIN and AVG also work because\napplying either of these to a single value returns that value unchanged.",
        "A scalar subquery is a subquery that returns at most one row. A scalar subquery can appear anywhere that a value expression can appear, including\nthe SELECT list, GROUP BY clause, or as an argument to a function in a\nWHERE or HAVING clause.",
        "A scalar subquery can contain only one item in the SELECT list.",
        "If a scalar subquery returns more than one row, a runtime error is generated.",
        "Correlated scalar subqueries are currently supported only if they can be statically determined to return one row (e.g. if the\nSELECT list contains an aggregate function with no GROUP BY).",
        "Uncorrelated scalar subqueries are supported anywhere that a value expression is allowed.",
        "Subqueries with a correlation inside of FLATTEN are currently unsupported.",
        "The LIMIT / FETCH clause is allowed only in uncorrelated scalar subqueries.",
        "This example shows a basic uncorrelated subquery in a WHERE clause:",
        "This example shows an uncorrelated subquery in a FROM clause; this basic subquery\nreturns a subset of the information in the international_GDP table.\nThe overall query lists jobs in \u201chigh-wage\u201d countries where the annual pay\nof the job is the same as the per_capita_GDP in that country.",
        "Although subqueries can contain a wide range of SELECT statements, they have the following limitations:",
        "Some clauses are not allowed inside of ANY/ALL/NOT EXISTS subqueries.",
        "The only type of subquery that allows a\nLIMIT / FETCH clause is an uncorrelated scalar\nsubquery. Also, because an uncorrelated scalar subquery returns only 1 row,\nthe LIMIT clause has little or no practical value inside a subquery.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}