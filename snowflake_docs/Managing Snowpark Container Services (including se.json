{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-containers",
    "title": "Managing Snowpark Container Services (including service functions) with Python | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "You can use Python to manage Snowpark Container Services, a fully managed container service through which you can deploy, manage,\nand scale containerized applications. For an overview of Snowpark Container Services,\nsee About Snowpark Container Services.",
        "With the Snowflake Python APIs, you can manage compute pools, image repositories, and services.",
        "The examples in this topic assume that you\u2019ve added code to connect with Snowflake and to create a Root object from which to use the\nSnowflake Python APIs.",
        "For example, the following code uses connection parameters defined in a configuration file to create a connection to Snowflake:",
        "Using the resulting Session object, the code creates a Root object to use the API\u2019s types and methods. For more information,\nsee Connect to Snowflake with the Snowflake Python APIs.",
        "You can manage compute pools, which are collections of virtual machine (VM) nodes on which Snowflake runs your Snowpark Container Services\njobs and services.",
        "The Snowflake Python APIs represents compute pools with two separate types:",
        "ComputePool: Exposes a compute pool\u2019s properties, such as its warehouse, maximum and minimum nodes, and auto resume and auto\nsuspend settings.",
        "ComputePoolResource: Exposes methods for performing actions on compute pools, such as fetching a corresponding\nComputePool object and suspending, resuming, and stopping pools.",
        "For more information about compute pools, see Snowpark Container Services: Working with compute pools.",
        "You can create a compute pool by calling the ComputePoolCollection.create method, passing a ComputePool object\nthat represents the compute pool you want to create.",
        "To create a compute pool, first create a ComputePool object that specifies pool properties such as the following:",
        "Compute pool name",
        "Maximum and minimum number of nodes that the pool will contain",
        "Name of the instance family that identifies the type of machine to provision for nodes in the pool",
        "Whether the pool should automatically resume when a service or job is submitted to it",
        "Code in the following example creates a ComputePool object that represents a pool named my_compute_pool:",
        "The code then creates the compute pool by passing the ComputePool object to the ComputePoolCollection.create method.",
        "You can get information about a compute pool by calling the ComputePoolResource.fetch method, which returns a ComputePool\nobject.",
        "Code in the following example gets information about a pool named my_compute_pool:",
        "You can set properties of a ComputePool object and pass it to the ComputePoolResource.create_or_alter method to create a\ncompute pool if it doesn\u2019t exist, or alter it according to the compute pool definition if it does exist. The behavior of\ncreate_or_alter is intended to be idempotent, which means that the resulting compute pool object will be the same regardless of\nwhether the compute pool exists before you call the method.",
        "Note",
        "The create_or_alter method uses default values for any ComputePool\nproperties that you don\u2019t explicitly define. For example, if you don\u2019t set auto_resume, its value defaults to None even if\nthe compute pool previously existed with a different value.",
        "Code in the following example updates the maximum allowed nodes of the my_compute_pool compute pool, and then alters the compute pool\non Snowflake:",
        "You can list compute pools using the iter method, which returns a PagedIter iterator.",
        "Code in the following example lists compute pools whose name begins with my:",
        "You can perform common compute pool operations\u2014such as suspending, resuming, and stopping pools\u2014with a ComputePoolResource\nobject, which you can get by using the ComputePool.fetch method.",
        "Code in the following example suspends, resumes, and stops the my_compute_pool compute pool:",
        "You can manage image repositories, which store images for applications you run on container services.",
        "An image repository is a schema-level object. When you create or reference a repository, you do so in the context of its schema.",
        "The Snowflake Python APIs represents image repositories with two separate types:",
        "ImageRepository: Exposes an image repository\u2019s properties, such as its database and schema names, repository URL, and owner.",
        "ImageRepositoryResource: Exposes methods you can use to fetch a corresponding ImageRepository object and to drop\nthe image repository resource.",
        "For more information about image repositories, see Snowpark Container Services: Working with an image registry and repository.",
        "To create an image repository, first create an ImageRepository object that specifies the repository name.",
        "Code in the following example creates an ImageRepository object that represents a repository named my_repo:",
        "The code then creates the image repository by passing the ImageRepository object to the ImageRepositoryCollection.create\nmethod, creating the image repository in the my_db database and my_schema schema.",
        "You can get information about an image repository by calling the ImageRepositoryResource.fetch method, which returns an\nImageRepository object.",
        "Code in the following example gets an ImageRepository object representing the my_repo image repository and then prints the\nname of the repository\u2019s owner:",
        "You can list the image repositories in a specified schema using the iter method, which returns a PagedIter iterator\nof ImageRepository objects.",
        "Code in the following example lists repository names in the my_db database and my_schema schema:",
        "You can drop an image repository using the ImageRepositoryResource.drop method.",
        "Code in the following example drops the my_repo repository:",
        "You can manage services, which run application containers until you stop them. Snowflake restarts a service automatically if the service\ncontainer stops. In this way, the service effectively runs uninterrupted.",
        "A service is a schema-level object. When you create or reference a service, you do so in the context of its schema.",
        "The Snowflake Python APIs represents services with two separate types:",
        "Service: Exposes a service\u2019s properties such as its specification, minimum and maximum instances, and database and schema name.",
        "ServiceResource: Exposes methods you can use to fetch a corresponding Service object, suspend and resume\nthe service, and get its status.",
        "For more information about services, see Snowpark Container Services: Working with services.",
        "To create a service, you run the services.create method, passing a Service object representing the service you want to\ncreate.",
        "You create a service from a service specification .yaml file that has been uploaded to a stage. For more information about creating a\nservice specification, see Service specification reference.",
        "If you\u2019re creating a service from a specification that hasn\u2019t yet been uploaded to a stage, you can upload the specification using a\nSnowpark FileOperation\nobject.",
        "Code in the following example uses the FileOperation.put method to upload a specification as a file:",
        "Code in the following example uses the FileOperation.put_stream method to upload a specification as a string:",
        "To create a service from a staged specification, first create a Service object that specifies service properties such as the\nfollowing:",
        "Service name",
        "Maximum and minimum number of service instances that Snowflake can create",
        "Compute pool to which the service should be added",
        "Stage location and name of the specification",
        "Code in the following example creates a Service object representing a service named my_service from a specification in\n@my_stage/my_service_spec.yaml:",
        "The code then creates the service by passing the Service object to the ServiceCollection.create method, creating the service\nin the my_db database and my_schema schema.",
        "You can also create a service from a specification that you provide as inline text, as shown in the following example.\nThe ServiceSpec function takes a single string argument spec. If the string starts with @, the function interprets and\nvalidates it as a stage file path. Otherwise the string is passed through as inline text.",
        "After the service is up and running, you can create a service function that communicates with the service endpoint. A service function is a\nuser-defined function (UDF) that you create and associate with a service in Snowpark Container Services. For more information, see\nService functions: Using a service from an SQL query.",
        "Code in the following example creates a UDF named my-udf that specifies the hello-world service and hello-world-endpoint\nendpoint that you previously defined:",
        "After the service function is created, you can then invoke the function to test it.",
        "Code in the following example invokes the my-udf service function that you previously created:",
        "You can get information about a Snowflake service by calling the ServiceResource.fetch method, which returns a Service\nobject.",
        "Code in the following example gets information about a service named my_service:",
        "You can list the services in a specified schema using the iter method, which returns a PagedIter iterator of\nService objects.",
        "Code in the following example lists services whose name begins with my:",
        "You can perform common service operations\u2014such as suspending, resuming, and getting service status\u2014with a ServiceResource\nobject.",
        "Code in the following example suspends and resumes the my_service service and also gets the service\u2019s status:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}