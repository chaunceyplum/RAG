{
    "url": "https://docs.snowflake.com/en/developer-guide/stored-procedure/stored-procedures-javascript",
    "title": "Writing stored procedures in JavaScript | Snowflake Documentation",
    "paragraphs": [
        "This topic explains how to write the JavaScript code for a stored procedure.",
        "Note",
        "To both create and call an anonymous procedure, use CALL (with anonymous procedure). Creating and calling an anonymous procedure does\nnot require a role with CREATE PROCEDURE schema privileges.",
        "You can capture log and trace data as your handler code executes. For more information, refer to\nLogging, tracing, and metrics.",
        "The JavaScript API for stored procedures is similar to, but not identical to, the APIs in Snowflake connectors and drivers\n(Node.js, JDBC, Python, etc.).",
        "The API enables you to perform operations such as:",
        "Execute a SQL statement.",
        "Retrieve the results of a query (i.e. a result set).",
        "Retrieve metadata about the result set (number of columns, data types of the columns, etc.).",
        "These operations are carried out by calling methods on the following objects:",
        "snowflake, which has methods to create a Statement object and execute a SQL command.",
        "Statement, which helps you execute prepared statements and access metadata for those prepared statements,\nand allows you to get back a ResultSet object.",
        "ResultSet, which holds the results of a query (e.g. the rows of data retrieved for a SELECT statement).",
        "SfDate, which is an extension of JavaScript Date (with additional methods) and serves as a return type for\nthe Snowflake SQL data types TIMESTAMP_LTZ, TIMESTAMP_NTZ, and TIMESTAMP_TZ.",
        "These objects are described in detail in the JavaScript stored procedures API.",
        "A typical stored procedure contains code similar to the following pseudo-code:",
        "This code uses an object named snowflake, which is a special object\nthat exists without being declared. The object is provided inside the context of each stored\nprocedure and exposes the API to allow you to interact with the server.",
        "The other variables (e.g. statement1) are created with JavaScript var statements. For example:",
        "As shown in the code sample above, the snowflake object allows you\nto create a Statement object by calling one of the methods in the API.",
        "Here\u2019s an example that retrieves a ResultSet and iterates through it:",
        "The Examples section (at the end of this topic) provides additional examples\nthat exercise each of the objects, and many of the methods, in the stored procedure JavaScript API.",
        "When calling, using, and getting values back from stored procedures, you often need to convert from a Snowflake SQL\ndata type to a JavaScript data type or vice versa.",
        "SQL to JavaScript conversion can occur when:",
        "Calling a stored procedure with an argument. The argument is a SQL data type; when it is stored inside a\nJavaScript variable inside the stored procedure, it must be converted.",
        "When retrieving a value from a ResultSet object into a JavaScript variable. The ResultSet holds the value as a SQL\ndata type, and the JavaScript variable must store the value as one of the JavaScript data types.",
        "JavaScript to SQL conversion can occur when:",
        "Returning a value from the stored procedure. The return statement typically contains a JavaScript\nvariable that must be converted to a SQL data type.",
        "When dynamically constructing a SQL statement that uses a value in a JavaScript variable.",
        "When binding a JavaScript variable\u2019s value to a prepared statement.",
        "For more information about how Snowflake maps JavaScript and SQL data types, see SQL-JavaScript Data Type Mappings.",
        "SQL statements can be quite long, and it is not always practical to fit them on a single line. JavaScript treats a\nnewline as the end of a statement. If you want to split a long SQL statement across multiple lines, you can use\nthe usual JavaScript techniques for handling long strings, including:",
        "Put a backslash (line continuation character) immediately prior to the end of the line. For example:",
        "Use backticks (single backquotes) rather than double quotes around the string. For example:",
        "Accumulate the string. For example:",
        "The range for numbers with precision intact is from",
        "-(2^53 -1)",
        "to",
        "(2^53 -1)",
        "The range of valid values in Snowflake NUMBER(p, s) and DOUBLE data types is larger. Retrieving a value from Snowflake\nand storing it in a JavaScript numeric variable can result in loss of precision. For example:",
        "The first two columns should match, and the third should contain 0.0.",
        "The problem applies to JavaScript user-defined functions (UDFs) and stored procedures.",
        "If you experience the problem in stored procedures when using getColumnValue(), you might be able to avoid the\nproblem by retrieving a value as a string, e.g. with:",
        "You can then return the string from the stored procedure, and cast the string to a numeric data type in SQL.",
        "Because a stored procedure is written in JavaScript, it can use JavaScript\u2019s try/catch syntax.",
        "The stored procedure can throw a pre-defined exception or a custom exception. A simple example of throwing a\ncustom exception is here.",
        "You can execute your SQL statements inside a try block. If an error occurs, then your catch block can roll back all of\nthe statements (if you put the statements in a transaction). The Examples section contains an example of\nrolling back a transaction in a stored procedure.",
        "Stored procedures have the following restrictions:",
        "The JavaScript code cannot call the JavaScript eval() function.",
        "JavaScript stored procedures support access to the standard JavaScript library. Note that this excludes many objects and methods\ntypically provided by browsers. There is no mechanism to import, include, or call additional libraries.\nAllowing 3rd-party libraries could create security holes.",
        "JavaScript code is executed within a restricted engine, preventing system calls from the JavaScript\ncontext (e.g. no network and disk access), and constraining the system resources available to the engine, specifically memory.",
        "Argument names are case-insensitive in the SQL portion of the stored procedure code, but are\ncase-sensitive in the JavaScript portion.",
        "For stored procedures (and UDFs) that use JavaScript, identifiers (such as\nargument names) in the SQL portion of the statement are converted to uppercase automatically (unless you delimit the\nidentifier with double quotes), while argument names in the JavaScript portion\nwill be left in their original case. This can cause your stored procedure to\nfail without returning an explicit error message because the arguments aren\u2019t seen.",
        "Here is an example of a stored procedure in which the name of an argument in the\nJavaScript code does not match the name of the argument in the SQL code merely\nbecause the case will be different:",
        "In the example below, the first assignment statement is incorrect because the name argument1 is in lower case.",
        "Using uppercase identifiers (especially argument names) consistently across\nyour SQL statements and JavaScript code tends to reduce silent errors.",
        "The JavaScript portion of the stored procedure code must be enclosed within either single quotes ' or\ndouble dollar signs $$.",
        "Using $$ makes it easier to handle JavaScript code that contains single quotes without \u201cescaping\u201d those quotes.",
        "For information about overloading and naming conventions, see Naming and overloading procedures and UDFs.",
        "Binding a variable to a SQL statement allows you to use the value of\nthe variable in the statement.",
        "You can bind NULL values as well as non-NULL values.",
        "The data type of the variable should be appropriate for the use of the value in the SQL statement. Currently, only\nJavaScript variables of type number, string, and SfDate can be bound. (For details about the\nmapping between SQL data types and JavaScript data types, see SQL and JavaScript data type mapping.)",
        "Here is a short example of binding:",
        "Here is a more complete example. This example binds TIMESTAMP information. Because direct binding of SQL TIMESTAMP\ndata is not supported, this example passes the timestamp as a VARCHAR, then binds that to the statement. Note that\nthe SQL statement itself converts the VARCHAR to a TIMESTAMP by calling the TO_TIMESTAMP() function:",
        "This simple function returns TRUE if the specified timestamp is prior to now, and FALSE otherwise.",
        "This shows how to bind a VARCHAR, a TIMESTAMP_LTZ, and other data types to an INSERT statement. The\nTIMESTAMP_LTZ binds an SfDate variable that is created inside the stored procedure.",
        "Create a table.",
        "Create a stored procedure. This procedure accepts a VARCHAR, and converts the VARCHAR to a TIMESTAMP_LTZ\nby using SQL. The procedure then retrieves the converted value from a ResultSet. The value is stored in a JavaScript\nvariable of type SfDate. The stored procedure then binds both the original VARCHAR and the TIMESTAMP_LTZ to an INSERT statement. This also demonstrates binding of JavaScript numeric data.",
        "Call the procedure.",
        "Verify that the row was inserted.",
        "For additional examples of binding data in JavaScript, see Binding statement parameters.",
        "The JavaScript code must define a single literal JavaScript object for the stored procedure to be valid.",
        "If the JavaScript code does not meet this requirement, the stored procedure will be created; however, it will fail when called.",
        "Snowflake limits the maximum size of the JavaScript source code in the body of a JavaScript stored procedure. Snowflake recommends\nlimiting the size to 100 KB. (The code is stored in a compressed form, and the exact limit depends on the compressibility of the\ncode.)",
        "Most errors in stored procedures show up at runtime because the JavaScript\ncode is interpreted at the time that the stored procedure runs rather than when\nthe stored procedure is created.",
        "Stored procedures can be used to dynamically construct SQL statements. For example,\nyou could build a SQL command string that contains a mix of pre-configured\nSQL and user inputs (e.g. a user\u2019s account number).",
        "For examples, see Dynamically creating a SQL statement and the Examples section.",
        "The API for Snowflake stored procedures is synchronous. Within a stored\nprocedure, you can run only one thread at a time.",
        "Note that this is different from the rule for the JavaScript executing with the Node.js\nconnector, which allows you to run asynchronous threads.",
        "The following example shows the basic syntax of creating and calling a stored procedure. It doesn\u2019t execute any SQL\nor procedural code. However, it provides a starting point for more realistic examples later:",
        "Note that the $$ delimiter marks the beginning and end of the JavaScript code.",
        "Now call the procedure you just created:",
        "The following example illustrates how to execute a SQL statement inside a stored procedure:",
        "Create a table:",
        "Create a stored procedure. This inserts a row into\nan existing table named stproc_test_table1 and returns the value \u201cSucceeded.\u201d.\nThe returned value is not particularly useful from a SQL perspective, but it\nallows you to return status information (e.g. \u201cSucceeded.\u201d or \u201cFailed.\u201d) to the user.",
        "Call the stored procedure:",
        "Confirm that the stored procedure inserted the row:",
        "The following example retrieves a result:",
        "Create a procedure to count the number of rows in a table (equivalent to select count(*) from table):",
        "Ask the stored procedure how many rows are in the table:",
        "Check independently that you got the right number:",
        "The following example shows a basic, but not particularly realistic, recursive stored procedure:",
        "The following example shows how to dynamically create a SQL statement:",
        "Note",
        "As stated in SQL injection (in this topic), be careful to guard against attacks when using dynamic SQL.",
        "Create the stored procedure. This procedure allows you to pass the name of a table and get the number of rows in\nthat table (equivalent to select count(*) from table_name):",
        "Call the stored procedure:",
        "Show the results from select count(*) for the same table:",
        "This example demonstrates retrieving a small amount of metadata from a result set:",
        "This example demonstrates using a JavaScript try/catch block to catch an error inside a stored procedure:",
        "Create the stored procedure:",
        "Call the stored procedure. This should return an error showing the error\nnumber and other information:",
        "The following example demonstrates throwing a custom exception:",
        "Create the stored procedure:",
        "Call the stored procedure with valid and invalid values:",
        "The following example wraps multiple related statements in a transaction, and uses try/catch to commit or roll back.\nThe parameter force_failure allows the caller to choose between successful execution and deliberate error.",
        "You can capture log and trace data from JavaScript handler code by using the snowflake object in the JavaScript API. When you do,\nlog messages and trace data are stored in an event table that you can analyze with queries.",
        "For more information, refer to the following:",
        "Logging messages in JavaScript",
        "Emitting trace events in JavaScript",
        "This example shows how to use the RESULT_SCAN function to retrieve the result from a CALL\nstatement:",
        "Create and load the table:",
        "Create the stored procedure. This procedure returns a well-formatted string that looks like a result set of\nthree rows, but is actually a single string:",
        "Call the stored procedure, then retrieve the results by using RESULT_SCAN:",
        "You can perform more complex operations on the value returned by the RESULT_SCAN function. In this case, because the\nreturned value is a single string, you might want to extract the individual \u201crows\u201d that appear to be contained\nwithin that string, and store those rows in another table.",
        "The following example, which is a continuation of the previous example, illustrates one way to do this:",
        "Create a table for long-term storage. This table contains the province name and the province ID after you\u2019ve\nextracted them from the string returned by the CALL command:",
        "Call the stored procedure, then retrieve the result by using RESULT_SCAN, and then extract the three rows\nfrom the string and put those rows into the table:",
        "Verify that this worked by showing the rows in the table:",
        "Here\u2019s approximately the same code, but in smaller steps:",
        "Create a table named one_string. This table temporarily stores the result of the CALL command.\nThe result of the CALL is a single string, so this table stores only a single VARCHAR value.",
        "Call the stored procedure, then retrieve the result (a string) by using RESULT_SCAN, and then store that into\nthe intermediate table named one_string:",
        "This shows the new row in the one_string table. Remember that although this is formatted to look like three rows,\nit is actually a single string:",
        "The following commands show how to extract multiple rows from the string:",
        "Next, create a table named three_strings. This table will hold the result after you\u2019ve split it into individual\nlines/strings:",
        "Now convert that one string in the one_string table into three separate strings, and show that it is\nnow actually three strings:",
        "Now convert the three strings into three rows in our long-term table named all_provinces:",
        "Show the three rows in the long-term table:",
        "Your stored procedure might execute more than one SQL statement and you might want to return a status/error message\nfor each SQL statement. However, a stored procedure returns a single row; it is not designed to return multiple\nrows.",
        "If all of your messages fit into a single value of type ARRAY, you can get all the messages from a stored procedure\nwith some additional effort.",
        "The following example shows one way to do this (the error messages shown are not real, but you can extend this code to\nwork with your actual SQL statements):",
        "Remember, this is not a general purpose solution. There is a limit on the maximum size of\nARRAY data types, and your entire result set must fit into a single ARRAY.",
        "This section extends the previous example described in Returning an Array of Error Messages. This example is more\ngeneral, and allows you to return a result set from a query.",
        "A stored procedure returns a single row that contains a single column; it is not designed to return a result set.\nHowever, if your result set is small enough to fit into a single value of type VARIANT or ARRAY, you can return\na result set from a stored procedure with some additional code:",
        "This shows how to combine the previous two lines into a single line:",
        "For convenience, you can wrap the preceding line in a view. This view also converts the string \u2018null\u2019 to a true NULL.\nYou only need to create the view once. However, you must call the stored procedure immediately prior to\nselecting from this view every time you use the view. Remember, the call to RESULT_SCAN in the view is pulling from the\nmost recent statement, which must be the CALL:",
        "You can even use it as a true view (i.e. select a subset of it):",
        "Remember, this is not a general purpose solution. There is a limit on the maximum size of VARIANT and\nARRAY data types, and your entire result set must fit into a single VARIANT or ARRAY.",
        "This example shows a stored procedure that is useful for an on-line retailer.\nThis stored procedure respects customers\u2019 privacy, while protecting\nlegitimate interests of both the retailer and the customer.\nIf a customer asks the retailer to delete the customer\u2019s data for privacy reasons,\nthen this stored procedure deletes most of the customer\u2019s data, but leaves the customer\u2019s\npurchase history if either of the following is true:",
        "Any purchased item has a warranty that has not yet expired.",
        "The customer still owes money (or the customer is owed a refund).",
        "A more real-world version of this would delete individual rows for which payment has been\nmade and the warranty has expired.",
        "Start by creating the tables and loading them:",
        "Create the stored procedure:",
        "Show the data in the tables before deleting any of that data:",
        "Customer #1 has a warranty that is still in effect. The stored procedure deletes the review comments that they posted,\nbut keeps their purchase record because of the warranty:",
        "Customer #2 still owes money. The stored procedure deletes their review comments, but keeps their purchase record:",
        "Customer #3 does not owe any money (and is not owed any money). Their warranty expired, so the stored procedure\ndeletes both the review comments and the purchase records:",
        "These examples illustrate one of the key differences between caller\u2019s rights and owner\u2019s rights stored\nprocedures. They attempt to use session variables in two ways:",
        "Set a session variable before calling the stored procedure, then use the session variable inside the stored\nprocedure.",
        "Set a session variable inside the stored procedure, then use the session variable after returning from the stored\nprocedures.",
        "Both using the session variable and setting the session variable work correctly in a caller\u2019s rights stored procedure.\nBoth fail when using an owner\u2019s rights stored procedure even if the caller is the owner.",
        "The following example demonstrates a caller\u2019s rights stored procedure.",
        "Create and load a table:",
        "Set a session variable:",
        "Create a caller\u2019s rights stored procedure that uses one session variable and sets another:",
        "Call the procedure:",
        "View the value of the session variable set inside the stored procedure:",
        "Note",
        "Although you can set a session variable inside a stored procedure and leave it set after the end of the procedure,\nSnowflake does not recommend doing this.",
        "The following example demonstrates an owner\u2019s rights stored procedure.",
        "Create an owner\u2019s rights stored procedure that uses a session variable:",
        "Call the procedure (it should fail):",
        "Create an owner\u2019s rights stored procedure that tries to set a session variable:",
        "Call the procedure (it should fail):",
        "A general troubleshooting technique is to use a JavaScript try/catch block to\ncatch the error and display error information. The error object contains:",
        "Error code.",
        "Error message.",
        "Error state.",
        "Stack trace at the point of failure.",
        "For more information, including an example, of how to use this information, see Catching an error using try/catch (in this topic).",
        "Th following sections provide additional suggestions to help debug specific problems.",
        "Your stored procedure/UDF has a parameter, and inside the procedure/UDF, the parameter is referred to by its lowercase name, but Snowflake has\nautomatically converted the name to uppercase.",
        "Either:",
        "Use uppercase for the variable name inside the JavaScript code, or",
        "Enclose the variable name in double quotes in the SQL code.",
        "For more details, see JavaScript arguments and returned values.",
        "You might have an infinite loop in your JavaScript code.",
        "Check for and fix any infinite loops.",
        "Your stored procedure might contain \u201csqltext\u201d when it should have \u201csqlText\u201d\n(the first is all lowercase; the second is mixed case).",
        "Use \u201csqlText\u201d.",
        "You might have an infinite loop in your JavaScript code.",
        "Check for and fix any infinite loops. In particular, ensure that you stop calling for the next row when the result set runs out (i.e. when\nresultSet.next() returns false).",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}