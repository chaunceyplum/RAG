{
    "url": "https://docs.snowflake.com/en/release-notes/bcr-bundles/2024_04/bcr-1592",
    "title": "Event tracing: Trace IDs propagated from parent to child through procedure calls | Snowflake Documentation",
    "paragraphs": [
        "Attention",
        "This behavior change is in the 2024_04 bundle.",
        "For the current status of the bundle, refer to Bundle History.",
        "The trace_id of each of the spans created by chained Java and Scala stored procedures or UDFs is unique.",
        "The parent_span_id field does not exist in the RECORD column of the event table.",
        "Native apps providers and consumers see different trace_id values for shared events. The provider sees the hashed version.",
        "Spans generated by chained Java and Scala stored procedures or UDFs have the same trace_id. The RECORD column has a\nparent_span_id attribute.",
        "Spans generated by chained Java and Scala stored procedures or UDFs have a parent-child relationship between parent_span_id and\nspan_id. Java and Scala stored procedures can call other stored procedures in a chain of any length. (UDFs can\u2019t execute\nSQL statements, so calling a UDF ends the chain. However, the trace info is still propagated to the UDF\u2019s spans.)",
        "If the Java or Scala stored procedure or UDF was called by the user directly (the root), then the trace_id will be a random ID\nand there will be no parent_span_id. If tracing is disabled for a stored procedure and it calls another stored procedure or UDF,\nthen the trace_id of the child\u2019s spans will be random and they will have no parent_span_id. In other words, the trace is\nrestarted at the child.",
        "Native apps providers and consumers see the same trace_id for shared Java or Scala stored procedure or UDF events, so they can be\ndebugged more easily.",
        "Ref: 1592",
        "Was this page helpful?"
    ]
}