{
    "url": "https://docs.snowflake.com/en/developer-guide/native-apps/preparing-data-content",
    "title": "Share data content in a Snowflake Native App | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "The Snowflake Native App Framework is generally available on supported cloud platforms. For additional information, see\nSupport for private connectivity, VPS, and government regions.",
        "This topic describes how providers can add shared data content to a Snowflake Native App.",
        "Note",
        "Providers can publish a Snowflake Native App to the Snowflake Marketplace as a limited trial listing. To publish\nan app as a trial listing, see Preparing to offer a limited trial listing.",
        "The Snowflake Native App Framework allows providers to add shared data content to an app. This data content is shared with\nthe consumers when they install and use the app. To share data content, providers must grant privileges\non the shared data to the application package. Data content that providers share with an application\npackage is shared across all installed instances of the app.",
        "Caution",
        "Shared data content is not versioned, which means that all versions of an app use the same data.",
        "Consumers cannot access shared content directly. Instead, a provider creates a secure view in the setup\nscript of an application package and grants the consumer access to the secure view.\nFor details, see Allow consumers to access shared objects in an app.",
        "The Snowflake Native App Framework allows providers to add the following database objects to an application package:",
        "Schemas",
        "Tables, including external and Apache Iceberg\u2122 tables",
        "Views",
        "Note",
        "When sharing database objects such as tables and views, you must also share the\nschema that contains them.",
        "The following restrictions apply to tables and views shared in an application package:",
        "Tables cannot have virtual columns, including policies containing Java, Python, or JavaScript code.",
        "View definitions or virtual columns associated with them such as policies cannot\ncontain calls to Java, Python, or JavaScript.",
        "Shared tables cannot be temporary, volatile, or transient tables.",
        "Cross-Cloud Auto-Fulfillment is not supported for apps that contain external or Apache Iceberg\u2122 tables.",
        "Some functions that are commonly referenced by policies, such as CURRENT_USER, behave\ndifferently in the context of an app installed in a consumer account. Although a policy\ndefined by a provider might work correctly in the provider account, it might not work correctly in the consumer account after the consumer\ninstalls the app.",
        "Snowflake recommends that providers define policies on the proxy views that are specified in\nthe setup script. Defining policies on the proxy views ensures that the definition of the policies\ncannot be changed after an app is installed. Defining policies on proxy views also ensures\nthat during upgrades running code continues to use the policies that were applied when the version was\ncreated.",
        "To include shared data content in an app, providers must grant privileges on the object to be shared\nwith the application package. When providers add an object to an application\npackage, by default, the object is private to the application package and not visible when the\napp is installed.",
        "To make objects visible to an app installed from the application package, use the\nGRANT \u2026 TO SHARE IN APPLICATION PACKAGE command as shown in the following example:",
        "In this example, the first command grants the USAGE privilege on the shared_schema schema to the\napplication package. This command allows the schema to be shared with consumers. The second command\ngrants the SELECT privilege on the shared_table table within shared_schema to the application\npackage. This command allows consumers to query the table.",
        "After a consumer installs an app from the application package app_package,  they can access the\nshared_schema and query the shared_table.",
        "Note",
        "When adding a shared object to an application package, you must also share the schema that contains\nthe object.",
        "You can also share views with an app by using similar SQL commands.",
        "To share a database object that exists outside the application package, providers must create\nviews in the application package that allow access the object. You cannot share objects\noutside the application package directly with app installed in the consumer account.",
        "For example, to share a database that is outside the application package, grant the REFERENCE_USAGE\nprivilege on the database to the application package as shown in the following example:",
        "After granting the REFERENCE_USAGE on the external database, a provider must create a view within the\napplication to references the shared objects as shown in the following example:",
        "This command creates a view in the application package that references the database, table,\nand schema that are outside the application package.",
        "After creating the view, you must  grant privileges on the schema and view to the application\nas shown in the following example:",
        "Database objects that are created in the setup script are directly accessible to the app\nafter installation. These include tables, functions, procedures, and new view definitions,",
        "However, by default, database objects shared with an application package are not visible to consumers.\nTo allow consumers to view and access data content, the application package must create a secure view\nand grant the appropriate privileges.",
        "This approach offers the following advantages:",
        "Creating the view in the setup script ensures that changes made directly to the\nshared objects, such as new columns, are not visible to the version of the Snowflake Native App being\ninstalled by the setup script. To allow access to changes to the object, providers must create a new\nversion or patch for the app.",
        "Creating the view in a versioned schema ensures that each version of the Snowflake Native App contains\nonly the definition of the view for that version. This is important for upgrade scenarios.",
        "To expose shared objects to a consumer, the setup script must include commands to:",
        "Install views within a versioned schema in the application package.",
        "Grant access to those views to the consumer using an application role.",
        "The following example describes how to use application roles to grant access to shared objects within the\nsetup script of the application package:",
        "In this example, the view accesses content in the shared_schema.shared_view and shares it with the\napplication package.",
        "Note",
        "If a provider attempts to define a view that directly accesses shared data content, such as a\ndatabase object external to the application package, Snowflake returns an error.",
        "Snowflake recommends that you create proxy views and define policies to protect them within the\nsetup script. Defining policies to protect the proxy view ensures that the definition\nof policies cannot be changed after the Snowflake Native App is installed. Defining policies on proxy\nviews also ensures that during upgrades running code continues to use the policies that are applied\nwhen the upgraded version is created.",
        "The Snowflake Native App Framework allows providers to share external tables and\nApache Iceberg\u2122 tables with consumers. The method for sharing these types\nof tables is similar to normal tables in that providers add views to the setup script and grant\nprivileges on these views to an application role.",
        "Caution",
        "External and Apache Iceberg\u2122 tables might incur additional egress or ingress costs to the provider or consumer\nif the backing object store is not in the same region as the app listing.",
        "The following restrictions and requirements apply when sharing an external or Iceberg table:",
        "External and Iceberg tables and views that access them are read-only for the app.",
        "Cross-Cloud Auto-Fulfillment is not supported for apps\nthat share external or Iceberg tables.",
        "Consumers must allow the app to use an external or Iceberg table in the provider account before it\nis available to the app.",
        "External and Iceberg tables are not supported for apps that have listings that enable\nCross-Cloud Auto-Fulfillment.",
        "Note",
        "To publish an app that uses external or Iceberg tables to multiple Snowflake regions, providers\nmust publish the listing to each region.",
        "If a provider creates a listing for an app that includes an external or Iceberg table,\nthe ability to configure Cross-Cloud Auto-Fulfillment is disabled in Snowight.",
        "If a provider attempts to add a version or patch to an application package that is the\ndata product of a listing that has Cross-Cloud Auto-Fulfillment configured, Snowflake\nreturns an error.",
        "In addition to adding an external or Iceberg table to the application package, providers must perform\nthe following:",
        "Add an entry to the manifest file to enable external and Iceberg tables. See\nAdd an entry for external and Iceberg tables to the manifest\nfor more information.",
        "Providers can use the Python Permission SDK to allow consumers to use Snowsight to enable\nthe app to access an external or Iceberg table. Alternately, providers can ask consumers to\nenable the external or Iceberg table manually.\nSee Request permissions to access external and Iceberg tables\nfor more information.",
        "Use caution when revoking privileges from shared objects in an application package or when dropping\nshared objects. If an installed version of a Snowflake Native App still requires access to those objects,\nthe Snowflake Native App might become unstable or fail.",
        "Providers should use caution when granting the MONITOR or OPERATE privilege on dynamic tables to an\napplication role. These privileges allow the consumer to view a dynamic table\u2019s metadata, which might\nexpose the implementation details of the app. See Privileges to view a dynamic table\u2019s metadata for\nmore information on what actions the consumer can perform.",
        "Use caution when revoking permissions on shared objects from an application package or when dropping shared\nobjects. If an installed version of the Snowflake Native App still requires access to those objects,\nthe Snowflake Native App might become unstable or fail.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}