{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/scala/com/snowflake/snowpark/DataFrame.html#rename(newName:String,col:com.snowflake.snowpark.Column):com.snowflake.snowpark.DataFrame",
    "title": "Snowpark 1.15.0  - com.snowflake.snowpark.DataFrame",
    "paragraphs": [
        "This package contains all Snowpark logical types.",
        "This package contains all Snowpark logical types.",
        "0.1.0",
        "com\n        \n        .\n        \n         snowflake\n        \n        .\n        \n         snowpark",
        "Represents a lazily-evaluated relational dataset that contains a collection of\n         \n          Row\n         \n         objects\nwith columns defined by a schema (column name and type).",
        "A DataFrame is considered lazy because it encapsulates the computation or query\nrequired to produce a relational dataset. The computation is not performed until\nyou call a method that performs an action (e.g.\n         \n          collect\n         \n         ).",
        "Creating a DataFrame",
        "You can create a DataFrame in a number of different ways, as shown in the examples below.",
        "Example 1: Creating a DataFrame by reading a table.",
        "Example 2: Creating a DataFrame by reading files from a stage.",
        "Example 3: Creating a DataFrame by specifying a sequence or a range.",
        "Example 4: Create a new DataFrame by applying transformations to other existing DataFrames.",
        "Performing operations on a DataFrame",
        "Broadly, the operations on DataFrame can be divided into two types:",
        "Transforming a DataFrame",
        "The following examples demonstrate how you can transform a DataFrame.",
        "Example 5. Using the\n         \n          select\n         \n         method to select the columns that\nshould be in the DataFrame (similar to adding a\n         \n          SELECT\n         \n         clause).",
        "Example 6. Using the\n         \n          Column.as\n         \n         method to rename a column in a DataFrame (similar to using\n         \n          SELECT col AS alias\n         \n         ).",
        "Example 7. Using the\n         \n          filter\n         \n         method to filter data (similar to adding a\n         \n          WHERE\n         \n         clause).",
        "Example 8. Using the\n         \n          sort\n         \n         method to specify the sort order of the data (similar\nto adding an\n         \n          ORDER BY\n         \n         clause).",
        "Example 9. Using the\n         \n          groupBy\n         \n         method to\nreturn a\n         \n          RelationalGroupedDataFrame\n         \n         that you can use to group and aggregate results (similar\nto adding a\n         \n          GROUP BY\n         \n         clause).",
        "RelationalGroupedDataFrame\n         \n         provides methods for aggregating results, including:",
        "Example 10. Using a\n         \n          Window\n         \n         to build a\n         \n          WindowSpec\n         \n         object that you can use for\n         \n          windowing functions\n         \n         (similar to using '<function> OVER ... PARTITION BY ... ORDER BY').",
        "Performing an action on a DataFrame",
        "The following examples demonstrate how you can perform an action on a DataFrame.",
        "Example 11: Performing a query and returning an array of Rows.",
        "Example 12: Performing a query and print the results.",
        "0.1.0",
        "Aggregate the data in the DataFrame.",
        "Aggregate the data in the DataFrame. Use this method if you don't need\nto group the data (\n              \n               groupBy\n              \n              ).",
        "For the input value, pass in expressions that apply aggregation functions to columns\n(functions that are defined in the\n              \n               functions\n              \n              object).",
        "The following example calculates the maximum value of the\n              \n               num_sales\n              \n              column and the mean\nvalue of the\n              \n               price\n              \n              column:",
        "For example:",
        "An array of expressions on columns.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Aggregate the data in the DataFrame.",
        "Aggregate the data in the DataFrame. Use this method if you don't need\nto group the data (\n              \n               groupBy\n              \n              ).",
        "For the input value, pass in expressions that apply aggregation functions to columns\n(functions that are defined in the\n              \n               functions\n              \n              object).",
        "The following example calculates the maximum value of the\n              \n               num_sales\n              \n              column and the mean\nvalue of the\n              \n               price\n              \n              column:",
        "A list of expressions on columns.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Aggregate the data in the DataFrame.",
        "Aggregate the data in the DataFrame. Use this method if you don't need to group the data\n(\n              \n               groupBy\n              \n              ).",
        "For the input value, pass in expressions that apply aggregation functions to columns\n(functions that are defined in the\n              \n               functions\n              \n              object).",
        "The following example calculates the maximum value of the\n              \n               num_sales\n              \n              column and the mean\nvalue of the\n              \n               price\n              \n              column:",
        "For example:",
        "A list of expressions on columns.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Aggregate the data in the DataFrame.",
        "Aggregate the data in the DataFrame. Use this method if you don't need\nto group the data (\n              \n               groupBy\n              \n              ).",
        "For the input, pass in a Map that specifies the column names and aggregation functions.\nFor each pair in the Map:",
        "The following example calculates the maximum value of the\n              \n               num_sales\n              \n              column and the average\nvalue of the\n              \n               price\n              \n              column:",
        "This is equivalent to calling\n              \n               agg\n              \n              after calling\n              \n               groupBy\n              \n              without a column name:",
        "A map of column names and aggregate functions.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Aggregate the data in the DataFrame.",
        "Aggregate the data in the DataFrame. Use this method if you don't need to\ngroup the data (\n              \n               groupBy\n              \n              ).",
        "For the input, pass in a Map that specifies the column names and aggregation functions.\nFor each pair in the Map:",
        "The following example calculates the maximum value of the\n              \n               num_sales\n              \n              column and the average\nvalue of the\n              \n               price\n              \n              column:",
        "This is equivalent to calling\n              \n               agg\n              \n              after calling\n              \n               groupBy\n              \n              without a column name:",
        "A map of column names and aggregate functions.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns the current DataFrame aliased as the input alias name.",
        "Returns the current DataFrame aliased as the input alias name.",
        "For example:",
        "The alias name of the dataframe",
        "a\n               \n                DataFrame",
        "1.10.0",
        "Returns a reference to a column in the DataFrame.",
        "Returns a reference to a column in the DataFrame.\nThis method is identical to\n              \n               DataFrame.col\n              \n              .",
        "The name of the column.",
        "A\n               \n                Column",
        "0.1.0",
        "Returns a\n            \n             DataFrameAsyncActor\n            \n            object that can be used to execute\nDataFrame actions asynchronously.",
        "Returns a\n              \n               DataFrameAsyncActor\n              \n              object that can be used to execute\nDataFrame actions asynchronously.",
        "Example:",
        "A\n               \n                DataFrameAsyncActor\n               \n               object",
        "0.11.0",
        "Caches the content of this DataFrame to create a new cached DataFrame.",
        "Caches the content of this DataFrame to create a new cached DataFrame.",
        "All subsequent operations on the returned cached DataFrame are performed on the cached data\nand have no effect on the original DataFrame.",
        "A\n               \n                HasCachedResult",
        "0.4.0",
        "Returns a clone of this DataFrame.",
        "Returns a clone of this DataFrame.",
        "A\n               \n                DataFrame",
        "0.4.0",
        "Returns a reference to a column in the DataFrame.",
        "Returns a reference to a column in the DataFrame.",
        "The name of the column.",
        "A\n               \n                Column",
        "0.1.0",
        "Executes the query representing this DataFrame and returns the result as an Array of\n            \n             Row\n            \n            objects.",
        "Executes the query representing this DataFrame and returns the result as an Array of\n              \n               Row\n              \n              objects.",
        "An Array of\n               \n                Row",
        "0.1.0",
        "Executes the query representing this DataFrame and returns the number of rows in the result\n(similar to the COUNT function in SQL).",
        "Executes the query representing this DataFrame and returns the number of rows in the result\n(similar to the COUNT function in SQL).",
        "The number of rows.",
        "0.1.0",
        "Creates a temporary view that returns the same results as this DataFrame.",
        "Creates a temporary view that returns the same results as this DataFrame.",
        "You can use the view in subsequent SQL queries and statements during the current session.\nThe temporary view is only available in the session in which it is created.",
        "In\n              \n               multipartIdentifer\n              \n              , you can include the database and schema name to specify a\nfully-qualified name. If no database name or schema name are specified, the view will be\ncreated in the current database or schema.",
        "The view name must be a valid\n              \n               Snowflake identifier\n              \n              .",
        "A list of strings that specify the database name, schema name, and\n                           view name.",
        "0.5.0",
        "Creates a temporary view that returns the same results as this DataFrame.",
        "Creates a temporary view that returns the same results as this DataFrame.",
        "You can use the view in subsequent SQL queries and statements during the current session.\nThe temporary view is only available in the session in which it is created.",
        "In\n              \n               multipartIdentifer\n              \n              , you can include the database and schema name to specify a\nfully-qualified name. If no database name or schema name are specified, the view will be\ncreated in the current database or schema.",
        "The view name must be a valid\n              \n               Snowflake identifier\n              \n              .",
        "A sequence of strings that specify the database name, schema name,\n                           and view name.",
        "0.5.0",
        "Creates a temporary view that returns the same results as this DataFrame.",
        "Creates a temporary view that returns the same results as this DataFrame.",
        "You can use the view in subsequent SQL queries and statements during the current session.\nThe temporary view is only available in the session in which it is created.",
        "For\n              \n               viewName\n              \n              , you can include the database and schema name (i.e. specify a fully-qualified\nname). If no database name or schema name are specified, the view will be created in the\ncurrent database or schema.",
        "viewName\n              \n              must be a valid\n              \n               Snowflake identifier\n              \n              .",
        "The name of the view to create or replace.",
        "0.4.0",
        "Creates a view that captures the computation expressed by this DataFrame.",
        "Creates a view that captures the computation expressed by this DataFrame.",
        "In\n              \n               multipartIdentifer\n              \n              , you can include the database and schema name to specify a\nfully-qualified name. If no database name or schema name are specified, the view will be\ncreated in the current database or schema.",
        "The view name must be a valid\n              \n               Snowflake identifier\n              \n              .",
        "A list of strings that specifies the database name, schema name,\n                           and view name.",
        "0.5.0",
        "Creates a view that captures the computation expressed by this DataFrame.",
        "Creates a view that captures the computation expressed by this DataFrame.",
        "In\n              \n               multipartIdentifer\n              \n              , you can include the database and schema name to specify a\nfully-qualified name. If no database name or schema name are specified, the view will be\ncreated in the current database or schema.",
        "The view name must be a valid\n              \n               Snowflake identifier\n              \n              .",
        "A sequence of strings that specifies the database name, schema name,\n                           and view name.",
        "0.5.0",
        "Creates a view that captures the computation expressed by this DataFrame.",
        "Creates a view that captures the computation expressed by this DataFrame.",
        "For\n              \n               viewName\n              \n              , you can include the database and schema name (i.e. specify a fully-qualified\nname). If no database name or schema name are specified, the view will be created in the\ncurrent database or schema.",
        "viewName\n              \n              must be a valid\n              \n               Snowflake identifier\n              \n              .",
        "The name of the view to create or replace.",
        "0.1.0",
        "Performs a cross join, which returns the cartesian product of the current DataFrame and\nanother DataFrame (\n            \n             right\n            \n            ).",
        "Performs a cross join, which returns the cartesian product of the current DataFrame and\nanother DataFrame (\n              \n               right\n              \n              ).",
        "If the current and\n              \n               right\n              \n              DataFrames have columns with the same name, and you need to refer\nto one of these columns in the returned DataFrame, use the\n              \n               apply\n              \n              or\n              \n               col\n              \n              function\non the current or\n              \n               right\n              \n              DataFrame to disambiguate references to these columns.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Performs an SQL\n            \n             GROUP BY CUBE",
        "Performs an SQL\n              \n               GROUP BY CUBE",
        "A list of the names of columns to use.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.2.0",
        "Performs an SQL\n            \n             GROUP BY CUBE\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY CUBE\n              \n              on the DataFrame.",
        "The name of the first column to use.",
        "A list of the names of additional columns to use.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Performs an SQL\n            \n             GROUP BY CUBE\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY CUBE\n              \n              on the DataFrame.",
        "A list of expressions for columns to use.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.9.0",
        "Performs an SQL\n            \n             GROUP BY CUBE\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY CUBE\n              \n              on the DataFrame.",
        "A list of expressions for columns to use.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.2.0",
        "Performs an SQL\n            \n             GROUP BY CUBE\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY CUBE\n              \n              on the DataFrame.",
        "The expression for the first column to use.",
        "A list of expressions for additional columns to use.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Returns a new DataFrame that contains only the rows with distinct values from the current\nDataFrame.",
        "Returns a new DataFrame that contains only the rows with distinct values from the current\nDataFrame.",
        "This is equivalent to performing a SELECT DISTINCT in SQL.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a new DataFrame that excludes the specified column expressions from the output.",
        "Returns a new DataFrame that excludes the specified column expressions from the output.",
        "This is functionally equivalent to calling\n              \n               select\n              \n              and\npassing in all columns except the ones to exclude.",
        "This method throws a\n              \n               SnowparkClientException\n              \n              if:",
        "An array of the names of the columns to exclude.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Returns a new DataFrame that excludes the specified column\nexpressions from the output.",
        "Returns a new DataFrame that excludes the specified column\nexpressions from the output.",
        "This is functionally equivalent to calling\n              \n               select\n              \n              and passing in all\ncolumns except the ones to exclude.",
        "This method throws a\n              \n               SnowparkClientException\n              \n              if:",
        "A list of the names of the columns to exclude.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Returns a new DataFrame that excludes the columns specified by the expressions from the\noutput.",
        "Returns a new DataFrame that excludes the columns specified by the expressions from the\noutput.",
        "This is functionally equivalent to calling\n              \n               select\n              \n              and passing in\nall columns except the ones to exclude.",
        "This method throws a\n              \n               SnowparkClientException\n              \n              if:",
        "The expression for the first column to exclude.",
        "A list of expressions for additional columns to exclude.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a new DataFrame that excludes the columns with the specified names from the output.",
        "Returns a new DataFrame that excludes the columns with the specified names from the output.",
        "This is functionally equivalent to calling\n              \n               select\n              \n              and\npassing in all columns except the ones to exclude.",
        "Throws\n              \n               SnowparkClientException\n              \n              if the resulting DataFrame contains no output columns.",
        "An array of the names of columns to exclude.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Returns a new DataFrame that excludes the columns with the specified\nnames from the output.",
        "Returns a new DataFrame that excludes the columns with the specified\nnames from the output.",
        "This is functionally equivalent to calling\n              \n               select\n              \n              and passing in all\ncolumns except the ones to exclude.",
        "Throws\n              \n               SnowparkClientException\n              \n              if the resulting DataFrame contains no output columns.",
        "A list of the names of columns to exclude.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Returns a new DataFrame that excludes the columns with the specified names from the output.",
        "Returns a new DataFrame that excludes the columns with the specified names from the output.",
        "This is functionally equivalent to calling\n              \n               select\n              \n              and passing in all\ncolumns except the ones to exclude.",
        "Throws\n              \n               SnowparkClientException\n              \n              if the resulting DataFrame contains no output columns.",
        "The name of the first column to exclude.",
        "A list of the names of additional columns to exclude.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Creates a new DataFrame by removing duplicated rows on given subset of columns.",
        "Creates a new DataFrame by removing duplicated rows on given subset of columns.\nIf no subset of columns specified, this function is same as\n              \n               distinct()\n              \n              function.\nThe result is non-deterministic when removing duplicated rows from the subset of\ncolumns but not all columns.\nFor example:\nSupposes we have a DataFrame\n              \n               df\n              \n              , which contains three rows (a, b, c):\n(1, 1, 1), (1, 1, 2), (1, 2, 3)\nThe result of df.dropDuplicates(\"a\", \"b\") can be either\n(1, 1, 1), (1, 2, 3)\nor\n(1, 1, 2), (1, 2, 3)",
        "A\n               \n                DataFrame",
        "0.10.0",
        "Returns a new DataFrame that contains all the rows from the current DataFrame except for the\nrows that also appear in another DataFrame (\n            \n             other\n            \n            ).",
        "Returns a new DataFrame that contains all the rows from the current DataFrame except for the\nrows that also appear in another DataFrame (\n              \n               other\n              \n              ). Duplicate rows are eliminated.",
        "For example:",
        "The\n               \n                DataFrame\n               \n               that contains the rows to exclude.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Prints the list of queries that will be executed to evaluate this DataFrame.",
        "Prints the list of queries that will be executed to evaluate this DataFrame.\nPrints the query execution plan if only one SELECT/DML/DDL statement will be executed.",
        "For more information about the query execution plan, see the\n              \n               EXPLAIN\n              \n              command.",
        "0.1.0",
        "Filters rows based on the specified conditional expression (similar to WHERE in SQL).",
        "Filters rows based on the specified conditional expression (similar to WHERE in SQL).",
        "For example:",
        "Filter condition defined as an expression on columns.",
        "A filtered\n               \n                DataFrame",
        "0.1.0",
        "Executes the query representing this DataFrame and returns the first\n            \n             n\n            \n            rows of the\nresults.",
        "Executes the query representing this DataFrame and returns the first\n              \n               n\n              \n              rows of the\nresults.",
        "The number of rows to return.",
        "An Array of the first\n               \n                n\n               \n\n                Row\n               \n               objects. If\n               \n                n\n               \n               is negative or larger\n  than the number of rows in the results, returns all rows in the results.",
        "0.2.0",
        "Executes the query representing this DataFrame and returns the first row of results.",
        "Executes the query representing this DataFrame and returns the first row of results.",
        "The first\n               \n                Row\n               \n               , if the row exists. Otherwise, returns\n               \n                None\n               \n               .",
        "0.2.0",
        "Flattens (explodes) compound values into multiple rows (similar to the SQL\n            \n             FLATTEN\n            \n            function).",
        "Flattens (explodes) compound values into multiple rows (similar to the SQL\n              \n               FLATTEN\n              \n              function).",
        "The\n              \n               flatten\n              \n              method adds the following\n              \n               columns\n              \n              to the returned DataFrame:",
        "If\n              \n               this\n              \n              DataFrame also has columns with the names above,\nyou can disambiguate the columns by using the\n              \n               this(\"value\")\n              \n              syntax.",
        "For example, if the current DataFrame has a column named\n              \n               value\n              \n              :",
        "The expression that will be unseated into rows.\n             The expression must be of data type VARIANT, OBJECT, or ARRAY.",
        "The path to the element within a VARIANT data structure which\n            needs to be flattened. Can be a zero-length string\n            (i.e. empty path) if the outermost element is to be flattened.",
        "If FALSE, any input rows that cannot be expanded,\n             either because they cannot be accessed in the path or because\n             they have zero fields or entries, are completely omitted from\n             the output. Otherwise, exactly one row is generated for\n             zero-row expansions (with NULL in the KEY, INDEX, and VALUE columns).",
        "If FALSE, only the element referenced by PATH is expanded.\n                 Otherwise, the expansion is performed for all sub-elements\n                 recursively.",
        "Specifies whether only OBJECT, ARRAY, or BOTH should be flattened.",
        "A\n               \n                DataFrame\n               \n               containing the flattened values.",
        "0.2.0",
        "Flattens (explodes) compound values into multiple rows (similar to the SQL\n            \n             FLATTEN\n            \n            function).",
        "Flattens (explodes) compound values into multiple rows (similar to the SQL\n              \n               FLATTEN\n              \n              function).",
        "The\n              \n               flatten\n              \n              method adds the following\n              \n               columns\n              \n              to the returned DataFrame:",
        "If\n              \n               this\n              \n              DataFrame also has columns with the names above,\nyou can disambiguate the columns by using the\n              \n               this(\"value\")\n              \n              syntax.",
        "For example, if the current DataFrame has a column named\n              \n               value\n              \n              :",
        "The expression that will be unseated into rows.\n             The expression must be of data type VARIANT, OBJECT, or ARRAY.",
        "A\n               \n                DataFrame\n               \n               containing the flattened values.",
        "0.2.0",
        "Groups rows by the columns specified by name (similar to GROUP BY in SQL).",
        "Groups rows by the columns specified by name (similar to GROUP BY in SQL).",
        "This method returns a\n              \n               RelationalGroupedDataFrame\n              \n              that you can use to perform aggregations\non each group of data.",
        "An array of the names of columns to group by.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.7.0",
        "Groups rows by the columns specified by name (similar to GROUP BY in SQL).",
        "Groups rows by the columns specified by name (similar to GROUP BY in SQL).",
        "This method returns a\n              \n               RelationalGroupedDataFrame\n              \n              that you can use to perform aggregations\non each group of data.",
        "A list of the names of columns to group by.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.2.0",
        "Groups rows by the columns specified by name (similar to GROUP BY in SQL).",
        "Groups rows by the columns specified by name (similar to GROUP BY in SQL).",
        "This method returns a\n              \n               RelationalGroupedDataFrame\n              \n              that you can use to perform aggregations\non each group of data.",
        "The name of the first column to group by.",
        "A list of the names of additional columns to group by.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Groups rows by the columns specified by expressions\n(similar to GROUP BY in SQL).",
        "Groups rows by the columns specified by expressions\n(similar to GROUP BY in SQL).",
        "This method returns a\n              \n               RelationalGroupedDataFrame\n              \n              that you can use to perform aggregations\non each group of data.",
        "An array of expressions on columns.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.7.0",
        "Groups rows by the columns specified by expressions\n(similar to GROUP BY in SQL).",
        "Groups rows by the columns specified by expressions\n(similar to GROUP BY in SQL).",
        "This method returns a\n              \n               RelationalGroupedDataFrame\n              \n              that you can use to perform aggregations\non each group of data.",
        "A list of expressions on columns.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.2.0",
        "Returns a\n            \n             RelationalGroupedDataFrame\n            \n            that you can use to perform aggregations on the\nunderlying DataFrame.",
        "Returns a\n              \n               RelationalGroupedDataFrame\n              \n              that you can use to perform aggregations on the\nunderlying DataFrame.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Groups rows by the columns specified by expressions (similar to GROUP BY in SQL).",
        "Groups rows by the columns specified by expressions (similar to GROUP BY in SQL).",
        "This method returns a\n              \n               RelationalGroupedDataFrame\n              \n              that you can use to perform aggregations\non each group of data.",
        "The expression for the first column to group by.",
        "A list of expressions for additional columns to group by.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Performs an SQL\n            \n             GROUP BY GROUPING SETS\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY GROUPING SETS\n              \n              on the DataFrame.",
        "GROUP BY GROUPING SETS is an extension of the GROUP BY clause\nthat allows computing multiple group-by clauses in a single statement.\nThe group set is a set of dimension columns.",
        "GROUP BY GROUPING SETS is equivalent to the UNION of two or\nmore GROUP BY operations in the same result set:",
        "df.groupByGroupingSets(GroupingSets(Set(col(\"a\"))))\n              \n              is equivalent to\n              \n               df.groupBy(\"a\")",
        "and",
        "df.groupByGroupingSets(GroupingSets(Set(col(\"a\")), Set(col(\"b\"))))\n              \n              is equivalent to\n              \n               df.groupBy(\"a\")\n              \n              union\n              \n               df.groupBy(\"b\")",
        "A list of\n               \n                GroupingSets\n               \n               objects.",
        "0.4.0",
        "Performs an SQL\n            \n             GROUP BY GROUPING SETS\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY GROUPING SETS\n              \n              on the DataFrame.",
        "GROUP BY GROUPING SETS is an extension of the GROUP BY clause\nthat allows computing multiple GROUP BY clauses in a single statement.\nThe group set is a set of dimension columns.",
        "GROUP BY GROUPING SETS is equivalent to the UNION of two or\nmore GROUP BY operations in the same result set:",
        "df.groupByGroupingSets(GroupingSets(Set(col(\"a\"))))\n              \n              is equivalent to\n              \n               df.groupBy(\"a\")",
        "and",
        "df.groupByGroupingSets(GroupingSets(Set(col(\"a\")), Set(col(\"b\"))))\n              \n              is equivalent to\n              \n               df.groupBy(\"a\")\n              \n              union\n              \n               df.groupBy(\"b\")",
        "A\n               \n                GroupingSets\n               \n               object.",
        "A list of additional\n               \n                GroupingSets\n               \n               objects.",
        "0.4.0",
        "Returns a new DataFrame that contains the intersection of rows from the current DataFrame and\nanother DataFrame (\n            \n             other\n            \n            ).",
        "Returns a new DataFrame that contains the intersection of rows from the current DataFrame and\nanother DataFrame (\n              \n               other\n              \n              ). Duplicate rows are eliminated.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               that contains the rows to use for the intersection.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Joins the current DataFrame with the output of the specified user-defined table function\n(UDTF)\n            \n             func\n            \n            .",
        "Joins the current DataFrame with the output of the specified user-defined table function\n(UDTF)\n              \n               func\n              \n              .",
        "To specify a PARTITION BY or ORDER BY clause, use the\n              \n               partitionBy\n              \n              and\n              \n               orderBy\n              \n              arguments.",
        "For example:",
        "TableFunction\n               \n               object that represents a user-defined table function.",
        "A list of columns partitioned by.",
        "A list of columns ordered by.",
        "1.10.0",
        "Joins the current DataFrame with the output of the specified table function\n            \n             func\n            \n            .",
        "Joins the current DataFrame with the output of the specified table function\n              \n               func\n              \n              .",
        "For example:",
        "TableFunction\n               \n               object, which can be one of the values in the\n               \n                tableFunctions\n               \n               object or an object that you create from the\n               \n                TableFunction.apply()\n               \n               .",
        "1.10.0",
        "Joins the current DataFrame with the output of the specified user-defined table function\n(UDTF)\n            \n             func\n            \n            .",
        "Joins the current DataFrame with the output of the specified user-defined table function\n(UDTF)\n              \n               func\n              \n              .",
        "To pass arguments to the table function, use the\n              \n               args\n              \n              argument of this method. Pass in a\n              \n               Map\n              \n              of parameter names and values. In these values, you can include references to columns in\nthis DataFrame.",
        "To specify a PARTITION BY or ORDER BY clause, use the\n              \n               partitionBy\n              \n              and\n              \n               orderBy\n              \n              arguments.",
        "For example:",
        "TableFunction\n               \n               object that represents a user-defined table function (UDTF).",
        "Map of arguments to pass to the specified table function.\n             Some functions, like\n               \n                flatten\n               \n               , have named parameters.\n             Use this map to specify the parameter names and their corresponding values.",
        "A list of columns partitioned by.",
        "A list of columns ordered by.",
        "1.7.0",
        "Joins the current DataFrame with the output of the specified table function\n            \n             func\n            \n            that takes\nnamed parameters (e.g.",
        "Joins the current DataFrame with the output of the specified table function\n              \n               func\n              \n              that takes\nnamed parameters (e.g.\n              \n               flatten\n              \n              ).",
        "To pass arguments to the table function, use the\n              \n               args\n              \n              argument of this method. Pass in a\n              \n               Map\n              \n              of parameter names and values. In these values, you can include references to columns in\nthis DataFrame.",
        "For example:",
        "TableFunction\n               \n               object, which can be one of the values in the\n               \n                tableFunctions\n               \n               object or an object that you create from the\n               \n                TableFunction\n               \n               class.",
        "Map of arguments to pass to the specified table function.\n             Some functions, like\n               \n                flatten\n               \n               , have named parameters.\n             Use this map to specify the parameter names and their corresponding values.",
        "0.4.0",
        "Joins the current DataFrame with the output of the specified user-defined table\nfunction (UDTF)\n            \n             func\n            \n            .",
        "Joins the current DataFrame with the output of the specified user-defined table\nfunction (UDTF)\n              \n               func\n              \n              .",
        "To pass arguments to the table function, use the\n              \n               args\n              \n              argument of this method. In the table\nfunction arguments, you can include references to columns in this DataFrame.",
        "To specify a PARTITION BY or ORDER BY clause, use the\n              \n               partitionBy\n              \n              and\n              \n               orderBy\n              \n              arguments.",
        "For example:",
        "TableFunction\n               \n               object that represents a user-defined table function (UDTF).",
        "A list of arguments to pass to the specified table function.",
        "A list of columns partitioned by.",
        "A list of columns ordered by.",
        "1.7.0",
        "Joins the current DataFrame with the output of the specified table function\n            \n             func\n            \n            .",
        "Joins the current DataFrame with the output of the specified table function\n              \n               func\n              \n              .",
        "To pass arguments to the table function, use the\n              \n               args\n              \n              argument of this method. In the table\nfunction arguments, you can include references to columns in this DataFrame.",
        "For example:",
        "TableFunction\n               \n               object, which can be one of the values in the\n               \n                tableFunctions\n               \n               object or an object that you create from the\n               \n                TableFunction\n               \n               class.",
        "A list of arguments to pass to the specified table function.",
        "0.4.0",
        "Joins the current DataFrame with the output of the specified table function\n            \n             func\n            \n            .",
        "Joins the current DataFrame with the output of the specified table function\n              \n               func\n              \n              .",
        "To pass arguments to the table function, use the\n              \n               firstArg\n              \n              and\n              \n               remaining\n              \n              arguments of this\nmethod. In the table function arguments, you can include references to columns in this\nDataFrame.",
        "For example:",
        "TableFunction\n               \n               object, which can be one of the values in the\n               \n                tableFunctions\n               \n               object or an object that you create from the\n               \n                TableFunction\n               \n               class.",
        "The first argument to pass to the specified table function.",
        "A list of any additional arguments for the specified table function.",
        "0.4.0",
        "Performs a join of the specified type (\n            \n             joinType\n            \n            ) with the current DataFrame and another\nDataFrame (\n            \n             right\n            \n            ) using the join condition specified in an expression (\n            \n             joinExpr\n            \n            ).",
        "Performs a join of the specified type (\n              \n               joinType\n              \n              ) with the current DataFrame and another\nDataFrame (\n              \n               right\n              \n              ) using the join condition specified in an expression (\n              \n               joinExpr\n              \n              ).",
        "To disambiguate columns with the same name in the left DataFrame and right DataFrame, use\nthe\n              \n               apply\n              \n              or\n              \n               col\n              \n              method of each DataFrame (\n              \n               df(\"col\")\n              \n              or\n              \n               df.col(\"col\")\n              \n              ).\nYou can use this approach to disambiguate columns in the\n              \n               joinExprs\n              \n              parameter and to refer\nto columns in the returned DataFrame.",
        "For example:",
        "If you need to join a DataFrame with itself, keep in mind that there is no way to distinguish\nbetween columns on the left and right sides in a join expression. For example:",
        "To do a self-join, you can you either clone(\n              \n               clone\n              \n              ) the DataFrame as follows,",
        "or you can call a\n              \n               join\n              \n              method that allows you to pass in 'usingColumns' parameter.",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "Expression that specifies the join condition.",
        "The type of join (e.g.\n               \n                \"right\"\n               \n               ,\n               \n                \"outer\"\n               \n               , etc.).",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n            \n             right\n            \n            ) using\nthe join condition specified in an expression (\n            \n             joinExpr\n            \n            ).",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n              \n               right\n              \n              ) using\nthe join condition specified in an expression (\n              \n               joinExpr\n              \n              ).",
        "To disambiguate columns with the same name in the left DataFrame and right DataFrame, use\nthe\n              \n               apply\n              \n              or\n              \n               col\n              \n              method of each DataFrame (\n              \n               df(\"col\")\n              \n              or\n              \n               df.col(\"col\")\n              \n              ).\nYou can use this approach to disambiguate columns in the\n              \n               joinExprs\n              \n              parameter and to refer\nto columns in the returned DataFrame.",
        "For example:",
        "If you need to join a DataFrame with itself, keep in mind that there is no way to distinguish\nbetween columns on the left and right sides in a join expression. For example:",
        "As a workaround, you can either construct the left and right DataFrames separately,\nor you can call a\n              \n               join\n              \n              method that allows you to pass in 'usingColumns' parameter.",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "Expression that specifies the join condition.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Performs a join of the specified type (\n            \n             joinType\n            \n            ) with the current DataFrame and another\nDataFrame (\n            \n             right\n            \n            ) on a list of columns (\n            \n             usingColumns\n            \n            ).",
        "Performs a join of the specified type (\n              \n               joinType\n              \n              ) with the current DataFrame and another\nDataFrame (\n              \n               right\n              \n              ) on a list of columns (\n              \n               usingColumns\n              \n              ).",
        "The method assumes that the columns in\n              \n               usingColumns\n              \n              have the same meaning in the left and\nright DataFrames.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "A list of the names of the columns to use for the join.",
        "The type of join (e.g.\n               \n                \"right\"\n               \n               ,\n               \n                \"outer\"\n               \n               , etc.).",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n            \n             right\n            \n            )  on a\nlist of columns (\n            \n             usingColumns\n            \n            ).",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n              \n               right\n              \n              )  on a\nlist of columns (\n              \n               usingColumns\n              \n              ).",
        "The method assumes that the columns in\n              \n               usingColumns\n              \n              have the same meaning in the left and\nright DataFrames.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "A list of the names of the columns to use for the join.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n            \n             right\n            \n            ) on a\ncolumn (\n            \n             usingColumn\n            \n            ).",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n              \n               right\n              \n              ) on a\ncolumn (\n              \n               usingColumn\n              \n              ).",
        "The method assumes that the\n              \n               usingColumn\n              \n              column has the same meaning in the left and right\nDataFrames.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "The name of the column to use for the join.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n            \n             right\n            \n            ).",
        "Performs a default inner join of the current DataFrame and another DataFrame (\n              \n               right\n              \n              ).",
        "Because this method does not specify a join condition, the returned DataFrame is a cartesian\nproduct of the two DataFrames.",
        "If the current and\n              \n               right\n              \n              DataFrames have columns with the same name, and you need to refer\nto one of these columns in the returned DataFrame, use the\n              \n               apply\n              \n              or\n              \n               col\n              \n              function\non the current or\n              \n               right\n              \n              DataFrame to disambiguate references to these columns.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a new DataFrame that contains at most\n            \n             n\n            \n            rows from the current DataFrame (similar\nto LIMIT in SQL).",
        "Returns a new DataFrame that contains at most\n              \n               n\n              \n              rows from the current DataFrame (similar\nto LIMIT in SQL).",
        "Note that this is a transformation method and not an action method.",
        "Number of rows to return.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a\n            \n             DataFrameNaFunctions\n            \n            object that provides functions for handling missing values\nin the DataFrame.",
        "Returns a\n              \n               DataFrameNaFunctions\n              \n              object that provides functions for handling missing values\nin the DataFrame.",
        "0.2.0",
        "Performs a natural join of the specified type (\n            \n             joinType\n            \n            ) with the current DataFrame and\nanother DataFrame (\n            \n             right\n            \n            ).",
        "Performs a natural join of the specified type (\n              \n               joinType\n              \n              ) with the current DataFrame and\nanother DataFrame (\n              \n               right\n              \n              ).",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "The type of join (e.g.\n               \n                \"right\"\n               \n               ,\n               \n                \"outer\"\n               \n               , etc.).",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Performs a natural join (a default inner join) of the current DataFrame and another DataFrame\n(\n            \n             right\n            \n            ).",
        "Performs a natural join (a default inner join) of the current DataFrame and another DataFrame\n(\n              \n               right\n              \n              ).",
        "For example:",
        "Note that this is equivalent to:",
        "The other\n               \n                DataFrame\n               \n               to join.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Rotates this DataFrame by turning the unique values from one column in the input\nexpression into multiple columns and aggregating results where required on any\nremaining column values.",
        "Rotates this DataFrame by turning the unique values from one column in the input\nexpression into multiple columns and aggregating results where required on any\nremaining column values.",
        "Only one aggregate is supported with pivot.",
        "For example:",
        "Expression for the column that you want to use.",
        "A list of values in the column.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Rotates this DataFrame by turning the unique values from one column in the input\nexpression into multiple columns and aggregating results where required on any\nremaining column values.",
        "Rotates this DataFrame by turning the unique values from one column in the input\nexpression into multiple columns and aggregating results where required on any\nremaining column values.",
        "Only one aggregate is supported with pivot.",
        "For example:",
        "The name of the column to use.",
        "A list of values in the column.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Randomly splits the current DataFrame into separate DataFrames, using the specified weights.",
        "Randomly splits the current DataFrame into separate DataFrames, using the specified weights.",
        "NOTE:",
        "Weights to use for splitting the DataFrame. If the weights don't add up to 1,\n  the weights will be normalized.",
        "A list of\n               \n                DataFrame\n               \n               objects",
        "0.2.0",
        "Returns a DataFrame with the specified column\n            \n             col\n            \n            renamed as\n            \n             newName\n            \n            .",
        "Returns a DataFrame with the specified column\n              \n               col\n              \n              renamed as\n              \n               newName\n              \n              .",
        "This example renames the column\n              \n               A\n              \n              as\n              \n               NEW_A\n              \n              in the DataFrame.",
        "The new name for the column",
        "The\n               \n                Column\n               \n               to be renamed",
        "A\n               \n                DataFrame",
        "0.9.0",
        "Performs an SQL\n            \n             GROUP BY ROLLUP\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY ROLLUP\n              \n              on the DataFrame.",
        "An array of column names.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.7.0",
        "Performs an SQL\n            \n             GROUP BY ROLLUP\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY ROLLUP\n              \n              on the DataFrame.",
        "A list of column names.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.2.0",
        "Performs an SQL\n            \n             GROUP BY ROLLUP\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY ROLLUP\n              \n              on the DataFrame.",
        "The name of the first column.",
        "A list of the names of additional columns.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Performs an SQL\n            \n             GROUP BY ROLLUP\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY ROLLUP\n              \n              on the DataFrame.",
        "An array of expressions on columns.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.7.0",
        "Performs an SQL\n            \n             GROUP BY ROLLUP\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY ROLLUP\n              \n              on the DataFrame.",
        "A list of expressions on columns.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.2.0",
        "Performs an SQL\n            \n             GROUP BY ROLLUP\n            \n            on the DataFrame.",
        "Performs an SQL\n              \n               GROUP BY ROLLUP\n              \n              on the DataFrame.",
        "The expression for the first column.",
        "A list of expressions for additional columns.",
        "A\n               \n                RelationalGroupedDataFrame",
        "0.1.0",
        "Returns a new DataFrame that contains a sampling of rows from the current DataFrame.",
        "Returns a new DataFrame that contains a sampling of rows from the current DataFrame.",
        "NOTE:",
        "The fraction of rows to sample. This must be in the range of\n               \n                0.0\n               \n               to\n               \n                1.0\n               \n               .",
        "A\n               \n                DataFrame\n               \n               containing the sample of rows.",
        "0.2.0",
        "Returns a new DataFrame with a sample of N rows from the underlying DataFrame.",
        "Returns a new DataFrame with a sample of N rows from the underlying DataFrame.",
        "NOTE:",
        "The number of rows to sample in the range of 0 to 1,000,000.",
        "A\n               \n                DataFrame\n               \n               containing the sample of\n               \n                num\n               \n               rows.",
        "0.2.0",
        "Returns the definition of the columns in this DataFrame (the \"relational schema\" for the\nDataFrame).",
        "Returns the definition of the columns in this DataFrame (the \"relational schema\" for the\nDataFrame).",
        "com.snowflake.snowpark.types.StructType",
        "0.1.0",
        "Returns a new DataFrame with a subset of named columns (similar to SELECT in SQL).",
        "Returns a new DataFrame with a subset of named columns (similar to SELECT in SQL).",
        "For example:",
        "An array of the names of columns to return.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Returns a new DataFrame with a subset of named columns\n(similar to SELECT in SQL).",
        "Returns a new DataFrame with a subset of named columns\n(similar to SELECT in SQL).",
        "For example:",
        "A list of the names of columns to return.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Returns a new DataFrame with a subset of named columns (similar to SELECT in SQL).",
        "Returns a new DataFrame with a subset of named columns (similar to SELECT in SQL).",
        "For example:",
        "The name of the first column to return.",
        "A list of the names of the additional columns to return.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a new DataFrame with the specified Column expressions as output (similar to SELECT in\nSQL).",
        "Returns a new DataFrame with the specified Column expressions as output (similar to SELECT in\nSQL). Only the Columns specified as arguments will be present in the resulting DataFrame.",
        "You can use any Column expression.",
        "For example:",
        "An array of expressions for the columns to return.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Returns a new DataFrame with the specified Column expressions as output\n(similar to SELECT in SQL).",
        "Returns a new DataFrame with the specified Column expressions as output\n(similar to SELECT in SQL). Only the Columns specified as arguments will be present in\nthe resulting DataFrame.",
        "You can use any Column expression.",
        "For example:",
        "A list of expressions for the columns to return.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Returns a new DataFrame with the specified Column expressions as output (similar to SELECT in\nSQL).",
        "Returns a new DataFrame with the specified Column expressions as output (similar to SELECT in\nSQL). Only the Columns specified as arguments will be present in the resulting DataFrame.",
        "You can use any Column expression.",
        "For example:",
        "The expression for the first column to return.",
        "A list of expressions for the additional columns to return.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Evaluates this DataFrame and prints out the first\n            \n\n              n\n             \n\n            rows with the specified maximum\nnumber of characters per column.",
        "Evaluates this DataFrame and prints out the first\n              \n\n                n\n               \n\n              rows with the specified maximum\nnumber of characters per column.",
        "The number of rows to print out.",
        "The maximum number of characters to print out for each column. If the number\n  of characters exceeds the maximum, the method prints out an ellipsis (...) at the end of\n  the column.",
        "0.5.0",
        "Evaluates this DataFrame and prints out the first\n            \n\n              n\n             \n\n            rows.",
        "Evaluates this DataFrame and prints out the first\n              \n\n                n\n               \n\n              rows.",
        "The number of rows to print out.",
        "0.1.0",
        "Evaluates this DataFrame and prints out the first ten rows.",
        "Evaluates this DataFrame and prints out the first ten rows.",
        "0.1.0",
        "Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).",
        "Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).",
        "For example:",
        "An array of Column expressions for sorting the DataFrame.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).",
        "Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).",
        "For example:",
        "A list of Column expressions for sorting the DataFrame.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).",
        "Sorts a DataFrame by the specified expressions (similar to ORDER BY in SQL).",
        "For example:",
        "The first Column expression for sorting the DataFrame.",
        "Additional Column expressions for sorting the DataFrame.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a\n            \n             DataFrameStatFunctions\n            \n            object that provides statistic functions.",
        "Returns a\n              \n               DataFrameStatFunctions\n              \n              object that provides statistic functions.",
        "0.2.0",
        "Creates a new DataFrame containing the data in the current DataFrame but in columns with the\nspecified names.",
        "Creates a new DataFrame containing the data in the current DataFrame but in columns with the\nspecified names.",
        "You can use this method to assign column names when constructing a DataFrame. For example:",
        "For example:",
        "This returns a DataFrame containing the following:",
        "If you imported\n              \n               <session_var>.implicits._\n              \n              , you can use the following\nsyntax to create the DataFrame from a\n              \n               Seq\n              \n              and call\n              \n               toDF\n              \n              to assign column names to the\nreturned DataFrame:",
        "The number of column names that you pass in must match the number of columns in the current\nDataFrame.",
        "An array of column names.",
        "A\n               \n                DataFrame",
        "0.7.0",
        "Creates a new DataFrame containing the data in the current DataFrame but in\ncolumns with the specified names.",
        "Creates a new DataFrame containing the data in the current DataFrame but in\ncolumns with the specified names.",
        "You can use this method to assign column names when constructing a DataFrame. For example:",
        "For example:",
        "This returns a DataFrame containing the following:",
        "If you imported\n              \n               <session_var>.implicits._\n              \n              , you can use the following\nsyntax to create the DataFrame from a\n              \n               Seq\n              \n              and call\n              \n               toDF\n              \n              to assign column names to the\nreturned DataFrame:",
        "The number of column names that you pass in must match the number of columns in the current\nDataFrame.",
        "A list of column names.",
        "A\n               \n                DataFrame",
        "0.2.0",
        "Creates a new DataFrame containing the columns with the specified names.",
        "Creates a new DataFrame containing the columns with the specified names.",
        "You can use this method to assign column names when constructing a DataFrame. For example:",
        "For example:",
        "This returns a DataFrame containing the following:",
        "if you imported\n              \n               <session_var>.implicits._\n              \n              ,\nyou can use the following syntax to create the DataFrame from a\n              \n               Seq\n              \n              and\ncall\n              \n               toDF\n              \n              to assign column names to the returned DataFrame:",
        "The number of column names that you pass in must match the number of columns in the current\nDataFrame.",
        "The name of the first column.",
        "A list of the rest of the column names.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Executes the query representing this DataFrame and returns an iterator of\n            \n             Row\n            \n            objects that\nyou can use to retrieve the results.",
        "Executes the query representing this DataFrame and returns an iterator of\n              \n               Row\n              \n              objects that\nyou can use to retrieve the results.",
        "Unlike the\n              \n               collect\n              \n              method, this method does not load all data into memory at once.",
        "An Iterator of\n               \n                Row",
        "0.5.0",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n            \n             other\n            \n            ), excluding any duplicate rows.",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n              \n               other\n              \n              ), excluding any duplicate rows. Both input DataFrames must contain\nthe same number of columns.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               that contains the rows to include.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n            \n             other\n            \n            ), including any duplicate rows.",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n              \n               other\n              \n              ), including any duplicate rows. Both input DataFrames must contain\nthe same number of columns.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               that contains the rows to include.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n            \n             other\n            \n            ), including any duplicate rows.",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n              \n               other\n              \n              ), including any duplicate rows.",
        "This method matches the columns in the two DataFrames by their names, not by their positions.\nThe columns in the other DataFrame are rearranged to match the order of columns in the\ncurrent DataFrame.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               that contains the rows to include.",
        "A\n               \n                DataFrame",
        "0.9.0",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n            \n             other\n            \n            ), excluding any duplicate rows.",
        "Returns a new DataFrame that contains all the rows in the current DataFrame and another\nDataFrame (\n              \n               other\n              \n              ), excluding any duplicate rows.",
        "This method matches the columns in the two DataFrames by their names, not by their positions.\nThe columns in the other DataFrame are rearranged to match the order of columns in the\ncurrent DataFrame.",
        "For example:",
        "The other\n               \n                DataFrame\n               \n               that contains the rows to include.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Filters rows based on the specified conditional expression (similar to WHERE in SQL).",
        "Filters rows based on the specified conditional expression (similar to WHERE in SQL).\nThis is equivalent to calling\n              \n               filter\n              \n              .",
        "For example:",
        "Filter condition defined as an expression on columns.",
        "A filtered\n               \n                DataFrame",
        "0.1.0",
        "Returns a DataFrame with an additional column with the specified name (\n            \n             colName\n            \n            ).",
        "Returns a DataFrame with an additional column with the specified name (\n              \n               colName\n              \n              ). The column\nis computed by using the specified expression (\n              \n               col\n              \n              ).",
        "If a column with the same name already exists in the DataFrame, that column is replaced by\nthe new column.",
        "This example adds a new column named\n              \n               mean_price\n              \n              that contains the mean of the existing\n              \n               price\n              \n              column in the DataFrame.",
        "The name of the column to add or replace.",
        "The\n               \n                Column\n               \n               to add or replace.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a DataFrame with additional columns with the specified names (\n            \n             colNames\n            \n            ).",
        "Returns a DataFrame with additional columns with the specified names (\n              \n               colNames\n              \n              ). The\ncolumns are computed by using the specified expressions (\n              \n               cols\n              \n              ).",
        "If columns with the same names already exist in the DataFrame, those columns are replaced by\nthe new columns.",
        "This example adds new columns named\n              \n               mean_price\n              \n              and\n              \n               avg_price\n              \n              that contain the mean and\naverage of the existing\n              \n               price\n              \n              column.",
        "A list of the names of the columns to add or replace.",
        "A list of the\n               \n                Column\n               \n               objects to add or replace.",
        "A\n               \n                DataFrame",
        "0.1.0",
        "Returns a\n            \n             DataFrameWriter\n            \n            object that you can use to write the data in the DataFrame to\nany supported destination.",
        "Returns a\n              \n               DataFrameWriter\n              \n              object that you can use to write the data in the DataFrame to\nany supported destination. The Default\n              \n               SaveMode\n              \n              for the returned\n              \n               DataFrameWriter\n              \n              is\n              \n               Append\n              \n              .",
        "Example:",
        "A\n               \n                DataFrameWriter",
        "0.1.0"
    ]
}