{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.DataFrame.join",
    "title": "modin.pandas.DataFrame.join | Snowflake Documentation",
    "paragraphs": [
        "Join columns of another DataFrame.",
        "Join columns with other DataFrame either on index or on a key\ncolumn. Efficiently join multiple DataFrame objects by index at once by\npassing a list.",
        "other (DataFrame, Series, or a list containing any combination of them) \u2013 Index should be similar to one of the columns in this one. If a\nSeries is passed, its name attribute must be set, and that will be\nused as the column name in the resulting joined DataFrame.",
        "on (str, list of str, or array-like, optional) \u2013 Column or index level name(s) in the caller to join on the index\nin other, otherwise joins index-on-index. If multiple\nvalues given, the other DataFrame must have a MultiIndex. Can\npass an array as the join key if it is not already contained in\nthe calling DataFrame. Like an Excel VLOOKUP operation.",
        "how ({'left', 'right', 'outer', 'inner'}, default 'left') \u2013",
        "How to handle the operation of the two objects.",
        "left: use calling frame\u2019s index (or column if on is specified)",
        "right: use other\u2019s index.",
        "outer: form union of calling frame\u2019s index (or column if on is\nspecified) with other\u2019s index, and sort it.\nlexicographically.",
        "inner: form intersection of calling frame\u2019s index (or column if\non is specified) with other\u2019s index, preserving the order\nof the calling\u2019s one.",
        "cross: creates the cartesian product from both frames, preserves the order\nof the left keys.",
        "",
        "lsuffix (str, default '') \u2013 Suffix to use from left frame\u2019s overlapping columns.",
        "rsuffix (str, default '') \u2013 Suffix to use from right frame\u2019s overlapping columns.",
        "sort (bool, default False) \u2013 Order result DataFrame lexicographically by the join key. If False,\nthe order of the join key depends on the join type (how keyword).",
        "validate (str, optional) \u2013 If specified, checks if join is of specified type.\n* \u201cone_to_one\u201d or \u201c1:1\u201d: check if join keys are unique in both left\nand right datasets.\n* \u201cone_to_many\u201d or \u201c1:m\u201d: check if join keys are unique in left dataset.\n* \u201cmany_to_one\u201d or \u201cm:1\u201d: check if join keys are unique in right dataset.\n* \u201cmany_to_many\u201d or \u201cm:m\u201d: allowed, but does not result in checks.",
        "A dataframe containing columns from both the caller and other.",
        "DataFrame",
        "Notes",
        "Parameters on, lsuffix, and rsuffix are not supported when\npassing a list of DataFrame objects.",
        "Snowpark pandas API doesn\u2019t currently support distributed computation of join with\n\u2018validate\u2019 argument.",
        "Examples",
        "Join DataFrames using their indexes.",
        "If we want to join using the key columns, we need to set key to be\nthe index in both df and other. The joined DataFrame will have\nkey as its index.",
        "Another option to join using the key columns is to use the on\nparameter. DataFrame.join always uses other\u2019s index but we can use\nany column in df. This method preserves the original DataFrame\u2019s\nindex in the result.",
        "Using non-unique key values shows how they are matched.",
        "TODO: SNOW-890653 Enable this test",
        "Was this page helpful?"
    ]
}