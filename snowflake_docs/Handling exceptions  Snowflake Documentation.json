{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-scripting/exceptions",
    "title": "Handling exceptions | Snowflake Documentation",
    "paragraphs": [
        "In a Snowflake Scripting block, you can raise an exception if an error occurs. You can also handle exceptions that occur in your\nSnowflake Scripting code.",
        "Snowflake Scripting raises an exception if an error occurs while executing a statement (e.g. if a statement attempts to DROP a\ntable that doesn\u2019t exist). An exception prevents the next lines of code from executing.",
        "In a Snowflake Scripting block, you can write exception handlers that catch specific types of exceptions declared in that block\nand in blocks nested inside that block.",
        "In addition, for errors that can occur in your code, you can define your own exceptions that you can raise when errors occur.",
        "When an exception is raised in a Snowflake Scripting block (either by your code or by a statement that fails to execute),\nSnowflake Scripting attempts to find a handler for that exception:",
        "If the block in which the exception occurred has a handler for that exception, then execution resumes at the\nbeginning of that exception handler.",
        "If the block does not have its own exception handler, then the exception can be caught by the enclosing block.",
        "If the exception occurs more than one layer deep, then the exception is sent upward one layer at a time until either:",
        "A layer with an appropriate exception handler handles the exception.",
        "The outermost layer is reached, in which case an error occurs.",
        "If there is no handler for the exception in the current block or in any enclosing blocks, execution of the block stops, and the\nclient that submits the block for execution (e.g. the web interface, SnowSQL, etc.) reports this as a Snowflake error.",
        "An exception handler can contain its own exception handler in case an exception occurs while handling another exception.",
        "You can declare your own exception in the DECLARE section of the block. Use\nthe syntax described in Exception declaration syntax. For example:",
        "To raise an exception, execute the RAISE command. For example:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Execution stops at the point when the exception is raised. (In the example, counter is never incremented and returned.)",
        "The client that submits this block for execution (e.g. Snowsight) reports an error and indicates that the exception\nwas not caught:",
        "If you want to add code to handle any exceptions that you raise (as well as exceptions raised when statements fail to execute),\nyou can write exception handlers. See Handling an exception.",
        "Note",
        "In an exception handler, if you need to raise the same exception again, see\nRaising the same exception again in an exception handler.",
        "You can explicitly handle an exception by catching it with an EXCEPTION\nclause, or you can allow the block to pass the exception on to the enclosing block.",
        "Within the EXCEPTION clause, use a WHEN clause to handle an\nexception by name. You can handle exceptions that you declare as well as built-in exceptions. Currently, Snowflake provides the\nfollowing built-in exceptions:",
        "STATEMENT_ERROR: This exception indicates an error while executing a statement. For example, if you attempt to drop a table\nthat does not exist, this exception is raised.",
        "EXPRESSION_ERROR: This exception indicates an error related to an expression. For example, if you create an expression that\nevaluates to a VARCHAR, and you attempt to assign the value of the expression to a FLOAT, this error is raised.",
        "When an exception occurs, you can get information about the exception by reading the following three built-in variables:",
        "SQLCODE: This is a 5-digit signed integer. For user-defined exceptions, this is the exception_number shown in\nthe syntax for declaring an exception.",
        "SQLERRM: This is an error message. For user-defined exceptions, this is the exception_message shown in\nthe syntax for declaring an exception.",
        "SQLSTATE: This is a 5-character code modeled on the ANSI SQL standard SQLSTATE.\nSnowflake uses additional values beyond those in the ANSI SQL standard.",
        "To handle all other exceptions that do not have a WHEN clause, use a WHEN OTHER THEN clause.",
        "For example:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "This example handles each type of exception by calling OBJECT_CONSTRUCT to  construct and return\nan object that contains the details about the exception. The example produces the following output:",
        "In rare cases, you might want to explicitly handle an exception by doing nothing. This allows you to continue, rather than abort,\nwhen the exception occurs. For more information, see the NULL command.",
        "If you do not set up a handler for an exception, the client that submits the block for execution (e.g. the web\ninterface) reports an error (as explained in Raising a declared exception).",
        "Note",
        "If you need to raise the same exception again, see Raising the same exception again in an exception handler.",
        "In some cases, you might need to raise the same exception that you caught in your exception handler. In these cases, execute the\nRAISE command without specifying any arguments.",
        "For example, suppose that during exception handling, you need to capture some details about the exception before raising the same\nexception again. After capturing the details, execute the RAISE command:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "You can pass variables to an exception handler. The exception handler can execute code based\non the value of the variable, and the variable value can be returned in error messages.",
        "For a variable to be passed to a handler in the EXCEPTION section, the variable must be declared\nin the DECLARE section. If a variable is declared\nin the BEGIN \u2026 END section of the block, it can\u2019t\nbe accessed in the EXCEPTION section.",
        "In addition, if you are writing a Snowflake Scripting stored procedure that accepts arguments, you can use those\narguments in an exception handler.",
        "For example, the following anonymous block passes the value of the counter_val variable to\nthe exception handler:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The block returns the following error message:",
        "The following is an example of a Snowflake Scripting stored procedure that passes in an argument. The example demonstrates\nhow you can use the argument in an exception handler:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "The following calls to the stored procedure show the expected output:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}