{
    "url": "https://docs.snowflake.com/en/developer-guide/udf/java/udf-java-creating",
    "title": "Creating a Java UDF handler | Snowflake Documentation",
    "paragraphs": [
        "This topic describes how to write the Java handler for a user-defined function (UDF). When you write a Java UDF, you write Java code for\nSnowflake to execute as UDF logic. This Java code is the UDF\u2019s handler.",
        "You deploy the UDF with CREATE FUNCTION, giving the UDF a name and specifying the Java method as the handler to use when the\nUDF is called. For more information about creating a UDF with SQL, see Creating a UDF.",
        "For more example code, see Java UDF handler examples.",
        "Use the following requirements and guidelines when writing your Java UDF handler.",
        "Define the class as public.",
        "Inside the class, declare at least one public method to use as a UDF handler.",
        "For an inline UDF, declare one handler method only. If instead you intend to package\nthe class into a JAR as a staged handler, you can declare multiple handler methods, later\nspecifying each as a handler with the HANDLER clause of a CREATE FUNCTION statement.",
        "For more about the difference between an in-line and staged handler, see Keeping handler code in-line or on a stage.",
        "You can declare other methods, if needed, to be called by the handler method.",
        "Use the following requirements and guidelines for each handler method:",
        "Declare the handler method as public, either static or non-static.",
        "If the method is non-static, your class must also declare a zero-argument constructor or no constructor at all.",
        "Snowflake does not pass any arguments to the constructor when it instantiates the class. If the constructor throws an error, the error\nis thrown as a user error, along with the exception message.",
        "Specify an appropriate return type.",
        "The return type must be one of the data types specified in the\nJava Data Type column of the SQL-Java Type Mappings table. The return type must be\ncompatible with the SQL data type specified in the RETURNS clause of the CREATE FUNCTION statement.",
        "Ensure that each handler method argument (if any) is a data type specified in the Java Data Type column of the\nSQL-Java Type Mappings table.",
        "When choosing data types of Java variables, take into account the maximum and minimum possible values of the data that could be sent\nfrom (and returned to) Snowflake.",
        "If you overload a method in a given Java class, keep in mind that Snowflake uses only the number of method arguments, not\ntheir types, to differentiate handler methods within a class. Resolving based on data types is impractical because some SQL\ndata types can be mapped to more than one Java data type and thus potentially to more than one handler method signature.",
        "For example, if two Java methods in a class have the same name, the same number of arguments, and different data types,\ncalling a UDF that uses one of these methods as a handler generates an error similar to the following:",
        "If a warehouse is available, the error is detected at the time that the UDF is created. Otherwise, the error occurs when the\nUDF is called.",
        "Comply with the Snowflake-imposed constraints for Java UDFs in each handler method and methods it calls. For more on these\nconstraints, see Designing Handlers that Stay Within Snowflake-Imposed Constraints.",
        "When your handler code requires classes packaged in external JAR files, you can add these dependencies to the Snowflake-managed classpath\navailable to your handler. The following describes how to add JAR files to the classpath visible to a Java UDF handler. For more information,\nsee Making dependencies available to your code.",
        "If you plan to compile the Java code to create the JAR file yourself, you can organize the files as shown below. This example assumes that\nyou plan to use Java\u2019s package mechanism.",
        "developmentDirectory",
        "packageDirectory",
        "class_file1.java",
        "class_file2.java",
        "classDirectory",
        "class_file1.class",
        "class_file2.class",
        "manifest_file.manifest (optional)",
        "jar_file.jar",
        "put_command.sql",
        "This directory contains the project-specific files required to create your Java UDF.",
        "This directory contains the .java files to compile and include in the package.",
        "These files contain the Java source code of the UDF.",
        "These are the .class file(s) created by compiling the .java files.",
        "The optional manifest file used when combining the .class files (and optionally, dependency JAR files) into the JAR file.",
        "The JAR file that contains the UDF code.",
        "This file contains the SQL PUT command to copy the JAR file to a Snowflake\nstage.",
        "To create a JAR file that contains the compiled Java code:",
        "Use javac to compile your .java file to a .class file.",
        "If you use a compiler newer than version 11.x, you can use the \u201c\u2013release\u201d option to specify that the target version is\nversion 11.",
        "Put your .class file into a JAR file. You can package multiple class files (and other JAR files) into your JAR file.",
        "For example:",
        "A manifest file is required if your handler class is in a package, and optional otherwise. The following example\nuses a manifest file:",
        "To build the jar file with all dependencies included, you can use Maven\u2019s mvn package command with\nthe maven-assembly-plugin. For more information about the maven-assembly-plugin, see the\nMaven usage page.",
        "Snowflake automatically supplies the standard Java libraries (e.g. java.util). If your code calls those libraries,\nyou do not need to include them in your JAR file.",
        "The methods that you call in libraries must follow the same Snowflake-imposed constraints as your Java method. For more on these\nconstraints, see Designing Handlers that Stay Within Snowflake-Imposed Constraints.",
        "In order for Snowflake to read from the JAR containing your handler method, you need to copy the JAR to one of the following kinds of stage:",
        "A user or named internal stage.",
        "Snowflake does not currently support using a table stage to store a JAR file with UDF handlers. For more on internal stages, see\nChoosing an internal stage for local files.",
        "An external stage.",
        "The stage hosting the JAR file must be readable by the owner of the UDF.",
        "Typically, you upload the JAR to a named internal stage using the PUT command. Note that you can\u2019t execute\nthe PUT command through the Snowflake GUI; you can use SnowSQL to execute PUT. See the\nJava UDF handler examples section for an example PUT command to copy a .jar file to a stage.",
        "For more about creating stages, see CREATE STAGE.",
        "Caveats and Best Practices",
        "If you delete or rename the JAR file, you can no longer call the UDF.",
        "If you need to update your JAR file, then:",
        "Update it while no calls to the UDF can be made.",
        "If the old .jar file is still in the stage, the PUT command should include the clause OVERWRITE=TRUE.",
        "Note",
        "A user performing related to UDFs must have a role that has been assigned permissions required for the action. For more information,\nsee Granting privileges for user-defined functions.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}