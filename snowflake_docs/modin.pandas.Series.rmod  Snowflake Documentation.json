{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.Series.rmod",
    "title": "modin.pandas.Series.rmod | Snowflake Documentation",
    "paragraphs": [
        "Return Modulo of series and other, element-wise (binary operator rmod).",
        "Equivalent to other % series, but with support to substitute a fill_value for\nmissing data in either one of the inputs.",
        "other (Series or scalar value) \u2013",
        "level (int or name) \u2013 Broadcast across a level, matching Index values on the\npassed MultiIndex level.",
        "fill_value (None or float value, default None (NaN)) \u2013 Fill existing missing (NaN) values, and any new element needed for\nsuccessful Series alignment, with this value before computation.\nIf data in both corresponding Series locations is missing\nthe result of filling (at that location) will be missing.",
        "axis ({0 or 'index'}) \u2013 Unused. Parameter needed for compatibility with DataFrame.",
        "The result of the operation.",
        "Series",
        "See also",
        "Element-wise Modulo, see Python documentation for more details.",
        "Caution",
        "Snowpark pandas API computes mod differently from pandas and Python. Snowpark pandas API only supports numeric data with the mod operator. Below is a table highlighting the differences in modulo computation for Python, pandas, and Snowpark pandas.\n+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\n| Python                    | pandas                    | Snowpark pandas           |\n+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\n|  7 %  5 =  2              |  7 %  5 =  2              |  7 %  5 =  2              |\n+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\n|  7 % -5 = -3              |  7 % -5 = -3              |  7 % -5 =  2              |\n+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\n| -7 %  5 =  3              | -7 %  5 =  3              | -7 %  5 = -2              |\n+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\n| -7 % -5 = -2              | -7 % -5 = -2              | -7 % -5 = -2              |\n+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014+",
        "Caution",
        "In Snowpark pandas API, whenever a binary operation involves a NULL value, the result will preserve NULL values, e.g. NULL.rmod(<other>) will yield NULL.",
        "Caution",
        "Snowpark pandas API denotes invalid numeric results with None while pandas uses NaN.",
        "Caution",
        "Snowpark pandas API does not support fill_value and level except for default values.",
        "Examples",
        "Was this page helpful?"
    ]
}