{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/python/calling-functions",
    "title": "Calling Functions and Stored Procedures in Snowpark Python | Snowflake Documentation",
    "paragraphs": [
        "To process data in a DataFrame, you can call system-defined SQL functions, user-defined functions, and stored procedures. This\ntopic explains how to call these in Snowpark.",
        "To process data in a DataFrame, you can call system-defined SQL functions, user-defined functions,\nand stored procedures.",
        "If you need to call system-defined SQL functions, use the equivalent functions in the\nsnowflake.snowpark.functions module.",
        "The following example calls the upper function in the functions module (the equivalent of the system-defined\nUPPER function) to return the values in the name column of the\nsample_product_data table with the letters in uppercase:",
        "If a system-defined SQL function is not available in the functions module, you can use one of the following approaches:",
        "Use the call_function function to call the system-defined function.",
        "Use the function function to create a function object that you can use to call the system-defined function.",
        "call_function and function are defined in the snowflake.snowpark.functions module.",
        "For call_function, pass the name of the system-defined function as the first argument. If you need\nto pass the values of columns to the system-defined function, define and pass\nColumn objects as additional arguments to the call_function function.",
        "The following example calls the system-defined function RADIANS, passing in the value from the\ncolumn col1:",
        "The call_function function returns a Column, which you can pass to the\nDataFrame transformation methods (e.g. filter, select, etc.).",
        "For function, pass the name of the system-defined function, and use the returned function object to call the\nsystem-defined function. For example:",
        "To call UDFs that you registered by name and UDFs that you created by executing CREATE\nFUNCTION, use the call_udf function in the snowflake.snowpark.functions module. Pass the name of the UDF as the\nfirst argument and any UDF parameters as additional arguments.",
        "The following example calls the UDF function minus_one, passing in the values from the columns col1 and col2. The\nexample passes the return value from minus_one to the select method of the DataFrame.",
        "To call UDTFs that you registered by name and UDTFs that you created by executing CREATE FUNCTION, use one of the functions listed below.\nBoth return a DataFrame representing a lazily-evaluated relational dataset.",
        "Note that you can use these to also call other table functions, including the\nsystem-defined table functions.",
        "For more information on registering a UDTF, see Registering a UDTF.",
        "To call the UDTF without specifying a lateral join, call the table_function function in the snowflake.snowpark.Session class.",
        "For the function reference and examples, see\nSession.table_function.",
        "Code in the following example uses table_function to call the generator_udtf function registered with the udtf\nfunction.",
        "To make a call to the UDTF in which your call specifies a lateral join, use the join_table_function function in the\nsnowflake.snowpark.DataFrame class.",
        "When you lateral join a UDTF, you can specify the PARTITION BY and ORDER BY clauses.",
        "For the function reference and examples, see\nDataFrame.join_table_function.",
        "Code in the following example performs a lateral join, specifying the partition_by and order_by parameters. Code in this\nexample first calls the snowflake.snowpark.functions.table_function function to create a function object representing the system-defined\nSPLIT_TO_TABLE function. It is this function object that join_table_function then calls.",
        "For the snowflake.snowpark.functions.table_function function reference, see\ntable_function.\nFor the SPLIT_TO_TABLE function reference, see SPLIT_TO_TABLE.",
        "To call a stored procedure, use the call method of the Session class.",
        "Was this page helpful?",
        "On this page"
    ]
}