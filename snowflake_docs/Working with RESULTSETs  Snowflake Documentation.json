{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-scripting/resultsets",
    "title": "Working with RESULTSETs | Snowflake Documentation",
    "paragraphs": [
        "This topic explains how to use a RESULTSET in Snowflake Scripting.",
        "In Snowflake Scripting, a RESULTSET is a SQL data type that points to the result set of a query.",
        "Because a RESULTSET is just a pointer to the results, you must do one of the following to access the results through the\nRESULTSET:",
        "Use the TABLE(...) syntax to retrieve the results as a table.",
        "Iterate over the RESULTSET with a cursor.",
        "Examples of both of these are included below.",
        "A RESULTSET and a cursor both provide access to the result set of a query. However, these objects differ in the\nfollowing ways:",
        "The point in time when the query is executed.",
        "For a cursor, the query is executed when you execute the OPEN command on the\ncursor.",
        "For a RESULTSET, the query is executed when you assign the query to the RESULTSET (either in the DECLARE section\nor in the BEGIN \u2026 END block).",
        "Support for binding in the OPEN command.",
        "When you declare a cursor, you can specify bind parameters (? characters). Later, when you execute the\nOPEN command, you can bind variables to those parameters in the USING clause.",
        "RESULTSET does not support the OPEN command. However, you can bind variables in SQL commands before returning the\nresult set.",
        "In general, it is simpler to use a RESULTSET when you want to return a table that contains the result set of a query. However,\nyou can also return a table from a Snowflake Scripting block with a cursor. To do so, you can pass the cursor to\nRESULTSET_FROM_CURSOR(cursor) to return a RESULTSET and pass that RESULTSET to TABLE(...). See\nReturning a table for a cursor.",
        "You can declare a RESULTSET in the DECLARE section of a block or in the\nBEGIN \u2026 END section of the block.",
        "Within the DECLARE section, use the syntax described in RESULTSET declaration syntax. For example:",
        "Within the BEGIN \u2026 END block, use the syntax described in RESULTSET assignment syntax. For example:",
        "To assign the result of a query to a RESULTSET that has already been declared, use the following syntax:",
        "Where:",
        "The name of the RESULTSET.",
        "The name must be unique within the current scope.",
        "The name must follow the naming rules for Object identifiers.",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "Runs the query as an asynchronous child job.",
        "The query can be any valid SQL statement, including SELECT statements and DML statements, such as INSERT\nor UPDATE.",
        "When this keyword is omitted, the stored procedure runs child jobs sequentially, and each child job waits for\nthe running child job to finish before it starts.",
        "You can use this keyword to run multiple child jobs concurrently, which can improve efficiency and reduce overall\nrun time.",
        "You can use AWAIT and CANCEL\nstatements to manage asynchronous child jobs for a RESULTSET.",
        "The query to assign to the RESULTSET.",
        "To assign a query to a RESULTSET:",
        "To assign a query to a RESULTSET and run the query as an asynchronous child job:",
        "To build a SQL string dynamically for the query, set query to\n(EXECUTE IMMEDIATE string_of_sql). For example:",
        "Although you can set query to an EXECUTE IMMEDIATE statement for a RESULTSET, you can\u2019t do this for a\ncursor.",
        "The query for a RESULTSET is executed when the object is associated with that query. For example:",
        "When you declare a RESULTSET and set the DEFAULT clause to a query, the query is executed at that point in time.",
        "When you use the := operator to assign a query to a RESULTSET, the query is executed at that point in time.",
        "Note",
        "Because a RESULTSET points to the result set of a query (and does not contain the result set of a query), a RESULTSET\nis valid only as long as the query results are cached (typically 24 hours). For details about query result caching,\nsee Using Persisted Query Results.",
        "Once the query is executed, you can access the results by using a cursor. You can also return the results as a table from a stored\nprocedure.",
        "Using a cursor to access data from a RESULTSET",
        "Returning a RESULTSET as a table",
        "To use a cursor to access the data from a RESULTSET, declare the cursor on the\nobject. For example:",
        "When you declare a cursor on a RESULTSET, the cursor gets access to the data already in the RESULTSET. Executing\nthe OPEN command on the cursor does not execute the query for the RESULTSET\nagain.",
        "You can then open the cursor and use the cursor to\nfetch the data.",
        "Note",
        "If the results include GEOGRAPHY values, you must cast the values to the GEOGRAPHY type before passing the values to any\nfunctions that expect GEOGRAPHY input values. See Using a cursor to retrieve a GEOGRAPHY value.",
        "If you want to return the results that the RESULTSET points to, pass the RESULTSET to TABLE(...). For example:",
        "This is similar to the way that TABLE(...) is used with\ntable functions (such as RESULT_SCAN).",
        "As shown in the example, if you write a stored procedure that returns a table, you must declare the stored procedure as returning\na table.",
        "Note",
        "Currently, the TABLE(resultset_name) syntax is supported only in the\nRETURN statement.",
        "Even if you have used a cursor to fetch rows from the RESULTSET, the\ntable returned by TABLE(resultset_name) still contains all of the rows (not just the rows starting from the cursor\u2019s\ninternal row pointer).",
        "Although RESULTSET is a data type, Snowflake does not yet support:",
        "Declaring a column of type RESULTSET.",
        "Declaring a parameter of type RESULTSET.",
        "Declaring a stored procedure\u2019s return type as a RESULTSET.",
        "Snowflake supports RESULTSET only inside Snowflake Scripting.",
        "In addition, you can\u2019t use a RESULTSET directly as a table. For example, the following is invalid:",
        "The following sections provide examples of using a RESULTSET:",
        "Setting up the data for the examples",
        "Example: Returning a table from a stored procedure",
        "Example: Constructing the SQL statement dynamically",
        "Example: Declaring a RESULTSET variable without a DEFAULT clause",
        "Example: Using a CURSOR with a RESULTSET",
        "Example: Running child jobs that query tables concurrently",
        "Example: Running child jobs that insert rows into tables concurrently",
        "Additional examples that use a RESULTSET",
        "Many of the examples below use the table and data shown below:",
        "The following code shows how to declare a RESULTSET and return the results that the RESULTSET points to. The RETURNS\nclause in the CREATE PROCEDURE command declares that the stored procedure returns a table, which contains one column of\ntype INTEGER.",
        "The RETURN statement inside the block uses the TABLE(...) syntax to return the results as a table.",
        "Create the stored procedure:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure:",
        "You can also use the RESULT_SCAN function to process the results of the stored procedure call:",
        "You can construct the SQL dynamically. The following is an example that executes the same query as the previous stored procedure\nbut that uses a SQL statement that is constructed dynamically:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "To run the example, call the stored procedure and pass in the table name:",
        "The following code shows how to declare a RESULTSET without a DEFAULT clause (i.e. without associating a query with the RESULTSET),\nand then associate the RESULTSET with a query later.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "To run the example, call the stored procedure:",
        "The following code shows how to use a cursor to iterate over the rows in a RESULTSET:",
        "Create the stored procedure:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure, and the results add the values for a in the table (1 + 2):",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "The following code shows how to use the ASYNC keyword to run multiple child jobs that query\ntables concurrently.",
        "This example uses the data in the following tables:",
        "The following stored procedure performs the following actions:",
        "Queries both tables for the order_amount values in all rows and returns the results to\ndifferent RESULTSETs (one for each table).",
        "Specifies that the queries run as concurrent child jobs by using the ASYNC keyword.",
        "Executes the AWAIT statement for each RESULTSET so\nthat the procedure waits for the queries to finish before proceeding. Query results for a\nRESULTSET can\u2019t be accessed until AWAIT is run for the RESULTSET.",
        "Uses a cursor to calculate the sum of the order_amount rows for each table.",
        "Adds the totals for the tables and returns the value.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure:",
        "Preview Feature \u2014 Open",
        "Available to all accounts.",
        "The following code shows how to use the ASYNC keyword to run multiple child jobs that insert\nrows into a table concurrently.",
        "The following stored procedure performs the following actions:",
        "Creates the orders_q3_2024 table if it doesn\u2019t exist.",
        "Creates two RESULTSETs, insert_1 and insert_2, that hold the results of inserts into the table.\nThe stored procedure arguments specify the values that are inserted into the table.",
        "Specifies that the inserts run as concurrent child jobs by using the ASYNC keyword.",
        "Executes the AWAIT statement for each RESULTSET so\nthat the procedure waits for the inserts to finish before proceeding. The results of a\nRESULTSET can\u2019t be accessed until AWAIT is run for the RESULTSET.",
        "Creates a new RESULTSET res that holds the results of a query on the orders_q3_2024 table.",
        "Returns the results of the query.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Call the stored procedure:",
        "Here are additional examples that use a RESULTSET:",
        "Use a RESULTSET-based FOR loop",
        "This example shows you how to use a FOR loop that iterates over a RESULTSET.",
        "Return a table for a cursor",
        "This example shows you how to use a cursor to return a table of data in a RESULTSET.",
        "Update table data with user input",
        "This example shows you how to use bind variables based on user input to update\ndata in a table. It uses a FOR loop with conditional logic to iterate over the rows\nin a RESULTSET.",
        "Filter and collect data",
        "This example shows you how to use a RESULTSET to collect data and insert that\ndata into a table to track historical trends.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}