{
    "url": "https://docs.snowflake.com/en/user-guide/tutorials/script-data-load-transform-json",
    "title": "Tutorial: Loading JSON data into a relational table | Snowflake Documentation",
    "paragraphs": [
        "When uploading JSON data into a table, you have these options:",
        "Store JSON objects natively in a VARIANT type column (as shown in Tutorial: Bulk loading from a local file system using COPY).",
        "Store JSON object natively in an intermediate table and then use FLATTEN function to extract JSON elements into separate columns in a table (as shown in Tutorial: JSON basics for Snowflake)",
        "Transform JSON elements directly into table columns as shown in this tutorial.",
        "The COPY command in this tutorial uses a SELECT statement to query for individual elements in a staged JSON file.",
        "The example commands provided in this tutorial includes a PUT statement.\nWe recommend executing these commands in SnowSQL which supports the PUT command.\nClients such as Snowsight and the Classic Console do\nnot support the PUT command.",
        "For this tutorial you need to:",
        "Download a Snowflake provided JSON data file.",
        "Create a database, a table, and a virtual warehouse for this tutorial.",
        "Database, table, and virtual warehouse are basic Snowflake objects required for\nmost Snowflake activities.",
        "To download the sample JSON data file, click sales.json.\nIf clicking the link does not download the file, right-click the link and save the\nlink/file to your local file system.",
        "The tutorial assumes you unpacked the JSON data file in to the following directories:",
        "Linux/macOS: /tmp/load",
        "Windows: C:\\tempload",
        "The data file include sample home sales JSON data. An example JSON object is shown:",
        "The following commands create objects specifically for use with this tutorial.\nWhen you have completed the tutorial, you can drop the objects.",
        "Note these commands creates temporary table. Temporary tables persist only for\nthe duration of the user session and is not visible to other users.",
        "Execute the CREATE FILE FORMAT command\nto create the sf_tut_json_format file format.",
        "TYPE = 'JSON' indicates the source file format type. CSV is the default file format type.",
        "Execute CREATE STAGE to create the\ninternal sf_tut_stage stage.",
        "Similar to temporary tables, temporary stages are automatically dropped\nat the end of the session.",
        "Execute the PUT command to upload the JSON file from your local file system to the\nnamed stage.",
        "Linux or macOS",
        "Windows",
        "Load the sales.json.gz staged data file into the home_sales table.",
        "Note the $1 in the SELECT query refers to the single column where the JSON is stored.\nThe query also uses the following functions:",
        "The SUBSTR , SUBSTRING function to extract city and state values from state_city JSON key.",
        "The TO_TIMESTAMP / TO_TIMESTAMP_* to cast the sale_date JSON key value to a timestamp.",
        "Execute the following query to verify data is copied.",
        "After you verify that you successfully copied data from your stage into the tables,\nyou can remove data files from the internal stage using the REMOVE\ncommand to save on data storage.",
        "Execute the following DROP <object> commands to return your system to its state before you began the tutorial:",
        "Dropping the database automatically removes all child database objects such as tables.",
        "Was this page helpful?"
    ]
}