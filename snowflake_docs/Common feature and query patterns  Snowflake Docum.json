{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-ml/feature-store/examples",
    "title": "Common feature and query patterns | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "The Snowflake Feature Store requires Enterprise Edition. To inquire about upgrading, please contact\nSnowflake Support.",
        "Note",
        "The Snowflake Feature Store API is available in the Snowpark ML Python package (snowflake-ml-python) v1.5.0 and later.",
        "The FeatureView class accepts a Snowpark DataFrame object containing the feature transformation logic. You can\ntherefore describe your features in any way supported by the Snowpark DataFrame API or by Snowflake SQL. You can pass\nthe DataFrame to the FeatureView constructor directly.",
        "The Snowpark Python API provides\nanalytics functions\nfor easily defining many common feature types, such as windowed aggregations. This topic contains some examples of these.",
        "The open source snowflake-ml-python\non Github also contains some sample feature view and entity definitions using public datasets.",
        "In per-row features, functions are applied to each row of tabular data. For example, the following code fills null in\nfoo with zero, then computes a ZIP code from lat and long. There is one output row per input\nrow.",
        "Python:",
        "Snowflake SQL:",
        "Per-group features aggregate values in a column within a group. For example, the sum of daily rainfall might be grouped\nby city for weather forecasting. The output DataFrame has one row per group.",
        "Python:",
        "Snowflake SQL:",
        "Row-based window features aggregate values over a fixed window of rows; for example, summing the last three\ntransaction amounts. The output DataFrame has one row per window frame.",
        "Python:",
        "Snowflake SQL:",
        "Moving aggregation features calculate moving statistics, such as sum and average, within a specified window size.\nThis function dynamically computes these aggregates across different subsets of the DataFrame based on the defined\nwindow sizes, order, and groupings. The output DataFrame has one row per window frame.",
        "Cumulative aggregation computes ongoing totals, minimums, maximums, and other cumulative statistics across a data\npartition, which is sorted and grouped as specified. Unlike moving aggregates, these totals extend from the start of the\npartition or to the end, depending on the direction specified, providing running totals that do not reset. The output\nDataFrame has one row per input row.",
        "Lag features introduce new columns containing values from prior rows within each partition, offset by a specified number\nof rows. This function is critical for comparing current values against previous values in a dataset, thus assisting in\ndetecting trends or changes over time. The output DataFrame has one row per input row.",
        "The inverse of lag features, lead features create new columns containing values from subsequent rows, shifting data\nupward. This feature is essential for making predictions or assumptions based on future data points already present in a\ndataset. The output DataFrame has one row per input row.",
        "Time-series features compute feature values based on a time window and a fixed position along the time axis. Examples\ninclude the count of trips over the past week for rideshares or the sum of sales over the past three days. The output\nDataFrame has one row per time window.",
        "Recent versions of the Snowflake Feature Store include an experimental time series aggregation API. Using this API,\na time series feature can be created using code like the following:",
        "Python:",
        "You can also construct time-series features with RANGE BETWEEN syntax in SQL. for more details, see\nSnowflake Window functions.",
        "Snowflake SQL:",
        "The Snowflake Feature Store supports user defined functions (UDFs) in feature pipeline definitions. However, only\ndeterministic functions (functions that always return the same result for the same input) can be incrementally\nmaintained. To enable incremental maintenance, mark your UDF as immutable when registering it.",
        "If your function is written in SQL, specify the IMMUTABLE keyword. See this guide.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}