{
    "url": "https://docs.snowflake.com/en/user-guide/oauth-okta",
    "title": "Configure Okta for External OAuth | Snowflake Documentation",
    "paragraphs": [
        "This topic describes how to configure Snowflake as an OAuth Resource and Okta as an External OAuth authorization server to facilitate\nsecure, programmatic access to Snowflake data.",
        "The following five steps assume that your environment does not have anything configured relating to Okta OAuth authorization servers,\nOAuth clients, scopes, and necessary metadata.",
        "The information from Steps 1-3 will be used to create a security integration in Snowflake.",
        "If you already have an Okta authorization server and client configured, it is not necessary to complete all of the steps below. Rather,\nskim the following four steps and verify that you can obtain the desired information, create scopes, assign scopes to one or more policies,\nand access the metadata.",
        "If you do not have and Okta OAuth authorization server and client configured, complete all of the following five steps.",
        "Important",
        "The steps in this topic are a representative example on how to configure Okta for External OAuth.",
        "You can configure Okta to any desired state and use any desired OAuth flow provided that you can obtain the necessary information for the\nsecurity integration (in this topic).",
        "Note that the following steps serve as a guide to obtain the necessary information to create the security integration in Snowflake.",
        "Be sure to consult your internal security policies with regard to configuring an authorization server to ensure your organization meets\nall necessary regulations and compliance requirements.",
        "Steps 1-3 are derived from the Okta documentation on Authorization Servers. For more information on how Okta defines its terms, its user\ninterface, and options relating to Authorization Servers, consult the following Okta guides:",
        "Create an Authorization Server",
        "Implement the Authorization Code Flow",
        "Implement the Authorization Code Flow with PKCE",
        "Implement the Client Credentials Flow",
        "Implement the Resource Owner Password Flow",
        "Refresh Access Tokens",
        "Navigate to the Okta Admin Console.",
        "Click Applications.",
        "Click Add Application.",
        "Click Create New App.",
        "For Platform, select Native App.",
        "Click Create.",
        "Enter a name for the application.",
        "In the Login redirect URIs box, add the full Snowflake account URL\n(i.e. https://<account_identifier>.snowflakecomputing.com). For a list of possible URL formats, see\nConnecting with a URL.",
        "Click Save.",
        "From New Applications in the General interface, click Edit.",
        "Check Refresh Token and Resource Owner Password.",
        "Click Save.",
        "Click the Edit button next to Client Credentials.",
        "Select the Use Client Authentication option.",
        "Click Save.",
        "In the Client Credentials container, save the ClientID and Secret. These two values will be known as the\n<OAUTH_CLIENT_ID> and <OAUTH_CLIENT_SECRET>, respectively in the following steps.",
        "Navigate to the Okta Admin Console.",
        "In the Security menu, click API.",
        "Click Authorization Servers.",
        "Click Add Authorization Server.",
        "Enter a name.",
        "Enter the Snowflake account URL as the Audience value. For a list of possible URL formats, see Connecting with a URL.",
        "Click Save.",
        "Complete the following steps for the newly added Authorization Server.",
        "Copy the Issuer value. Its format should resemble https://dev-390798.oktapreview.com/oauth2/auslh9j9vf9ej7NfT0h7. This\nvalue will be known as the <OKTA_ISSUER> in the following steps.",
        "Click on Scopes.",
        "Click on Add Scope.",
        "To add a Snowflake Role as a scope, enter the scope by having the name of the of Snowflake role with the session:role: prefix\n(e.g.: for the Snowflake Analyst role, enter session:role:analyst).",
        "Click Create.",
        "Click on Access Policies.",
        "Click Add Policy.",
        "Enter a name and a description for the policy. Assign it to the client created earlier and click Create.",
        "In the newly added Access Policy, click Add Rule.",
        "Enter a rule name.",
        "Select the authorized Grant Types. You should select Resource Owner Password and Client Credentials along\nwith any others that match your organization\u2019s policies.",
        "For scopes, you can select any of the scopes or select the desired scopes created earlier that clients assigned to this policy will be\nable to request (including offline_access for refresh tokens if needed). Configure any additional settings as needed.",
        "Click Create Rule.",
        "Go to the Okta Admin Console.",
        "In the Security menu, click API.",
        "Click Authorization Servers.",
        "Click on the Authorization Server for the Snowflake Resource.",
        "In the Settings tab, copy the Issuer value. This value will be known as the <OKTA_ISSUER> in the following\nsteps. Its format should resemble https://dev-111111.oktapreview.com/oauth2/auslh9j9vf9ej7NfT0h7.",
        "In the Metadata document:",
        "Copy the Metadata URI value, open a browser tab, and paste the URL in the address bar.",
        "You should see JSON text in the browser. You can work with this text in a text editor or in the browser itself.",
        "Locate the \"jwks_uri\" parameter and copy its value. Its format should resemble\nhttps://dev-111111.oktapreview.com/oauth2/auslh9j9vf9ej7NfT0h7/v1/keys. This endpoint will be known as the\n<OKTA_JWS_KEY_ENDPOINT> in the following steps.",
        "Locate the \"token_endpoint\" parameter and copy its value. Its format should resemble\nhttps://dev-111111.oktapreview.com/oauth2/auslh9j9vf9ej7NfT0h7/v1/token. This endpoint will be known as the <OKTA_OAUTH_TOKEN_ENDPOINT> in the following steps.",
        "This step creates a security integration in Snowflake. The security integration ensures that Snowflake can communicate with Okta securely,\nvalidates the tokens from Okta, and provides the appropriate Snowflake data access to users based on the user role associated with the\nOAuth token.",
        "For more information, see CREATE SECURITY INTEGRATION.",
        "Important",
        "Only account administrators (i.e. users with the ACCOUNTADMIN role) or a role with the global CREATE INTEGRATION privilege can execute\nthis SQL command.",
        "The security integration parameter values are case-sensitive and the values you put into the security integration must match those values\nin your environment. If the case does not match, it is possible that the access token will not be validated resulting in a failed\nauthentication attempt.",
        "Create a security integration with audiences",
        "The external_oauth_audience_list parameter of the security integration must match the Audience that you specified\nwhile configuring Okta.",
        "You can update your External OAuth security integration by executing an ALTER statement on the security integration.",
        "For more information, see ALTER SECURITY INTEGRATION (External OAuth).",
        "In the configuration step to create a security integration in Snowflake, the OAuth access token includes the scope definition. Therefore, at runtime, using the External OAuth security integration allows neither the OAuth client nor the user to use an undefined role in the OAuth access token.",
        "After validating the access token and creating a session, the ANY role can allow the OAuth client and user to decide its role. If necessary, the client or the user can switch to a role that is different that the role defined in the OAuth access token.",
        "To configure ANY role, define the scope as SESSION:ROLE-ANY and configure the security integration with the external_oauth_any_role_mode parameter. This parameter can have three possible string values:",
        "DISABLE does not allow the OAuth client or user to switch roles (i.e. use role <role>;). Default.",
        "ENABLE allows the OAuth client or user to switch roles.",
        "ENABLE_FOR_PRIVILEGE allows the OAuth client or user to switch roles only for a client or user with the USE_ANY_ROLE privilege. This privilege can be granted and revoked to one or more roles available to the user. For example:",
        "Define the security integration as follows:",
        "The desired scope for the primary role is passed in the external token: either the default role for the user (session:role-any) or\na specific role that was granted to the user (session:role:<role_name>).",
        "By default, Snowflake does not activate the default secondary roles for a user (i.e.\nthe DEFAULT_SECONDARY_ROLES) user in the session.",
        "To activate the default secondary roles for a user in a session and allow executing the USE SECONDARY ROLES\ncommand while using External OAuth, complete the following steps:",
        "Configure the security integration for the connection. Set the EXTERNAL_OAUTH_ANY_ROLE_MODE parameter value to either ENABLE or\nENABLE_FOR_PRIVILEGE when you create the security integration (using CREATE SECURITY INTEGRATION) or later (using ALTER SECURITY\nINTEGRATION).",
        "Configure the authorization server to pass the static value of session:role-any in the scope attribute of the token. For more\ninformation about the scope parameter, see External OAuth overview.",
        "Snowflake supports using Client Redirect with External OAuth, including using Client Redirect and OAuth with supported Snowflake Clients.",
        "For more information, see Redirecting client connections.",
        "Currently, network policies cannot be added to your External OAuth security integration. However, you can still implement network policies that apply broadly to the entire Snowflake account.",
        "If your use case requires a network policy that is specific to the OAuth security integration, use Snowflake OAuth. This approach allows the Snowflake OAuth network policy to be distinct from other network policies that may apply to the Snowflake account.",
        "For more information, see Network policies.",
        "Snowflake supports replication and failover/failback of the External OAuth security integration from a source account to a target account.",
        "For details, see Replication of security integrations & network policies across multiple accounts.",
        "In the context of testing OAuth while using Okta as an authorization server, you must:",
        "Verify that the test user exists in Okta and has a password.",
        "Verify that the test user exists in Snowflake with their login_name attribute value set to the <OKTA_USER_USERNAME>",
        "Register an OAuth Client.",
        "Allow the OAuth Client to make a POST request to the Okta Token endpoint as follows:",
        "Grant type set to Resource Owner",
        "HTTP Basic Authorization header containing the clientID and secret",
        "FORM data containing the user\u2019s username & password",
        "Include scopes",
        "The sample command requests the Analyst and that assumes the session:role:analyst have been defined in\nOkta > OAuth App Resource.",
        "Here is an example for getting an access token using cURL.",
        "After configuring your security integration and obtaining your access token, you can connect to Snowflake using one of the following:",
        "SnowSQL",
        "Python Connector",
        "Go Driver",
        "JDBC Driver",
        "ODBC Driver",
        "Spark Connector",
        ".NET Driver",
        "Node.js Driver",
        "Note the following:",
        "It is necessary to set the authenticator parameter to oauth and the token parameter to the external_oauth_access_token.",
        "When passing the token value as a URL query parameter, it is necessary to URL-encode the token value.",
        "When passing the token value to a Properties object (e.g. JDBC Driver), no modifications are necessary.",
        "For example, if using the Python Connector, set the connection string as shown below.",
        "You can now use External OAuth to connect to Snowflake securely.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}