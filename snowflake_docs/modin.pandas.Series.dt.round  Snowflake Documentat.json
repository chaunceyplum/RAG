{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.Series.dt.round",
    "title": "modin.pandas.Series.dt.round | Snowflake Documentation",
    "paragraphs": [
        "Perform round operation on the data to the specified freq.",
        "freq (str or Offset) \u2013 The frequency level to round the index to. Must be a fixed frequency like \u2018S\u2019 (second) not \u2018ME\u2019 (month end). See frequency aliases for a list of possible freq values.",
        "ambiguous (\u2018infer\u2019, bool-ndarray, \u2018NaT\u2019, default \u2018raise\u2019) \u2013 Only relevant for DatetimeIndex:\n- \u2018infer\u2019 will attempt to infer fall dst-transition hours based on order\n- bool-ndarray where True signifies a DST time, False designates a non-DST time (note that this flag is only applicable for ambiguous times)\n- \u2018NaT\u2019 will return NaT where there are ambiguous times\n- \u2018raise\u2019 will raise an AmbiguousTimeError if there are ambiguous times.",
        "nonexistent (\u2018shift_forward\u2019, \u2018shift_backward\u2019, \u2018NaT\u2019, timedelta, default \u2018raise\u2019) \u2013 A nonexistent time does not exist in a particular timezone where clocks moved forward due to DST.\n- \u2018shift_forward\u2019 will shift the nonexistent time forward to the closest existing time\n- \u2018shift_backward\u2019 will shift the nonexistent time backward to the closest existing time\n- \u2018NaT\u2019 will return NaT where there are nonexistent times\n- timedelta objects will shift nonexistent times by the timedelta\n- \u2018raise\u2019 will raise an NonExistentTimeError if there are nonexistent times.",
        "Index of the same type for a DatetimeIndex or TimedeltaIndex, or a Series with the same index for a Series.",
        "DatetimeIndex, TimedeltaIndex, or Series",
        "ValueError if the freq cannot be converted. \u2013",
        "Notes",
        "If the timestamps have a timezone, rounding will take place relative to the local (\u201cwall\u201d) time and re-localized to the same timezone. When rounding near daylight savings time, use nonexistent and ambiguous to control the re-localization behavior.",
        "Examples",
        "DatetimeIndex",
        "Series",
        "When rounding near a daylight savings time transition, use ambiguous or nonexistent to control how the timestamp should be re-localized.",
        "Was this page helpful?"
    ]
}