{
    "url": "https://docs.snowflake.com/en/sql-reference/functions-window-syntax",
    "title": "Window function syntax and usage | Snowflake Documentation",
    "paragraphs": [
        "Snowflake supports a large number of analytic SQL functions known as window functions. The details for each function are documented on individual\nreference pages. The purpose of this section is to provide general reference information that applies to some or all window functions, including\ndetailed syntax for the main components of the OVER clause:",
        "PARTITION BY clause",
        "ORDER BY clause",
        "Window frame syntax",
        "Users who are not familiar with window functions might want to read the conceptual material in Analyzing data with window functions.",
        "Where:",
        "Where:",
        "Specifies that the function is being used as a window function and specifies the window over which\nthe function operates.\nThe OVER clause must contain parentheses, but they may be empty, depending on the requirements of the\nfunction in question. An empty OVER clause has no partitions and an implied default window frame.",
        "Groups rows into partitions, by product, city, or year, for example. Input rows are grouped by partitions, then the function is\ncomputed over each partition. The PARTITION BY clause is optional; you can analyze a set of rows as a single partition.",
        "Orders rows within each partition, or within the entire set of rows if no partition is specified.\nThis ORDER BY clause is distinct from the ORDER BY clause that controls the order of all the rows that are\nreturned in the final result of a query. Although the ORDER BY clause is optional for some window functions, it is required for others.\nFor example, ranking window functions such as RANK and NTILE require their input data to be in a meaningful order.",
        "The ORDER BY clause for a window function follows rules similar to those for the main ORDER BY clause in a query,\nwith respect to ASC/DESC (ascending/descending) order and NULL handling. For details, see ORDER BY.",
        "Different functions handle the ORDER BY clause in different ways:",
        "Some window functions require an ORDER BY clause.",
        "Some window functions prohibit an ORDER BY clause.",
        "Some window functions use an ORDER BY clause if one is present, but do not require it.",
        "Some window functions apply an implicit window frame to the ORDER BY clause. (For more information, see\nUsage notes for window frames.)",
        "Specifies the type or mode of window frame, which defines either a physical number of rows (ROWS) or a logically computed set of rows (RANGE).\nSee Range-based versus row-based window frames.",
        "Both types of frame specify starting and ending points, using either implicit named boundaries or explicit offset values.\nA named boundary is defined with the keywords CURRENT ROW, UNBOUNDED PRECEDING, and UNBOUNDED FOLLOWING. Explicit offsets are\ndefined with numbers or intervals (n PRECEDING or n FOLLOWING).",
        "Specifies a range-based window frame with explicit offsets.",
        "RANGE BETWEEN window frames with explicit offsets must have only one ORDER BY expression.\nThe following data types are supported for that expression:",
        "DATE, TIMESTAMP, TIMESTAMP_LTZ , TIMESTAMP_NTZ (DATETIME) , TIMESTAMP_TZ",
        "NUMBER, including INT, FLOAT, and so on",
        "TIME and other Snowflake data types are not supported when this type of window frame is used. For other window frames, other data types,\nsuch as VARCHAR, can be used in the ORDER BY expression.",
        "For RANGE BETWEEN window frames, n must be an unsigned constant (a positive numeric value, including 0) or a positive INTERVAL constant:",
        "If expr2 is a numeric data type, n must be an unsigned constant.",
        "If expr2 is a TIMESTAMP data type, n must be an INTERVAL constant.\nFor example: INTERVAL '12 hours' or INTERVAL '3 days'.",
        "If expr2 is a DATE data type, n can be an unsigned constant or an INTERVAL constant, but the start and end of the frame must use the same data type for the n value.",
        "When the ORDER BY expression is ascending (ASC), the syntax n FOLLOWING means \u201crows with values greater than (or later than) x,\u201d and\nn PRECEDING means \u201crows with values less than (or earlier than) x,\u201d where x is the ORDER BY value for the current row. When the ORDER BY expression is descending (DESC), the opposite is true. (The offsets 0 PRECEDING and 0 FOLLOWING are equivalent to CURRENT ROW.)",
        "The following subset of window functions support the RANGE BETWEEN syntax with explicit offsets:",
        "COUNT, SUM, MIN,\nMAX, AVG",
        "STDDEV, STDDEV_SAMP, STDDEV_POP (and aliases)",
        "VARIANCE , VARIANCE_SAMP, VARIANCE_POP (and aliases)",
        "COUNT_IF",
        "FIRST_VALUE, LAST_VALUE",
        "In addition, note that:",
        "DISTINCT versions of these functions do not support this syntax.",
        "The following limitations apply when the COUNT window function is used with this syntax.",
        "Only one input argument is supported.",
        "COUNT(table.*) wildcard queries are not supported. For example, you cannot specify:",
        "You cannot specify a frame that results in a logical reversal of the frame start and end positions. For example, the following frames return\nerrors because the ending row of the frame precedes the starting row:",
        "Note the following behavior when a RANGE BETWEEN window frame is used and the ORDER BY column contains NULL values:",
        "When the ORDER BY clause specifies NULLS FIRST, rows with NULL in the ORDER BY column are included in UNBOUNDED PRECEDING frames.",
        "When the ORDER BY clause specifies NULLS LAST, rows with NULL in the ORDER BY column are included in UNBOUNDED FOLLOWING frames.",
        "Rows with NULL in the ORDER BY column are included in an explicit-offset frame boundary only when the ORDER BY value of the current row is NULL.",
        "See RANGE BETWEEN examples with NULL values in the ORDER BY clause.",
        "All window functions support window frames. However, support for window frame syntax\nvaries by function. If no window frame is specified, the default depends on the function:",
        "For non-ranking functions (such as COUNT, MAX,\nMIN, and SUM), the\ndefault is the following window frame (in accordance with the ANSI standard):",
        "For ranking functions (such as FIRST_VALUE, LAST_VALUE,\nNTH_VALUE), the default is the entire window:",
        "Note that this behavior does not comply with the ANSI standard.",
        "Note",
        "For clarity, Snowflake recommends avoiding implicit window frames. If your query uses a window frame, define an explicit window frame.",
        "Window frames require the data in the window to be in a known order. Therefore, the ORDER BY clause inside the OVER\nclause is required for window frame syntax, even though that ORDER BY clause is generally optional.",
        "This section contains examples that show how to use window functions in different ways. For additional examples, see\nAnalyzing data with window functions and the pages for individual functions.",
        "Suppose that you own a chain of stores. The following query shows the percentage of\nthe chain\u2019s total profit that is generated by each store. The query uses the RATIO_TO_REPORT function, which takes a\nvalue (net_profit) from the current row and divides it by the sum of the corresponding values from all the other rows:",
        "Create and load the table:",
        "Query the table:",
        "Create and populate a table with values:",
        "Run a query that uses a window frame with an unbounded starting position and show the output.\nReturn cumulative COUNT, SUM, AVG, MIN, and MAX values for each row in each partition:",
        "Return the same results as the above query by using the default window frame (that is,\nROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):",
        "Create and populate a table with values:",
        "Return MIN function results for two columns (numeric and string) over sliding windows before, after, and including the current row:",
        "Return MAX function results for two columns (numeric and string) over sliding windows before, after, and including the current row:",
        "Return the sum of a number column across sliding windows before, after, and encompassing the current row:",
        "The following example shows how to rank sales based on the total amount (in dollars) that each salesperson has sold. The ORDER BY clause within the\nOVER clause sorts the totals in descending order (highest to lowest). The query calculates the rank of each salesperson relative to all other salespeople.",
        "Create the table and insert the data:",
        "Now query the data:",
        "The output is not necessarily ordered by rank. To display reults ordered by rank, specify an ORDER BY clause for the query itself (in addition\nto the ORDER BY clause for the window function), as shown here:",
        "The preceding example has two ORDER BY clauses:",
        "One controls the order of the ranking.",
        "One controls the order of the output.",
        "These clauses are independent. For example, you could order the rankings based on total sales (as shown above), but\norder the output rows based on the salesperson\u2019s last name:",
        "The following example uses RANGE BETWEEN syntax with explicit numeric offsets.\nTo run this example, follow these instructions: Create and load the menu_items table.\nFor similar examples that use INTERVAL offsets, see Using windowed aggregations for rolling calculations.",
        "The following query computes the average cost of goods sold for categories of menu items available from a food truck.\nThe window function does not partition the results; therefore, the averages are computed across the complete result set,\nsubject to a range-based frame.",
        "The boundary of the frame is the cost of goods value in the current row, plus two (the first row = 0.50 + 2.00, for example).\nRows qualify for the frame when they fall within this two-dollar range.",
        "For example, the avg_cogs value for the first row is 1.1833. This is computed as the sum of all the menu_cogs_usd values that fall\nbetween 0.50 and 2.50, divided by the count of those rows:",
        "(0.50 + 0.65 + 0.75 + 0.50 + 1.00 + 1.25 + 2.50 + 1.25 + 2.25) / 9 = 1.18333",
        "The second to last row has an avg_cogs value of 2.93750. This is computed as the sum of all the menu_cogs_usd values that fall between 2.25 and 4.25,\ndivided by the count of those rows:",
        "(2.25 + 2.50 + 3.00 + 4.00) / 4 = 2.93750",
        "The last row returns 4.0 for both the avg_cogs and menu_cogs_usd. This result is accurate because only this row belongs to the frame; 4.0 is the\nmaximum menu_cogs_usd value in the entire result, so it becomes a single-row frame. It has no \u201cfollowing\u201d rows.",
        "Note that this query has an ORDER BY clause for the window function and an ORDER BY clause for the final results of the query. The final ORDER BY output\ndoes not influence the calculation of the window function results. The ordered result set for computing the function is an intermediate result set that the\nfinal query does not display.",
        "The nulls table contains five rows, and two have NULL values in the c1 column. Create and\nload the table as follows:",
        "When NULLS LAST is specified, and the window frame uses explicit offsets, rows with NULL in c1\nare included in the frame only when the ORDER BY value of the current row is NULL.\nThe following query returns a sum of 50 when row 3 is the current row.\nThe following NULL row is not included in the frame.",
        "When NULLS LAST is specified, and the window frame uses UNBOUNDED FOLLOWING, rows with NULL in c1\nare included in the frame. The following query returns a sum of 120 when row 3 is the current row.\nBoth following NULL rows are included in the frame.",
        "To create and insert rows into the heavy_weather table, which is used in some window function\nexamples, run this script.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}