{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/to_timestamp#usage-notes",
    "title": "TO_TIMESTAMP / TO_TIMESTAMP_* | Snowflake Documentation",
    "paragraphs": [
        "Conversion functions , Date & time functions",
        "Converts an input expression into the corresponding timestamp:",
        "TO_TIMESTAMP_LTZ (timestamp with local time zone)",
        "TO_TIMESTAMP_NTZ (timestamp with no time zone)",
        "TO_TIMESTAMP_TZ (timestamp with time zone)",
        "Note",
        "TO_TIMESTAMP maps to one of the other timestamp functions, based on the\nTIMESTAMP_TYPE_MAPPING session parameter. The parameter default is\nTIMESTAMP_NTZ, so TO_TIMESTAMP maps to TO_TIMESTAMP_NTZ by default.",
        "TRY_TO_TIMESTAMP / TRY_TO_TIMESTAMP_* ,",
        "AS_TIMESTAMP_* , IS_TIMESTAMP_* ,",
        "TO_DATE , DATE ,  TO_TIME , TIME",
        "Where:",
        "Required:",
        "One of:",
        "A number of seconds (if scale = 0 or is absent) or fractions of a second (e.g. milliseconds or nanoseconds)\nsince the start of the Unix epoch (1970-01-01 00:00:00 UTC). If a non-integer decimal expression is input, the\nscale of the result is inherited.",
        "A date to be converted into a timestamp.",
        "A timestamp to be converted into another timestamp (e.g. convert TIMESTAMP_LTZ to TIMESTAMP_NTZ).",
        "A string from which to extract a timestamp, for example '2019-01-31 01:02:03.004'.",
        "An expression that evaluates to a string containing an integer, for example '15000000'. Depending\non the magnitude of the string, it can be interpreted as seconds, milliseconds, microseconds, or\nnanoseconds. For details, see the Usage Notes.",
        "An expression of type VARIANT. The VARIANT must contain one of the following:",
        "A string from which to extract a timestamp.",
        "A timestamp.",
        "An integer that represents the number of seconds, milliseconds, microseconds, or nanoseconds.",
        "A string containing an integer that represents the number of seconds, milliseconds, microseconds, or nanoseconds.",
        "Although TO_TIMESTAMP accepts a DATE value, it does not accept a DATE inside a VARIANT.",
        "Optional:",
        "Format specifier (only for string_expr). For more information, see Date and time formats in conversion functions.",
        "The default value is the current value of the TIMESTAMP_INPUT_FORMAT parameter (default\nAUTO).",
        "Scale specifier (only for numeric_expr). If specified, defines the scale of the numbers provided. For example:",
        "For seconds, scale = 0.",
        "For milliseconds, scale = 3.",
        "For microseconds, scale = 6.",
        "For nanoseconds, scale = 9.",
        "Default: 0",
        "The data type of the returned value is one of the TIMESTAMP data\ntypes. By default, the data type is TIMESTAMP_NTZ. You can change\nthis by setting the session parameter TIMESTAMP_TYPE_MAPPING.",
        "If the input is NULL, then the result is NULL.",
        "This family of functions returns timestamp values, specifically:",
        "For string_expr: A timestamp represented by a given string. If the string does not have a time component, midnight is used.",
        "For date_expr: A timestamp representing midnight of a given day is used, according to the specific timestamp mapping (NTZ/LTZ/TZ) semantics.",
        "For timestamp_expr: A timestamp with possibly different mapping than the source timestamp.",
        "For numeric_expr: A timestamp representing the number of seconds (or fractions of a second) provided by the user. UTC time is always used to build the result.",
        "For variant_expr:",
        "If the VARIANT contains a JSON null value, the result is NULL.",
        "If the VARIANT contains a timestamp value of the same kind as the result, this value is preserved as is.",
        "If the VARIANT contains a timestamp value of a different kind, the conversion is done in the same way as from timestamp_expr.",
        "If the VARIANT contains a string, conversion from a string value is performed (using automatic format).",
        "If the VARIANT contains a number, conversion from numeric_expr is performed.",
        "Note",
        "When an INTEGER value is cast directly to TIMESTAMP_NTZ, the integer is treated as the number of seconds\nsince the beginning of the Linux epoch, and the local time zone is not taken into account. However, if the\nINTEGER value is stored inside a VARIANT value, for example as shown below, then the conversion is indirect,\nand is affected by the local time zone, even though the final result is TIMESTAMP_NTZ:",
        "The timestamp returned by the first query is different from the time returned by the second and\nthird queries.",
        "To convert independently of the local time zone, add an explicit cast to integer in the expression, as shown\nbelow:",
        "The timestamp returned by all three queries is the same. This applies whether casting to TIMESTAMP_NTZ or calling the\nfunction TO_TIMESTAMP_NTZ. It also applies when calling TO_TIMESTAMP when the TIMESTAMP_TYPE_MAPPING parameter\nis set to TIMESTAMP_NTZ.",
        "For an example with output, see the examples at the end of this topic.",
        "If conversion is not possible, an error is returned.",
        "For timestamps with time zones, the setting of the TIMEZONE parameter affects the return value. The returned\ntimestamp is in the time zone for the session.",
        "The display format for timestamps in the output is determined by the timestamp output format that corresponds with the\nfunction (TIMESTAMP_OUTPUT_FORMAT, TIMESTAMP_LTZ_OUTPUT_FORMAT, TIMESTAMP_NTZ_OUTPUT_FORMAT,\nor TIMESTAMP_TZ_OUTPUT_FORMAT).",
        "If the format of the input parameter is a string that contains an integer:",
        "After the string is converted to an integer, the integer is treated as a number of seconds, milliseconds,\nmicroseconds, or nanoseconds after the start of the Unix epoch (1970-01-01 00:00:00.000000000 UTC).",
        "If the integer is less than 31536000000 (the number of milliseconds in a year), then the value is treated as\na number of seconds.",
        "If the value is greater than or equal to 31536000000 and less than 31536000000000, then the value is treated\nas milliseconds.",
        "If the value is greater than or equal to 31536000000000 and less than 31536000000000000, then the value is\ntreated as microseconds.",
        "If the value is greater than or equal to 31536000000000000, then the value is\ntreated as nanoseconds.",
        "If more than one row is evaluated (for example, if the input is the column name of a table that contains more than\none row), each value is examined independently to determine if the value represents seconds, milliseconds, microseconds, or\nnanoseconds.",
        "When you use the TO_TIMESTAMP_NTZ or TRY_TO_TIMESTAMP_NTZ function to convert a timestamp with time zone information, the time zone\ninformation is lost. If the timestamp is then converted back to a timestamp with time zone information (by using\nthe TO_TIMESTAMP_TZ function for example), the time zone information is not recoverable.",
        "This example shows that TO_TIMESTAMP_TZ creates a timestamp that contains a time\nzone from the session, but the value from TO_TIMESTAMP_NTZ does not have a\ntime zone:",
        "The following examples show how different formats can influence the parsing of an ambiguous date.\nAssume that the TIMESTAMP_TZ_OUTPUT_FORMAT is not set, so the\nTIMESTAMP_OUTPUT_FORMAT is used and is set to the default\n(YYYY-MM-DD HH24:MI:SS.FF3 TZHTZM).",
        "This example shows the results when the input format is mm/dd/yyyy hh24:mi:ss (month/day/year):",
        "This example shows the results when the input format is dd/mm/yyyy hh24:mi:ss (day/month/year):",
        "This example shows how to use a numeric input that represents approximately 40\nyears from midnight January 1, 1970 (the start of the Unix epoch). The scale\nis not specified, so the default scale of 0 (seconds) is used.",
        "This example is similar to the preceding example, but provides the value as milliseconds\nby specifying a scale value of 3:",
        "This example shows how the results change when different scale values are specified for the same\nnumeric value:",
        "This example shows how the function determines the units to use (seconds, milliseconds, microseconds, or nanoseconds)\nwhen the input is a string that contains an integer, based on the magnitude of the value.",
        "Create and load the table with strings containing integers within different ranges:",
        "Pass the strings to the function:",
        "The following example casts values to TIMESTAMP_NTZ. The example shows the difference in\nbehavior between using an integer and using a variant that contains an integer:",
        "The returned timestamps match for an integer and for a variant cast to an integer in the\nfirst and third columns, but the returned timestamp is different for the variant that is not\ncast to an integer in the second column. For more information, see\nUsage notes.",
        "This same behavior applies when calling the TO_TIMESTAMP_NTZ function:",
        "Was this page helpful?",
        "On this page"
    ]
}