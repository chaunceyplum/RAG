{
    "url": "https://docs.snowflake.com/en/developer-guide/logging-tracing/tracing-custom-spans",
    "title": "Adding custom spans to a trace | Snowflake Documentation",
    "paragraphs": [
        "Preview Feature \u2014 Open",
        "Support for custom spans is a preview feature available to all accounts.",
        "You can add your own custom spans to traces for finer-grained tracing within the handler for a procedure or function.",
        "By default, when you have tracing enabled, Snowflake starts a span for\nyou (as described in How Snowflake represents trace events) and adds all trace events to that span. (This is\nknown internally as the \u201cauto_instrumented\u201d span.) Using OpenTelemetry APIs, you can create your own spans. To the new span, you can add\nevents and attributes using either the OpenTelemetry API or Snowflake API for your language.",
        "You might want to create your own span when, for example, you want to isolate the trace data for computation-heavy actions that happen\nwithin a procedure, such as when you\u2019re using the code to train an ML model.",
        "Custom spans you create match the default behavior of spans created by OpenTelemetry.",
        "You can add custom spans from code written in the following languages, including when handler code is written with\nSnowpark APIs.",
        "Language/Type",
        "Java",
        "Python",
        "JavaScript",
        "Scala",
        "Snowflake Scripting",
        "Stored procedure handler",
        "\u2714",
        "\u2714",
        "\u2714",
        "\u2714 [1]",
        "Streamlit app",
        "\u2714",
        "UDF handler (scalar function)",
        "\u2714",
        "\u2714",
        "\u2714",
        "\u2714 [1]",
        "UDTF handler (table function)",
        "\u2714",
        "\u2714",
        "\u2714",
        "\u2714 [1] [2]",
        "Supported with the Java API.",
        "Scala UDTF handler written in Snowpark.",
        "To add a custom span with handler code, use the OpenTelemetry API for your handler language within the existing Snowflake telemetry\nenvironment to create a new span, add events and attributes as needed, and then close the span.",
        "Use the OpenTelemetry API to create a tracer to manage context for the span.",
        "From this tracer created from the existing Snowflake telemetry environment, you can create custom spans that use the existing\ninfrastructure in which trace data is captured by the event table.",
        "From the new tracer, create the custom span with an API that ensures that the new span is the current span.",
        "By creating the new span in the existing context managed by Snowflake, you ensure that information from the context \u2014 including\nthe trace_id and parent_span_id values \u2014 is\npassed from the Snowflake default span to other spans.",
        "When your code finishes with the custom span, it must close the span before the handler completes execution to have trace data\ncaptured by the event table.",
        "This behavior of custom spans matches the default behavior of OpenTelemetry.",
        "For information on adding a custom span with a supported language, see the following topics:",
        "Java custom span",
        "JavaScript custom span",
        "Python custom span",
        "Scala custom span",
        "Code in the following example uses the OpenTelemetry Python API to create the my.span span as the current span with\nstart_as_current_span. It then adds an event with attributes to the new span using the OpenTelemetry Python API.",
        "Event data won\u2019t be captured by the event table unless the span ends before your handler completes execution. In this example, closing the\nspan happens automatically when the with statement concludes.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}