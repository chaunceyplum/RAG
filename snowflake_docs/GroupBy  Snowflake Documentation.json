{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/groupby",
    "title": "GroupBy | Snowflake Documentation",
    "paragraphs": [
        "All supported groupby APIs",
        "Indexing, iteration",
        "DataFrameGroupBy.__iter__()",
        "GroupBy iterator.",
        "SeriesGroupBy.__iter__()",
        "GroupBy iterator.",
        "DataFrameGroupBy.get_group(name[,\u00a0obj])",
        "",
        "DataFrameGroupBy.groups",
        "Get a dictionary mapping group key to row labels.",
        "SeriesGroupBy.groups",
        "Get a dictionary mapping group key to row labels.",
        "DataFrameGroupBy.indices",
        "Get a dictionary mapping group key to row positions.",
        "SeriesGroupBy.indices",
        "Get a dictionary mapping group key to row positions.",
        "Function application",
        "DataFrameGroupBy.apply(func,\u00a0*args,\u00a0**kwargs)",
        "Apply function func group-wise and combine the results together.",
        "DataFrameGroupBy.agg([func,\u00a0engine,\u00a0...])",
        "Aggregate using one or more operations over the specified axis.",
        "SeriesGroupBy.agg([func,\u00a0engine,\u00a0engine_kwargs])",
        "Aggregate using one or more operations over the specified axis.",
        "DataFrameGroupBy.aggregate([func,\u00a0engine,\u00a0...])",
        "Aggregate using one or more operations over the specified axis.",
        "SeriesGroupBy.aggregate([func,\u00a0engine,\u00a0...])",
        "Aggregate using one or more operations over the specified axis.",
        "DataFrameGroupBy.transform(func,\u00a0*args[,\u00a0...])",
        "Call function producing a same-indexed DataFrame on each group.",
        "DataFrameGroupBy computations / descriptive stats",
        "DataFrameGroupBy.all([skipna])",
        "Return True if all values in the group are truthful, else False.",
        "DataFrameGroupBy.any([skipna])",
        "Return True if any value in the group is truthful, else False.",
        "DataFrameGroupBy.count()",
        "Compute count of group, excluding missing values.",
        "DataFrameGroupBy.cumcount([ascending])",
        "Number each item in each group from 0 to the length of that group - 1.",
        "DataFrameGroupBy.cummax([axis,\u00a0numeric_only])",
        "Cumulative max for each group.",
        "DataFrameGroupBy.cummin([axis,\u00a0numeric_only])",
        "Cumulative min for each group.",
        "DataFrameGroupBy.cumsum([axis])",
        "Cumulative sum for each group.",
        "DataFrameGroupBy.first([numeric_only,\u00a0...])",
        "",
        "DataFrameGroupBy.head([n])",
        "Return first n rows of each group.",
        "DataFrameGroupBy.idxmax([axis,\u00a0skipna,\u00a0...])",
        "Return the index of the first occurrence of maximum over requested axis.",
        "DataFrameGroupBy.idxmin([axis,\u00a0skipna,\u00a0...])",
        "Return the index of the first occurrence of minimum over requested axis.",
        "DataFrameGroupBy.last([numeric_only,\u00a0...])",
        "",
        "DataFrameGroupBy.max([numeric_only,\u00a0...])",
        "Compute max of group values.",
        "DataFrameGroupBy.mean([numeric_only,\u00a0...])",
        "Compute mean of groups, excluding missing values.",
        "DataFrameGroupBy.median([numeric_only])",
        "Compute median of groups, excluding missing values.",
        "DataFrameGroupBy.min([numeric_only,\u00a0...])",
        "Compute min of group values.",
        "DataFrameGroupBy.nunique([dropna])",
        "Return DataFrame with counts of unique elements in each position.",
        "DataFrameGroupBy.pct_change([periods,\u00a0...])",
        "Calculate pct_change of each value to previous entry in group.",
        "DataFrameGroupBy.quantile([q,\u00a0interpolation])",
        "Return group values at the given quantile, like numpy.percentile.",
        "DataFrameGroupBy.rank([method,\u00a0ascending,\u00a0...])",
        "Provide the rank of values within each group.",
        "DataFrameGroupBy.shift([periods,\u00a0freq,\u00a0...])",
        "Shift each group by periods observations.",
        "DataFrameGroupBy.size()",
        "Compute group sizes.",
        "DataFrameGroupBy.std([ddof,\u00a0engine,\u00a0...])",
        "Compute standard deviation of groups, excluding missing values.",
        "DataFrameGroupBy.sum([numeric_only,\u00a0...])",
        "Compute sum of group values.",
        "DataFrameGroupBy.tail([n])",
        "Return last n rows of each group.",
        "DataFrameGroupBy.value_counts([subset,\u00a0...])",
        "Return a Series or DataFrame containing counts of unique rows.",
        "DataFrameGroupBy.var([ddof,\u00a0engine,\u00a0...])",
        "Compute variance of groups, excluding missing values.",
        "SeriesGroupBy computations / descriptive stats",
        "SeriesGroupBy.all([skipna])",
        "Return True if all values in the group are truthful, else False.",
        "SeriesGroupBy.any([skipna])",
        "Return True if any value in the group is truthful, else False.",
        "SeriesGroupBy.count()",
        "Compute count of group, excluding missing values.",
        "SeriesGroupBy.cumcount([ascending])",
        "Number each item in each group from 0 to the length of that group - 1.",
        "SeriesGroupBy.cummax([axis,\u00a0numeric_only])",
        "Cumulative max for each group.",
        "SeriesGroupBy.cummin([axis,\u00a0numeric_only])",
        "Cumulative min for each group.",
        "SeriesGroupBy.cumsum([axis])",
        "Cumulative sum for each group.",
        "SeriesGroupBy.first([numeric_only,\u00a0...])",
        "",
        "SeriesGroupBy.head([n])",
        "Return first n rows of each group.",
        "SeriesGroupBy.idxmax([axis,\u00a0skipna,\u00a0...])",
        "Return the index of the first occurrence of maximum over requested axis.",
        "SeriesGroupBy.idxmin([axis,\u00a0skipna,\u00a0...])",
        "Return the index of the first occurrence of minimum over requested axis.",
        "SeriesGroupBy.last([numeric_only,\u00a0...])",
        "",
        "SeriesGroupBy.max([numeric_only,\u00a0min_count,\u00a0...])",
        "Compute max of group values.",
        "SeriesGroupBy.mean([numeric_only,\u00a0engine,\u00a0...])",
        "Compute mean of groups, excluding missing values.",
        "SeriesGroupBy.median([numeric_only])",
        "Compute median of groups, excluding missing values.",
        "SeriesGroupBy.min([numeric_only,\u00a0min_count,\u00a0...])",
        "Compute min of group values.",
        "SeriesGroupBy.nunique([dropna])",
        "Return DataFrame with counts of unique elements in each position.",
        "SeriesGroupBy.pct_change([periods,\u00a0...])",
        "Calculate pct_change of each value to previous entry in group.",
        "SeriesGroupBy.quantile([q,\u00a0interpolation])",
        "Return group values at the given quantile, like numpy.percentile.",
        "SeriesGroupBy.rank([method,\u00a0ascending,\u00a0...])",
        "Provide the rank of values within each group.",
        "SeriesGroupBy.shift([periods,\u00a0freq,\u00a0axis,\u00a0...])",
        "Shift each group by periods observations.",
        "SeriesGroupBy.size()",
        "Compute group sizes.",
        "SeriesGroupBy.std([ddof,\u00a0engine,\u00a0...])",
        "Compute standard deviation of groups, excluding missing values.",
        "SeriesGroupBy.sum([numeric_only,\u00a0min_count,\u00a0...])",
        "Compute sum of group values.",
        "SeriesGroupBy.tail([n])",
        "Return last n rows of each group.",
        "SeriesGroupBy.value_counts([subset,\u00a0...])",
        "Return a Series or DataFrame containing counts of unique rows.",
        "SeriesGroupBy.var([ddof,\u00a0engine,\u00a0...])",
        "Compute variance of groups, excluding missing values.",
        "Was this page helpful?"
    ]
}