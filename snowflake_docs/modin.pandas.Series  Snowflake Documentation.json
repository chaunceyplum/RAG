{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.Series",
    "title": "modin.pandas.Series | Snowflake Documentation",
    "paragraphs": [
        "Bases: BasePandasDataset",
        "Snowpark pandas representation of pandas.Series with a lazily-evaluated relational dataset.",
        "A Series is considered lazy because it encapsulates the computation or query required to produce\nthe final dataset. The computation is not performed until the datasets need to be displayed, or i/o\nmethods like to_pandas, to_snowflake are called.",
        "Internally, the underlying data are stored as Snowflake table with rows and columns.",
        "data (modin.pandas.Series, array-like, Iterable, dict, or scalar value, optional) \u2013 Contains data stored in Series. If data is a dict, argument order is\nmaintained.",
        "index (array-like or Index (1d), optional) \u2013 Values must be hashable and have the same length as data.",
        "dtype (str, np.dtype, or pandas.ExtensionDtype, optional) \u2013 Data type for the output Series. If not specified, this will be\ninferred from data.",
        "name (str, optional) \u2013 The name to give to the Series.",
        "copy (bool, default: False) \u2013 Copy input data.",
        "fastpath (bool, default: False) \u2013 pandas internal parameter.",
        "query_compiler (BaseQueryCompiler, optional) \u2013 A query compiler object to create the Series from.",
        "Examples",
        "Constructing Series from a dictionary with an Index specified",
        "The keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.",
        "Methods",
        "abs()",
        "Return a BasePandasDataset with absolute numeric value of each element.",
        "add(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Addition of series and other, element-wise (binary operator add).",
        "add_prefix(prefix[,\u00a0axis])",
        "Prefix labels with string prefix.",
        "add_suffix(suffix[,\u00a0axis])",
        "Suffix labels with string suffix.",
        "agg([func,\u00a0axis])",
        "Aggregate using one or more operations over the specified axis.",
        "aggregate([func,\u00a0axis])",
        "Aggregate using one or more operations over the specified axis.",
        "align(other[,\u00a0join,\u00a0axis,\u00a0level,\u00a0copy,\u00a0...])",
        "Align two objects on their axes with the specified join method.",
        "all([axis,\u00a0bool_only,\u00a0skipna])",
        "Return whether all elements are True, potentially over an axis.",
        "any(*[,\u00a0axis,\u00a0bool_only,\u00a0skipna])",
        "Return whether any element are True, potentially over an axis.",
        "apply(func[,\u00a0convert_dtype,\u00a0args])",
        "Invoke function on values of Series.",
        "argmax([axis,\u00a0skipna])",
        "Return int position of the largest value in the Series.",
        "argmin([axis,\u00a0skipna])",
        "Return int position of the smallest value in the Series.",
        "argsort([axis,\u00a0kind,\u00a0order])",
        "Return the integer indices that would sort the Series values.",
        "array()",
        "Return the ExtensionArray of the data backing this Series or Index.",
        "asfreq(freq[,\u00a0method,\u00a0how,\u00a0normalize,\u00a0...])",
        "Convert time series to specified frequency.",
        "asof(where[,\u00a0subset])",
        "Return the last row(s) without any NaNs before where.",
        "astype(dtype[,\u00a0copy,\u00a0errors])",
        "Cast a pandas object to a specified dtype dtype.",
        "at_time(time[,\u00a0asof,\u00a0axis])",
        "Select values at particular time of day (e.g., 9:30AM).",
        "autocorr([lag])",
        "Compute the lag-N autocorrelation.",
        "backfill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0downcast])",
        "Synonym for DataFrame.fillna with method='bfill'.",
        "between(left,\u00a0right[,\u00a0inclusive])",
        "Return boolean Series equivalent to left <= series <= right.",
        "between_time(start_time,\u00a0end_time[,\u00a0...])",
        "Select values between particular times of the day (e.g., 9:00-9:30 AM).",
        "bfill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0limit_area,\u00a0...])",
        "Synonym for DataFrame.fillna with method='bfill'.",
        "bool()",
        "Return the bool of a single element BasePandasDataset.",
        "cache_result([inplace])",
        "Persists the current Snowpark pandas Series to a temporary table to improve the latency of subsequent operations.",
        "case_when(caselist)",
        "Replace values where the conditions are True.",
        "clip([lower,\u00a0upper,\u00a0axis,\u00a0inplace])",
        "Trim values at input threshold(s).",
        "combine(other,\u00a0func[,\u00a0fill_value])",
        "Perform combination of BasePandasDataset-s according to func.",
        "combine_first(other)",
        "Update null elements with value in the same location in other.",
        "compare(other[,\u00a0align_axis,\u00a0keep_shape,\u00a0...])",
        "Compare to another Series and show the differences.",
        "convert_dtypes([infer_objects,\u00a0...])",
        "Convert columns to best possible dtypes using dtypes supporting pd.NA.",
        "copy([deep])",
        "Make a copy of this object's indices and data.",
        "corr(other[,\u00a0method,\u00a0min_periods])",
        "Compute correlation with other Series, excluding missing values.",
        "count()",
        "Return number of non-NA/null observations in the Series.",
        "cov(other[,\u00a0min_periods,\u00a0ddof])",
        "Compute covariance with Series, excluding missing values.",
        "cummax([axis,\u00a0skipna])",
        "Return cumulative maximum over a BasePandasDataset axis.",
        "cummin([axis,\u00a0skipna])",
        "Return cumulative minimum over a BasePandasDataset axis.",
        "cumprod([axis,\u00a0skipna])",
        "Return cumulative product over a BasePandasDataset axis.",
        "cumsum([axis,\u00a0skipna])",
        "Return cumulative sum over a BasePandasDataset axis.",
        "describe([percentiles,\u00a0include,\u00a0exclude])",
        "Generate descriptive statistics.",
        "diff([periods])",
        "First discrete difference of element.",
        "div(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Floating division of series and other, element-wise (binary operator truediv).",
        "divide(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Floating division of series and other, element-wise (binary operator truediv).",
        "divmod(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Integer division and modulo of series and other, element-wise (binary operator divmod).",
        "dot(other)",
        "Compute the dot product between the Series and the columns of other.",
        "drop([labels,\u00a0axis,\u00a0index,\u00a0columns,\u00a0level,\u00a0...])",
        "Return Series with specified index labels removed.",
        "drop_duplicates(*[,\u00a0keep,\u00a0inplace,\u00a0ignore_index])",
        "Return Series with duplicate values removed.",
        "droplevel(level[,\u00a0axis])",
        "Return BasePandasDataset with requested index / column level(s) removed.",
        "dropna(*[,\u00a0axis,\u00a0inplace,\u00a0how])",
        "Return a new Series with missing values removed.",
        "duplicated([keep])",
        "Indicate duplicate Series values.",
        "eq(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Equal to of series and other, element-wise (binary operator eq).",
        "equals(other)",
        "Test whether two series contain the same elements.",
        "ewm([com,\u00a0span,\u00a0halflife,\u00a0alpha,\u00a0...])",
        "Provide exponentially weighted (EW) calculations.",
        "expanding([min_periods,\u00a0axis,\u00a0method])",
        "Provide expanding window calculations.",
        "explode([ignore_index])",
        "Transform each element of a list-like to a row.",
        "factorize([sort,\u00a0na_sentinel,\u00a0use_na_sentinel])",
        "Encode the object as an enumerated type or categorical variable.",
        "ffill(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0limit_area,\u00a0...])",
        "Synonym for DataFrame.fillna() with method='ffill'.",
        "fillna([value,\u00a0method,\u00a0axis,\u00a0inplace,\u00a0...])",
        "Fill NA/NaN values using the specified method.",
        "filter([items,\u00a0like,\u00a0regex,\u00a0axis])",
        "Subset the BasePandasDataset rows or columns according to the specified index labels.",
        "first(offset)",
        "Select initial periods of time series data based on a date offset.",
        "first_valid_index()",
        "Return index for first non-NA value or None, if no non-NA value is found.",
        "floordiv(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Integer division of series and other, element-wise (binary operator floordiv).",
        "ge(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Greater than or equal to of series and other, element-wise (binary operator ge).",
        "get(key[,\u00a0default])",
        "Get item from object for given key (ex: DataFrame column).",
        "groupby([by,\u00a0axis,\u00a0level,\u00a0as_index,\u00a0sort,\u00a0...])",
        "Group Series using a mapper or by a Series of columns.",
        "gt(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Greater than of series and other, element-wise (binary operator gt).",
        "head([n])",
        "Return the first n rows.",
        "hist([by,\u00a0ax,\u00a0grid,\u00a0xlabelsize,\u00a0xrot,\u00a0...])",
        "Draw histogram of the input series using matplotlib.",
        "idxmax([axis,\u00a0skipna])",
        "Return the row label of the maximum value.",
        "idxmin([axis,\u00a0skipna])",
        "Return the row label of the minimum value.",
        "infer_objects([copy])",
        "Attempt to infer better dtypes for object columns.",
        "info([verbose,\u00a0buf,\u00a0max_cols,\u00a0memory_usage,\u00a0...])",
        "",
        "interpolate([method,\u00a0axis,\u00a0limit,\u00a0inplace,\u00a0...])",
        "Fill NaN values using an interpolation method.",
        "isin(values)",
        "Whether elements in BasePandasDataset are contained in values.",
        "isna()",
        "Detect missing values.",
        "isnull()",
        "Series.isnull is an alias for Series.isna.",
        "item()",
        "Return the first element of the underlying data as a Python scalar.",
        "items()",
        "Lazily iterate over (index, value) tuples.",
        "keys()",
        "Return alias for index.",
        "kurt([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return unbiased kurtosis over requested axis.",
        "kurtosis([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return unbiased kurtosis over requested axis.",
        "last(offset)",
        "Select final periods of time series data based on a date offset.",
        "last_valid_index()",
        "Return index for last non-NA value or None, if no non-NA value is found.",
        "le(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Less than or equal to of series and other, element-wise (binary operator le).",
        "lt(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Less than of series and other, element-wise (binary operator lt).",
        "map(arg[,\u00a0na_action])",
        "Map values of Series according to an input mapping or function.",
        "mask(cond[,\u00a0other,\u00a0inplace,\u00a0axis,\u00a0level])",
        "Replace values where the condition is True.",
        "max([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the maximum of the values over the requested axis.",
        "mean([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the mean of the values over the requested axis.",
        "median([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the median of the values over the requested axis.",
        "memory_usage([index,\u00a0deep])",
        "Return the memory usage of the Series.",
        "min([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return the minimum of the values over the requested axis.",
        "mod(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Modulo of series and other, element-wise (binary operator mod).",
        "mode([dropna])",
        "Return the mode(s) of the Series.",
        "mul(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Get multiplication of BasePandasDataset and other, element-wise (binary operator mul).",
        "multiply(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Get multiplication of BasePandasDataset and other, element-wise (binary operator mul).",
        "nbytes()",
        "Return the number of bytes in the underlying data.",
        "ne(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Not equal to of series and other, element-wise (binary operator ne).",
        "nlargest([n,\u00a0keep])",
        "Return the largest n elements.",
        "notna()",
        "Detect non-missing values for an array-like object.",
        "notnull()",
        "Detect non-missing values for an array-like object.",
        "nsmallest([n,\u00a0keep])",
        "Return the smallest n elements.",
        "nunique([dropna])",
        "Return number of unique elements in the series.",
        "pad(*[,\u00a0axis,\u00a0inplace,\u00a0limit,\u00a0downcast])",
        "Synonym for DataFrame.fillna() with method='ffill'.",
        "pct_change([periods,\u00a0fill_method,\u00a0limit,\u00a0freq])",
        "Fractional change between the current and a prior element.",
        "pipe(func,\u00a0*args,\u00a0**kwargs)",
        "Apply chainable functions that expect BasePandasDataset.",
        "pop(item)",
        "Return item and drop from frame.",
        "pow(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Exponential power of series and other, element-wise (binary operator pow).",
        "prod([axis,\u00a0skipna,\u00a0level,\u00a0numeric_only,\u00a0...])",
        "",
        "product([axis,\u00a0skipna,\u00a0numeric_only,\u00a0min_count])",
        "",
        "quantile([q,\u00a0interpolation])",
        "Return value at the given quantile.",
        "radd(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Addition of series and other, element-wise (binary operator radd).",
        "rank([axis,\u00a0method,\u00a0numeric_only,\u00a0...])",
        "Compute numerical data ranks (1 through n) along axis.",
        "ravel([order])",
        "Return the flattened underlying data as an ndarray.",
        "rdiv(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Floating division of series and other, element-wise (binary operator rtruediv).",
        "rdivmod(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return integer division and modulo of series and other, element-wise (binary operator rdivmod).",
        "reindex([index,\u00a0axis,\u00a0method,\u00a0copy,\u00a0level,\u00a0...])",
        "Conform Series to new index with optional filling logic.",
        "reindex_like(other[,\u00a0method,\u00a0copy,\u00a0limit,\u00a0...])",
        "Return an object with matching indices as other object.",
        "rename([index,\u00a0axis,\u00a0copy,\u00a0inplace,\u00a0level,\u00a0...])",
        "Alter Series index labels or name.",
        "rename_axis([mapper,\u00a0index,\u00a0axis,\u00a0copy,\u00a0inplace])",
        "Set the name of the axis for the index or columns.",
        "reorder_levels(order)",
        "Rearrange index levels using input order.",
        "repeat(repeats[,\u00a0axis])",
        "Repeat elements of a Series.",
        "replace([to_replace,\u00a0value,\u00a0inplace,\u00a0limit,\u00a0...])",
        "Replace values given in to_replace with value.",
        "resample(rule[,\u00a0axis,\u00a0closed,\u00a0label,\u00a0...])",
        "Resample time-series data.",
        "reset_index([level,\u00a0drop,\u00a0name,\u00a0inplace,\u00a0...])",
        "Generate a new DataFrame or Series with the index reset.",
        "rfloordiv(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Integer division of series and other, element-wise (binary operator rfloordiv).",
        "rmod(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Modulo of series and other, element-wise (binary operator rmod).",
        "rmul(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Multiplication of series and other, element-wise (binary operator rmul).",
        "rolling(window[,\u00a0min_periods,\u00a0center,\u00a0...])",
        "Provide rolling window calculations.",
        "round([decimals])",
        "Round a BasePandasDataset to a variable number of decimal places.",
        "rpow(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Exponential power of series and other, element-wise (binary operator rpow).",
        "rsub(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Subtraction of series and other, element-wise (binary operator rsub).",
        "rtruediv(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Floating division of series and other, element-wise (binary operator rtruediv).",
        "sample([n,\u00a0frac,\u00a0replace,\u00a0weights,\u00a0...])",
        "Return a random sample of items from an axis of object.",
        "searchsorted(value[,\u00a0side,\u00a0sorter])",
        "Find indices where elements should be inserted to maintain order.",
        "sem([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return unbiased standard error of the mean over requested axis.",
        "set_axis(labels,\u00a0*[,\u00a0axis,\u00a0copy])",
        "Assign desired index to given axis.",
        "set_flags(*[,\u00a0copy,\u00a0allows_duplicate_labels])",
        "Return a new BasePandasDataset with updated flags.",
        "shift([periods,\u00a0freq,\u00a0axis,\u00a0fill_value,\u00a0suffix])",
        "Shift data by desired number of periods and replace columns with fill_value (default: None).",
        "skew([axis,\u00a0skipna,\u00a0numeric_only])",
        "Return unbiased skew, normalized over n-1",
        "sort_index(*[,\u00a0axis,\u00a0level,\u00a0ascending,\u00a0...])",
        "Sort object by labels (along an axis).",
        "sort_values([axis,\u00a0ascending,\u00a0inplace,\u00a0...])",
        "Sort by the values.",
        "squeeze([axis])",
        "Squeeze 1 dimensional axis objects into scalars.",
        "std([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return sample standard deviation over requested axis.",
        "sub(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Subtraction of series and other, element-wise (binary operator sub).",
        "subtract(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Subtraction of series and other, element-wise (binary operator sub).",
        "sum([axis,\u00a0skipna,\u00a0numeric_only,\u00a0min_count])",
        "Return the sum of the values over the requested axis.",
        "swapaxes(axis1,\u00a0axis2[,\u00a0copy])",
        "Interchange axes and swap values axes appropriately.",
        "swaplevel([i,\u00a0j,\u00a0copy])",
        "Swap levels i and j in a MultiIndex.",
        "tail([n])",
        "Return the last n rows.",
        "take(indices[,\u00a0axis])",
        "Return the elements in the given positional indices along an axis.",
        "to_clipboard([excel,\u00a0sep])",
        "Copy object to the system clipboard.",
        "to_csv([path_or_buf,\u00a0sep,\u00a0na_rep,\u00a0...])",
        "Write object to a comma-separated values (csv) file.",
        "to_dict([into])",
        "Convert Series to {label -> value} dict or dict-like object.",
        "to_excel(excel_writer[,\u00a0sheet_name,\u00a0na_rep,\u00a0...])",
        "Write object to an Excel sheet.",
        "to_frame([name])",
        "Convert Series to {label -> value} dict or dict-like object.",
        "to_hdf(path_or_buf,\u00a0key[,\u00a0format])",
        "Write the contained data to an HDF5 file using HDFStore.",
        "to_json([path_or_buf,\u00a0orient,\u00a0date_format,\u00a0...])",
        "Convert the object to a JSON string.",
        "to_latex([buf,\u00a0columns,\u00a0col_space,\u00a0header,\u00a0...])",
        "Render object to a LaTeX tabular, longtable, or nested table.",
        "to_list()",
        "Return a list of the values.",
        "to_markdown([buf,\u00a0mode,\u00a0index,\u00a0storage_options])",
        "Print BasePandasDataset in Markdown-friendly format.",
        "to_numpy([dtype,\u00a0copy,\u00a0na_value])",
        "A NumPy ndarray representing the values in this Series or Index.",
        "to_pandas(*[,\u00a0statement_params])",
        "Convert Snowpark pandas Series to pandas.Series",
        "to_period([freq,\u00a0copy])",
        "Cast to PeriodArray/Index at a particular frequency.",
        "to_pickle(path[,\u00a0compression,\u00a0protocol,\u00a0...])",
        "Pickle (serialize) object to file.",
        "to_snowflake(name[,\u00a0if_exists,\u00a0index,\u00a0...])",
        "Save the Snowpark pandas Series as a Snowflake table.",
        "to_snowpark([index,\u00a0index_label])",
        "Convert the Snowpark pandas Series to a Snowpark DataFrame.",
        "to_sql(name,\u00a0con[,\u00a0schema,\u00a0if_exists,\u00a0...])",
        "Write records stored in a BasePandasDataset to a SQL database.",
        "to_string([buf,\u00a0na_rep,\u00a0float_format,\u00a0...])",
        "Render a string representation of the Series.",
        "to_timestamp([freq,\u00a0how,\u00a0copy])",
        "Cast to DatetimeIndex of Timestamps, at beginning of period.",
        "to_xarray()",
        "Return an xarray object from the BasePandasDataset.",
        "tolist()",
        "Return a list of the values.",
        "transform(func[,\u00a0axis])",
        "Call func on self producing a BasePandasDataset with the same axis shape as self.",
        "transpose(*args,\u00a0**kwargs)",
        "Return the transpose, which is by definition self.",
        "truediv(other[,\u00a0level,\u00a0fill_value,\u00a0axis])",
        "Return Floating division of series and other, element-wise (binary operator truediv).",
        "truncate([before,\u00a0after,\u00a0axis,\u00a0copy])",
        "Truncate a Series before and after some index value.",
        "tz_convert(tz[,\u00a0axis,\u00a0level,\u00a0copy])",
        "Convert tz-aware axis to target time zone.",
        "tz_localize(tz[,\u00a0axis,\u00a0level,\u00a0copy,\u00a0...])",
        "Localize tz-naive index of a BasePandasDataset to target time zone.",
        "unique()",
        "Return unique values of Series object.",
        "unstack([level,\u00a0fill_value,\u00a0sort])",
        "Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.",
        "update(other)",
        "Modify Series in place using values from passed Series.",
        "value_counts([normalize,\u00a0sort,\u00a0ascending,\u00a0...])",
        "Return a Series containing counts of unique values.",
        "var([axis,\u00a0skipna,\u00a0ddof,\u00a0numeric_only])",
        "Return unbiased variance over requested axis.",
        "view([dtype])",
        "Create a new view of the Series.",
        "where(cond[,\u00a0other,\u00a0inplace,\u00a0axis,\u00a0level])",
        "Replace values where the condition is False.",
        "xs(key[,\u00a0axis,\u00a0level,\u00a0drop_level])",
        "Return cross-section from the Series/DataFrame.",
        "Attributes",
        "T",
        "Return the transpose, which is by definition self.",
        "at",
        "Get a single value for a row/column label pair.",
        "attrs",
        "Return dictionary of global attributes of this dataset.",
        "axes",
        "Return a list of the row axis labels.",
        "cat",
        "Accessor object for categorical properties of the Series values.",
        "dtype",
        "Return the dtype object of the underlying data.",
        "dtypes",
        "Return the dtype object of the underlying data.",
        "empty",
        "Indicator whether the Series is empty.",
        "flags",
        "",
        "hasnans",
        "Return True if there are any NaNs.",
        "iat",
        "Get a single value for a row/column pair by integer position.",
        "iloc",
        "Purely integer-location based indexing for selection by position.",
        "index",
        "Get the index for this Series/DataFrame.",
        "is_monotonic_decreasing",
        "Return boolean if values in the object are monotonically decreasing.",
        "is_monotonic_increasing",
        "Return boolean if values in the object are monotonically increasing.",
        "is_unique",
        "Return True if values in the Series are unique.",
        "list",
        "",
        "loc",
        "Access a group of rows and columns by label(s) or a boolean array.",
        "name",
        "Return the name of the Series.",
        "ndim",
        "Number of dimensions of the underlying data, by definition 1.",
        "plot",
        "Make plot of Series.",
        "shape",
        "Return a tuple of the shape of the underlying data.",
        "size",
        "Return an int representing the number of elements in this object.",
        "sparse",
        "",
        "struct",
        "",
        "values",
        "Return a NumPy representation of the dataset.",
        "Was this page helpful?"
    ]
}