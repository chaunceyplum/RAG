{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-integrations",
    "title": "Managing Snowflake integrations with Python | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "You can use Python to manage different types of integrations in Snowflake.",
        "The examples in this topic assume that you\u2019ve added code to connect with Snowflake and to create a Root object from which to use the\nSnowflake Python APIs.",
        "For example, the following code uses connection parameters defined in a configuration file to create a connection to Snowflake:",
        "Using the resulting Session object, the code creates a Root object to use the API\u2019s types and methods. For more information,\nsee Connect to Snowflake with the Snowflake Python APIs.",
        "Minimum API version required",
        "0.13.0",
        "You can manage catalog integrations for Apache Iceberg\u2122 tables in your account. A catalog integration is a named, account-level Snowflake\nobject that stores information about how your Iceberg table metadata is organized for scenarios when you don\u2019t use Snowflake as the Iceberg\ncatalog, or when you want to integrate with Snowflake Open Catalog. For more information, see the Catalog integration\nsection in Apache Iceberg\u2122 tables.",
        "Note",
        "ALTER CATALOG INTEGRATION is currently not supported.",
        "The Snowflake Python APIs represents catalog integrations with two separate types:",
        "CatalogIntegration: Exposes a catalog integration\u2019s properties such as its name, table format, and catalog settings.",
        "CatalogIntegrationResource: Exposes methods you can use to fetch a corresponding CatalogIntegration object and drop the\ncatalog integration.",
        "To create a catalog integration, first create a CatalogIntegration object, and then create a CatalogIntegrationCollection\nobject from the API Root object. Using CatalogIntegrationCollection.create, add the new catalog integration to Snowflake.",
        "You can create catalog integrations in your account for the following types of external Iceberg catalogs.",
        "Code in the following example creates a CatalogIntegration object that represents a catalog integration named\nmy_catalog_integration for Iceberg tables that use AWS Glue with the specified properties:",
        "Code in the following example creates a CatalogIntegration object that represents a catalog integration named\nmy_catalog_integration for Iceberg tables that use an object store:",
        "Code in the following example creates a CatalogIntegration object that represents a catalog integration named\nmy_catalog_integration for Iceberg tables that use Open Catalog with the specified properties:",
        "You can get information about a catalog integration by calling the CatalogIntegrationResource.fetch method, which returns a\nCatalogIntegration object.",
        "Code in the following example gets information about a catalog integration named my_catalog_integration:",
        "You can list catalog integrations using the CatalogIntegrationCollection.iter method, which returns a PagedIter iterator of\nCatalogIntegration objects.",
        "Code in the following example lists catalog integrations whose name starts with my, and prints the name of each:",
        "You can drop a catalog integration with a CatalogIntegrationResource object.",
        "Code in the following example gets the my_catalog_integration catalog integration resource object and then drops the catalog\nintegration.",
        "Minimum API version required",
        "0.13.0",
        "You can manage notification integrations, which are Snowflake objects that provide an interface between Snowflake and third-party messaging\nservices such as third-party cloud message queuing services, email services, and webhooks. For more information, see\nNotifications in Snowflake.",
        "Note",
        "ALTER NOTIFICATION INTEGRATION is currently not supported.",
        "The Snowflake Python APIs represents notification integrations with two separate types:",
        "NotificationIntegration: Exposes a notification integration\u2019s properties such as its name and notification hook settings.",
        "NotificationIntegrationResource: Exposes methods you can use to fetch a corresponding NotificationIntegration object and\ndrop the notification integration.",
        "To create a notification integration, first create a NotificationIntegration object, and then create a\nNotificationIntegrationCollection object from the API Root object. Using NotificationIntegrationCollection.create,\nadd the new notification integration to Snowflake.",
        "You can create a notification integration for the following types of messaging services.",
        "Code in the following example creates a NotificationIntegration object that represents a notification integration named\nmy_email_notification_integration with the specified NotificationEmail properties:",
        "Code in the following example creates a NotificationIntegration object that represents a notification integration named\nmy_webhook_notification_integration with the specified NotificationWebhook properties:",
        "Code in the following example creates a NotificationIntegration object that represents a notification integration named\nmy_aws_sns_outbound_notification_integration with the specified NotificationQueueAwsSnsOutbound properties:",
        "Code in the following example creates a NotificationIntegration object that represents a notification integration named\nmy_azure_outbound_notification_integration with the specified NotificationQueueAzureEventGridOutbound properties:",
        "Code in the following example creates a NotificationIntegration object that represents a notification integration named\nmy_azure_inbound_notification_integration with the specified NotificationQueueAzureEventGridInbound properties:",
        "Code in the following example creates a NotificationIntegration object that represents a notification integration named\nmy_gcp_outbound_notification_integration with the specified NotificationQueueGcpPubsubOutbound properties:",
        "Code in the following example creates a NotificationIntegration object that represents a notification integration named\nmy_gcp_inbound_notification_integration with the specified NotificationQueueGcpPubsubInbound properties:",
        "You can get information about a notification integration by calling the NotificationIntegrationResource.fetch method, which returns\na NotificationIntegration object.",
        "Code in the following example gets information about a notification integration named my_notification_integration:",
        "You can list notification integrations using the NotificationIntegrationCollection.iter method, which returns a PagedIter\niterator of NotificationIntegration objects.",
        "Code in the following example lists notification integrations whose name starts with my, and prints the name of each:",
        "You can drop a notification integration with a NotificationIntegrationResource object.",
        "Code in the following example gets the my_notification_integration notification integration resource object and then drops the\nnotification integration.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}