{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/python/creating-udafs",
    "title": "Creating User-Defined Aggregate Functions (UDAFs) for DataFrames in Python | Snowflake Documentation",
    "paragraphs": [
        "You can use Snowpark Python APIs to create and call user-defined aggregate functions (UDAFs). A UDAF takes one or more rows as input and\nproduces a single row of output. It operates on values across multiple rows to perform mathematical calculations such as sum, average,\ncounting, finding minimum or maximum values, standard deviation, and estimation, as well as some non-mathematical operations.",
        "To create and register a UDAF with Snowpark, you need to:",
        "Implement a UDAF handler.",
        "The handler contains the UDAF\u2019s logic. A UDAF handler must implement functions that Snowflake will invoke at runtime when the UDAF is\ncalled. For more information, see Implementing a handler.",
        "Register the UDAF and its handler in the Snowflake database.",
        "Once you\u2019ve registered the UDAF, you can call it from SQL or by using the Snowpark API. You can use the Snowpark API to register the\nUDAF and its handler. For more information about registering, see Registering a UDAF.",
        "You can also create your own UDAFs using SQL as described in Python user-defined aggregate functions.",
        "As described in Interface for aggregate function handler, a UDAF handler class must implement methods that Snowflake invokes\nwhen the UDAF is called. You can use the class you write as a handler whether you\u2019re registering the UDAF with the Snowpark API or\ncreating it with SQL using the CREATE FUNCTION statement.",
        "Your UDAF handler class implements methods listed in the following table, which Snowflake invokes at run time. See\nexamples in this topic.",
        "Method",
        "Requirement",
        "Description",
        "__init__",
        "Required",
        "Initializes the internal state of an aggregate.",
        "aggregate_state",
        "Required",
        "Returns the internal state of an aggregate.",
        "The method must have a @property decorator.",
        "An aggregate state object can be any Python data type serializable by the\nPython pickle library.",
        "For simple aggregate states, use a primitive Python data type. For more complex aggregate states, use\nPython data classes.",
        "accumulate",
        "Required",
        "Accumulates the state of the aggregate based on the new input row.",
        "merge",
        "Required",
        "Combines two intermediate aggregated states.",
        "finish",
        "Required",
        "Produces the final result based on the aggregated state.",
        "Once you\u2019ve implemented a UDAF handler, you can use the Snowpark API to register the UDAF on the Snowflake database. Registering the UDAF\ncreates the UDAF so that it can be called.",
        "You can register the UDAF as a named or anonymous function, as you can for a scalar UDF. For related information about registering a scalar\nUDF, see Creating an Anonymous UDF and Creating and Registering a Named UDF. When you register a UDAF,\nyou specify parameter values that Snowflake needs to create the UDAF.",
        "You can register the function using the following functions and methods:",
        "Use the register method or udaf function, specifying the name of your handler class, along with arguments to define the\nfunction. You can also use udaf as a @udaf decorator on the handler class.",
        "For reference information on these, see the following:",
        "snowflake.snowpark.functions.udaf",
        "snowflake.snowpark.udaf.UDAFRegistration.register",
        "Use the register_from_file function, pointing to a Python file or zip file containing Python source code.",
        "For the function reference, see snowflake.snowpark.udaf.UDAFRegistration.register_from_file.",
        "Python code in the following handler example supports a sum_int UDAF that receives a single integer argument, adds the value\nacross rows and returns the result.",
        "Python code in the following example invokes the sum_int UDAF with a DataFrame.",
        "Python code in the following handler example supports a sum_int UDAF that receives two integer arguments, adds the argument\nvalues together across rows and returns the result.",
        "Python code in the following example invokes the sum_int UDAF with a DataFrame.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}