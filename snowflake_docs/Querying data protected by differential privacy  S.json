{
    "url": "https://docs.snowflake.com/en/user-guide/diff-privacy/differential-privacy-analyst",
    "title": "Querying data protected by differential privacy | Snowflake Documentation",
    "paragraphs": [
        "Enterprise Edition Feature",
        "This feature requires Enterprise Edition (or higher). To inquire about upgrading, please contact Snowflake Support.",
        "This topic helps an analyst run queries against data protected by differential privacy (that is, privacy-protected tables and views), and\nunderstand and adjust the results returned by the queries.",
        "To execute a query against a privacy-protected table, a user must have the SELECT privilege on the table.",
        "Limitations",
        "Differential privacy supports a subset of Snowflake data types, operators, query syntax, and functions. For a list of supported SQL that\nyou can use in a query, see Differential privacy SQL reference.",
        "Queries against privacy-protected tables take longer because Snowflake must run additional computations to determine how much\nnoise to add. For basic queries, this latency is at least 7 seconds. Complex\nqueries, such as the following, can take much longer:",
        "Queries with many joins and sub-queries.",
        "Queries that output multiple rows in the result, for example, when using GROUP BY clauses that result in hundreds or thousands of\ngroups.",
        "In tables protected by differential privacy, fields in the outermost SELECT clause can only have aggregation, GROUP BY, or\nDP_INTERVAL_LOW/HIGH applied. Other actions, such as math and concatenation, are not allowed. Examples:",
        "SELECT key, COUNT(*) AS 'c', DP_INTERVAL_LOW('c') FROM T GROUP BY key",
        "Succeeds: No unsupported actions taken on key, COUNT(*), or c.",
        "SELECT key, 1 + COUNT(*) AS 'c', DP_INTERVAL_LOW('c') FROM T GROUP BY key",
        "Fails: 1 + COUNT(*) is specified on a field in the outermost SELECT clause.",
        "SELECT key, AVG(1 + x) AS 'avg', DP_INTERVAL_LO('avg') FROM T GROUP BY key",
        "Succeeds: AVG, a permitted aggregation, happens after 1 + x in the outermost SELECT clause.",
        "SELECT key, COUNT(x) AS 'c', DP_INTERVAL_LOW('c') FROM (SELECT key, 1 + income AS x FROM table) GROUP BY key",
        "Succeeds: 1 + income is applied in a nested SELECT clause, which is allowed.",
        "This section discusses the basic components of a query that will succeed when run against a privacy-protected table. It includes:",
        "Aggregating data",
        "Using joins",
        "Querying data protected by entity-level privacy",
        "All queries against a privacy-protected table must aggregate results rather than retrieve individual records. Not every part of a query\nneeds to use an aggregation function as long as the final result is aggregated.",
        "With the exception of a COUNT function, a query cannot aggregate a column unless the column has a\nprivacy domain.",
        "For a list of supported aggregations, see Aggregate functions.",
        "The following sections provide guidelines for using joins in a differentially private query:",
        "Join operators",
        "Supported joins",
        "Using entity keys in joins",
        "Data types and privacy domains",
        "Uniqueness requirement",
        "To learn about the implications that joining two privacy-protected tables has on privacy domains, see\nPrivacy domains and joins.",
        "Each join must be an equi join that uses a single operator. For example, t1.c1 == t2.c1 is supported, but col1 > col2 and\ncol1 + 10 = col2 are not. Unconditioned joins are not supported.",
        "Joins must use the JOIN operator. The WHERE syntax for joins is not supported. For more information about join\nsyntax, see Implementing Joins.",
        "Joins in a differentially private query must be one of the following:",
        "INNER",
        "{ LEFT | RIGHT | FULL } OUTER",
        "NATURAL",
        "Both sides of the join must have the same query pattern. For example, the following joins are supported:",
        "Both sides are identifiers",
        "Both sides are subqueries",
        "Joining an identifier with a subquery is currently not supported.",
        "For information about the supported query syntax related to joins, see Query syntax.",
        "When working with tables protected with entity-level privacy, you can minimize the amount\nof noise by including the entity key column as part of the join key, especially if it doesn\u2019t semantically change the query.",
        "For example, consider the following tables where the entity is customers:",
        "Table",
        "Description",
        "customers",
        "Customer directory, where each row is a customer and has a customer_id.",
        "transactions",
        "Customer transactions, where each customer can have multiple transactions.",
        "transaction_lines",
        "Unique items that were purchased in a transaction. There can be multiple rows in a single transaction.",
        "If they are following best practices, the data provider has structured the data so that each of these tables has the entity key\ncustomer_id. For this data schema, each transaction line can only belong to one transaction, and each transaction can only belong to\none customer. This relationship is not evident from the data itself, so without additional information the amount of noise added for\ndifferential privacy will be higher than it needs to be.",
        "You can minimize the amount of noise by including the entity key customer_id as part of the join key, even if it is redundant. For\nexample, joining the table transactions with transaction_lines typically only requires the join key transaction_id. However,\njoining on both transaction_id and customer_id will result in a lower amount of noise.",
        "When joining two tables, the data types of the join key columns from either side must be the same. For differential privacy, the data type\nof a column includes whether or not it has a privacy domain.",
        "For example, if you had a privacy-protected table transactions and an unprotected table product_lookup, and you wanted to join them\non product_id, the product_id column in both tables must be the same data type (for example, a string) and must each have a privacy\ndomain.",
        "To meet this requirement, the administrator for the analyst might need to define a privacy domain just like the data provider defines them.\nFor information on how to set a privacy domain for a table, see Setting a privacy domain.",
        "Joins can potentially duplicate rows of data, which can cause the amount of noise added to a query result to become unbounded. To ensure\nthat privacy-protected data is not duplicated in a join, the join key (that is, the columns on which the tables are joined) for\nprivacy-protected tables must match only one record in the other table. This means that when joining with a privacy-protected table, the\njoin key on the opposite side must be de-duplicated.",
        "Important",
        "The uniqueness requirement for joins doesn\u2019t always apply to queries against tables that are protected by entity-level privacy. For entity-level privacy, queries must de-duplicate on the entity key before the aggregation.\nAs long as this is done after a join but before the aggregation, the join doesn\u2019t need to be on de-duplicated data. For more\ninformation about meeting these requirements, see Querying data protected by entity-level privacy.",
        "To satisfy the uniqueness requirement for joins, the query can use a GROUP BY on a subset of the join columns to group duplicate rows into\none result.",
        "For example, suppose the patients table is protected by differential privacy and the geo_lookup table is not. The analyst wants to\njoin these two tables on zip_code so that they can filter the patients table on State. In order to ensure that the records in\nthe privacy-protected patients table are not duplicated, the query must de-duplicate the zip_code table on the join key. This must\nbe done explicitly even if the geo_lookup table is already unique on zip_code. This ensures that Snowflake can correctly account\nfor privacy.",
        "Most data providers use an entity key to implement entity-level privacy when configuring\ndifferential privacy. When a table is protected by entity-level privacy, Snowflake does not allow aggregates on fields if there might be an\nunbounded number of rows per entity. This means queries must meet the following requirements:",
        "At some point in the query, the privacy-protected table must be deduplicated on the entity key. Operations that can be used to deduplicate\ndata are:",
        "COUNT( DISTINCT <entity_key_column> )",
        "GROUP BY <entity_key_column>",
        "UNION (but not UNION ALL) when only the entity key is projected.",
        "If a join uses a join key other than the entity key column, that join cannot occur between the deduplication and the final SELECT clause\nwith aggregation.",
        "Note",
        "If the data provider implemented row-level privacy, the deduplication requirement for joins is different. For more information about these\nrequirements, see Uniqueness requirement.",
        "To help illustrate the requirements for entity-level privacy, suppose you have a privacy-protected table patients with the entity key\ncolumn patient_id. You also have a non-sensitive, unprotected table geo_lookup. The following examples show a query that fails\nfollowed by a re-written version that succeeds.",
        "The following query fails because it doesn\u2019t meet the deduplication requirement. Even though the table patients might already be\nunique on patient_id, the query fails because it does not explicitly deduplicate.",
        "To re-write the query so it succeeds, include a distinct count on the entity key column in order to explicitly deduplicate on the entity\nkey. For example:",
        "The following query fails even though it is using a GROUP BY clause to meet the deduplication requirement. It fails because the table is\nbeing joined with another table using a column that is not the entity key column.",
        "To re-write the query so it succeeds, use the GROUP BY clause after the join. The join cannot occur in between the deduplication and\nthe SELECT clause with aggregation.",
        "The deduplication requirement for entity-level differential privacy does not prevent you from executing transaction-level queries. However,\nyou must first group the data to the entity-level, and then aggregate on those groups.",
        "For example, suppose you have a table doctor_visits and that the data provider has defined an entity key patient_id to implement\nentity-level privacy. A transaction-level query might be: \u201cHow many doctor visits weren\u2019t for a regular checkup?\u201d The following is an\nexample of how to write this query:",
        "The subquery groups by patient_id to deduplicate the data. The aggregate column num_visits captures the number of visits per\npatient that were not for a regular checkup. The query then aggregates again on that per-patient column to get the total number of visits.\nNote that the WHERE clause on the outer query is required in order to\nspecify a privacy domain on the data.",
        "Note",
        "While not a requirement, a best practice when joining tables protected by entity-level differential privacy is to include the entity key\ncolumn as part of the join key (if it doesn\u2019t semantically change the query). For more information, see\nUsing entity keys in joins.",
        "Queries against a privacy-protected table don\u2019t return the exact value of an aggregation. Differential privacy introduces\nnoise into the result so it becomes an approximation of the actual value. The returned value\ndiffers enough from the actual value to conceal whether an individual\u2019s data is included in the aggregation. This applies to all queries\nexcept for a query that returns the total number of rows in the privacy-protected table, for example, SELECT COUNT(*) FROM t.",
        "An analyst needs to be able to determine whether the noise introduced into the result has decreased the usefulness of the query. Snowflake\nuses a noise interval to help analysts interpret the results. A noise interval is a closed mathematical interval that, in most cases,\nincludes the actual value of the aggregation. There is a 95% chance that the actual result of a query falls within the noise interval.",
        "Adding the following functions to a query allows the analyst to use the noise interval to make decisions about the utility of a query:",
        "DP_INTERVAL_LOW \u2014 Returns the lower bound of the noise interval. The actual value is most\nlikely to be equal to or larger than this number.",
        "DP_INTERVAL_HIGH \u2014 Returns the upper bound of the noise interval. The actual value is most\nlikely to be equal to or smaller than this number.",
        "To use these functions, pass in the alias of an aggregated column in the main query. For example, the following query returns the sum of the\nnum_claims column along with the noise interval for that aggregation:",
        "The output might be:",
        "In this case, the return value is a sum of 50. But the analyst has also determined with 95% certainty that the actual value of the\naggregation is between 35 and 75.",
        "Tip",
        "For information about techniques that can potentially reduce noise in results, see",
        "Narrowing a privacy domain to improve results",
        "Using entity keys in joins",
        "You can use the ESTIMATE_REMAINING_DP_AGGREGATES function to estimate how many more queries you can run\nwithin the current budget window (that is, until the cumulative privacy loss is reset to 0). The estimate is based on the number of\naggregates, not queries. For example, the query SELECT SUM(age), COUNT(age) FROM T contains two aggregate functions: SUM(age) and\nCOUNT(age).",
        "When executing the ESTIMATE_REMAINING_DP_AGGREGATES function, be sure to use the exact conditions you\u2019re using to execute queries, for\nexample, the same user, role, and account.",
        "If you\u2019re running a query that uses multiple tables, you should run ESTIMATE_REMAINING_DP_AGGREGATES once per table, then use the lowest\nNUMBER_OF_REMAINING_DP_AGGREGATES value as the estimated usage cap.",
        "The following example shows how a series of queries affect how much of the privacy budget\u2019s limit has been spent (that is, the cumulative\nprivacy loss of the queries) and the estimated number of remaining aggregates.",
        "1. Initial check",
        "Let\u2019s look at privacy budget numbers on the table my_table. You\u2019ve never run any queries on this table.",
        "No budget used so far:",
        "2. Run a query",
        "Let\u2019s run a query with one aggregate function and check our numbers again:",
        "Estimate of remaining aggregate calls has dropped by one and the cumulative privacy loss (budget spent) has increased.",
        "3. Run another query with two aggregate functions",
        "Estimated remaining queries has dropped by two. Remember, this is an estimate.",
        "4. Rerun a query",
        "Let\u2019s rerun a previous query to show that privacy budget is always charged, even on identical queries. A duplicate query incurs the same\nprivacy loss each time it runs (that is, it spends the same amount of privacy budget).",
        "Same charge for the query as before: 1.2 units of privacy loss.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}