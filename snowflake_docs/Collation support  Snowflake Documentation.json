{
    "url": "https://docs.snowflake.com/en/sql-reference/collation.html#label-collation-specification",
    "title": "Collation support | Snowflake Documentation",
    "paragraphs": [
        "Collation allows you to specify alternative rules for comparing strings, which can be used to compare and sort data according to a particular language or other user-specified rules.",
        "The following sections explain what collation is and how you use collation when comparing strings:",
        "Understanding collation",
        "Uses for collation",
        "Collation control",
        "Text strings in Snowflake are stored using the UTF-8 character set and, by default, strings are compared according to\nthe Unicode codes that represent the characters in the string.",
        "However, comparing strings based on their UTF-8 character representations might not provide the desired or expected behavior. For example:",
        "If special characters in a given language do not sort according to that language\u2019s ordering standards, then sorting might return unexpected results.",
        "You might want the strings to be ordered by other rules, such as ignoring whether the characters are uppercase or lowercase.",
        "Collation allows you to explicitly specify the rules to use for comparing strings, based on:",
        "Different locales (that is, different character sets for different languages).",
        "Case-sensitivity (that is, whether to use case-sensitive or case-insensitive string comparisons without explicitly calling the UPPER or\nLOWER functions to convert the strings).",
        "Accent-sensitivity (for example, whether Z, \u0179, and \u017b are considered the same letter or different letters).",
        "Punctuation-sensitivity (that is, whether comparisons use only letters or include all characters). For example, if a comparison is punctuation-insensitive, then A-B-C and ABC are treated as\nequivalent.",
        "Additional options, such as preferences for sorting based on the first letter in a string and trimming of leading and/or trailing blank spaces.",
        "Collation can be used in a wide variety of operations, including (but not limited to):",
        "Usage",
        "Example",
        "Link",
        "Simple comparison",
        "... WHERE column1 = column2 ...",
        "WHERE",
        "Joins",
        "... ON table1.column1 = table2.column2 ...",
        "JOIN",
        "Sorting",
        "... ORDER BY column1 ...",
        "ORDER BY",
        "Top-K sorting",
        "... ORDER BY column1 LIMIT N ...",
        "LIMIT / FETCH",
        "Aggregation",
        "... GROUP BY ...",
        "GROUP BY",
        "Window functions",
        "... PARTITION BY ... ORDER BY ...",
        "Window functions",
        "Scalar functions",
        "... LEAST(column1, column2, column3) ...",
        "Scalar functions",
        "Aggregate functions",
        "... MIN(column1), MAX(column1) ...",
        "Aggregate functions",
        "Data clustering",
        "... CLUSTER BY (column1) ...",
        "Clustering Keys & Clustered Tables",
        "Collation control is granular. You can explicitly specify the collation to use for:",
        "An account, using the account-level parameter DEFAULT_DDL_COLLATION.",
        "All columns in all tables added to a database, using the ALTER DATABASE command.",
        "All columns in all tables added to a schema, using the ALTER SCHEMA command.",
        "All columns added to a table, using the ALTER TABLE command.",
        "Individual columns in a table, using the CREATE TABLE command.",
        "A specific comparison within a SQL statement (for example, WHERE col1 = col2). If multiple collations are applied to a\nstatement, Snowflake determines the collation to use based on precedence. For more details about precedence, see\nCollation precedence in multi-string operations.",
        "You can use the following SQL constructs for collation:",
        "COLLATE clause for table column definitions",
        "COLLATE function",
        "COLLATION function",
        "Adding the optional COLLATE clause to the definition of a table column indicates that the specified collation is used for comparisons and other related operations performed on the data in\nthe column:",
        "If no COLLATE clause is specified for a column, Snowflake uses the default, which compares strings based on their UTF-8 character representations.",
        "Also, Snowflake supports specifying an empty string for the collation specification (for example, COLLATE ''), which is equivalent to specifying no collation for the column.",
        "However, due to precedence, specifying COLLATE '' for a column does not have the same effect as explicitly specifying COLLATE 'utf8'. For more details, see\nCollation precedence in multi-string operations.",
        "To see whether collation has been specified for the columns in a table, use DESCRIBE TABLE (or use the COLLATION function to view the collation, if any, for a specific column).",
        "The COLLATE function uses the specified collation on the input string expression:",
        "This function can also be called using infix notation:",
        "This function is particularly useful for explicitly specifying a particular collation for a particular operation (for example,\nsorting), but it can also be used to:",
        "Allow collation in the SELECT clause of a subquery, making all operations on the specified column in the outer query use the collation.",
        "Create a table using CTAS with a specified collation.",
        "This example valuates using English case-insensitive collation:",
        "This example sorts the results using German (Deutsch) collation:",
        "This example creates a table with a column using French collation:",
        "This example uses infix notation to create a table with a column using French collation:",
        "The COLLATION function returns the collation specification used by an expression, including a table column:",
        "If no collation has been specified for the expression, the function returns NULL.",
        "Typically, if you use this function on a column name, it is best to use DISTINCT to avoid getting one row of output for each row in the table. For example:",
        "Note",
        "This function only returns the collation specification, not its precedence level. For more details about precedence, see Collation precedence in multi-string operations (in this\ntopic).",
        "When using a COLLATE clause (for a table column) or the COLLATE function (for an expression), you must include a collation specification,\nwhich determines the comparison logic used for the column/expression.",
        "A collation specification consists of a string of one or more specifiers separated by a hyphen (-), in the form of:",
        "'<specifier>[-<specifier> ...]'",
        "The following specifiers are supported (for more information, see Supported specifiers in this topic):",
        "Locale",
        "Case-sensitivity",
        "Accent-sensitivity",
        "Punctuation-sensitivity",
        "First-letter preference",
        "Case-conversion",
        "Space-trimming",
        "Specifiers are case-insensitive and can be in any order, except for locale, which must always be first, if used.",
        "The following sections provide more details about collation specifications:",
        "Specification examples",
        "Supported specifiers",
        "Some examples of collation specification strings include:",
        "'de': German (Deutsch) locale.",
        "'de-ci-pi': German locale, with case-insensitive and punctuation-insensitive comparisons.",
        "'fr_CA-ai': Canadian French locale, with accent-insensitive comparisons.",
        "'en_US-trim': US English locale, with leading spaces and trailing spaces trimmed before the comparison.",
        "You can also specify an empty string for a collation specification (for example, COLLATE '' or COLLATE(col1, '')), which indicates to use no collation.",
        "Specifies the language-specific and country-specific rules to apply.",
        "Supports valid locale strings, consisting of a language code (required) and country code (optional) in the form of language_country. Some locale examples include:",
        "en - English",
        "en_US - American English",
        "fr - French",
        "fr_CA - Canadian French",
        "In addition, the utf8 pseudo-locale specifies Unicode ordering, which is the default. For more details, see Differences in sorting when using UTF-8 or locale collation (in this topic).",
        "The locale specifier is optional, but, if used, must be the first specifier in the string.",
        "For the full list of locales supported by Snowflake, see Collation locales supported by Snowflake.",
        "Determines whether case is considered when comparing values. Possible values:",
        "cs - Case-sensitive (default)",
        "ci - Case-insensitive",
        "For example:",
        "Collation\u00a0Specification",
        "Value",
        "Result",
        "'en-ci'",
        "Abc = abc",
        "True",
        "'en-cs' / en",
        "Abc = abc",
        "False",
        "Determines whether accented characters are considered equal to, or different from, their base characters. Possible values:",
        "as - Accent-sensitive (default)",
        "ai - Accent-insensitive",
        "For example:",
        "Collation\u00a0Specification",
        "Value",
        "Result",
        "Notes",
        "'fr-ai'",
        "E = \u00c9",
        "True",
        "'fr-as' / 'fr'",
        "E = \u00c9",
        "False",
        "'en-ai'",
        "a = \u0105",
        "True",
        "In English, these letters are treated as having only accent differences, so specifying accent-insensitivity results in the values comparing as equal.",
        "'pl-ai'",
        "a = \u0105",
        "False",
        "In Polish, these letters are treated as separate base letters, so they always compare as unequal regardless of whether accent-insensitivity is specified.",
        "'pl-as' / 'pl'",
        "a = \u0105",
        "False",
        "The rules for accent-sensitivity and collation vary between languages. For example, in some languages, collation is always accent-sensitive, and you cannot turn it off even by specifying\naccent-insensitive collation.",
        "Determines whether non-letter characters matter. Possible values:",
        "ps - Punctuation-sensitive.",
        "pi - Punctuation-insensitive.",
        "Note that the default is locale-specific (that is, if punctuation-sensitivity is not specified, locale-specific rules are used). In most cases, the rules are equivalent to ps.",
        "For example:",
        "Collation\u00a0Specification",
        "Value",
        "Result",
        "Notes",
        "'en-pi'",
        "A-B-C = ABC",
        "True",
        "'en-ps'",
        "A-B-C = ABC",
        "False",
        "Determines whether, when sorting, uppercase or lowercase letters are first. Possible values:",
        "fl - Lowercase letters sorted first.",
        "fu - Uppercase letters sorted first.",
        "The default is locale-specific (that is, if no value is specified, locale-specific ordering is used). In most cases, the ordering is equivalent to fl.",
        "Also, this specifier has no impact on equality comparisons.",
        "Results in strings being converted to lowercase or uppercase before comparisons. In some situations, this is faster than full locale-specific collation. Possible values:",
        "upper - Convert the string to uppercase before comparisons.",
        "lower - Convert the string to lowercase before comparisons.",
        "This specifier does not have a default (that is, if no value is specified, neither of the conversions occurs).",
        "Removes leading/trailing spaces from strings before comparisons. This functionality can be useful for performing comparisons equivalent (except in extremely rare corner cases) in semantics to the SQL CHAR data type.",
        "Possible values:",
        "trim - Remove both leading and trailing spaces before comparisons.",
        "ltrim - Remove only leading spaces before comparisons.",
        "rtrim - Remove only trailing spaces before comparisons.",
        "This specifier does not have a default (that is, if no value is specified, trimming is not performed).",
        "For example:",
        "Collation\u00a0Specification",
        "Value",
        "Result",
        "Notes",
        "'en-trim'",
        "__ABC_ = ABC",
        "True",
        "For the purposes of these examples, underscore characters represent blank spaces.",
        "'en-ltrim'",
        "__ABC_ = ABC",
        "False",
        "'en-rtrim'",
        "__ABC_ = ABC",
        "False",
        "'en'",
        "__ABC_ = ABC",
        "False",
        "The following sections provide more detail about support for collation:",
        "Case-insensitive comparisons",
        "Differences in sorting when using UTF-8 or locale collation",
        "Collation precedence in multi-string operations",
        "Limited support for collation in built-in functions",
        "Performance implications of using collation",
        "Additional considerations for using collation",
        "The following sections describe case-insensitive comparisons:",
        "Differences when comparing uppercase strings and original strings",
        "Character weights",
        "In some languages, two lowercase characters have the same corresponding uppercase character. For example, some languages support both\ndotted and undotted forms of lowercase I (for example, i and \u0131). Forcing the strings to uppercase affects comparisons.",
        "The following example illustrates the difference:",
        "Create the table:",
        "Query the data:",
        "Snowflake supports the following collation specifications.",
        "ICU (International Components for Unicode).",
        "Snowflake-specific collation specifications (for example, upper and lower).",
        "For case-insensitive comparison operations defined by the ICU, Snowflake follows the\nUnicode Collation Algorithm (UCA) and considers only the\nprimary and secondary weights, not the tertiary weights, of Unicode characters. Characters that differ only in their tertiary\nweights are treated as identical. For example, using the en-ci collation specification, a space and a non-breaking space\nare considered identical.",
        "Strings are always stored internally in Snowflake in UTF-8, and can represent any character in any language supported by UTF-8. Therefore, when no collation is specified, the\nbehavior is the same as the UTF-8 collation (that is, 'utf8').",
        "In Snowflake, 'utf8' and 'bin' are equivalent collation specifications. However, these specifications can\u2019t be mixed in a single expression. For example, the following\nquery returns an error:",
        "UTF-8 collation is based on the numeric representation of the character as opposed to the alphabetic order of the character.",
        "This is analogous to sorting by the ordinal value of each ASCII character, which is important to note because uppercase letters have ordinal values lower than lowercase letters:",
        "As a result:",
        "If you sort in UTF-8 order, all uppercase letters are returned before all lowercase letters:",
        "A , B , \u2026 , Y , Z , \u2026 , a , b , \u2026 , y , z",
        "In contrast, the 'en' collation specification sorts alphabetically (instead of using the UTF-8 internal representation), resulting in both A and a returned before both B and b:",
        "a , A , b , B , \u2026",
        "Additionally, the differences between the cs and ci case-sensitivity specifiers affect sorting:",
        "cs (case-sensitive) always returns the lowercase version of a letter before the uppercase version of the same letter. For example, using 'en-cs':",
        "a , A , b , B , \u2026",
        "Case-sensitive is the default and, therefore, 'en-cs' and 'en' are equivalent.",
        "ci (case-insensitive) returns uppercase and lowercase versions of letters randomly with respect to each other, but still before both uppercase and lowercase version of later letters. For\nexample, using 'en-ci':",
        "A , a , b , B , \u2026",
        "Some non-alphabetic characters can also be sorted differently depending upon the collation setting. The following example shows that\nthe plus character (+) and minus character (-) are sorted differently for different collation settings:",
        "Create the table:",
        "Query the data:",
        "When performing an operation on two (or more) strings, different collations might be specified for different strings.\nDetermining the collation to apply depends on how collation was specified for each input and the precedence of each\nspecifier.",
        "There are three precedence levels (from highest to lowest):",
        "Collation is specified using the COLLATE function in a SQL statement.",
        "Collation was specified in the column definition.",
        "No collation is/was specified for a given expression/column, or collation with an empty specification is/was used (for example, COLLATE(col1, '') or col1 STRING COLLATE '').",
        "When determining the collation to use, the collation specification with the highest precedence is used. If multiple collations are specified with the same precedence level, their\nvalues are compared, and if they are not equal, an error is returned.",
        "For example, consider a table with the following column-level collation specifications:",
        "If the table is used in a statement comparing two strings, collation is applied as follows:",
        "This comparison uses the 'fr' collation because the precedence for col2_fr is higher than the\nprecedence for col1:",
        "This comparison uses the 'en' collation, because it is explicitly specified in the statement,\nwhich takes precedence over the collation for col2_fr:",
        "This comparison returns an error because the expressions have different collations at the same precedence level:",
        "This comparison uses the 'de' collation because collation for col2_fr has been removed:",
        "This comparison returns an error because the expressions have different collations at the same precedence level:",
        "Because explicit collation has higher precedence than no collation, specifying an empty string (or specifying no collation) is\ndifferent from explicitly specifying 'utf8' collation. The last two statements in the following code examples show the difference:",
        "For example, consider a table with the following column-level collation specifications:",
        "If the table is used in a statement comparing two strings, collation is applied as follows:",
        "This comparison uses 'utf8' because s1 has no collation and 'utf8' is the default:",
        "This comparison uses 'utf8' because s1 has no collation and s2 has explicit 'utf8' collation",
        "This comparison executes without error because s1 has no collation and s3 has explicit fr collation, so the\nexplicit collation takes precedence:",
        "This comparison causes an error because s2 and s3 have different collations specified at the same precedence level:",
        "Collation is supported in only a subset of string functions. Functions that could reasonably be expected to implement\ncollation, but do not yet support collation, return an error when used with collation. These error messages are\ndisplayed not only when calling the COLLATE function, but also when calling a string function on a column that was\ndefined as collated in the CREATE TABLE or ALTER TABLE statement that created that column.",
        "Currently, collation influences only simple comparison operations. For example, POSITION('abc' in COLLATE('ABC', 'en-ci'))\ndoes not find abc in ABC, even though case-insensitive collation is specified.",
        "These functions support collation:",
        "[ NOT ] BETWEEN",
        "CASE",
        "CHARINDEX",
        "COALESCE",
        "CONCAT , ||",
        "CONTAINS",
        "DECODE",
        "ENDSWITH",
        "EQUAL_NULL",
        "GET_DDL",
        "GREATEST",
        "IFF",
        "IFNULL",
        "[ NOT ] ILIKE",
        "ILIKE ANY",
        "LEAST",
        "LEFT",
        "[ NOT ] LIKE",
        "LIKE ALL",
        "LIKE ANY",
        "LISTAGG",
        "LPAD",
        "MAX",
        "MIN",
        "NULLIF",
        "NVL",
        "NVL2",
        "POSITION",
        "REPLACE",
        "RIGHT",
        "RPAD",
        "SPLIT",
        "SPLIT_PART",
        "STARTSWITH",
        "Some of these functions have limitations on their use with collation. For information, see the documentation of each\nspecific function.",
        "This list might expand over time.",
        "Caution",
        "Some SQL operators and predicates, such as || (concatenation) and LIKE, are implemented as functions\n(and are available as functions, for example LIKE() and CONCAT()). If a predicate or operator is implemented as\na function, and the function does not support collation, then the predicate or operator does not support collation.",
        "See also Collation limitations.",
        "Using collation can affect the performance of various database operations:",
        "Operations involving comparisons might be slower.",
        "This can impact simple WHERE clauses, as well as joins, sorts, GROUP BY operations, etc.",
        "When used with some functions in WHERE predicates, micro-partition pruning might be less\nefficient.",
        "Using collation in a WHERE predicate that is different from the collation specified for the\ncolumn might result in reduced pruning efficiency or the complete elimination of pruning.",
        "Remember that, despite the similarity in their names, the following collation functions return different results:",
        "COLLATE explicitly specifies which collation to use.",
        "COLLATION shows which collation is used if none is specified explicitly.",
        "A column with a collation specification can use characters that are not from the locale for the collation, which might impact sorting.",
        "For example, if a column is created with a COLLATE 'en' clause, the data in the column can contain the non-English character \u00c9. In this situation, the character \u00c9 is sorted close to\nE.",
        "You can specify collation operations that are not necessarily meaningful.",
        "For example, you could specify that Polish data is compared to French data using German collation:",
        "However, Snowflake does not recommend using the feature this way because it might return unexpected or unintended results.",
        "After a table column is defined, you cannot change the collation for the column. In other words, after a column has been created with a particular collation using a\nCREATE TABLE statement, you cannot use ALTER TABLE to change the\ncollation.",
        "However, you can specify a different collation in a DML statement, such as a SELECT statement, that references the column.",
        "The upper and lower collation specifications can provide better performance than the ci collation specification during\nstring comparison and sorting. However, upper and lower have slightly different effects from ci, as explained in the\nnext sections:",
        "Differences in comparisons of widths, spaces, and scripts",
        "Differences in handling ignorable code points",
        "Differences when characters are represented by different code points",
        "Differences with sequences of code points representing a single character",
        "Differences when changes to case result in multiple code points",
        "Differences in sort order",
        "During string comparisons, the ci collation specification recognizes that different visual representations\nof a character might still refer to the same character, and treats them accordingly. To allow for more performant\ncomparisons, the upper and lower collation specifications do not recognize these different visual\nrepresentations of a character as the same character.",
        "Specifically, the ci collation specification ignores some differences in the following categories,\nwhile the upper and lower collation specifications do not ignore them:",
        "Character widths",
        "Types of spaces",
        "Character scripts",
        "The following sections include examples that illustrate these differences.",
        "Note",
        "The comparison behavior of full-width and half-width characters might depend on the locale.",
        "Create a table named different_widths and insert rows containing characters of different widths:",
        "The following query shows that the ci collation specification finds one distinct value when comparing the characters.\nThe upper and lower collation specifications find two distinct values when comparing the characters.",
        "The ci collation specification ignores differences in both width and case, which means that it finds no differences\nbetween the characters. The upper and lower collation specifications only ignore differences in case, so\nthe half-width characters are considered to be different characters than the full-width characters.",
        "The half-width lowercase a is considered to be the same as the half-width uppercase A, and the full-width\nlowercase a is considered to be the same as the full-width uppercase A. Therefore, the upper and\nlower collation specifications find two distinct values.",
        "Create a table named different_whitespaces and insert rows with different types of spaces:",
        "The following query shows that the ci collation specification finds one distinct value when comparing the spaces, which\nmeans that there are no differences between them. The upper and lower collation specifications find five distinct\nvalues when comparing the spaces, which means that they are all different.",
        "Create a table named different_scripts and insert rows containing characters that use different scripts:",
        "The following query shows that the ci collation specification finds one distinct value when comparing the characters, which\nmeans that there are no differences between them. The upper and lower collation specifications find six distinct\nvalues when comparing the characters, which means that they are all different.",
        "The Unicode Collation Algorithm specifies that collation elements (code points) can be\nignorable, which means that a code point is not considered\nduring string comparison and sorting.",
        "With the ci collation specification, these code points are ignored. This can make it difficult to search for or replace\nignorable code points.",
        "With the upper and lower collation specifications, these code points are not ignored.",
        "For example, the code point U+0001 is ignorable. If you compare this code point to an empty string with the en-ci\ncollation specification, the result is TRUE because U+0001 is ignored:",
        "On the other hand, if you use the upper or lower collation specification, the result is FALSE because U+0001 is not\nignored:",
        "Similarly, suppose that you call the REPLACE function to remove this code point from a string.\nIf you use the en-ci collation specification, the function does not remove the code point because U+0001 is ignored.",
        "As shown in the following example, the string returned by the REPLACE function has the same length as the string passed into the\nfunction because the function does not remove the U+0001 character.",
        "On the other hand, if you use the upper or lower collation specification, the function removes the code point from the\nstring, returning a shorter string.",
        "In Unicode,\ndifferent sequences of code points can represent the same character.\nFor example, the Greek Small Letter Iota with Dialytika and Tonos can be represented by the\nprecomposed character with the code point U+0390 or by the\nsequence of code points U+03b9 U+0308 U+0301 for the decomposed characters.",
        "If you use the ci collation specification, the different sequences of code points for a character are treated as the same\ncharacter. For example, the code point U+0390 and the sequence of code points U+03b9 U+0308 U+0301 are treated\nas equivalent:",
        "In order to improve performance for the upper and lower collation specifications, the sequences are not handled in the\nsame way. Two sequences of code points are considered to be equivalent only if they result in the same binary representation\nafter they are converted to uppercase or lowercase.",
        "For example, using the upper specification with the code point U+0390 and the sequence of code points U+03b9\nU+0308 U+0301 results in characters that are treated as equal:",
        "Using the lower specification results in characters that are not equal:",
        "These differences are less likely to occur when using upper (rather than lower) because there is only one composite\nuppercase code point (U+0130), compared to over 100 composite lowercase code points.",
        "In cases where a sequence of code points represents a single character, the ci collation specification recognizes that the\nsequence represents a single character and does not match individual code points in the sequence.",
        "For example, the sequence of code points U+03b9 U+0308 U+0301 represents a single character (the Greek Small Letter\nIota with Dialytika and Tonos). U+0308 and U+0301 represent accents applied to U+03b9.",
        "For the ci collation specification, if you use the CONTAINS function to determine if the\nsequence U+03b9 U+0308 contains U+03b9 or U+0308, the function returns FALSE because the sequence U+03b9\nU+0308 is treated as a single character:",
        "To improve performance, the upper and lower specifications do not treat these sequences as a single character. In the\nexample above, the CONTAINS function returns TRUE because these specifications treat the sequence of code points as separate\ncharacters:",
        "For some composite characters, the uppercase or lowercase version of the character is represented by a sequence of code points.\nFor example, the uppercase character for the German character \u00df is a sequence of two S characters (SS).",
        "Even though \u00df and SS are equivalent, when you use the upper collation specification, searches of \u00df and SS return different\nresults. Sequences produced by case conversion either match in their entirety or not at all.",
        "Sorting for the upper and lower collation specifications works differently from sorting for the ci specification:",
        "With the ci specification, strings are sorted by collation key. In general, the collation key can account for case\nsensitivity, accent sensitivity, locale, etc.",
        "With the upper and lower specifications, strings are sorted by code point to improve performance.",
        "For example, some characters within the ASCII range (such as + and -) sort differently:",
        "As another example, strings with ignored code points sort in a different order:",
        "In addition, emojis sort differently:",
        "The following limitations apply to collation:",
        "Collation is supported only for strings up to 8 MB",
        "Collation not supported with UDFs",
        "Collation not supported for strings in VARIANT, ARRAY, or OBJECT values",
        "Clean rooms support only UTF-8 collation",
        "Although the Snowflake VARCHAR data type supports strings up to 16 MB, Snowflake supports collation only when the\nresulting string is 8 MB or less. (Some collation operations can lengthen a string.)",
        "Snowflake does not support collation with UDFs (user-defined functions):",
        "You cannot return a collated string value from a UDF; the server reports that the actual return type is incompatible with\nthe declared return type.",
        "If you pass a collated string value to a UDF, the collation information is not passed; the UDF sees the string as an uncollated\nstring.",
        "Strings stored inside a VARIANT, OBJECT, or ARRAY value do not include a collation specification. Therefore:",
        "Comparison of these values always uses the 'utf8' collation.",
        "When a VARCHAR value with a collation specification is used to construct an ARRAY, OBJECT, or VARIANT value, the\ncollation specification is not preserved.",
        "You can still compare a value stored inside an ARRAY, OBJECT, or VARIANT by extracting the value, casting to\nVARCHAR, and adding a collation specification. For example:",
        "Clean rooms support only basic UTF-8 collation.",
        "The following statement creates a table that uses different collation for each column:",
        "Note",
        "Collations don\u2019t affect the set of characters that can be stored. Snowflake supports all UTF-8 characters.",
        "The following query on the table shows the expected values:",
        "The following query does not find a match because the character \u00f1 does not match n:",
        "Changing collation doesn\u2019t force related, but unequal, characters (for example, \u00f1 and n) to be treated as equal:",
        "Only the English phrase returns True for the following reasons:",
        "Uncollated comparisons don\u2019t ignore accents.",
        "utf8 collation comparisons don\u2019t ignore accents.",
        "The en-ai and es-ai collation comparisons ignore accents, but in Spanish, \u00f1 is treated as an\nindividual character rather than an accented n.",
        "The following examples demonstrate the effect of collation on sort order:",
        "The following query returns the values in a different order by changing the\ncollation to from 'es' (Spanish) to 'utf8':",
        "This example shows how to use the COLLATION function to view the collation for an expression, such as a column:",
        "You can also use DESCRIBE TABLE to view collation information about the columns in a table:",
        "Was this page helpful?",
        "On this page"
    ]
}