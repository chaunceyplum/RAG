{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/exception",
    "title": "EXCEPTION (Snowflake Scripting) | Snowflake Documentation",
    "paragraphs": [
        "Specifies how to handle exceptions raised in the Snowflake Scripting block.",
        "For more information on exceptions, see Handling exceptions.",
        "RAISE",
        "Where:",
        "An exception name defined in the\nDECLARE portion of the current block, or in an enclosing block.",
        "A statement can be any of the following:",
        "A single SQL statement (including CALL).",
        "A control-flow statement (for example, a looping or\nbranching statement).",
        "A nested block.",
        "Each block can have its own exception handler.",
        "Snowflake supports no more than one exception handler per block. However, that handler can catch more than one type\nof exception by having more than one WHEN clause.",
        "The exception handler should be at the end of the block. If the block contains statements after the\nexception handler, those statements are not executed.",
        "The WHEN OTHER THEN clause catches any exception not yet specified.",
        "If more than one WHEN clause could match a specific exception, then the first WHEN clause that\nmatches is the one that is executed. The other clauses are not executed.",
        "An exception handler can handle a specified exception only if that specified exception is in\nscope.",
        "If a stored procedure is intended to return a value, then it should return a value from each possible path,\nincluding each WHEN clause of the exception handler.",
        "To use a variable in an exception handler, the variable must be declared in the\nDECLARE section or passed as an argument to a\nstored procedure. It can\u2019t be declared in the BEGIN \u2026 END\nsection. For more information, see Passing variables to an exception handler.",
        "This example declares, raises, and handles an exception. Note that:",
        "The exception handler is designed to handle more than one type of exception.",
        "One of the WHEN clauses in the exception handler contains a single statement, while the other contains a\nblock.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Here is the output of executing the example that raises the exception.\nThis shows that the exception handler caught the exception.",
        "This next example is similar to the previous example, but demonstrates nested blocks, and shows that an inner block\ncan raise an exception declared in either the inner block or in an outer block.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Here is the output of executing the example that raises the exception.\nThis shows that the exception handler caught the exception.",
        "This next example is similar to the previous example, but demonstrates nested blocks, each of which has its\nown exception handler.",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Note",
        "This example uses the same exception name (e1) in the outer and inner blocks.",
        "This is not recommended.",
        "The example does this to illustrate the scope of exception names. The two exceptions with the\nname e1 are different exceptions.",
        "The e1 handler in the outer block does not handle the exception e1 that is declared and raised in the inner block.",
        "Here is the output of executing the example that raises the exception. This shows that the inner exception handler ran.",
        "This example fragment shows:",
        "How to catch more than one exception in the same clause by using OR.",
        "How to catch unspecified exceptions by using WHEN OTHER THEN.",
        "The following example shows how to return SQLCODE, SQLERRM (SQL error message), and SQLSTATE when catching an exception:",
        "Note: If you are using SnowSQL, the Classic Console, or the\nexecute_stream or execute_string method in Python Connector\ncode, use this example instead (see Using Snowflake Scripting in SnowSQL, the Classic Console, and Python Connector):",
        "Running this example produces the following output:",
        "This example demonstrates returning a value from each possible path:",
        "Was this page helpful?",
        "On this page"
    ]
}