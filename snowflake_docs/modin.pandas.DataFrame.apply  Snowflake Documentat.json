{
    "url": "https://docs.snowflake.com/en/developer-guide/snowpark/reference/python/1.26.0/modin/pandas_api/modin.pandas.DataFrame.apply",
    "title": "modin.pandas.DataFrame.apply | Snowflake Documentation",
    "paragraphs": [
        "Apply a function along an axis of the DataFrame.",
        "Objects passed to the function are Series objects whose index is\neither the DataFrame\u2019s index (axis=0) or the DataFrame\u2019s columns\n(axis=1). By default (result_type=None), the final return type\nis inferred from the return type of the applied function. Otherwise,\nit depends on the result_type argument.",
        "Snowpark pandas currently only supports apply with axis=1 and callable func.",
        "func (function) \u2013 A Python function object to apply to each column or row.",
        "axis ({0 or 'index', 1 or 'columns'}, default 0) \u2013",
        "Axis along which the function is applied:",
        "0 or \u2018index\u2019: apply function to each column.",
        "1 or \u2018columns\u2019: apply function to each row.",
        "",
        "raw (bool, default False) \u2013",
        "Determines if row or column is passed as a Series or ndarray object:",
        "False : passes each row or column as a Series to the\nfunction.",
        "True : the passed function will receive ndarray objects\ninstead.",
        "",
        "result_type ({'expand', 'reduce', 'broadcast', None}, default None) \u2013",
        "These only act when axis=1 (columns):",
        "\u2019expand\u2019 : list-like results will be turned into columns.",
        "\u2019reduce\u2019 : returns a Series if possible rather than expanding\nlist-like results. This is the opposite of \u2018expand\u2019.",
        "\u2019broadcast\u2019 : results will be broadcast to the original shape\nof the DataFrame, the original index and columns will be\nretained.",
        "Snowpark pandas does not yet support the result_type parameter.",
        "",
        "args (tuple) \u2013 Positional arguments to pass to func in addition to the\narray/series.",
        "**kwargs \u2013 Additional keyword arguments to pass as keywords arguments to\nfunc.",
        "Result of applying func along the given axis of the DataFrame.",
        "Series or DataFrame",
        "See also",
        "Series.apply : For applying more complex functions on a Series.",
        "DataFrame.applymap : Apply a function elementwise on a whole DataFrame.",
        "Notes",
        "1. When func has a type annotation for its return value, the result will be cast\nto the corresponding dtype. When no type annotation is provided, data will be converted\nto VARIANT type in Snowflake, and the result will have dtype=object. In this case, the return value must\nbe JSON-serializable, which can be a valid input to json.dumps (e.g., dict and\nlist objects are JSON-serializable, but bytes and datetime.datetime objects\nare not). The return type hint is used only when func is a series-to-scalar function.",
        "2. Under the hood, we use Snowflake Vectorized Python UDFs to implement apply() method with\naxis=1. You can find type mappings from Snowflake SQL types to pandas dtypes\nhere.",
        "3. Snowflake supports two types of NULL values in variant data: JSON NULL and SQL NULL.\nWhen no type annotation is provided and Variant data is returned, Python None is translated to\nJSON NULL, and all other pandas missing values (np.nan, pd.NA, pd.NaT) are translated to SQL NULL.",
        "4. If func is a series-to-series function that can also be used as a scalar-to-scalar function\n(e.g., np.sqrt, lambda x: x+1), using df.applymap() to apply the function\nelement-wise may give better performance.",
        "5. When func can return a series with different indices, e.g.,\nlambda x: pd.Series([1, 2], index=[\"a\", \"b\"] if x.sum() > 2 else [\"b\", \"c\"]),\nthe values with the same label will be merged together.",
        "6. The index values of returned series from func must be JSON-serializable. For example,\nlambda x: pd.Series([1], index=[bytes(1)]) will raise a SQL execption because python bytes\nobjects are not JSON-serializable.",
        "7. When func uses any first-party modules or third-party packages inside the function,\nyou need to add these dependencies via session.add_import() and session.add_packages().",
        "8. The Snowpark pandas module cannot currently be referenced inside the definition of\nfunc. If you need to call a general pandas API like pd.Timestamp inside func,\nplease use the original pandas module (with import pandas) as a workaround.",
        "Examples",
        "Using a reducing function on axis=1:",
        "Returning a list-like object will result in a Series:",
        "To work with 3rd party packages, add them to the current session:",
        "Was this page helpful?"
    ]
}