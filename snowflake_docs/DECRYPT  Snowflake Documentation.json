{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/decrypt",
    "title": "DECRYPT | Snowflake Documentation",
    "paragraphs": [
        "Encryption functions",
        "Decrypts a BINARY value using a VARCHAR passphrase.",
        "ENCRYPT , ENCRYPT_RAW , DECRYPT_RAW , TRY_DECRYPT , TRY_DECRYPT_RAW",
        "Required:",
        "The BINARY value to decrypt.",
        "The passphrase to use to encrypt/decrypt the data. The passphrase is a VARCHAR.",
        "Optional:",
        "Additional authenticated data (AAD) is additional data whose confidentiality and authenticity is assured during the\ndecryption process. However, this AAD is not encrypted and is not included as a field in the returned value from the\nENCRYPT or ENCRYPT_RAW function.",
        "If AAD is passed to the encryption function (ENCRYPT or ENCRYPT_RAW), then the same AAD must be passed to the\ndecryption function (DECRYPT or DECRYPT_RAW). If the AAD passed to the decryption function does not match the\nAAD passed to the encryption function, then decryption fails.",
        "The difference between the AAD and the passphrase is that the passphrase is intended to be kept\nsecret (otherwise, the encryption is essentially worthless) while the AAD can be left public. The AAD helps\nauthenticate that a public piece of information and an encrypted value are associated with each other. The\nexamples section in the ENCRYPT function includes an example showing the behavior\nwhen the AAD matches and the behavior when it doesn\u2019t match.",
        "For ENCRYPT_RAW and DECRYPT_RAW, the data type of the AAD should be BINARY.\nFor ENCRYPT and DECRYPT, the data type of the AAD can be either VARCHAR or BINARY, and does not need to match\nthe data type of the value that was encrypted.",
        "AAD is supported only by AEAD-enabled encryption modes like GCM (default).",
        "This string specifies the method to use for encrypting/decrypting the data. This string contains subfields:",
        "The algorithm is currently limited to:",
        "'AES': When a passphrase is passed (e.g. to ENCRYPT), the function uses AES-256 encryption (256 bits). When a key\nis passed (e.g. to ENCRYPT_RAW), the function uses 128, 192, or 256-bit encryption, depending upon the key\nlength.",
        "The algorithm is case-insensitive.",
        "The mode specifies which block cipher mode should be used to encrypt messages.\nThe following table shows which modes are supported, and which of those modes support padding:",
        "Mode",
        "Padding",
        "Description",
        "'ECB'",
        "Yes",
        "Encrypt every block individually with the key. This mode is generally discouraged and is included only for compatibility with external implementations.",
        "'CBC'",
        "Yes",
        "The encrypted block is XORed with the previous block.",
        "'GCM'",
        "No",
        "Galois/Counter Mode is a high-performance encryption mode that is AEAD-enabled. AEAD additionally assures the authenticity and confidentiality of the encrypted data by generating an AEAD tag. Moreover, AEAD supports AAD (additional authenticated data).",
        "'CTR'",
        "No",
        "Counter mode.",
        "'OFB'",
        "No",
        "Output feedback. The ciphertext is XORed with the plaintext of a block.",
        "'CFB'",
        "No",
        "Cipher feedback is a combination of OFB and CBC.",
        "The mode is case-insensitive.",
        "The padding specifies how to pad messages whose length is not a multiple of the block size. Padding is\napplicable only for ECB and CBC modes; padding is ignored for other modes. The possible values for padding are:",
        "'PKCS': Uses PKCS5 for block padding.",
        "'NONE': No padding. The user needs to take care of the padding when using ECB or CBC mode.",
        "The padding is case-insensitive.",
        "Default setting: 'AES-GCM'.",
        "If the mode is not specified, GCM is used.",
        "If the padding is not specified, PKCS is used.",
        "Returns the decrypted value as a BINARY value. If the original value before encryption was VARCHAR, you must\nexplicitly convert the returned BINARY back to VARCHAR. For example:",
        "For more complete examples, see the Examples below.",
        "To decrypt data encrypted by ENCRYPT(), use DECRYPT(). Do not use DECRYPT_RAW().",
        "To decrypt data encrypted by ENCRYPT_RAW(), use DECRYPT_RAW(). Do not use DECRYPT().",
        "The function\u2019s parameters are masked for security. Sensitive information such as the following is\nnot visible in the query log and is not visible to Snowflake:",
        "The string or binary value to encrypt or decrypt.",
        "The passphrase or key.",
        "The functions use a FIPS-compliant cryptographic library to effectively perform the encryption and decryption.",
        "The passphrase or key used to decrypt a piece of data must be the same as the passphrase or key used to encrypt that\ndata.",
        "The passphrase can be of arbitrary length, even 0 (the empty string). However, Snowflake\nstrongly recommends using a passphrase that is at least 8 bytes.",
        "Snowflake recommends that the passphrase follow general best practices for passwords, such as using a mix of\nuppercase letters, lowercase letters, numbers, and punctuation.",
        "The passphrase is not used directly to encrypt/decrypt the input. Instead, the passphrase is used to derive an\nencryption/decryption key, which is always the same for the same passphrase. Snowflake uses the\nhttps://en.wikipedia.org/wiki/PBKDF2 key-derivation function with a Snowflake-internal seed to compute the\nencryption/decryption key from the given passphrase.",
        "Because of this key derivation, the encrypt/decrypt function cannot be used to:",
        "Decrypt data that was externally encrypted.",
        "Encrypt data that will be externally decrypted.",
        "To do either of these, use ENCRYPT_RAW or DECRYPT_RAW.",
        "The code below shows a simple example of encryption and decryption:",
        "This example decrypts a BINARY value with a simple passphrase. In this example, binary values are shown in\nhexadecimal format. The value of the encrypted data\nmight vary due to the randomness of the initialization vector (described briefly in ENCRYPT).",
        "This example shows how to use an alternative mode (CBC) as part of the specifier for the encryption method.\nThis encryption method also specifies a padding rule (PKCS). In this example, the AAD parameter is NULL.",
        "This example shows how to use the AAD:",
        "If you pass the wrong AAD, decryption fails:",
        "Was this page helpful?",
        "On this page"
    ]
}