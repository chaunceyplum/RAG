{
    "url": "https://docs.snowflake.com/en/sql-reference/constructs/join",
    "title": "JOIN | Snowflake Documentation",
    "paragraphs": [
        "Query syntax",
        "A JOIN operation combines rows from two tables (or other table-like sources, such as\nviews or table functions) to create a new combined row that can be used in the query.\nFor a conceptual explanation of joins, see Working with Joins.",
        "This topic describes how to use the JOIN construct in the FROM clause.\nThe JOIN subclause specifies (explicitly or implicitly) how to relate rows\nin one table to the corresponding rows in the other table. See also ASOF JOIN,\nwhich is used to join time-series data on timestamp columns when their values closely follow each other,\nprecede each other, or match exactly.",
        "Although the recommended way to join tables is to use JOIN with the ON subclause of the FROM clause,\nan alternative way to join tables is to use the WHERE clause. For details, see the documentation for the\nWHERE clause.",
        "Use one of the following:",
        "Each object reference is a table or table-like data source.",
        "Use the JOIN keyword to specify that the tables should be joined. Combine JOIN with other join-related\nkeywords (e.g. INNER or OUTER) to specify the type of join.",
        "The semantics of joins are as follows (for brevity, this topic uses o1 and\no2 for object_ref1 and object_ref2, respectively).",
        "Join Type",
        "Semantics",
        "o1 INNER JOIN o2",
        "For each row of o1, a row is produced for each row of o2 that matches according to the ON condition subclause. (Note that you can also use a comma to specify an inner join. For an example, see the examples section below.) If you use INNER JOIN without the ON clause (or if you use comma without a WHERE clause), the result is the same as using CROSS JOIN: a Cartesian product (every row of o1 paired with every row of o2).",
        "o1 LEFT OUTER JOIN o2",
        "The result of the inner join is augmented with a row for each row of o1 that has no matches in o2. The result columns referencing o2 contain null.",
        "o1 RIGHT OUTER JOIN o2",
        "The result of the inner join is augmented with a row for each row of o2 that has no matches in o1. The result columns referencing o1 contain null.",
        "o1 FULL OUTER JOIN o2",
        "Returns all joined rows, plus one row for each unmatched left side row (extended with nulls on the right), plus one row for each unmatched right side row (extended with nulls on the left).",
        "o1 CROSS JOIN o2",
        "For every possible combination of rows from o1 and o2 (i.e. Cartesian product), the joined table contains a row consisting of all columns in o1 followed by all columns in o2. A CROSS JOIN cannot be combined with an ON condition clause. However, you can use a WHERE clause to filter the results.",
        "o1 NATURAL JOIN o2",
        "A NATURAL JOIN is identical to an explicit JOIN on the common columns of the two tables, except that the common columns are included only once in the output. (A natural join assumes that columns with the same name, but in different tables, contain corresponding data.) See the Examples section below for some examples. A NATURAL JOIN can be combined with an OUTER JOIN. A NATURAL JOIN cannot be combined with an ON condition clause because the JOIN condition is already implied. However, you can use a WHERE clause to filter the results.",
        "See also:",
        "LATERAL",
        "ASOF JOIN",
        "Default: INNER JOIN",
        "If the word JOIN is used without specifying INNER or\nOUTER, then the JOIN is an inner join.",
        "A boolean expression that defines the rows from the two sides of the JOIN\nthat are considered to match, for example:",
        "Conditions are discussed in more detail in the WHERE clause documentation.",
        "The ON clause is prohibited for CROSS JOIN.",
        "The ON clause is unnecessary (and prohibited) for\nNATURAL JOIN; the join columns are implied.",
        "For other joins, the ON clause is optional. However, omitting\nthe ON clause results in a Cartesian product (every row of\nobject_ref1 paired with every row of object_ref2). A\nCartesian product can produce a very large volume of output, almost all of\nwhich consists of pairs of rows that aren\u2019t actually related; this consumes\na lot of resources and is often a user error.",
        "A list of columns in common between the two tables being joined; these\ncolumns are used as the join columns. The columns must have the same\nname and meaning in each of the tables being joined.",
        "For example, suppose that the SQL statement contains:",
        "In the simple case, this would be equivalent to:",
        "In the standard JOIN syntax, the projection list (the list of columns\nand other expressions after the SELECT keyword) is \u201c*\u201d. This causes\nthe query to return the key_column exactly once. The columns\nare returned in the following order:",
        "The columns in the USING clause in the order specified.",
        "The left table columns not specified in the USING clause.",
        "The right table columns not specified in the USING clause.",
        "For examples of standard and non-standard usage, see the examples below.",
        "The following restrictions apply to table functions other than SQL UDTFs:",
        "You cannot specify the ON, USING, or NATURAL JOIN clause in a lateral table function (other than a SQL UDTF).",
        "For example, the following syntax is not allowed:",
        "You cannot specify the ON, USING, or NATURAL JOIN clause in an outer lateral join to a table function (other than a SQL UDTF).",
        "For example, the following syntax is not allowed:",
        "Using this syntax above results in the following error:",
        "These restrictions do not apply if you are using a comma, rather than a JOIN keyword:",
        "Many of the JOIN examples use two tables, t1 and t2. The tables and their data are created as shown below:",
        "Inner join:",
        "This shows a left outer join. Note the NULL value for the row in table t1 that doesn\u2019t have a matching row in table t2.",
        "This shows a right outer join. Note the NULL value for the row in table t1 that doesn\u2019t have a matching row in table t2.",
        "This shows a full outer join. Note that because each table has a row that\ndoesn\u2019t have a matching row in the other table, the output contains two\nrows with NULL values:",
        "Here is an example of a cross join, which produces a Cartesian product.\nNote that the cross join does not have an ON clause.",
        "A cross join can be filtered by a WHERE clause, as shown in the example\nbelow:",
        "This is an example of a natural join. This produces the same output as the\ncorresponding inner join, except that the output doesn\u2019t include a second copy of the join column:",
        "Natural joins can be combined with outer joins, for example:",
        "Joins can be combined in the FROM clause. The following code creates a third table, then chains together two JOINs in\nthe FROM clause:",
        "In such a query, the results are determined based on the joins taking place from left to right (though the optimizer might reorder the joins if a different join order will produce the same result). If the\nright outer join is meant to take place before the left outer join, then the query can be written as follows:",
        "The two examples below show standard (ISO 9075) and non-standard usage of\nthe USING clause. Both are supported by Snowflake.",
        "This first example shows standard usage. Specifically, the projection list\ncontains exactly \u201c*\u201d. Even though the example query joins two tables, and\neach table has one column, and the query asks for all columns, the output\ncontains one column, not two.",
        "The following example shows non-standard usage. The projection list contains\nsomething other than \u201c*\u201d. The output contains two columns, and the second column\ncontains either a value from the second table or NULL.",
        "Was this page helpful?",
        "On this page"
    ]
}