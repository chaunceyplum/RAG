{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/parse_xml",
    "title": "PARSE_XML | Snowflake Documentation",
    "paragraphs": [
        "Semi-structured and structured data functions (Parsing)",
        "Preview Feature \u2014 Open",
        "Enabled for all accounts.",
        "Interprets an input string as an XML document, producing an OBJECT value. If the input is NULL, the output is NULL.",
        "CHECK_XML",
        "Required:",
        "This expression should evaluate to a VARCHAR. The VARCHAR should contain valid XML.",
        "Optional:",
        "Boolean expression that specifies whether or not the function should attempt to convert numeric and boolean values in\nstring_containing_xml to Snowflake data types. (For details about this conversion, see Usage Notes below.)",
        "If you do not want the function to convert these values, set this to TRUE. This has an effect that is similar\nto the DISABLE_AUTO_CONVERT parameter in CREATE FILE FORMAT.",
        "If you want the function to convert these values, set this to FALSE or omit this argument.",
        "Default: FALSE",
        "The data type of the returned value is OBJECT. The OBJECT contains an internal representation of the XML.",
        "You must either specify all arguments by name or by position. You cannot specify some of the arguments by name and other\narguments by position.",
        "When specifying an argument by name, you cannot use double quotes around the argument name.",
        "The content of every element in XML documents is text. PARSE_XML attempts to convert some XML data from text to native\n(Snowflake SQL) SQL data types reference.",
        "NUMERIC and BOOLEAN:",
        "PARSE_XML attempts to convert obviously numeric and Boolean values to the native representation in a way that printing\nthese values back produces textually identical results. For example, when parsing decimal numbers, PARSE_XML attempts\nto preserve exactness of the representation by treating 123.45 as NUMBER(5,2), not as a DOUBLE. However:",
        "Numbers in scientific notation (i.e. 1.2345e+02) or numbers that cannot be stored as fixed-point decimals due to range or\nscale limitations are stored as DOUBLE.",
        "If the content of an XML element is a number with digits after the decimal point, then PARSE_XML might truncate trailing zeros.",
        "If you do not want the function to perform this conversion, pass TRUE for the disable_auto_convert argument.",
        "TIMESTAMP, DATE, TIME, BINARY:",
        "Because XML does not represent values such as TIMESTAMP, DATE, TIME, or BINARY natively, these have to be represented as strings\nin XML. PARSE_XML does not automatically recognize these values; they are retained as strings, so users must convert\nthe values from strings to native SQL data types if needed.",
        "XML attributes are an unordered collection of name/value pairs. The PARSE_XML function does not necessarily\npreserve order. For example, converting text to XML and back to text might result in a string that contains the\noriginal information in a different order.",
        "You might see changes in whitespace between elements when converting from string to XML.",
        "The following example demonstrates how to use the PARSE_XML function to convert a string of XML to an OBJECT that can be inserted\ninto an OBJECT column:",
        "The following example demonstrates the differences between using and disabling the conversion of numeric values. In this example,\nwhen the conversion is not disabled, the function interprets a number in scientific notation as a DOUBLE.",
        "The following example demonstrates how to specify the arguments to the function by name:",
        "Was this page helpful?",
        "On this page"
    ]
}