{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/nth_value",
    "title": "NTH_VALUE | Snowflake Documentation",
    "paragraphs": [
        "Window function syntax and usage (Ranking)",
        "Returns the nth value (up to 1000) within an ordered group of values.",
        "FIRST_VALUE , LAST_VALUE",
        "For detailed window_frame syntax, see Window function syntax and usage.",
        "This specifies which value of N to use when looking for the Nth value.",
        "The expression that determines the return value.",
        "The expression by which to partition the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:",
        "The expression by which to order the rows. You can specify a single expression or a comma-separated list of expressions.\nFor example:",
        "Input value n cannot be greater than 1000.",
        "If FROM { FIRST | LAST } is not specified, the default is\nFIRST (i.e. the direction is from the beginning of the ordered list).",
        "If { IGNORE | RESPECT } NULLS is not specified, the default is RESPECT NULLS (i.e. a NULL value is returned if\nthe expression contains a NULL value and it is the nth value in the expression).",
        "This function is a rank-related function, so it must specify a window. A window clause consists of the following subclauses:",
        "PARTITION BY <expr1> subclause (optional).",
        "ORDER BY <expr2> subclause (required). For details about additional supported ordering options (sort order, ordering\nof NULL values, etc.), see the documentation for the ORDER BY query construct, which follows\nthe same rules.",
        "window_frame subclause (optional).",
        "The order of rows in a window (and thus the result of the query) is fully deterministic only if the keys in the ORDER BY clause\nmake each row unique. Consider the following example:",
        "The query result can vary if any partition contains values of column o that are identical, or would be identical\nin a case-insensitive comparison.",
        "The ORDER BY clause inside the OVER clause controls the order of rows only within the window, not the order of rows in the output\nof the entire query. To control output order, use a separate ORDER BY clause at the outermost level of the query.",
        "The optional window_frame (cumulative or sliding) specifies the subset of rows within the window for which the function is calculated. If no window_frame is specified, the default is the entire window:",
        "ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING",
        "Note that this deviates from the ANSI standard, which specifies the following default for window frames:",
        "RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
        "For more information about window frames, including syntax, usage notes, and examples, see Window function syntax and usage.",
        "The next query contrasts the outputs of FIRST_VALUE, NTH_VALUE, and LAST_VALUE. Note that:",
        "The query creates a sliding window frame that is 3 rows wide, which contains:",
        "The row that precedes the current row.",
        "The current row.",
        "The row that follows the current row.",
        "The 2 in the call NTH_VALUE(i, 2) specifies the second row in the window frame (which, in this case, is\nalso the current row).",
        "When the current row is the very first row in the window frame, there is no preceding row to reference, so\nFIRST_VALUE() returns a NULL for that row.",
        "Was this page helpful?",
        "On this page"
    ]
}