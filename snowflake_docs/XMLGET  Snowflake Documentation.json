{
    "url": "https://docs.snowflake.com/en/sql-reference/functions/xmlget",
    "title": "XMLGET | Snowflake Documentation",
    "paragraphs": [
        "Semi-structured and structured data functions (Extraction)",
        "Preview Feature \u2014 Open",
        "Enabled for all accounts.",
        "Extracts an XML element object (often referred to as simply a tag) from the content of the outer XML element based on the name\nand instance number of the specified tag.",
        "(Note that an XML tag is not the same as a Snowflake data governance tag.)",
        "If any argument of XMLGET is NULL, the result is NULL.",
        "If the tag instance is not found, the result is NULL.",
        "The expression from which to extract the element.",
        "The expression must evaluate to an OBJECT (or a VARIANT containing an OBJECT). The OBJECT must contain\nvalid XML in the internal format that Snowflake supports. Typically, that means that the OBJECT was produced by one of the\nfollowing:",
        "Calling the PARSE_XML function.",
        "Loading the data (e.g. via the COPY INTO <table> command) and specifying that the data is in XML\nformat.",
        "The XMLGET function does not operate directly on a VARCHAR expression even if that VARCHAR contains valid XML text.",
        "The name of an XML tag stored in the expression.",
        "If the XML contains multiple instances of tag_name, then use instance_number to specify which instance to\nretrieve. Like an array index, the instance_number is 0-based, not 1-based.",
        "instance_number can be omitted, in which case the default value 0 is used.",
        "The data type of the returned value is OBJECT.",
        "See the Usage Notes for more details.",
        "The result of XMLGET is not the content of the tag (i.e. the text between the tags), but the entire element (the opening tag,\ncontent, and closing tag). The return value is an OBJECT. From this OBJECT, you\ncan extract the tag name, the tag\u2019s attribute values, and the contents of the element (including nested tags)\nby using the GET function:",
        "To extract attribute values, use GET(tag, '@attrname').",
        "To extract the content, use GET(tag, '$').",
        "To extract the tag name, use GET(tag, '@').",
        "You can extract nested tags by nesting XMLGET() calls, e.g.:",
        "Positions of the inner tags in the content can be obtained by using GET(tag, 'inner-tag-name'); if the content contains\nmultiple elements, the positions will be represented as an array.",
        "You cannot use XMLGET to extract the outermost element. To get the outermost element, simply select the expression\nitself.",
        "The following example creates a table with an OBJECT that contains XML, then uses XMLGET() to extract elements from\nthat OBJECT.",
        "This example shows how to use GET() with XMLGET() to retrieve the content of an element. In this example, the level2 tag\ncontains three items (text and two nested tags), so GET returns these items in an ARRAY. The\nnested tags are represented by OBJECTs (key-value pairs). The @ property contains the nested tag name and the $ property\ncontains the nested tag contents.",
        "This example shows how to use GET() with XMLGET() to retrieve an attribute of a tag:",
        "Was this page helpful?",
        "On this page"
    ]
}