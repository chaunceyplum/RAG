{
    "url": "https://docs.snowflake.com/en/user-guide/data-sharing-secure-views",
    "title": "Use secure objects to control data access | Snowflake Documentation",
    "paragraphs": [
        "Provider sharing not enabled for all accounts",
        "Provider sharing is enabled by default for most, but not all accounts.",
        "If you encounter errors when attempting to share data with consumers, the feature may not be enabled for your account. To inquire about\nenabling it, please contact\nSnowflake Support.",
        "To ensure sensitive data in a shared database is not exposed to users in consumer accounts, Snowflake strongly recommends sharing\nsecure views and/or secure UDFs instead of directly\nsharing tables.",
        "In addition, for optimal performance, especially when sharing data in extremely large tables, we recommend defining\nclustering keys on the base table(s) for your secure objects.",
        "This topic describes using clustering keys in base tables for shared secure objects and provides step-by-step instructions for sharing\na secure view with a consumer account. It provides sample scripts for both data providers and consumers.",
        "Note",
        "The instructions for sharing a secure object are essentially the same as sharing a table, with the addition of the following objects:",
        "A \u201cprivate\u201d schema containing the base table and a \u201cpublic\u201d schema containing the secure object. Only the public schema and secure\nobject are shared.",
        "A \u201cmapping table\u201d (also in the \u201cprivate\u201d schema), which is only required if you wish to share the data in the base table with multiple\nconsumer accounts and share specific rows in the table with specific accounts.",
        "On very large (i.e. multi-terabyte) tables, clustering keys provide significant query performance benefits. By defining one or more\nclustering keys on the base tables used in shared secure views or secure UDFs, you ensure users in your consumer accounts are not negatively\nimpacted when using these objects.",
        "When choosing the columns to use as the clustering key for a table, please note some\nimportant considerations.",
        "These sample instructions assume a database named mydb exists in the data provider account and has two schemas, private\nand public. If the database and schemas do not exist, you should create them before proceeding.",
        "Create the following two tables in the mydb.private schema and populate them with data:",
        "Create the following secure view in the mydb.public schema:",
        "Note that the access_id column from the base table (sensitive_data) does not need to be included in the view.",
        "Validate the tables and secure view to ensure the data is filtered properly by account.",
        "To enable validating secure views that will be shared with other accounts, Snowflake provides a session parameter,\nSIMULATED_DATA_SHARING_CONSUMER. Set this session parameter to the name of the consumer account you wish to simulate\naccess for. You can then query the view and see the results that a user in the consumer account will see.",
        "Create a share.",
        "To create a share, you must use the ACCOUNTADMIN role or a role granted the global CREATE SHARE privilege.\nThe role must also have one of the following to grant objects to the share:",
        "A role with the OWNERSHIP privilege on the shared database.",
        "A role with the USAGE privilege on the database WITH GRANT OPTION. For example:",
        "Add the database (mydb), schema (public), and secure view (paid_sensitive_data) to the share. You can choose\nto either add privileges on these objects to a share via a database role, or grant privileges on the objects directly to the\nshare. For more information on these options, see How to share database objects.",
        "Confirm the contents of the share. At the most basic level, you should use the SHOW GRANTS command to confirm\nthe objects in the share have the necessary privileges.",
        "Note that the secure view paid_sensitive_data is displayed in the command output as a table.",
        "Add one or more accounts to the share.",
        "The following script illustrates performing all the tasks described in the previous section:",
        "Create two tables in the \u2018private\u2019 schema and populate the first one with stock data from three different companies (Apple, Microsoft,\nand IBM). You will then populate the second one with data that maps the stock data to individual accounts:",
        "Create a secure view in the \u2018public\u2019 schema. This view filters the stock data from the first table by account, using the mapping\ninformation in the second table:",
        "Create a share using the ACCOUNTADMIN role.",
        "Add the objects to the share. You can choose to either add privileges on these objects to a share via a database role\n(Option 1), or grant privileges on the objects directly to the share (Option 2):",
        "Add accounts to the share.",
        "The following script can be used by consumers to create a database (from the share created in the above script) and query the secure view\nin the resulting database:",
        "Bring the shared database into your account by creating a database from the share.",
        "Grant privileges on the database to other roles in your account (e.g. CUSTOM_ROLE1). The GRANT statement differs depending on whether\nthe data consumer added objects to the share using database roles (Option 1) or by granting privileges on the objects directly to the\nshare (Option 2):",
        "Use the CUSTOM_ROLE1 role to query the view in the database you created. Note that there must be an active warehouse in use in the\nsession to perform queries. In the USE WAREHOUSE command, replace <warehouse_name> with the name of one of the warehouses in your\naccount. The CUSTOM_ROLE1 role must have the USAGE privilege on the warehouse:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}