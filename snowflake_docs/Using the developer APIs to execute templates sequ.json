{
    "url": "https://docs.snowflake.com/en/user-guide/cleanrooms/developer-template-chains",
    "title": "Using the developer APIs to execute templates sequentially | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "Complex analyses might require that multiple templates be executed in a specific order, sometimes using the output of one template as the\ninput of another. A provider can create a template chain to define a sequence of templates to be executed in a particular order. When\ndefining this template chain, the provider can specify whether the results of a particular template will be available to subsequent\ntemplates in the chain.",
        "A clean room user executes a template chain to perform an analysis that runs the templates in the chain in their predefined order.",
        "If a provider wants the results of one template to be available to subsequent templates in the template chain, they can create a cache for\nthe template\u2019s results. Each template with a cache also has an expiration time for that cache.",
        "If a provider specifies that a template has a cache, the first time a user executes the template chain, the results of that template are\nstored in a table within the clean room. This underlying table is only accessible to the clean room itself. The next time a user executes\nthe template chain, Snowflake Data Clean Rooms checks whether the cache has expired before executing the template. The template with the\ncached results does not execute again unless the cache has expired.",
        "Subsequent templates in the template chain can use the cache as input by including the appropriate Jinja parameter in the template.",
        "A provider uses the provider.add_template_chain command to create a template chain. The templates that the provider wants to add\nto the new template chain must exist before creating the template chain.",
        "The provider.add_template_chain command accepts the following arguments:",
        "Name of a clean room (string).",
        "Name of the template chain (string).",
        "Templates in the template chain (array of JSON objects).",
        "For an example of using the provider.add_template_chain command to create a template chain, see\nExample.",
        "The provider defines which templates are part of a template chain by passing an array of JSON objects into\nprovider.add_template_chain, where each JSON object represents a template. The order of the JSON objects determines the order in\nwhich the templates are executed.",
        "The JSON object for a template can include the following fields:",
        "Specifies the template being added to the template chain. The template must already exist.",
        "This field is required.",
        "Determines whether the results of the template are cached so other templates in the template\nchain can access them. To cache results, specify TRUE.",
        "This field is required. If TRUE, the output_table_name and cache_expiration_hours fields are also required.",
        "When cache_results = TRUE, specifies the name of the Snowflake table where template results are stored.",
        "This field is required if cache_results = TRUE.",
        "When cache_results = TRUE, specifies the name of the Jinja parameter that other templates must include to accept the results that\nare stored in output_table_name.",
        "This field is optional.",
        "When cache_results = TRUE, specifies the number of hours before the results in the cache are dropped. When the cache expires, then\nnext time the template chain is executed the cache is refreshed with the results of the template.",
        "This field is required if cache_results = TRUE.",
        "In this example, the provider wants to:",
        "Create a template chain insights_chain in the clean room collab_clean_room.",
        "Define the template chain so the crosswalk template executes before the transaction_insights template.",
        "Cache the results of the crosswalk template so they can be used as input to the transaction_insights template.",
        "For more information about each JSON object, see Adding templates to the template chain.",
        "A clean room user runs the consumer.run_analysis command to execute a template chain, which is the same command used to execute a\nsingle template. Executing the template chain runs each template in the chain in their predefined order to get the final result.",
        "The consumer.run_analysis command accepts arguments that it passes to the Jinja templates in the template chain. You can determine\nwhat arguments are expected by the templates in the chain by executing the consumer.get_arguments_from_template_chain command.",
        "The arguments passed to consumer.run_analysis can be specific to a particular template in the chain or can be arguments for every\ntemplate in the chain.",
        "If you want to pass an argument to every template in the template chain, the syntax is the same as using consumer.run_analysis to\nrun a single template. For example, the following command passes the value of the where_clause argument to all templates in the\ntemplate chain:",
        "If you want to pass an argument to a specific template, add another object_construct as a child of the top-level\nobject_construct with the name of the template as the field name. For example, the following command passes the value of the\ndimensions argument to the crosswalk_template template only:",
        "You can use the following commands to work with template chains:",
        "Command",
        "Description",
        "provider.add_template_chain",
        "Creates a new template chain.",
        "provider.view_added_template_chains",
        "consumer.view_added_template_chains",
        "Returns all template chains that have been added to the clean room.",
        "provider.view_template_chain_definition",
        "consumer.view_template_chain_definition",
        "Returns the definition of a template chain.",
        "provider.clear_template_chain",
        "Drops a template chain from the clean room.",
        "provider.clear_all_template_chains",
        "Drops all template chains from the clean room.",
        "consumer.get_arguments_from_template_chain",
        "Returns the expected arguments for all of the templates in the template chain.",
        "For more information about these commands, see the following:",
        "Snowflake Data Clean Rooms: Provider API reference guide",
        "Snowflake Data Clean Rooms: Consumer API reference guide.",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}