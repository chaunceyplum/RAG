{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-user-roles",
    "title": "Managing Snowflake users, roles, and grants with Python | Snowflake Documentation",
    "paragraphs": [
        "Feature \u2014 Generally Available",
        "Not available in government regions.",
        "You can use Python to manage Snowflake users, roles, and grants. For more information about managing users and their privileges in\nSnowflake, see User management.",
        "The examples in this topic assume that you\u2019ve added code to connect with Snowflake and to create a Root object from which to use the\nSnowflake Python APIs.",
        "For example, the following code uses connection parameters defined in a configuration file to create a connection to Snowflake:",
        "Using the resulting Session object, the code creates a Root object to use the API\u2019s types and methods. For more information,\nsee Connect to Snowflake with the Snowflake Python APIs.",
        "Minimum API version required",
        "0.9.0",
        "You can manage users in Snowflake. A user is an account-level object in Snowflake. The Snowflake Python APIs represents users with two\nseparate types:",
        "User: Exposes a user\u2019s properties, such as its name.",
        "UserResource: Exposes methods you can use to fetch a corresponding User object and to drop the user.",
        "You can create a user by calling the UserCollection.create method and passing a User object that represents the user you\nwant to create. To create a user, first create a User object that specifies the user name.",
        "Code in the following example creates a User object representing a user named my_user and then creates the user by passing\nthe User object to the UserCollection.create method:",
        "You can get information about a user by calling the UserResource.fetch method, which returns a User object.",
        "Code in the following example gets information about a user named my_user:",
        "You can set properties of a User object and pass it to the UserResource.create_or_alter method to create a user if it\ndoesn\u2019t exist, or alter it according to the user definition if it does exist. The behavior of create_or_alter is intended to be\nidempotent, which means that the resulting user object will be the same regardless of whether the user exists before you call the method.",
        "create_or_alter uses default values for any User\nproperties that you don\u2019t explicitly define. For example, if you don\u2019t set snowflake_support, its value defaults to False even\nif the user previously existed with a different value.",
        "Note",
        "The create_or_alter method currently does not support changing the password for an existing user. You can only set the\npassword when creating a new user.",
        "Code in the following example updates the first name, last name, and must_change_password properties of the my_user user, and\nthen alters the user on Snowflake:",
        "You can list users using the iter method, which returns a PagedIter iterator.",
        "Code in the following example lists users whose name begins with my:",
        "You can drop a user using the UserResource.drop method.",
        "Code in the following example drops the my_user user:",
        "Minimum API version required",
        "0.9.0",
        "You can manage roles in Snowflake. A role is an account-level object. The Snowflake Python APIs represents roles with two separate types:",
        "Role: Exposes a role\u2019s properties, such as its name.",
        "RoleResource: Exposes methods you can use to grant and manage privileges on a corresponding Role object, and to drop the role.",
        "To create a role, first create a Role object that specifies the role name.",
        "Code in the following example creates a Role object representing a role named my_role:",
        "The code then creates the role by passing the Role object to the RoleCollection.create method.",
        "Code in the following example applies the role my_role in the current session.",
        "You can list the roles in an account using the iter method. The method returns a PagedIter iterator of Role objects.",
        "Code in the following example lists all role names in an account:",
        "You can drop a role using the RoleResource.drop method.",
        "Code in the following example drops the my_role role:",
        "Minimum API version required",
        "0.13.1",
        "You can manage database roles in Snowflake. A database role is a database-level\nobject. The Snowflake Python APIs represents database roles with two separate types:",
        "DatabaseRole: Exposes a database role\u2019s properties, such as its name and a comment.",
        "DatabaseRoleResource: Exposes methods you can use to grant and manage privileges on a corresponding DatabaseRole object,\nand to drop the database role.",
        "To create a database role, first create a DatabaseRole object that specifies the role name.",
        "Code in the following example creates a DatabaseRole object representing a database role named my_db_role:",
        "The code then creates the database role by passing the DatabaseRole object to the DatabaseRoleCollection.create method.",
        "Code in the following example creates a database role named dr2 in the my_db_2 target database as a copy of the existing dr1\ndatabase role in the my_db database.",
        "You can list the database roles in an account using the iter method. The method returns a PagedIter iterator of\nDatabaseRole objects.",
        "Code in the following example lists the database role named my_db_role in the my_db database, limiting the number of results to 1:",
        "You can drop a database role using the DatabaseRoleResource.drop method.",
        "Code in the following example drops the my_db_role database role:",
        "Minimum API version required",
        "0.13.1",
        "You can use the API to manage access privileges on a securable Snowflake object to an account role, database role, or user. For more\ninformation about roles, securable objects, and the access control framework in Snowflake, see Overview of Access Control.",
        "The following code examples demonstrate the API operations to grant privileges, revoke privileges, and list grants for\naccount roles.",
        "The following code examples demonstrate the API operations to grant a role, revoke a role, and list roles for users.",
        "The following code examples demonstrate the API operations to grant privileges, revoke privileges, and list grants for\ndatabase roles.",
        "Deprecated API",
        "Using the Grant resource API to manage grants, as shown in the following code examples, is now deprecated. Version 0.13.1 of the\nAPI introduces new grant methods in the User, Role, and DatabaseRole resources that you can use to\nmanage access privileges.",
        "You can execute GRANT <privileges> operations to grant access privileges on a securable Snowflake object to a role.",
        "To grant privileges on a Snowflake object, you first create a Grant object that specifies the following attributes:",
        "grantee: The role or user that is being granted the privileges.",
        "securable: The Snowflake object that is being secured by the privileges.",
        "privileges: The privileges that are being granted to a role.",
        "Code in the following example creates a Grant object representing a grant operation that grants the privileges create_database\nand create_warehouse to the role my_role in the current Snowflake account. The code executes the operation using the\nroot.grants.grant method.",
        "Code in the following example grants imported privileges on the database my_db\nto the role my_role:",
        "You can assign a role to another role to create a \u201cparent-child\u201d relationship between the roles (also referred to as a role hierarchy).",
        "Code in the following example grants the my_role user role to the ACCOUNTADMIN system role:",
        "Was this page helpful?",
        "On this page",
        "Related content"
    ]
}